
graphic_display_rfid_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012388  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002080  08012518  08012518  00022518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014598  08014598  0003018c  2**0
                  CONTENTS
  4 .ARM          00000008  08014598  08014598  00024598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080145a0  080145a0  0003018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080145a0  080145a0  000245a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080145a4  080145a4  000245a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080145a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003018c  2**0
                  CONTENTS
 10 .bss          00004a84  2000018c  2000018c  0003018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004c10  20004c10  0003018c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4e5  00000000  00000000  000301ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a4  00000000  00000000  0004c69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  0004fa48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  000506b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268c4  00000000  00000000  000511a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000108d7  00000000  00000000  00077a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d373e  00000000  00000000  0008833b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000d5  00000000  00000000  0015ba79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b74  00000000  00000000  0015bb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012500 	.word	0x08012500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08012500 	.word	0x08012500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 800057c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <GUI_X_Config+0x18>)
 8000582:	f00d fc25 	bl	800ddd0 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <GUI_X_Config+0x1c>)
 8000588:	f00b ffd4 	bl	800c534 <GUI_SetDefaultFont>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200001a8 	.word	0x200001a8
 8000594:	0801282c 	.word	0x0801282c

08000598 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
	...

080005a8 <LcdWriteReg>:
*
* Function description:
*   Sets display register
*/
static void LcdWriteReg(U8 Data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2102      	movs	r1, #2
 80005b6:	480b      	ldr	r0, [pc, #44]	; (80005e4 <LcdWriteReg+0x3c>)
 80005b8:	f002 f9ce 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2104      	movs	r1, #4
 80005c0:	4808      	ldr	r0, [pc, #32]	; (80005e4 <LcdWriteReg+0x3c>)
 80005c2:	f002 f9c9 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 80005c6:	1df9      	adds	r1, r7, #7
 80005c8:	2301      	movs	r3, #1
 80005ca:	2201      	movs	r2, #1
 80005cc:	4806      	ldr	r0, [pc, #24]	; (80005e8 <LcdWriteReg+0x40>)
 80005ce:	f002 fea6 	bl	800331e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2102      	movs	r1, #2
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <LcdWriteReg+0x3c>)
 80005d8:	f002 f9be 	bl	8002958 <HAL_GPIO_WritePin>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020800 	.word	0x40020800
 80005e8:	20004588 	.word	0x20004588

080005ec <LcdReadReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
static U8 LcdReadReg(void) {
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  // ... TBD by user
	return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LcdWriteData>:
*
* Function description:
*   Writes a value to a display register
*/
static void LcdWriteData(U8 Data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2102      	movs	r1, #2
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <LcdWriteData+0x3c>)
 800060c:	f002 f9a4 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2104      	movs	r1, #4
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <LcdWriteData+0x3c>)
 8000616:	f002 f99f 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 1);
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	2301      	movs	r3, #1
 800061e:	2201      	movs	r2, #1
 8000620:	4806      	ldr	r0, [pc, #24]	; (800063c <LcdWriteData+0x40>)
 8000622:	f002 fe7c 	bl	800331e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2102      	movs	r1, #2
 800062a:	4803      	ldr	r0, [pc, #12]	; (8000638 <LcdWriteData+0x3c>)
 800062c:	f002 f994 	bl	8002958 <HAL_GPIO_WritePin>
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40020800 	.word	0x40020800
 800063c:	20004588 	.word	0x20004588

08000640 <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
static void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]

	while (NumItems--)
 800064a:	e011      	b.n	8000670 <LcdWriteDataMultiple+0x30>
	{
		HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2102      	movs	r1, #2
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <LcdWriteDataMultiple+0x44>)
 8000652:	f002 f981 	bl	8002958 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2104      	movs	r1, #4
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <LcdWriteDataMultiple+0x44>)
 800065c:	f002 f97c 	bl	8002958 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, pData++, 1, 1);
 8000660:	6879      	ldr	r1, [r7, #4]
 8000662:	1c4b      	adds	r3, r1, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	2301      	movs	r3, #1
 8000668:	2201      	movs	r2, #1
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <LcdWriteDataMultiple+0x48>)
 800066c:	f002 fe57 	bl	800331e <HAL_SPI_Transmit>
	while (NumItems--)
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	1e5a      	subs	r2, r3, #1
 8000674:	603a      	str	r2, [r7, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1e8      	bne.n	800064c <LcdWriteDataMultiple+0xc>
  }
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40020800 	.word	0x40020800
 8000688:	20004588 	.word	0x20004588

0800068c <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
static void LcdReadDataMultiple(U8 * pData, int NumItems) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  while (NumItems--) {
 8000696:	bf00      	nop
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1e5a      	subs	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1fa      	bne.n	8000698 <LcdReadDataMultiple+0xc>
    // ... TBD by user
  }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <LcdInit>:

void LcdInit(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2102      	movs	r1, #2
 80006ba:	489a      	ldr	r0, [pc, #616]	; (8000924 <LcdInit+0x274>)
 80006bc:	f002 f94c 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	4897      	ldr	r0, [pc, #604]	; (8000924 <LcdInit+0x274>)
 80006c6:	f002 f947 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	4895      	ldr	r0, [pc, #596]	; (8000924 <LcdInit+0x274>)
 80006d0:	f002 f942 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_Delay(2);//Reset delay
 80006d4:	2002      	movs	r0, #2
 80006d6:	f001 fe7d 	bl	80023d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4891      	ldr	r0, [pc, #580]	; (8000924 <LcdInit+0x274>)
 80006e0:	f002 f93a 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin,  GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2104      	movs	r1, #4
 80006e8:	488e      	ldr	r0, [pc, #568]	; (8000924 <LcdInit+0x274>)
 80006ea:	f002 f935 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2108      	movs	r1, #8
 80006f2:	488c      	ldr	r0, [pc, #560]	; (8000924 <LcdInit+0x274>)
 80006f4:	f002 f930 	bl	8002958 <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<3; i++)  {
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	e005      	b.n	800070a <LcdInit+0x5a>
		LcdWriteReg(0x00);
 80006fe:	2000      	movs	r0, #0
 8000700:	f7ff ff52 	bl	80005a8 <LcdWriteReg>
	for(uint8_t i=0; i<3; i++)  {
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	3301      	adds	r3, #1
 8000708:	71fb      	strb	r3, [r7, #7]
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d9f6      	bls.n	80006fe <LcdInit+0x4e>
	} // Three extra 0x00s
	HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin,  GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	2102      	movs	r1, #2
 8000714:	4883      	ldr	r0, [pc, #524]	; (8000924 <LcdInit+0x274>)
 8000716:	f002 f91f 	bl	8002958 <HAL_GPIO_WritePin>

//ILI9341 initialization sequence

	LcdWriteReg(0x01);//soft reset
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff44 	bl	80005a8 <LcdWriteReg>
	HAL_Delay(1000);
 8000720:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000724:	f001 fe56 	bl	80023d4 <HAL_Delay>
	//power control A
	LcdWriteReg(0xCB);
 8000728:	20cb      	movs	r0, #203	; 0xcb
 800072a:	f7ff ff3d 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x39);
 800072e:	2039      	movs	r0, #57	; 0x39
 8000730:	f7ff ff64 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x2C);
 8000734:	202c      	movs	r0, #44	; 0x2c
 8000736:	f7ff ff61 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x00);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff5e 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x34);
 8000740:	2034      	movs	r0, #52	; 0x34
 8000742:	f7ff ff5b 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x02);
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff ff58 	bl	80005fc <LcdWriteData>

	//power control B
	LcdWriteReg(0xCF);
 800074c:	20cf      	movs	r0, #207	; 0xcf
 800074e:	f7ff ff2b 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x00);
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff ff52 	bl	80005fc <LcdWriteData>
	LcdWriteData(0xC1);
 8000758:	20c1      	movs	r0, #193	; 0xc1
 800075a:	f7ff ff4f 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x30);
 800075e:	2030      	movs	r0, #48	; 0x30
 8000760:	f7ff ff4c 	bl	80005fc <LcdWriteData>

	//driver timing control A
	LcdWriteReg(0xE8);
 8000764:	20e8      	movs	r0, #232	; 0xe8
 8000766:	f7ff ff1f 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x85);
 800076a:	2085      	movs	r0, #133	; 0x85
 800076c:	f7ff ff46 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x00);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff ff43 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x78);
 8000776:	2078      	movs	r0, #120	; 0x78
 8000778:	f7ff ff40 	bl	80005fc <LcdWriteData>

	//driver timing control B
	LcdWriteReg(0xEA);
 800077c:	20ea      	movs	r0, #234	; 0xea
 800077e:	f7ff ff13 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x00);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff ff3a 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x00);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff ff37 	bl	80005fc <LcdWriteData>

	//power on sequence control
	LcdWriteReg(0xED);
 800078e:	20ed      	movs	r0, #237	; 0xed
 8000790:	f7ff ff0a 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x64);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f7ff ff31 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x03);
 800079a:	2003      	movs	r0, #3
 800079c:	f7ff ff2e 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x12);
 80007a0:	2012      	movs	r0, #18
 80007a2:	f7ff ff2b 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x81);
 80007a6:	2081      	movs	r0, #129	; 0x81
 80007a8:	f7ff ff28 	bl	80005fc <LcdWriteData>

	//pump ratio control
	LcdWriteReg(0xF7);
 80007ac:	20f7      	movs	r0, #247	; 0xf7
 80007ae:	f7ff fefb 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x20);
 80007b2:	2020      	movs	r0, #32
 80007b4:	f7ff ff22 	bl	80005fc <LcdWriteData>

	//power control,VRH[5:0]
	LcdWriteReg(0xC0);
 80007b8:	20c0      	movs	r0, #192	; 0xc0
 80007ba:	f7ff fef5 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x23);
 80007be:	2023      	movs	r0, #35	; 0x23
 80007c0:	f7ff ff1c 	bl	80005fc <LcdWriteData>

	//Power control,SAP[2:0];BT[3:0]
	LcdWriteReg(0xC1);
 80007c4:	20c1      	movs	r0, #193	; 0xc1
 80007c6:	f7ff feef 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x10);
 80007ca:	2010      	movs	r0, #16
 80007cc:	f7ff ff16 	bl	80005fc <LcdWriteData>

	//vcm control
	LcdWriteReg(0xC5);
 80007d0:	20c5      	movs	r0, #197	; 0xc5
 80007d2:	f7ff fee9 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x3E);
 80007d6:	203e      	movs	r0, #62	; 0x3e
 80007d8:	f7ff ff10 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x28);
 80007dc:	2028      	movs	r0, #40	; 0x28
 80007de:	f7ff ff0d 	bl	80005fc <LcdWriteData>

	//vcm control 2
	LcdWriteReg(0xC7);
 80007e2:	20c7      	movs	r0, #199	; 0xc7
 80007e4:	f7ff fee0 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x86);
 80007e8:	2086      	movs	r0, #134	; 0x86
 80007ea:	f7ff ff07 	bl	80005fc <LcdWriteData>

	//memory access control
	LcdWriteReg(0x36);
 80007ee:	2036      	movs	r0, #54	; 0x36
 80007f0:	f7ff feda 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x48);
 80007f4:	2048      	movs	r0, #72	; 0x48
 80007f6:	f7ff ff01 	bl	80005fc <LcdWriteData>

	//pixel format
	LcdWriteReg(0x3A);
 80007fa:	203a      	movs	r0, #58	; 0x3a
 80007fc:	f7ff fed4 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x55);
 8000800:	2055      	movs	r0, #85	; 0x55
 8000802:	f7ff fefb 	bl	80005fc <LcdWriteData>

	//frameration control,normal mode full colours
	LcdWriteReg(0xB1);
 8000806:	20b1      	movs	r0, #177	; 0xb1
 8000808:	f7ff fece 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x00);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fef5 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x18);
 8000812:	2018      	movs	r0, #24
 8000814:	f7ff fef2 	bl	80005fc <LcdWriteData>

	//display function control
	LcdWriteReg(0xB6);
 8000818:	20b6      	movs	r0, #182	; 0xb6
 800081a:	f7ff fec5 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x08);
 800081e:	2008      	movs	r0, #8
 8000820:	f7ff feec 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x82);
 8000824:	2082      	movs	r0, #130	; 0x82
 8000826:	f7ff fee9 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x27);
 800082a:	2027      	movs	r0, #39	; 0x27
 800082c:	f7ff fee6 	bl	80005fc <LcdWriteData>

	//3gamma function disable
	LcdWriteReg(0xF2);
 8000830:	20f2      	movs	r0, #242	; 0xf2
 8000832:	f7ff feb9 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x00);
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff fee0 	bl	80005fc <LcdWriteData>

	//gamma curve selected
	LcdWriteReg(0x26);
 800083c:	2026      	movs	r0, #38	; 0x26
 800083e:	f7ff feb3 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x01);
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff feda 	bl	80005fc <LcdWriteData>

	//set positive gamma correction
	LcdWriteReg(0xE0);
 8000848:	20e0      	movs	r0, #224	; 0xe0
 800084a:	f7ff fead 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x0F);
 800084e:	200f      	movs	r0, #15
 8000850:	f7ff fed4 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x31);
 8000854:	2031      	movs	r0, #49	; 0x31
 8000856:	f7ff fed1 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x2B);
 800085a:	202b      	movs	r0, #43	; 0x2b
 800085c:	f7ff fece 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0C);
 8000860:	200c      	movs	r0, #12
 8000862:	f7ff fecb 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0E);
 8000866:	200e      	movs	r0, #14
 8000868:	f7ff fec8 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x08);
 800086c:	2008      	movs	r0, #8
 800086e:	f7ff fec5 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x4E);
 8000872:	204e      	movs	r0, #78	; 0x4e
 8000874:	f7ff fec2 	bl	80005fc <LcdWriteData>
	LcdWriteData(0xF1);
 8000878:	20f1      	movs	r0, #241	; 0xf1
 800087a:	f7ff febf 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x37);
 800087e:	2037      	movs	r0, #55	; 0x37
 8000880:	f7ff febc 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x07);
 8000884:	2007      	movs	r0, #7
 8000886:	f7ff feb9 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x10);
 800088a:	2010      	movs	r0, #16
 800088c:	f7ff feb6 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x03);
 8000890:	2003      	movs	r0, #3
 8000892:	f7ff feb3 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0E);
 8000896:	200e      	movs	r0, #14
 8000898:	f7ff feb0 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x09);
 800089c:	2009      	movs	r0, #9
 800089e:	f7ff fead 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff feaa 	bl	80005fc <LcdWriteData>

	//set negative gamma correction
	LcdWriteReg(0xE1);
 80008a8:	20e1      	movs	r0, #225	; 0xe1
 80008aa:	f7ff fe7d 	bl	80005a8 <LcdWriteReg>
	LcdWriteData(0x00);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f7ff fea4 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0E);
 80008b4:	200e      	movs	r0, #14
 80008b6:	f7ff fea1 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x14);
 80008ba:	2014      	movs	r0, #20
 80008bc:	f7ff fe9e 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x03);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f7ff fe9b 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x11);
 80008c6:	2011      	movs	r0, #17
 80008c8:	f7ff fe98 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x07);
 80008cc:	2007      	movs	r0, #7
 80008ce:	f7ff fe95 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x31);
 80008d2:	2031      	movs	r0, #49	; 0x31
 80008d4:	f7ff fe92 	bl	80005fc <LcdWriteData>
	LcdWriteData(0xC1);
 80008d8:	20c1      	movs	r0, #193	; 0xc1
 80008da:	f7ff fe8f 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x48);
 80008de:	2048      	movs	r0, #72	; 0x48
 80008e0:	f7ff fe8c 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x08);
 80008e4:	2008      	movs	r0, #8
 80008e6:	f7ff fe89 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0F);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f7ff fe86 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0C);
 80008f0:	200c      	movs	r0, #12
 80008f2:	f7ff fe83 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x31);
 80008f6:	2031      	movs	r0, #49	; 0x31
 80008f8:	f7ff fe80 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x36);
 80008fc:	2036      	movs	r0, #54	; 0x36
 80008fe:	f7ff fe7d 	bl	80005fc <LcdWriteData>
	LcdWriteData(0x0F);
 8000902:	200f      	movs	r0, #15
 8000904:	f7ff fe7a 	bl	80005fc <LcdWriteData>

	//exit sleep
	LcdWriteReg(0x11);
 8000908:	2011      	movs	r0, #17
 800090a:	f7ff fe4d 	bl	80005a8 <LcdWriteReg>
	HAL_Delay(120);
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f001 fd60 	bl	80023d4 <HAL_Delay>
	//display on
	LcdWriteReg(0x29);
 8000914:	2029      	movs	r0, #41	; 0x29
 8000916:	f7ff fe47 	bl	80005a8 <LcdWriteReg>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020800 	.word	0x40020800

08000928 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b0a0      	sub	sp, #128	; 0x80
 800092c:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800092e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2268      	movs	r2, #104	; 0x68
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f010 fbdf 	bl	8011108 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, GUICC_565, 0, 0);//16bit color flexcolor driver
 800094a:	2300      	movs	r3, #0
 800094c:	2200      	movs	r2, #0
 800094e:	4916      	ldr	r1, [pc, #88]	; (80009a8 <LCD_X_Config+0x80>)
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <LCD_X_Config+0x84>)
 8000952:	f00b fd71 	bl	800c438 <GUI_DEVICE_CreateAndLink>
 8000956:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 8000958:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800095c:	21f0      	movs	r1, #240	; 0xf0
 800095e:	2000      	movs	r0, #0
 8000960:	f00a fa3e 	bl	800ade0 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 8000964:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000968:	21f0      	movs	r1, #240	; 0xf0
 800096a:	2000      	movs	r0, #0
 800096c:	f00a fa20 	bl	800adb0 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = GUI_SWAP_XY | GUI_ROTATION_180;
 8000970:	2307      	movs	r3, #7
 8000972:	673b      	str	r3, [r7, #112]	; 0x70
  GUIDRV_FlexColor_Config(pDevice, &Config);
 8000974:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000978:	4619      	mov	r1, r3
 800097a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800097c:	f00a f9b7 	bl	800acee <GUIDRV_FlexColor_Config>
  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 8000980:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <LCD_X_Config+0x88>)
 8000982:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <LCD_X_Config+0x8c>)
 8000986:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1  = LcdWriteDataMultiple;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <LCD_X_Config+0x90>)
 800098a:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1  = LcdReadReg;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_X_Config+0x94>)
 800098e:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1 = LcdReadDataMultiple;
 8000990:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <LCD_X_Config+0x98>)
 8000992:	61fb      	str	r3, [r7, #28]

  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);//ILI9341, 16bit color, 8 bit bus, no cache
 8000994:	4639      	mov	r1, r7
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <LCD_X_Config+0x9c>)
 8000998:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <LCD_X_Config+0xa0>)
 800099a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800099c:	f00a f9c5 	bl	800ad2a <GUIDRV_FlexColor_SetFunc>
}
 80009a0:	bf00      	nop
 80009a2:	3780      	adds	r7, #128	; 0x80
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	08013900 	.word	0x08013900
 80009ac:	080137a0 	.word	0x080137a0
 80009b0:	080005a9 	.word	0x080005a9
 80009b4:	080005fd 	.word	0x080005fd
 80009b8:	08000641 	.word	0x08000641
 80009bc:	080005ed 	.word	0x080005ed
 80009c0:	0800068d 	.word	0x0800068d
 80009c4:	0800a6b1 	.word	0x0800a6b1
 80009c8:	08009fad 	.word	0x08009fad

080009cc <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d103      	bne.n	80009e6 <LCD_X_DisplayDriver+0x1a>
  case LCD_X_INITCONTROLLER: {
	LcdInit();	//ili9341 init code
 80009de:	f7ff fe67 	bl	80006b0 <LcdInit>
    return 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e003      	b.n	80009ee <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	617b      	str	r3, [r7, #20]
  }
  return r;
 80009ec:	697b      	ldr	r3, [r7, #20]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_cbDialog>:

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]

  switch (pMsg->MsgId) {
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f008 f808 	bl	8008a14 <WM_DefaultProc>
    break;
 8000a04:	bf00      	nop
  }
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <CreatePersonalEntry>:
/*********************************************************************
*
*       CreatePersonalEntry
*/
WM_HWIN CreatePersonalEntry(void);
WM_HWIN CreatePersonalEntry(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af02      	add	r7, sp, #8
WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 8000a16:	f006 fc01 	bl	800721c <WM_GetDesktopWindow>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	9201      	str	r2, [sp, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	9200      	str	r2, [sp, #0]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <CreatePersonalEntry+0x2c>)
 8000a26:	2109      	movs	r1, #9
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <CreatePersonalEntry+0x30>)
 8000a2a:	f006 f897 	bl	8006b5c <GUI_CreateDialogBox>
 8000a2e:	6078      	str	r0, [r7, #4]
  return hWin;
 8000a30:	687b      	ldr	r3, [r7, #4]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	080009f7 	.word	0x080009f7
 8000a40:	08012618 	.word	0x08012618

08000a44 <CheckData>:

// USER START (Optionally insert additional public code)

char CheckData(char *CardID)
{
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	6078      	str	r0, [r7, #4]
	sprintf(strCardID,"%03d%03d%03d%03d%03d",CardID[0],CardID[1],CardID[2],CardID[3],CardID[4]);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461c      	mov	r4, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3303      	adds	r3, #3
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	9302      	str	r3, [sp, #8]
 8000a72:	9101      	str	r1, [sp, #4]
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	4623      	mov	r3, r4
 8000a78:	4602      	mov	r2, r0
 8000a7a:	493e      	ldr	r1, [pc, #248]	; (8000b74 <CheckData+0x130>)
 8000a7c:	483e      	ldr	r0, [pc, #248]	; (8000b78 <CheckData+0x134>)
 8000a7e:	f010 fb4b 	bl	8011118 <siprintf>

	res = f_open(&file, "liste.txt", FA_READ);
 8000a82:	2201      	movs	r2, #1
 8000a84:	493d      	ldr	r1, [pc, #244]	; (8000b7c <CheckData+0x138>)
 8000a86:	483e      	ldr	r0, [pc, #248]	; (8000b80 <CheckData+0x13c>)
 8000a88:	f004 fde6 	bl	8005658 <f_open>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <CheckData+0x140>)
 8000a92:	701a      	strb	r2, [r3, #0]

	if(res == FR_OK)
 8000a94:	4b3b      	ldr	r3, [pc, #236]	; (8000b84 <CheckData+0x140>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d15e      	bne.n	8000b5a <CheckData+0x116>
	{
		res = f_read(&file,buffer,sizeof(buffer),&br);
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	; (8000b88 <CheckData+0x144>)
 8000a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa2:	493a      	ldr	r1, [pc, #232]	; (8000b8c <CheckData+0x148>)
 8000aa4:	4836      	ldr	r0, [pc, #216]	; (8000b80 <CheckData+0x13c>)
 8000aa6:	f004 ff95 	bl	80059d4 <f_read>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <CheckData+0x140>)
 8000ab0:	701a      	strb	r2, [r3, #0]
		if(res == FR_OK)
 8000ab2:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <CheckData+0x140>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14a      	bne.n	8000b50 <CheckData+0x10c>
		{
			ptr = strstr(buffer,strCardID);
 8000aba:	492f      	ldr	r1, [pc, #188]	; (8000b78 <CheckData+0x134>)
 8000abc:	4833      	ldr	r0, [pc, #204]	; (8000b8c <CheckData+0x148>)
 8000abe:	f010 fb60 	bl	8011182 <strstr>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4a32      	ldr	r2, [pc, #200]	; (8000b90 <CheckData+0x14c>)
 8000ac6:	6013      	str	r3, [r2, #0]
			if(ptr)
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <CheckData+0x14c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d049      	beq.n	8000b64 <CheckData+0x120>
			{
				token = strtok(ptr,"\t");
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <CheckData+0x14c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	492f      	ldr	r1, [pc, #188]	; (8000b94 <CheckData+0x150>)
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f010 fb6a 	bl	80111b0 <strtok>
 8000adc:	4603      	mov	r3, r0
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <CheckData+0x154>)
 8000ae0:	6013      	str	r3, [r2, #0]
				i=0;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <CheckData+0x158>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	801a      	strh	r2, [r3, #0]
				while(token != NULL)
 8000ae8:	e020      	b.n	8000b2c <CheckData+0xe8>
				{
					sprintf(&PersonalInfo[i++][0],token);
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <CheckData+0x158>)
 8000aec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000af0:	b293      	uxth	r3, r2
 8000af2:	3301      	adds	r3, #1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	b219      	sxth	r1, r3
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <CheckData+0x158>)
 8000afa:	8019      	strh	r1, [r3, #0]
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <CheckData+0x15c>)
 8000b06:	4413      	add	r3, r2
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <CheckData+0x154>)
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f010 fb02 	bl	8011118 <siprintf>
					if(i == 5) break;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <CheckData+0x158>)
 8000b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d00b      	beq.n	8000b36 <CheckData+0xf2>
					token = strtok(NULL,"\t");
 8000b1e:	491d      	ldr	r1, [pc, #116]	; (8000b94 <CheckData+0x150>)
 8000b20:	2000      	movs	r0, #0
 8000b22:	f010 fb45 	bl	80111b0 <strtok>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <CheckData+0x154>)
 8000b2a:	6013      	str	r3, [r2, #0]
				while(token != NULL)
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <CheckData+0x154>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1da      	bne.n	8000aea <CheckData+0xa6>
 8000b34:	e000      	b.n	8000b38 <CheckData+0xf4>
					if(i == 5) break;
 8000b36:	bf00      	nop
				}
				ptr = strchr(&PersonalInfo[4][0],'\r');
 8000b38:	210d      	movs	r1, #13
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <CheckData+0x160>)
 8000b3c:	f010 fb0c 	bl	8011158 <strchr>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <CheckData+0x14c>)
 8000b44:	6013      	str	r3, [r2, #0]
				*ptr = 0;
 8000b46:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <CheckData+0x14c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
 8000b4e:	e009      	b.n	8000b64 <CheckData+0x120>
			}
		}

		else
		{
			f_close(&file);
 8000b50:	480b      	ldr	r0, [pc, #44]	; (8000b80 <CheckData+0x13c>)
 8000b52:	f005 f8fc 	bl	8005d4e <f_close>
			return 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e008      	b.n	8000b6c <CheckData+0x128>
		}
	}
	else
	{
		f_close(&file);
 8000b5a:	4809      	ldr	r0, [pc, #36]	; (8000b80 <CheckData+0x13c>)
 8000b5c:	f005 f8f7 	bl	8005d4e <f_close>
		return 1;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e003      	b.n	8000b6c <CheckData+0x128>
	}

	f_close(&file);
 8000b64:	4806      	ldr	r0, [pc, #24]	; (8000b80 <CheckData+0x13c>)
 8000b66:	f005 f8f2 	bl	8005d4e <f_close>

	return 0;
 8000b6a:	2300      	movs	r3, #0
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd90      	pop	{r4, r7, pc}
 8000b74:	08012560 	.word	0x08012560
 8000b78:	200044a0 	.word	0x200044a0
 8000b7c:	08012578 	.word	0x08012578
 8000b80:	20002e08 	.word	0x20002e08
 8000b84:	200044c0 	.word	0x200044c0
 8000b88:	20002dfc 	.word	0x20002dfc
 8000b8c:	2000343c 	.word	0x2000343c
 8000b90:	20002df8 	.word	0x20002df8
 8000b94:	08012584 	.word	0x08012584
 8000b98:	200044c4 	.word	0x200044c4
 8000b9c:	20003038 	.word	0x20003038
 8000ba0:	2000443c 	.word	0x2000443c
 8000ba4:	2000448c 	.word	0x2000448c

08000ba8 <_GetData>:

char _acBuffer[1024];
static int _GetData(void * p, const U8 ** ppData, unsigned NumBytesReq, U32 Offset) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
    unsigned int NumBytesRead;
    f_lseek((FIL *) p, Offset); //Set file pointer to the required position
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f005 f8f2 	bl	8005da2 <f_lseek>
     * FIL*     fp      -	Pointer to the file object
     * void*    buff    -	Pointer to data buffer
     * UINT     btr     -	Number of bytes to read
     * UINT*    br      -	Pointer to number of bytes read
     */
    f_read((FIL *) p, (void *) _acBuffer, NumBytesReq, &NumBytesRead); //Read data into buffer
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	4905      	ldr	r1, [pc, #20]	; (8000bdc <_GetData+0x34>)
 8000bc6:	68f8      	ldr	r0, [r7, #12]
 8000bc8:	f004 ff04 	bl	80059d4 <f_read>
    *ppData = (const U8 *) _acBuffer; //Set pointer to the buffer
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <_GetData+0x34>)
 8000bd0:	601a      	str	r2, [r3, #0]
    return NumBytesRead;
 8000bd2:	697b      	ldr	r3, [r7, #20]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000303c 	.word	0x2000303c

08000be0 <RFID_Reader>:


void RFID_Reader()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
	WM_HWIN hWin;

	TEXT_Handle hText4,hText5,hText6,hText7;

    MFRC522_Init();
 8000be6:	f000 fffd 	bl	8001be4 <MFRC522_Init>

	ret = f_mount(&fs,"", 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	4938      	ldr	r1, [pc, #224]	; (8000cd0 <RFID_Reader+0xf0>)
 8000bee:	4839      	ldr	r0, [pc, #228]	; (8000cd4 <RFID_Reader+0xf4>)
 8000bf0:	f004 fcec 	bl	80055cc <f_mount>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <RFID_Reader+0xf8>)
 8000bfa:	701a      	strb	r2, [r3, #0]

	if(ret != FR_OK)
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <RFID_Reader+0xf8>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d000      	beq.n	8000c06 <RFID_Reader+0x26>
	{
	   while(1);
 8000c04:	e7fe      	b.n	8000c04 <RFID_Reader+0x24>
	}

	 hWin = CreatePersonalEntry();
 8000c06:	f7ff ff03 	bl	8000a10 <CreatePersonalEntry>
 8000c0a:	6178      	str	r0, [r7, #20]

	 hText4 = WM_GetDialogItem(hWin, ID_TEXT_4);
 8000c0c:	f640 0105 	movw	r1, #2053	; 0x805
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f006 fb53 	bl	80072bc <WM_GetDialogItem>
 8000c16:	6138      	str	r0, [r7, #16]
	 hText5 = WM_GetDialogItem(hWin, ID_TEXT_5);
 8000c18:	f640 0106 	movw	r1, #2054	; 0x806
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	f006 fb4d 	bl	80072bc <WM_GetDialogItem>
 8000c22:	60f8      	str	r0, [r7, #12]
	 hText6 = WM_GetDialogItem(hWin, ID_TEXT_6);
 8000c24:	f640 0107 	movw	r1, #2055	; 0x807
 8000c28:	6978      	ldr	r0, [r7, #20]
 8000c2a:	f006 fb47 	bl	80072bc <WM_GetDialogItem>
 8000c2e:	60b8      	str	r0, [r7, #8]
	 hText7 = WM_GetDialogItem(hWin, ID_TEXT_7);
 8000c30:	f640 0108 	movw	r1, #2056	; 0x808
 8000c34:	6978      	ldr	r0, [r7, #20]
 8000c36:	f006 fb41 	bl	80072bc <WM_GetDialogItem>
 8000c3a:	6078      	str	r0, [r7, #4]

	 while(1)
	 {
		 status = MFRC522_Request(PICC_REQIDL, str);
 8000c3c:	4927      	ldr	r1, [pc, #156]	; (8000cdc <RFID_Reader+0xfc>)
 8000c3e:	2026      	movs	r0, #38	; 0x26
 8000c40:	f001 f8c7 	bl	8001dd2 <MFRC522_Request>
 8000c44:	4603      	mov	r3, r0
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <RFID_Reader+0x100>)
 8000c4a:	701a      	strb	r2, [r3, #0]
		 status = MFRC522_Anticoll(str);
 8000c4c:	4823      	ldr	r0, [pc, #140]	; (8000cdc <RFID_Reader+0xfc>)
 8000c4e:	f001 f8e5 	bl	8001e1c <MFRC522_Anticoll>
 8000c52:	4603      	mov	r3, r0
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <RFID_Reader+0x100>)
 8000c58:	701a      	strb	r2, [r3, #0]
		 memcpy(sNum, str, 5);
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <RFID_Reader+0x104>)
 8000c5c:	4a1f      	ldr	r2, [pc, #124]	; (8000cdc <RFID_Reader+0xfc>)
 8000c5e:	6811      	ldr	r1, [r2, #0]
 8000c60:	6019      	str	r1, [r3, #0]
 8000c62:	7912      	ldrb	r2, [r2, #4]
 8000c64:	711a      	strb	r2, [r3, #4]
		 HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f001 fbb4 	bl	80023d4 <HAL_Delay>

		 if(CheckData(sNum) == 0)
 8000c6c:	481d      	ldr	r0, [pc, #116]	; (8000ce4 <RFID_Reader+0x104>)
 8000c6e:	f7ff fee9 	bl	8000a44 <CheckData>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d125      	bne.n	8000cc4 <RFID_Reader+0xe4>
		 {
			 TEXT_SetText(hText4, &PersonalInfo[1][0]);
 8000c78:	491b      	ldr	r1, [pc, #108]	; (8000ce8 <RFID_Reader+0x108>)
 8000c7a:	6938      	ldr	r0, [r7, #16]
 8000c7c:	f005 fbb9 	bl	80063f2 <TEXT_SetText>
			 TEXT_SetText(hText5, &PersonalInfo[2][0]);
 8000c80:	491a      	ldr	r1, [pc, #104]	; (8000cec <RFID_Reader+0x10c>)
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f005 fbb5 	bl	80063f2 <TEXT_SetText>
			 TEXT_SetText(hText6, &PersonalInfo[3][0]);
 8000c88:	4919      	ldr	r1, [pc, #100]	; (8000cf0 <RFID_Reader+0x110>)
 8000c8a:	68b8      	ldr	r0, [r7, #8]
 8000c8c:	f005 fbb1 	bl	80063f2 <TEXT_SetText>
			 TEXT_SetText(hText7, &PersonalInfo[0][0]);
 8000c90:	4918      	ldr	r1, [pc, #96]	; (8000cf4 <RFID_Reader+0x114>)
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f005 fbad 	bl	80063f2 <TEXT_SetText>

			 res = f_open(&file, &PersonalInfo[4][0], FA_OPEN_EXISTING | FA_READ);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4917      	ldr	r1, [pc, #92]	; (8000cf8 <RFID_Reader+0x118>)
 8000c9c:	4817      	ldr	r0, [pc, #92]	; (8000cfc <RFID_Reader+0x11c>)
 8000c9e:	f004 fcdb 	bl	8005658 <f_open>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <RFID_Reader+0x120>)
 8000ca8:	701a      	strb	r2, [r3, #0]
		  	 	 if(res == FR_OK)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <RFID_Reader+0x120>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d105      	bne.n	8000cbe <RFID_Reader+0xde>
		  	 		 GUI_BMP_DrawEx(_GetData, &file, 14, 30);
 8000cb2:	231e      	movs	r3, #30
 8000cb4:	220e      	movs	r2, #14
 8000cb6:	4911      	ldr	r1, [pc, #68]	; (8000cfc <RFID_Reader+0x11c>)
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <RFID_Reader+0x124>)
 8000cba:	f00c fd2f 	bl	800d71c <GUI_BMP_DrawEx>

		  	 	 f_close(&file);
 8000cbe:	480f      	ldr	r0, [pc, #60]	; (8000cfc <RFID_Reader+0x11c>)
 8000cc0:	f005 f845 	bl	8005d4e <f_close>
		 }

		 HAL_Delay(250);
 8000cc4:	20fa      	movs	r0, #250	; 0xfa
 8000cc6:	f001 fb85 	bl	80023d4 <HAL_Delay>
		 GUI_Exec();
 8000cca:	f00b fdaf 	bl	800c82c <GUI_Exec>
		 status = MFRC522_Request(PICC_REQIDL, str);
 8000cce:	e7b5      	b.n	8000c3c <RFID_Reader+0x5c>
 8000cd0:	08012588 	.word	0x08012588
 8000cd4:	20002bc8 	.word	0x20002bc8
 8000cd8:	200044c1 	.word	0x200044c1
 8000cdc:	200044b0 	.word	0x200044b0
 8000ce0:	200044c8 	.word	0x200044c8
 8000ce4:	20002e00 	.word	0x20002e00
 8000ce8:	20004450 	.word	0x20004450
 8000cec:	20004464 	.word	0x20004464
 8000cf0:	20004478 	.word	0x20004478
 8000cf4:	2000443c 	.word	0x2000443c
 8000cf8:	2000448c 	.word	0x2000448c
 8000cfc:	20002e08 	.word	0x20002e08
 8000d00:	200044c0 	.word	0x200044c0
 8000d04:	08000ba9 	.word	0x08000ba9

08000d08 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <SELECT+0x1c>)
 8000d14:	f001 fe20 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d18:	2001      	movs	r0, #1
 8000d1a:	f001 fb5b 	bl	80023d4 <HAL_Delay>
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40020400 	.word	0x40020400

08000d28 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d32:	4804      	ldr	r0, [pc, #16]	; (8000d44 <DESELECT+0x1c>)
 8000d34:	f001 fe10 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f001 fb4b 	bl	80023d4 <HAL_Delay>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40020400 	.word	0x40020400

08000d48 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d52:	bf00      	nop
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <SPI_TxByte+0x30>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d1f8      	bne.n	8000d54 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d62:	1df9      	adds	r1, r7, #7
 8000d64:	2364      	movs	r3, #100	; 0x64
 8000d66:	2201      	movs	r2, #1
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <SPI_TxByte+0x30>)
 8000d6a:	f002 fad8 	bl	800331e <HAL_SPI_Transmit>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200044d0 	.word	0x200044d0

08000d7c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000d88:	bf00      	nop
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <SPI_TxBuffer+0x30>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d1f8      	bne.n	8000d8a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d98:	887a      	ldrh	r2, [r7, #2]
 8000d9a:	2364      	movs	r3, #100	; 0x64
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <SPI_TxBuffer+0x30>)
 8000da0:	f002 fabd 	bl	800331e <HAL_SPI_Transmit>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200044d0 	.word	0x200044d0

08000db0 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000db6:	23ff      	movs	r3, #255	; 0xff
 8000db8:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000dba:	bf00      	nop
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <SPI_RxByte+0x34>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d1f8      	bne.n	8000dbc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000dca:	1dba      	adds	r2, r7, #6
 8000dcc:	1df9      	adds	r1, r7, #7
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4803      	ldr	r0, [pc, #12]	; (8000de4 <SPI_RxByte+0x34>)
 8000dd6:	f002 fbde 	bl	8003596 <HAL_SPI_TransmitReceive>

	return data;
 8000dda:	79bb      	ldrb	r3, [r7, #6]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200044d0 	.word	0x200044d0

08000de8 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000df0:	f7ff ffde 	bl	8000db0 <SPI_RxByte>
 8000df4:	4603      	mov	r3, r0
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SD_ReadyWait+0x30>)
 8000e0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e10:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000e12:	f7ff ffcd 	bl	8000db0 <SPI_RxByte>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d003      	beq.n	8000e28 <SD_ReadyWait+0x24>
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SD_ReadyWait+0x30>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f4      	bne.n	8000e12 <SD_ReadyWait+0xe>

	return res;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200044ca 	.word	0x200044ca

08000e38 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000e3e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000e42:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000e44:	f7ff ff70 	bl	8000d28 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	e005      	b.n	8000e5a <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e4e:	20ff      	movs	r0, #255	; 0xff
 8000e50:	f7ff ff7a 	bl	8000d48 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3301      	adds	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b09      	cmp	r3, #9
 8000e5e:	ddf6      	ble.n	8000e4e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000e60:	f7ff ff52 	bl	8000d08 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e64:	2340      	movs	r3, #64	; 0x40
 8000e66:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e78:	2395      	movs	r3, #149	; 0x95
 8000e7a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2106      	movs	r1, #6
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff7b 	bl	8000d7c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e86:	e002      	b.n	8000e8e <SD_PowerOn+0x56>
	{
		cnt--;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e8e:	f7ff ff8f 	bl	8000db0 <SPI_RxByte>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d002      	beq.n	8000e9e <SD_PowerOn+0x66>
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f4      	bne.n	8000e88 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e9e:	f7ff ff43 	bl	8000d28 <DESELECT>
	SPI_TxByte(0XFF);
 8000ea2:	20ff      	movs	r0, #255	; 0xff
 8000ea4:	f7ff ff50 	bl	8000d48 <SPI_TxByte>

	PowerFlag = 1;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <SD_PowerOn+0x80>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200029a9 	.word	0x200029a9

08000ebc <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <SD_PowerOff+0x14>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	200029a9 	.word	0x200029a9

08000ed4 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <SD_CheckPower+0x14>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200029a9 	.word	0x200029a9

08000eec <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <SD_RxDataBlock+0x58>)
 8000ef8:	22c8      	movs	r2, #200	; 0xc8
 8000efa:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000efc:	f7ff ff58 	bl	8000db0 <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d103      	bne.n	8000f12 <SD_RxDataBlock+0x26>
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <SD_RxDataBlock+0x58>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f4      	bne.n	8000efc <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2bfe      	cmp	r3, #254	; 0xfe
 8000f16:	d001      	beq.n	8000f1c <SD_RxDataBlock+0x30>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	e00f      	b.n	8000f3c <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	607a      	str	r2, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff60 	bl	8000de8 <SPI_RxBytePtr>
	} while(len--);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	603a      	str	r2, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f4      	bne.n	8000f1c <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 8000f32:	f7ff ff3d 	bl	8000db0 <SPI_RxByte>
	SPI_RxByte();
 8000f36:	f7ff ff3b 	bl	8000db0 <SPI_RxByte>

	return TRUE;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200044cc 	.word	0x200044cc

08000f48 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f58:	f7ff ff54 	bl	8000e04 <SD_ReadyWait>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2bff      	cmp	r3, #255	; 0xff
 8000f60:	d001      	beq.n	8000f66 <SD_TxDataBlock+0x1e>
 8000f62:	2300      	movs	r3, #0
 8000f64:	e02f      	b.n	8000fc6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000f66:	78fb      	ldrb	r3, [r7, #3]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feed 	bl	8000d48 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	2bfd      	cmp	r3, #253	; 0xfd
 8000f72:	d020      	beq.n	8000fb6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff feff 	bl	8000d7c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f7e:	f7ff ff17 	bl	8000db0 <SPI_RxByte>
		SPI_RxByte();
 8000f82:	f7ff ff15 	bl	8000db0 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000f86:	e00b      	b.n	8000fa0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000f88:	f7ff ff12 	bl	8000db0 <SPI_RxByte>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	f003 031f 	and.w	r3, r3, #31
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d006      	beq.n	8000fa8 <SD_TxDataBlock+0x60>
			i++;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	2b40      	cmp	r3, #64	; 0x40
 8000fa4:	d9f0      	bls.n	8000f88 <SD_TxDataBlock+0x40>
 8000fa6:	e000      	b.n	8000faa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000fa8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000faa:	bf00      	nop
 8000fac:	f7ff ff00 	bl	8000db0 <SPI_RxByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0fa      	beq.n	8000fac <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d101      	bne.n	8000fc4 <SD_TxDataBlock+0x7c>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	6039      	str	r1, [r7, #0]
 8000fd8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fda:	f7ff ff13 	bl	8000e04 <SD_ReadyWait>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d001      	beq.n	8000fe8 <SD_SendCmd+0x1a>
 8000fe4:	23ff      	movs	r3, #255	; 0xff
 8000fe6:	e042      	b.n	800106e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff feac 	bl	8000d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	0e1b      	lsrs	r3, r3, #24
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fea6 	bl	8000d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fea0 	bl	8000d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	0a1b      	lsrs	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe9a 	bl	8000d48 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe95 	bl	8000d48 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b40      	cmp	r3, #64	; 0x40
 8001022:	d102      	bne.n	800102a <SD_SendCmd+0x5c>
 8001024:	2395      	movs	r3, #149	; 0x95
 8001026:	73fb      	strb	r3, [r7, #15]
 8001028:	e007      	b.n	800103a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b48      	cmp	r3, #72	; 0x48
 800102e:	d102      	bne.n	8001036 <SD_SendCmd+0x68>
 8001030:	2387      	movs	r3, #135	; 0x87
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e001      	b.n	800103a <SD_SendCmd+0x6c>
	else crc = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fe83 	bl	8000d48 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b4c      	cmp	r3, #76	; 0x4c
 8001046:	d101      	bne.n	800104c <SD_SendCmd+0x7e>
 8001048:	f7ff feb2 	bl	8000db0 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001050:	f7ff feae 	bl	8000db0 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001058:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800105c:	2b00      	cmp	r3, #0
 800105e:	da05      	bge.n	800106c <SD_SendCmd+0x9e>
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	3b01      	subs	r3, #1
 8001064:	73bb      	strb	r3, [r7, #14]
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f1      	bne.n	8001050 <SD_SendCmd+0x82>

	return res;
 800106c:	7b7b      	ldrb	r3, [r7, #13]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SD_disk_initialize+0x14>
 8001088:	2301      	movs	r3, #1
 800108a:	e0d1      	b.n	8001230 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800108c:	4b6a      	ldr	r3, [pc, #424]	; (8001238 <SD_disk_initialize+0x1c0>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <SD_disk_initialize+0x2a>
 800109a:	4b67      	ldr	r3, [pc, #412]	; (8001238 <SD_disk_initialize+0x1c0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	e0c6      	b.n	8001230 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80010a2:	f7ff fec9 	bl	8000e38 <SD_PowerOn>

	/* slave select */
	SELECT();
 80010a6:	f7ff fe2f 	bl	8000d08 <SELECT>

	/* check disk type */
	type = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80010ae:	2100      	movs	r1, #0
 80010b0:	2040      	movs	r0, #64	; 0x40
 80010b2:	f7ff ff8c 	bl	8000fce <SD_SendCmd>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 80a1 	bne.w	8001200 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <SD_disk_initialize+0x1c4>)
 80010c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010ca:	2048      	movs	r0, #72	; 0x48
 80010cc:	f7ff ff7f 	bl	8000fce <SD_SendCmd>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d155      	bne.n	8001182 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e00c      	b.n	80010f6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80010dc:	7bfc      	ldrb	r4, [r7, #15]
 80010de:	f7ff fe67 	bl	8000db0 <SPI_RxByte>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4423      	add	r3, r4
 80010ec:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	3301      	adds	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d9ef      	bls.n	80010dc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010fc:	7abb      	ldrb	r3, [r7, #10]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d17e      	bne.n	8001200 <SD_disk_initialize+0x188>
 8001102:	7afb      	ldrb	r3, [r7, #11]
 8001104:	2baa      	cmp	r3, #170	; 0xaa
 8001106:	d17b      	bne.n	8001200 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001108:	2100      	movs	r1, #0
 800110a:	2077      	movs	r0, #119	; 0x77
 800110c:	f7ff ff5f 	bl	8000fce <SD_SendCmd>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d807      	bhi.n	8001126 <SD_disk_initialize+0xae>
 8001116:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800111a:	2069      	movs	r0, #105	; 0x69
 800111c:	f7ff ff57 	bl	8000fce <SD_SendCmd>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <SD_disk_initialize+0x1c4>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1ec      	bne.n	8001108 <SD_disk_initialize+0x90>
 800112e:	e000      	b.n	8001132 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001130:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <SD_disk_initialize+0x1c4>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d062      	beq.n	8001200 <SD_disk_initialize+0x188>
 800113a:	2100      	movs	r1, #0
 800113c:	207a      	movs	r0, #122	; 0x7a
 800113e:	f7ff ff46 	bl	8000fce <SD_SendCmd>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d15b      	bne.n	8001200 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e00c      	b.n	8001168 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 800114e:	7bfc      	ldrb	r4, [r7, #15]
 8001150:	f7ff fe2e 	bl	8000db0 <SPI_RxByte>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4423      	add	r3, r4
 800115e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	3301      	adds	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d9ef      	bls.n	800114e <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800116e:	7a3b      	ldrb	r3, [r7, #8]
 8001170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SD_disk_initialize+0x104>
 8001178:	230c      	movs	r3, #12
 800117a:	e000      	b.n	800117e <SD_disk_initialize+0x106>
 800117c:	2304      	movs	r3, #4
 800117e:	73bb      	strb	r3, [r7, #14]
 8001180:	e03e      	b.n	8001200 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001182:	2100      	movs	r1, #0
 8001184:	2077      	movs	r0, #119	; 0x77
 8001186:	f7ff ff22 	bl	8000fce <SD_SendCmd>
 800118a:	4603      	mov	r3, r0
 800118c:	2b01      	cmp	r3, #1
 800118e:	d808      	bhi.n	80011a2 <SD_disk_initialize+0x12a>
 8001190:	2100      	movs	r1, #0
 8001192:	2069      	movs	r0, #105	; 0x69
 8001194:	f7ff ff1b 	bl	8000fce <SD_SendCmd>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d801      	bhi.n	80011a2 <SD_disk_initialize+0x12a>
 800119e:	2302      	movs	r3, #2
 80011a0:	e000      	b.n	80011a4 <SD_disk_initialize+0x12c>
 80011a2:	2301      	movs	r3, #1
 80011a4:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d10e      	bne.n	80011ca <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80011ac:	2100      	movs	r1, #0
 80011ae:	2077      	movs	r0, #119	; 0x77
 80011b0:	f7ff ff0d 	bl	8000fce <SD_SendCmd>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d80e      	bhi.n	80011d8 <SD_disk_initialize+0x160>
 80011ba:	2100      	movs	r1, #0
 80011bc:	2069      	movs	r0, #105	; 0x69
 80011be:	f7ff ff06 	bl	8000fce <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d107      	bne.n	80011d8 <SD_disk_initialize+0x160>
 80011c8:	e00c      	b.n	80011e4 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011ca:	2100      	movs	r1, #0
 80011cc:	2041      	movs	r0, #65	; 0x41
 80011ce:	f7ff fefe 	bl	8000fce <SD_SendCmd>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <SD_disk_initialize+0x1c4>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e2      	bne.n	80011a6 <SD_disk_initialize+0x12e>
 80011e0:	e000      	b.n	80011e4 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011e2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <SD_disk_initialize+0x1c4>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d007      	beq.n	80011fc <SD_disk_initialize+0x184>
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	2050      	movs	r0, #80	; 0x50
 80011f2:	f7ff feec 	bl	8000fce <SD_SendCmd>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SD_disk_initialize+0x188>
 80011fc:	2300      	movs	r3, #0
 80011fe:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001200:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <SD_disk_initialize+0x1c8>)
 8001202:	7bbb      	ldrb	r3, [r7, #14]
 8001204:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001206:	f7ff fd8f 	bl	8000d28 <DESELECT>
	SPI_RxByte();
 800120a:	f7ff fdd1 	bl	8000db0 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <SD_disk_initialize+0x1c0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SD_disk_initialize+0x1c0>)
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	e001      	b.n	800122a <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001226:	f7ff fe49 	bl	8000ebc <SD_PowerOff>
	}

	return Stat;
 800122a:	4b03      	ldr	r3, [pc, #12]	; (8001238 <SD_disk_initialize+0x1c0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bd90      	pop	{r4, r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	200044cc 	.word	0x200044cc
 8001240:	200029a8 	.word	0x200029a8

08001244 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SD_disk_status+0x14>
 8001254:	2301      	movs	r3, #1
 8001256:	e002      	b.n	800125e <SD_disk_status+0x1a>
	return Stat;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <SD_disk_status+0x28>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000000 	.word	0x20000000

08001270 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	4603      	mov	r3, r0
 800127e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <SD_disk_read+0x1c>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <SD_disk_read+0x20>
 800128c:	2304      	movs	r3, #4
 800128e:	e051      	b.n	8001334 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <SD_disk_read+0xcc>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <SD_disk_read+0x32>
 800129e:	2303      	movs	r3, #3
 80012a0:	e048      	b.n	8001334 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <SD_disk_read+0xd0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <SD_disk_read+0x44>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	025b      	lsls	r3, r3, #9
 80012b2:	607b      	str	r3, [r7, #4]

	SELECT();
 80012b4:	f7ff fd28 	bl	8000d08 <SELECT>

	if (count == 1)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d111      	bne.n	80012e2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	2051      	movs	r0, #81	; 0x51
 80012c2:	f7ff fe84 	bl	8000fce <SD_SendCmd>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d129      	bne.n	8001320 <SD_disk_read+0xb0>
 80012cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d0:	68b8      	ldr	r0, [r7, #8]
 80012d2:	f7ff fe0b 	bl	8000eec <SD_RxDataBlock>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d021      	beq.n	8001320 <SD_disk_read+0xb0>
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	e01e      	b.n	8001320 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	2052      	movs	r0, #82	; 0x52
 80012e6:	f7ff fe72 	bl	8000fce <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d117      	bne.n	8001320 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f7ff fdf9 	bl	8000eec <SD_RxDataBlock>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <SD_disk_read+0xa6>
				buff += 512;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001306:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3b01      	subs	r3, #1
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1ed      	bne.n	80012f0 <SD_disk_read+0x80>
 8001314:	e000      	b.n	8001318 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001316:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001318:	2100      	movs	r1, #0
 800131a:	204c      	movs	r0, #76	; 0x4c
 800131c:	f7ff fe57 	bl	8000fce <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001320:	f7ff fd02 	bl	8000d28 <DESELECT>
	SPI_RxByte();
 8001324:	f7ff fd44 	bl	8000db0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000
 8001340:	200029a8 	.word	0x200029a8

08001344 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	4603      	mov	r3, r0
 8001352:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <SD_disk_write+0x1c>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <SD_disk_write+0x20>
 8001360:	2304      	movs	r3, #4
 8001362:	e06b      	b.n	800143c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <SD_disk_write+0x100>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SD_disk_write+0x32>
 8001372:	2303      	movs	r3, #3
 8001374:	e062      	b.n	800143c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <SD_disk_write+0x100>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SD_disk_write+0x44>
 8001384:	2302      	movs	r3, #2
 8001386:	e059      	b.n	800143c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001388:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <SD_disk_write+0x104>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d102      	bne.n	800139a <SD_disk_write+0x56>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	025b      	lsls	r3, r3, #9
 8001398:	607b      	str	r3, [r7, #4]

	SELECT();
 800139a:	f7ff fcb5 	bl	8000d08 <SELECT>

	if (count == 1)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d110      	bne.n	80013c6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	2058      	movs	r0, #88	; 0x58
 80013a8:	f7ff fe11 	bl	8000fce <SD_SendCmd>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d13a      	bne.n	8001428 <SD_disk_write+0xe4>
 80013b2:	21fe      	movs	r1, #254	; 0xfe
 80013b4:	68b8      	ldr	r0, [r7, #8]
 80013b6:	f7ff fdc7 	bl	8000f48 <SD_TxDataBlock>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d033      	beq.n	8001428 <SD_disk_write+0xe4>
			count = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	e030      	b.n	8001428 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <SD_disk_write+0x104>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d007      	beq.n	80013e2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013d2:	2100      	movs	r1, #0
 80013d4:	2077      	movs	r0, #119	; 0x77
 80013d6:	f7ff fdfa 	bl	8000fce <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	2057      	movs	r0, #87	; 0x57
 80013de:	f7ff fdf6 	bl	8000fce <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	2059      	movs	r0, #89	; 0x59
 80013e6:	f7ff fdf2 	bl	8000fce <SD_SendCmd>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11b      	bne.n	8001428 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013f0:	21fc      	movs	r1, #252	; 0xfc
 80013f2:	68b8      	ldr	r0, [r7, #8]
 80013f4:	f7ff fda8 	bl	8000f48 <SD_TxDataBlock>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00a      	beq.n	8001414 <SD_disk_write+0xd0>
				buff += 512;
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001404:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	3b01      	subs	r3, #1
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ee      	bne.n	80013f0 <SD_disk_write+0xac>
 8001412:	e000      	b.n	8001416 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001414:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001416:	21fd      	movs	r1, #253	; 0xfd
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fd95 	bl	8000f48 <SD_TxDataBlock>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <SD_disk_write+0xe4>
			{
				count = 1;
 8001424:	2301      	movs	r3, #1
 8001426:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001428:	f7ff fc7e 	bl	8000d28 <DESELECT>
	SPI_RxByte();
 800142c:	f7ff fcc0 	bl	8000db0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000000 	.word	0x20000000
 8001448:	200029a8 	.word	0x200029a8

0800144c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	603a      	str	r2, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	460b      	mov	r3, r1
 800145a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <SD_disk_ioctl+0x1e>
 8001466:	2304      	movs	r3, #4
 8001468:	e115      	b.n	8001696 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d124      	bne.n	80014c0 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d012      	beq.n	80014a4 <SD_disk_ioctl+0x58>
 800147e:	2b02      	cmp	r3, #2
 8001480:	dc1a      	bgt.n	80014b8 <SD_disk_ioctl+0x6c>
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <SD_disk_ioctl+0x40>
 8001486:	2b01      	cmp	r3, #1
 8001488:	d006      	beq.n	8001498 <SD_disk_ioctl+0x4c>
 800148a:	e015      	b.n	80014b8 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800148c:	f7ff fd16 	bl	8000ebc <SD_PowerOff>
			res = RES_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001496:	e0fc      	b.n	8001692 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001498:	f7ff fcce 	bl	8000e38 <SD_PowerOn>
			res = RES_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014a2:	e0f6      	b.n	8001692 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	1c5c      	adds	r4, r3, #1
 80014a8:	f7ff fd14 	bl	8000ed4 <SD_CheckPower>
 80014ac:	4603      	mov	r3, r0
 80014ae:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014b6:	e0ec      	b.n	8001692 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 80014b8:	2304      	movs	r3, #4
 80014ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014be:	e0e8      	b.n	8001692 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014c0:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <SD_disk_ioctl+0x254>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SD_disk_ioctl+0x86>
 80014ce:	2303      	movs	r3, #3
 80014d0:	e0e1      	b.n	8001696 <SD_disk_ioctl+0x24a>

		SELECT();
 80014d2:	f7ff fc19 	bl	8000d08 <SELECT>

		switch (ctrl)
 80014d6:	79bb      	ldrb	r3, [r7, #6]
 80014d8:	2b0d      	cmp	r3, #13
 80014da:	f200 80cb 	bhi.w	8001674 <SD_disk_ioctl+0x228>
 80014de:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <SD_disk_ioctl+0x98>)
 80014e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e4:	080015df 	.word	0x080015df
 80014e8:	0800151d 	.word	0x0800151d
 80014ec:	080015cf 	.word	0x080015cf
 80014f0:	08001675 	.word	0x08001675
 80014f4:	08001675 	.word	0x08001675
 80014f8:	08001675 	.word	0x08001675
 80014fc:	08001675 	.word	0x08001675
 8001500:	08001675 	.word	0x08001675
 8001504:	08001675 	.word	0x08001675
 8001508:	08001675 	.word	0x08001675
 800150c:	08001675 	.word	0x08001675
 8001510:	080015f1 	.word	0x080015f1
 8001514:	08001615 	.word	0x08001615
 8001518:	08001639 	.word	0x08001639
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800151c:	2100      	movs	r1, #0
 800151e:	2049      	movs	r0, #73	; 0x49
 8001520:	f7ff fd55 	bl	8000fce <SD_SendCmd>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80a8 	bne.w	800167c <SD_disk_ioctl+0x230>
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	2110      	movs	r1, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fcda 	bl	8000eec <SD_RxDataBlock>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 809e 	beq.w	800167c <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001540:	7b3b      	ldrb	r3, [r7, #12]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10e      	bne.n	8001568 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	b29a      	uxth	r2, r3
 800154e:	7d3b      	ldrb	r3, [r7, #20]
 8001550:	b29b      	uxth	r3, r3
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	3301      	adds	r3, #1
 800155c:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	029a      	lsls	r2, r3, #10
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	e02e      	b.n	80015c6 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001568:	7c7b      	ldrb	r3, [r7, #17]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	b2da      	uxtb	r2, r3
 8001570:	7dbb      	ldrb	r3, [r7, #22]
 8001572:	09db      	lsrs	r3, r3, #7
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4413      	add	r3, r2
 8001578:	b2da      	uxtb	r2, r3
 800157a:	7d7b      	ldrb	r3, [r7, #21]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f003 0306 	and.w	r3, r3, #6
 8001584:	b2db      	uxtb	r3, r3
 8001586:	4413      	add	r3, r2
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3302      	adds	r3, #2
 800158c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001590:	7d3b      	ldrb	r3, [r7, #20]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b29a      	uxth	r2, r3
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	b29b      	uxth	r3, r3
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	7cbb      	ldrb	r3, [r7, #18]
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80015b8:	8bfa      	ldrh	r2, [r7, #30]
 80015ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015be:	3b09      	subs	r3, #9
 80015c0:	409a      	lsls	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80015cc:	e056      	b.n	800167c <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015dc:	e055      	b.n	800168a <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80015de:	f7ff fc11 	bl	8000e04 <SD_ReadyWait>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2bff      	cmp	r3, #255	; 0xff
 80015e6:	d14b      	bne.n	8001680 <SD_disk_ioctl+0x234>
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80015ee:	e047      	b.n	8001680 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015f0:	2100      	movs	r1, #0
 80015f2:	2049      	movs	r0, #73	; 0x49
 80015f4:	f7ff fceb 	bl	8000fce <SD_SendCmd>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d142      	bne.n	8001684 <SD_disk_ioctl+0x238>
 80015fe:	2110      	movs	r1, #16
 8001600:	6a38      	ldr	r0, [r7, #32]
 8001602:	f7ff fc73 	bl	8000eec <SD_RxDataBlock>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d03b      	beq.n	8001684 <SD_disk_ioctl+0x238>
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001612:	e037      	b.n	8001684 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001614:	2100      	movs	r1, #0
 8001616:	204a      	movs	r0, #74	; 0x4a
 8001618:	f7ff fcd9 	bl	8000fce <SD_SendCmd>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d132      	bne.n	8001688 <SD_disk_ioctl+0x23c>
 8001622:	2110      	movs	r1, #16
 8001624:	6a38      	ldr	r0, [r7, #32]
 8001626:	f7ff fc61 	bl	8000eec <SD_RxDataBlock>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d02b      	beq.n	8001688 <SD_disk_ioctl+0x23c>
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001636:	e027      	b.n	8001688 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001638:	2100      	movs	r1, #0
 800163a:	207a      	movs	r0, #122	; 0x7a
 800163c:	f7ff fcc7 	bl	8000fce <SD_SendCmd>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800164c:	e00b      	b.n	8001666 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800164e:	6a3c      	ldr	r4, [r7, #32]
 8001650:	1c63      	adds	r3, r4, #1
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	f7ff fbac 	bl	8000db0 <SPI_RxByte>
 8001658:	4603      	mov	r3, r0
 800165a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800165c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001660:	3301      	adds	r3, #1
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800166a:	2b03      	cmp	r3, #3
 800166c:	d9ef      	bls.n	800164e <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001674:	2304      	movs	r3, #4
 8001676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800167a:	e006      	b.n	800168a <SD_disk_ioctl+0x23e>
			break;
 800167c:	bf00      	nop
 800167e:	e004      	b.n	800168a <SD_disk_ioctl+0x23e>
			break;
 8001680:	bf00      	nop
 8001682:	e002      	b.n	800168a <SD_disk_ioctl+0x23e>
			break;
 8001684:	bf00      	nop
 8001686:	e000      	b.n	800168a <SD_disk_ioctl+0x23e>
			break;
 8001688:	bf00      	nop
		}

		DESELECT();
 800168a:	f7ff fb4d 	bl	8000d28 <DESELECT>
		SPI_RxByte();
 800168e:	f7ff fb8f 	bl	8000db0 <SPI_RxByte>
	}

	return res;
 8001692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001696:	4618      	mov	r0, r3
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	bd90      	pop	{r4, r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f000 fe22 	bl	80022f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ac:	f000 f812 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b0:	f000 f930 	bl	8001914 <MX_GPIO_Init>
  MX_SPI1_Init();
 80016b4:	f000 f88c 	bl	80017d0 <MX_SPI1_Init>
  MX_CRC_Init();
 80016b8:	f000 f876 	bl	80017a8 <MX_CRC_Init>
  MX_SPI2_Init();
 80016bc:	f000 f8be 	bl	800183c <MX_SPI2_Init>
  MX_SPI3_Init();
 80016c0:	f000 f8f2 	bl	80018a8 <MX_SPI3_Init>
  MX_FATFS_Init();
 80016c4:	f002 f9d4 	bl	8003a70 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  GUI_Init();
 80016c8:	f00a ffa6 	bl	800c618 <GUI_Init>
  RFID_Reader();
 80016cc:	f7ff fa88 	bl	8000be0 <RFID_Reader>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <main+0x2c>
	...

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00f fd10 	bl	8011108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <SystemClock_Config+0xcc>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a27      	ldr	r2, [pc, #156]	; (80017a0 <SystemClock_Config+0xcc>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b25      	ldr	r3, [pc, #148]	; (80017a0 <SystemClock_Config+0xcc>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <SystemClock_Config+0xd0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a21      	ldr	r2, [pc, #132]	; (80017a4 <SystemClock_Config+0xd0>)
 800171e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <SystemClock_Config+0xd0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173a:	2302      	movs	r3, #2
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001744:	2308      	movs	r3, #8
 8001746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800174c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800174e:	2302      	movs	r3, #2
 8001750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001752:	2307      	movs	r3, #7
 8001754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	4618      	mov	r0, r3
 800175c:	f001 f916 	bl	800298c <HAL_RCC_OscConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001766:	f000 f985 	bl	8001a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176a:	230f      	movs	r3, #15
 800176c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176e:	2302      	movs	r3, #2
 8001770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800177a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	2105      	movs	r1, #5
 8001788:	4618      	mov	r0, r3
 800178a:	f001 fb77 	bl	8002e7c <HAL_RCC_ClockConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001794:	f000 f96e 	bl	8001a74 <Error_Handler>
  }
}
 8001798:	bf00      	nop
 800179a:	3750      	adds	r7, #80	; 0x50
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40007000 	.word	0x40007000

080017a8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <MX_CRC_Init+0x20>)
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <MX_CRC_Init+0x24>)
 80017b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_CRC_Init+0x20>)
 80017b4:	f000 ff17 	bl	80025e6 <HAL_CRC_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017be:	f000 f959 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20004528 	.word	0x20004528
 80017cc:	40023000 	.word	0x40023000

080017d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d4:	4b17      	ldr	r3, [pc, #92]	; (8001834 <MX_SPI1_Init+0x64>)
 80017d6:	4a18      	ldr	r2, [pc, #96]	; (8001838 <MX_SPI1_Init+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_SPI1_Init+0x64>)
 80017dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e2:	4b14      	ldr	r3, [pc, #80]	; (8001834 <MX_SPI1_Init+0x64>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ee:	4b11      	ldr	r3, [pc, #68]	; (8001834 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <MX_SPI1_Init+0x64>)
 80017fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001800:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <MX_SPI1_Init+0x64>)
 8001804:	2210      	movs	r2, #16
 8001806:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001808:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <MX_SPI1_Init+0x64>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_SPI1_Init+0x64>)
 8001810:	2200      	movs	r2, #0
 8001812:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <MX_SPI1_Init+0x64>)
 8001816:	2200      	movs	r2, #0
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <MX_SPI1_Init+0x64>)
 800181c:	220a      	movs	r2, #10
 800181e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_SPI1_Init+0x64>)
 8001822:	f001 fcf3 	bl	800320c <HAL_SPI_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800182c:	f000 f922 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20004588 	.word	0x20004588
 8001838:	40013000 	.word	0x40013000

0800183c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001840:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <MX_SPI2_Init+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800184c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_SPI2_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_SPI2_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_SPI2_Init+0x64>)
 8001888:	220a      	movs	r2, #10
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_SPI2_Init+0x64>)
 800188e:	f001 fcbd 	bl	800320c <HAL_SPI_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001898:	f000 f8ec 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200044d0 	.word	0x200044d0
 80018a4:	40003800 	.word	0x40003800

080018a8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_SPI3_Init+0x64>)
 80018ae:	4a18      	ldr	r2, [pc, #96]	; (8001910 <MX_SPI3_Init+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b16      	ldr	r3, [pc, #88]	; (800190c <MX_SPI3_Init+0x64>)
 80018b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_SPI3_Init+0x64>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_SPI3_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_SPI3_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_SPI3_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_SPI3_Init+0x64>)
 80018d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SPI3_Init+0x64>)
 80018dc:	2210      	movs	r2, #16
 80018de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <MX_SPI3_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SPI3_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b07      	ldr	r3, [pc, #28]	; (800190c <MX_SPI3_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SPI3_Init+0x64>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80018f8:	4804      	ldr	r0, [pc, #16]	; (800190c <MX_SPI3_Init+0x64>)
 80018fa:	f001 fc87 	bl	800320c <HAL_SPI_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001904:	f000 f8b6 	bl	8001a74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	20004530 	.word	0x20004530
 8001910:	40003c00 	.word	0x40003c00

08001914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <MX_GPIO_Init+0x14c>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b45      	ldr	r3, [pc, #276]	; (8001a60 <MX_GPIO_Init+0x14c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a44      	ldr	r2, [pc, #272]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <MX_GPIO_Init+0x14c>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a36      	ldr	r2, [pc, #216]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <MX_GPIO_Init+0x14c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <MX_GPIO_Init+0x14c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <MX_GPIO_Init+0x14c>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <MX_GPIO_Init+0x14c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	210e      	movs	r1, #14
 80019ba:	482a      	ldr	r0, [pc, #168]	; (8001a64 <MX_GPIO_Init+0x150>)
 80019bc:	f000 ffcc 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2110      	movs	r1, #16
 80019c4:	4828      	ldr	r0, [pc, #160]	; (8001a68 <MX_GPIO_Init+0x154>)
 80019c6:	f000 ffc7 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|SD_CS_Pin, GPIO_PIN_RESET);
 80019ca:	2200      	movs	r2, #0
 80019cc:	f241 0101 	movw	r1, #4097	; 0x1001
 80019d0:	4826      	ldr	r0, [pc, #152]	; (8001a6c <MX_GPIO_Init+0x158>)
 80019d2:	f000 ffc1 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80019dc:	4824      	ldr	r0, [pc, #144]	; (8001a70 <MX_GPIO_Init+0x15c>)
 80019de:	f000 ffbb 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_CS_Pin LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_DC_Pin|LCD_RST_Pin;
 80019e2:	230e      	movs	r3, #14
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	481a      	ldr	r0, [pc, #104]	; (8001a64 <MX_GPIO_Init+0x150>)
 80019fa:	f000 fe11 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_CS_Pin */
  GPIO_InitStruct.Pin = RF_CS_Pin;
 80019fe:	2310      	movs	r3, #16
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_CS_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0314 	add.w	r3, r7, #20
 8001a12:	4619      	mov	r1, r3
 8001a14:	4814      	ldr	r0, [pc, #80]	; (8001a68 <MX_GPIO_Init+0x154>)
 8001a16:	f000 fe03 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 SD_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SD_CS_Pin;
 8001a1a:	f241 0301 	movw	r3, #4097	; 0x1001
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	480e      	ldr	r0, [pc, #56]	; (8001a6c <MX_GPIO_Init+0x158>)
 8001a34:	f000 fdf4 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a38:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4807      	ldr	r0, [pc, #28]	; (8001a70 <MX_GPIO_Init+0x15c>)
 8001a52:	f000 fde5 	bl	8002620 <HAL_GPIO_Init>

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020c00 	.word	0x40020c00

08001a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a78:	b672      	cpsid	i
}
 8001a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <Error_Handler+0x8>
	...

08001a80 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8001a8a:	f107 020f 	add.w	r2, r7, #15
 8001a8e:	1df9      	adds	r1, r7, #7
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2301      	movs	r3, #1
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <RC522_SPI_Transfer+0x28>)
 8001a98:	f001 fd7d 	bl	8003596 <HAL_SPI_TransmitReceive>

	return rx_data;
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20004530 	.word	0x20004530

08001aac <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	71fb      	strb	r3, [r7, #7]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2110      	movs	r1, #16
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <Write_MFRC522+0x48>)
 8001ac2:	f000 ff49 	bl	8002958 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff ffd4 	bl	8001a80 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ffd0 	bl	8001a80 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	4803      	ldr	r0, [pc, #12]	; (8001af4 <Write_MFRC522+0x48>)
 8001ae6:	f000 ff37 	bl	8002958 <HAL_GPIO_WritePin>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020000 	.word	0x40020000

08001af8 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2110      	movs	r1, #16
 8001b06:	480f      	ldr	r0, [pc, #60]	; (8001b44 <Read_MFRC522+0x4c>)
 8001b08:	f000 ff26 	bl	8002958 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	b25b      	sxtb	r3, r3
 8001b12:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001b16:	b25b      	sxtb	r3, r3
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b25b      	sxtb	r3, r3
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ffad 	bl	8001a80 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ffaa 	bl	8001a80 <RC522_SPI_Transfer>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	2110      	movs	r1, #16
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <Read_MFRC522+0x4c>)
 8001b36:	f000 ff0f 	bl	8002958 <HAL_GPIO_WritePin>

	return val;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]

}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40020000 	.word	0x40020000

08001b48 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ffcc 	bl	8001af8 <Read_MFRC522>
 8001b60:	4603      	mov	r3, r0
 8001b62:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff9b 	bl	8001aac <Write_MFRC522>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	460a      	mov	r2, r1
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ffb1 	bl	8001af8 <Read_MFRC522>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001b9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	b25a      	sxtb	r2, r3
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	b25b      	sxtb	r3, r3
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff7b 	bl	8001aac <Write_MFRC522>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8001bc2:	2014      	movs	r0, #20
 8001bc4:	f7ff ff98 	bl	8001af8 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8001bc8:	2103      	movs	r1, #3
 8001bca:	2014      	movs	r0, #20
 8001bcc:	f7ff ffbc 	bl	8001b48 <SetBitMask>
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001bd8:	210f      	movs	r1, #15
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7ff ff66 	bl	8001aac <Write_MFRC522>
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	2110      	movs	r1, #16
 8001bec:	4812      	ldr	r0, [pc, #72]	; (8001c38 <MFRC522_Init+0x54>)
 8001bee:	f000 feb3 	bl	8002958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4811      	ldr	r0, [pc, #68]	; (8001c3c <MFRC522_Init+0x58>)
 8001bf8:	f000 feae 	bl	8002958 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8001bfc:	f7ff ffea 	bl	8001bd4 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001c00:	218d      	movs	r1, #141	; 0x8d
 8001c02:	202a      	movs	r0, #42	; 0x2a
 8001c04:	f7ff ff52 	bl	8001aac <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8001c08:	213e      	movs	r1, #62	; 0x3e
 8001c0a:	202b      	movs	r0, #43	; 0x2b
 8001c0c:	f7ff ff4e 	bl	8001aac <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8001c10:	211e      	movs	r1, #30
 8001c12:	202d      	movs	r0, #45	; 0x2d
 8001c14:	f7ff ff4a 	bl	8001aac <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	202c      	movs	r0, #44	; 0x2c
 8001c1c:	f7ff ff46 	bl	8001aac <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8001c20:	2140      	movs	r1, #64	; 0x40
 8001c22:	2015      	movs	r0, #21
 8001c24:	f7ff ff42 	bl	8001aac <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8001c28:	213d      	movs	r1, #61	; 0x3d
 8001c2a:	2011      	movs	r0, #17
 8001c2c:	f7ff ff3e 	bl	8001aac <Write_MFRC522>

	AntennaOn();
 8001c30:	f7ff ffc5 	bl	8001bbe <AntennaOn>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400

08001c40 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8001c40:	b590      	push	{r4, r7, lr}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8001c52:	2302      	movs	r3, #2
 8001c54:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d006      	beq.n	8001c72 <MFRC522_ToCard+0x32>
 8001c64:	2b0e      	cmp	r3, #14
 8001c66:	d109      	bne.n	8001c7c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8001c68:	2312      	movs	r3, #18
 8001c6a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001c6c:	2310      	movs	r3, #16
 8001c6e:	777b      	strb	r3, [r7, #29]
			break;
 8001c70:	e005      	b.n	8001c7e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8001c72:	2377      	movs	r3, #119	; 0x77
 8001c74:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001c76:	2330      	movs	r3, #48	; 0x30
 8001c78:	777b      	strb	r3, [r7, #29]
			break;
 8001c7a:	e000      	b.n	8001c7e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001c7c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8001c7e:	7fbb      	ldrb	r3, [r7, #30]
 8001c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	4619      	mov	r1, r3
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f7ff ff0f 	bl	8001aac <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	2004      	movs	r0, #4
 8001c92:	f7ff ff74 	bl	8001b7e <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f7ff ff55 	bl	8001b48 <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff ff03 	bl	8001aac <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	e00a      	b.n	8001cc2 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2009      	movs	r0, #9
 8001cb8:	f7ff fef8 	bl	8001aac <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3f0      	bcc.n	8001cac <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7ff feec 	bl	8001aac <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d103      	bne.n	8001ce2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	200d      	movs	r0, #13
 8001cde:	f7ff ff33 	bl	8001b48 <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001ce2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ce6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001ce8:	2004      	movs	r0, #4
 8001cea:	f7ff ff05 	bl	8001af8 <Read_MFRC522>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	773b      	strb	r3, [r7, #28]
        i--;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <MFRC522_ToCard+0xd4>
 8001cfe:	7f3b      	ldrb	r3, [r7, #28]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <MFRC522_ToCard+0xd4>
 8001d08:	7f3a      	ldrb	r2, [r7, #28]
 8001d0a:	7f7b      	ldrb	r3, [r7, #29]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0e9      	beq.n	8001ce8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	200d      	movs	r0, #13
 8001d18:	f7ff ff31 	bl	8001b7e <ClearBitMask>

    if (i != 0)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d052      	beq.n	8001dc8 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001d22:	2006      	movs	r0, #6
 8001d24:	f7ff fee8 	bl	8001af8 <Read_MFRC522>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f003 031b 	and.w	r3, r3, #27
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d148      	bne.n	8001dc4 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001d36:	7f3a      	ldrb	r2, [r7, #28]
 8001d38:	7fbb      	ldrb	r3, [r7, #30]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	d13b      	bne.n	8001dc8 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001d50:	200a      	movs	r0, #10
 8001d52:	f7ff fed1 	bl	8001af8 <Read_MFRC522>
 8001d56:	4603      	mov	r3, r0
 8001d58:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001d5a:	200c      	movs	r0, #12
 8001d5c:	f7ff fecc 	bl	8001af8 <Read_MFRC522>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8001d6e:	7f3b      	ldrb	r3, [r7, #28]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	00da      	lsls	r2, r3, #3
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	4413      	add	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e004      	b.n	8001d8a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8001d80:	7f3b      	ldrb	r3, [r7, #28]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	461a      	mov	r2, r3
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001d8a:	7f3b      	ldrb	r3, [r7, #28]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001d94:	7f3b      	ldrb	r3, [r7, #28]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d901      	bls.n	8001d9e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
 8001da2:	e00a      	b.n	8001dba <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	18d4      	adds	r4, r2, r3
 8001daa:	2009      	movs	r0, #9
 8001dac:	f7ff fea4 	bl	8001af8 <Read_MFRC522>
 8001db0:	4603      	mov	r3, r0
 8001db2:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	3301      	adds	r3, #1
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	7f3b      	ldrb	r3, [r7, #28]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3f0      	bcc.n	8001da4 <MFRC522_ToCard+0x164>
 8001dc2:	e001      	b.n	8001dc8 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8001dc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}

08001dd2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af02      	add	r7, sp, #8
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6039      	str	r1, [r7, #0]
 8001ddc:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8001dde:	2107      	movs	r1, #7
 8001de0:	200d      	movs	r0, #13
 8001de2:	f7ff fe63 	bl	8001aac <Write_MFRC522>

	TagType[0] = reqMode;
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	79fa      	ldrb	r2, [r7, #7]
 8001dea:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	200c      	movs	r0, #12
 8001dfa:	f7ff ff21 	bl	8001c40 <MFRC522_ToCard>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <MFRC522_Request+0x3c>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b10      	cmp	r3, #16
 8001e0c:	d001      	beq.n	8001e12 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	200d      	movs	r0, #13
 8001e2c:	f7ff fe3e 	bl	8001aac <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2293      	movs	r2, #147	; 0x93
 8001e34:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	200c      	movs	r0, #12
 8001e4c:	f7ff fef8 	bl	8001c40 <MFRC522_ToCard>
 8001e50:	4603      	mov	r3, r0
 8001e52:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d118      	bne.n	8001e8c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]
 8001e5e:	e009      	b.n	8001e74 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	7b7b      	ldrb	r3, [r7, #13]
 8001e6a:	4053      	eors	r3, r2
 8001e6c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	3301      	adds	r3, #1
 8001e72:	73bb      	strb	r3, [r7, #14]
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d9f2      	bls.n	8001e60 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001e7a:	7bbb      	ldrb	r3, [r7, #14]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	7b7a      	ldrb	r2, [r7, #13]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	; 0x44
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a08      	ldr	r2, [pc, #32]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ed6:	2007      	movs	r0, #7
 8001ed8:	f000 fb52 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0b      	ldr	r2, [pc, #44]	; (8001f24 <HAL_CRC_MspInit+0x3c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10d      	bne.n	8001f16 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_CRC_MspInit+0x40>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <HAL_CRC_MspInit+0x40>)
 8001f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <HAL_CRC_MspInit+0x40>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40023000 	.word	0x40023000
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	; 0x38
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	; (800207c <HAL_SPI_MspInit+0x150>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12c      	bne.n	8001fa8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a4a      	ldr	r2, [pc, #296]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b48      	ldr	r3, [pc, #288]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	4b44      	ldr	r3, [pc, #272]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a43      	ldr	r2, [pc, #268]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	61fb      	str	r3, [r7, #28]
 8001f84:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	23e0      	movs	r3, #224	; 0xe0
 8001f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f96:	2305      	movs	r3, #5
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4838      	ldr	r0, [pc, #224]	; (8002084 <HAL_SPI_MspInit+0x158>)
 8001fa2:	f000 fb3d 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fa6:	e064      	b.n	8002072 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a36      	ldr	r2, [pc, #216]	; (8002088 <HAL_SPI_MspInit+0x15c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d12d      	bne.n	800200e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	4b32      	ldr	r3, [pc, #200]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a31      	ldr	r2, [pc, #196]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a2a      	ldr	r2, [pc, #168]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	4821      	ldr	r0, [pc, #132]	; (800208c <HAL_SPI_MspInit+0x160>)
 8002008:	f000 fb0a 	bl	8002620 <HAL_GPIO_Init>
}
 800200c:	e031      	b.n	8002072 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1f      	ldr	r2, [pc, #124]	; (8002090 <HAL_SPI_MspInit+0x164>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d12c      	bne.n	8002072 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_SPI_MspInit+0x154>)
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	4a17      	ldr	r2, [pc, #92]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8002022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002026:	6413      	str	r3, [r2, #64]	; 0x40
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_SPI_MspInit+0x154>)
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <HAL_SPI_MspInit+0x154>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	4a10      	ldr	r2, [pc, #64]	; (8002080 <HAL_SPI_MspInit+0x154>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	6313      	str	r3, [r2, #48]	; 0x30
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_SPI_MspInit+0x154>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002050:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002062:	2306      	movs	r3, #6
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206a:	4619      	mov	r1, r3
 800206c:	4809      	ldr	r0, [pc, #36]	; (8002094 <HAL_SPI_MspInit+0x168>)
 800206e:	f000 fad7 	bl	8002620 <HAL_GPIO_Init>
}
 8002072:	bf00      	nop
 8002074:	3738      	adds	r7, #56	; 0x38
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40013000 	.word	0x40013000
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000
 8002088:	40003800 	.word	0x40003800
 800208c:	40020400 	.word	0x40020400
 8002090:	40003c00 	.word	0x40003c00
 8002094:	40020800 	.word	0x40020800

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 f956 	bl	8002394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	return 1;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <_kill>:

int _kill(int pid, int sig)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002106:	f00e ffad 	bl	8011064 <__errno>
 800210a:	4603      	mov	r3, r0
 800210c:	2216      	movs	r2, #22
 800210e:	601a      	str	r2, [r3, #0]
	return -1;
 8002110:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <_exit>:

void _exit (int status)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ffe7 	bl	80020fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800212e:	e7fe      	b.n	800212e <_exit+0x12>

08002130 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	e00a      	b.n	8002158 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002142:	f3af 8000 	nop.w
 8002146:	4601      	mov	r1, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	60ba      	str	r2, [r7, #8]
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbf0      	blt.n	8002142 <_read+0x12>
	}

return len;
 8002160:	687b      	ldr	r3, [r7, #4]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e009      	b.n	8002190 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	60ba      	str	r2, [r7, #8]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	dbf1      	blt.n	800217c <_write+0x12>
	}
	return len;
 8002198:	687b      	ldr	r3, [r7, #4]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_close>:

int _close(int file)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
	return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021ca:	605a      	str	r2, [r3, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_isatty>:

int _isatty(int file)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
	return 1;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002214:	4a14      	ldr	r2, [pc, #80]	; (8002268 <_sbrk+0x5c>)
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <_sbrk+0x60>)
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <_sbrk+0x64>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <_sbrk+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <_sbrk+0x64>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d207      	bcs.n	800224c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800223c:	f00e ff12 	bl	8011064 <__errno>
 8002240:	4603      	mov	r3, r0
 8002242:	220c      	movs	r2, #12
 8002244:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	e009      	b.n	8002260 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <_sbrk+0x64>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <_sbrk+0x64>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a05      	ldr	r2, [pc, #20]	; (8002270 <_sbrk+0x64>)
 800225c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20020000 	.word	0x20020000
 800226c:	00000400 	.word	0x00000400
 8002270:	200029ac 	.word	0x200029ac
 8002274:	20004c10 	.word	0x20004c10

08002278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <SystemInit+0x20>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <SystemInit+0x20>)
 8002284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800229c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022a0:	480d      	ldr	r0, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022a2:	490e      	ldr	r1, [pc, #56]	; (80022dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022b8:	4c0b      	ldr	r4, [pc, #44]	; (80022e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022c6:	f7ff ffd7 	bl	8002278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f00e fed1 	bl	8011070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ce:	f7ff f9e9 	bl	80016a4 <main>
  bx  lr    
 80022d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80022e0:	080145a8 	.word	0x080145a8
  ldr r2, =_sbss
 80022e4:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80022e8:	20004c10 	.word	0x20004c10

080022ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_Init+0x40>)
 80022fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_Init+0x40>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_Init+0x40>)
 8002306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800230a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_Init+0x40>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a07      	ldr	r2, [pc, #28]	; (8002330 <HAL_Init+0x40>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002318:	2003      	movs	r0, #3
 800231a:	f000 f931 	bl	8002580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231e:	2000      	movs	r0, #0
 8002320:	f000 f808 	bl	8002334 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002324:	f7ff fdb8 	bl	8001e98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_InitTick+0x54>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_InitTick+0x58>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234a:	fbb3 f3f1 	udiv	r3, r3, r1
 800234e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f93b 	bl	80025ce <HAL_SYSTICK_Config>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e00e      	b.n	8002380 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0f      	cmp	r3, #15
 8002366:	d80a      	bhi.n	800237e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002368:	2200      	movs	r2, #0
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f000 f911 	bl	8002596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002374:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_InitTick+0x5c>)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000004 	.word	0x20000004
 800238c:	2000000c 	.word	0x2000000c
 8002390:	20000008 	.word	0x20000008

08002394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002398:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_IncTick+0x20>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_IncTick+0x24>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <HAL_IncTick+0x24>)
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	2000000c 	.word	0x2000000c
 80023b8:	200045e0 	.word	0x200045e0

080023bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return uwTick;
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <HAL_GetTick+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	200045e0 	.word	0x200045e0

080023d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023dc:	f7ff ffee 	bl	80023bc <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ec:	d005      	beq.n	80023fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ee:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_Delay+0x44>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffde 	bl	80023bc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d8f7      	bhi.n	80023fc <HAL_Delay+0x28>
  {
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	2000000c 	.word	0x2000000c

0800241c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002438:	4013      	ands	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800244c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800244e:	4a04      	ldr	r2, [pc, #16]	; (8002460 <__NVIC_SetPriorityGrouping+0x44>)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	60d3      	str	r3, [r2, #12]
}
 8002454:	bf00      	nop
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <__NVIC_GetPriorityGrouping+0x18>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	f003 0307 	and.w	r3, r3, #7
}
 8002472:	4618      	mov	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800248c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	db0a      	blt.n	80024aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	b2da      	uxtb	r2, r3
 8002498:	490c      	ldr	r1, [pc, #48]	; (80024cc <__NVIC_SetPriority+0x4c>)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	440b      	add	r3, r1
 80024a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a8:	e00a      	b.n	80024c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	4908      	ldr	r1, [pc, #32]	; (80024d0 <__NVIC_SetPriority+0x50>)
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	3b04      	subs	r3, #4
 80024b8:	0112      	lsls	r2, r2, #4
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	440b      	add	r3, r1
 80024be:	761a      	strb	r2, [r3, #24]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b089      	sub	sp, #36	; 0x24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f1c3 0307 	rsb	r3, r3, #7
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	bf28      	it	cs
 80024f2:	2304      	movcs	r3, #4
 80024f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2b06      	cmp	r3, #6
 80024fc:	d902      	bls.n	8002504 <NVIC_EncodePriority+0x30>
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	3b03      	subs	r3, #3
 8002502:	e000      	b.n	8002506 <NVIC_EncodePriority+0x32>
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002508:	f04f 32ff 	mov.w	r2, #4294967295
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43da      	mvns	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	401a      	ands	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800251c:	f04f 31ff 	mov.w	r1, #4294967295
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fa01 f303 	lsl.w	r3, r1, r3
 8002526:	43d9      	mvns	r1, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252c:	4313      	orrs	r3, r2
         );
}
 800252e:	4618      	mov	r0, r3
 8002530:	3724      	adds	r7, #36	; 0x24
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
	...

0800253c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800254c:	d301      	bcc.n	8002552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254e:	2301      	movs	r3, #1
 8002550:	e00f      	b.n	8002572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <SysTick_Config+0x40>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255a:	210f      	movs	r1, #15
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f7ff ff8e 	bl	8002480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <SysTick_Config+0x40>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <SysTick_Config+0x40>)
 800256c:	2207      	movs	r2, #7
 800256e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	e000e010 	.word	0xe000e010

08002580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff47 	bl	800241c <__NVIC_SetPriorityGrouping>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a8:	f7ff ff5c 	bl	8002464 <__NVIC_GetPriorityGrouping>
 80025ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f7ff ff8e 	bl	80024d4 <NVIC_EncodePriority>
 80025b8:	4602      	mov	r2, r0
 80025ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff5d 	bl	8002480 <__NVIC_SetPriority>
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffb0 	bl	800253c <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e00e      	b.n	8002616 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	795b      	ldrb	r3, [r3, #5]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fc6d 	bl	8001ee8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e16b      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 815a 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b4 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	; (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae90 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e264      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d075      	beq.n	8002a96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029aa:	4ba3      	ldr	r3, [pc, #652]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b6:	4ba0      	ldr	r3, [pc, #640]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d112      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029c2:	4b9d      	ldr	r3, [pc, #628]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ce:	d10b      	bne.n	80029e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	4b99      	ldr	r3, [pc, #612]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d05b      	beq.n	8002a94 <HAL_RCC_OscConfig+0x108>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d157      	bne.n	8002a94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e23f      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d106      	bne.n	8002a00 <HAL_RCC_OscConfig+0x74>
 80029f2:	4b91      	ldr	r3, [pc, #580]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a90      	ldr	r2, [pc, #576]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e01d      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x98>
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b88      	ldr	r3, [pc, #544]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a87      	ldr	r2, [pc, #540]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0xb0>
 8002a24:	4b84      	ldr	r3, [pc, #528]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a83      	ldr	r2, [pc, #524]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a80      	ldr	r2, [pc, #512]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7ff fcba 	bl	80023bc <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fcb6 	bl	80023bc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	; 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e204      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a5e:	4b76      	ldr	r3, [pc, #472]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0xc0>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff fca6 	bl	80023bc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff fca2 	bl	80023bc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1f0      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a86:	4b6c      	ldr	r3, [pc, #432]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0xe8>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d063      	beq.n	8002b6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aae:	4b62      	ldr	r3, [pc, #392]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d11c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d116      	bne.n	8002af4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d001      	beq.n	8002ade <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e1c4      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4952      	ldr	r1, [pc, #328]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af2:	e03a      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d020      	beq.n	8002b3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002afc:	4b4f      	ldr	r3, [pc, #316]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b02:	f7ff fc5b 	bl	80023bc <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b0a:	f7ff fc57 	bl	80023bc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1a5      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1c:	4b46      	ldr	r3, [pc, #280]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4940      	ldr	r1, [pc, #256]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	600b      	str	r3, [r1, #0]
 8002b3c:	e015      	b.n	8002b6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b3e:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x2b0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7ff fc3a 	bl	80023bc <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fc36 	bl	80023bc <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e184      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b5e:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d030      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff fc1a 	bl	80023bc <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b8c:	f7ff fc16 	bl	80023bc <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e164      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0f0      	beq.n	8002b8c <HAL_RCC_OscConfig+0x200>
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <HAL_RCC_OscConfig+0x2b4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb2:	f7ff fc03 	bl	80023bc <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bba:	f7ff fbff 	bl	80023bc <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e14d      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bcc:	4b1a      	ldr	r3, [pc, #104]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bea:	4b13      	ldr	r3, [pc, #76]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10f      	bne.n	8002c16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c12:	2301      	movs	r3, #1
 8002c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d121      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x2b8>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2e:	f7ff fbc5 	bl	80023bc <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	e011      	b.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	42470000 	.word	0x42470000
 8002c40:	42470e80 	.word	0x42470e80
 8002c44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c48:	f7ff fbb8 	bl	80023bc <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e106      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5a:	4b85      	ldr	r3, [pc, #532]	; (8002e70 <HAL_RCC_OscConfig+0x4e4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d106      	bne.n	8002c7c <HAL_RCC_OscConfig+0x2f0>
 8002c6e:	4b81      	ldr	r3, [pc, #516]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a80      	ldr	r2, [pc, #512]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x312>
 8002c84:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a7a      	ldr	r2, [pc, #488]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c90:	4b78      	ldr	r3, [pc, #480]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4a77      	ldr	r2, [pc, #476]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x32a>
 8002c9e:	4b75      	ldr	r3, [pc, #468]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	4a74      	ldr	r2, [pc, #464]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a71      	ldr	r2, [pc, #452]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7ff fb7d 	bl	80023bc <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7ff fb79 	bl	80023bc <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0c5      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x33a>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cea:	f7ff fb67 	bl	80023bc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7ff fb63 	bl	80023bc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0af      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b5a      	ldr	r3, [pc, #360]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b56      	ldr	r3, [pc, #344]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a55      	ldr	r2, [pc, #340]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 809b 	beq.w	8002e66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d05c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d141      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b4c      	ldr	r3, [pc, #304]	; (8002e78 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7ff fb37 	bl	80023bc <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7ff fb33 	bl	80023bc <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e081      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	061b      	lsls	r3, r3, #24
 8002d94:	4937      	ldr	r1, [pc, #220]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_RCC_OscConfig+0x4ec>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7ff fb0c 	bl	80023bc <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da8:	f7ff fb08 	bl	80023bc <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e056      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x41c>
 8002dc6:	e04e      	b.n	8002e66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_RCC_OscConfig+0x4ec>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7ff faf5 	bl	80023bc <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff faf1 	bl	80023bc <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e03f      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x44a>
 8002df4:	e037      	b.n	8002e66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e032      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_RCC_OscConfig+0x4e8>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d028      	beq.n	8002e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d121      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d11a      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e32:	4013      	ands	r3, r2
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d111      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d107      	bne.n	8002e62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d001      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40007000 	.word	0x40007000
 8002e74:	40023800 	.word	0x40023800
 8002e78:	42470060 	.word	0x42470060

08002e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0cc      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e90:	4b68      	ldr	r3, [pc, #416]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d90c      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0b8      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d020      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ed0:	4b59      	ldr	r3, [pc, #356]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a58      	ldr	r2, [pc, #352]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ee8:	4b53      	ldr	r3, [pc, #332]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a52      	ldr	r2, [pc, #328]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	494d      	ldr	r1, [pc, #308]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d044      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d119      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e07f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d003      	beq.n	8002f3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e06f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e067      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f5a:	4b37      	ldr	r3, [pc, #220]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f023 0203 	bic.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4934      	ldr	r1, [pc, #208]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f6c:	f7ff fa26 	bl	80023bc <HAL_GetTick>
 8002f70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f74:	f7ff fa22 	bl	80023bc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e04f      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8a:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 020c 	and.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d1eb      	bne.n	8002f74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9c:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d20c      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e032      	b.n	800302a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4916      	ldr	r1, [pc, #88]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	490e      	ldr	r1, [pc, #56]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003002:	f000 f821 	bl	8003048 <HAL_RCC_GetSysClockFreq>
 8003006:	4602      	mov	r2, r0
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	490a      	ldr	r1, [pc, #40]	; (800303c <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	5ccb      	ldrb	r3, [r1, r3]
 8003016:	fa22 f303 	lsr.w	r3, r2, r3
 800301a:	4a09      	ldr	r2, [pc, #36]	; (8003040 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f986 	bl	8002334 <HAL_InitTick>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023c00 	.word	0x40023c00
 8003038:	40023800 	.word	0x40023800
 800303c:	08012714 	.word	0x08012714
 8003040:	20000004 	.word	0x20000004
 8003044:	20000008 	.word	0x20000008

08003048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003060:	4b67      	ldr	r3, [pc, #412]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b08      	cmp	r3, #8
 800306a:	d00d      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x40>
 800306c:	2b08      	cmp	r3, #8
 800306e:	f200 80bd 	bhi.w	80031ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x34>
 8003076:	2b04      	cmp	r3, #4
 8003078:	d003      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x3a>
 800307a:	e0b7      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800307c:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800307e:	60bb      	str	r3, [r7, #8]
       break;
 8003080:	e0b7      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003082:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003084:	60bb      	str	r3, [r7, #8]
      break;
 8003086:	e0b4      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003088:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003090:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003092:	4b5b      	ldr	r3, [pc, #364]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d04d      	beq.n	800313a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309e:	4b58      	ldr	r3, [pc, #352]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	461a      	mov	r2, r3
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	ea02 0800 	and.w	r8, r2, r0
 80030b6:	ea03 0901 	and.w	r9, r3, r1
 80030ba:	4640      	mov	r0, r8
 80030bc:	4649      	mov	r1, r9
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	014b      	lsls	r3, r1, #5
 80030c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030cc:	0142      	lsls	r2, r0, #5
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	ebb0 0008 	subs.w	r0, r0, r8
 80030d6:	eb61 0109 	sbc.w	r1, r1, r9
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	018b      	lsls	r3, r1, #6
 80030e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030e8:	0182      	lsls	r2, r0, #6
 80030ea:	1a12      	subs	r2, r2, r0
 80030ec:	eb63 0301 	sbc.w	r3, r3, r1
 80030f0:	f04f 0000 	mov.w	r0, #0
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	00d9      	lsls	r1, r3, #3
 80030fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030fe:	00d0      	lsls	r0, r2, #3
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	eb12 0208 	adds.w	r2, r2, r8
 8003108:	eb43 0309 	adc.w	r3, r3, r9
 800310c:	f04f 0000 	mov.w	r0, #0
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	0259      	lsls	r1, r3, #9
 8003116:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800311a:	0250      	lsls	r0, r2, #9
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	461a      	mov	r2, r3
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	f7fd f8a8 	bl	8000280 <__aeabi_uldivmod>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	4613      	mov	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e04a      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	461a      	mov	r2, r3
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	ea02 0400 	and.w	r4, r2, r0
 8003152:	ea03 0501 	and.w	r5, r3, r1
 8003156:	4620      	mov	r0, r4
 8003158:	4629      	mov	r1, r5
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	014b      	lsls	r3, r1, #5
 8003164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003168:	0142      	lsls	r2, r0, #5
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	1b00      	subs	r0, r0, r4
 8003170:	eb61 0105 	sbc.w	r1, r1, r5
 8003174:	f04f 0200 	mov.w	r2, #0
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	018b      	lsls	r3, r1, #6
 800317e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003182:	0182      	lsls	r2, r0, #6
 8003184:	1a12      	subs	r2, r2, r0
 8003186:	eb63 0301 	sbc.w	r3, r3, r1
 800318a:	f04f 0000 	mov.w	r0, #0
 800318e:	f04f 0100 	mov.w	r1, #0
 8003192:	00d9      	lsls	r1, r3, #3
 8003194:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003198:	00d0      	lsls	r0, r2, #3
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	1912      	adds	r2, r2, r4
 80031a0:	eb45 0303 	adc.w	r3, r5, r3
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0299      	lsls	r1, r3, #10
 80031ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031b2:	0290      	lsls	r0, r2, #10
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	461a      	mov	r2, r3
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	f7fd f85c 	bl	8000280 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4613      	mov	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	3301      	adds	r3, #1
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	60bb      	str	r3, [r7, #8]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031ee:	60bb      	str	r3, [r7, #8]
      break;
 80031f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f2:	68bb      	ldr	r3, [r7, #8]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	00f42400 	.word	0x00f42400
 8003208:	007a1200 	.word	0x007a1200

0800320c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e07b      	b.n	8003316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d108      	bne.n	8003238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800322e:	d009      	beq.n	8003244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
 8003236:	e005      	b.n	8003244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fe64 	bl	8001f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	431a      	orrs	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	ea42 0103 	orr.w	r1, r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0104 	and.w	r1, r3, #4
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f003 0210 	and.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b088      	sub	sp, #32
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_SPI_Transmit+0x22>
 800333c:	2302      	movs	r3, #2
 800333e:	e126      	b.n	800358e <HAL_SPI_Transmit+0x270>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003348:	f7ff f838 	bl	80023bc <HAL_GetTick>
 800334c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800335e:	2302      	movs	r3, #2
 8003360:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003362:	e10b      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_SPI_Transmit+0x52>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003374:	e102      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033bc:	d10f      	bne.n	80033de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d007      	beq.n	80033fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003404:	d14b      	bne.n	800349e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_SPI_Transmit+0xf6>
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d13e      	bne.n	8003492 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	881a      	ldrh	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	1c9a      	adds	r2, r3, #2
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003438:	e02b      	b.n	8003492 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b02      	cmp	r3, #2
 8003446:	d112      	bne.n	800346e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	881a      	ldrh	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	86da      	strh	r2, [r3, #54]	; 0x36
 800346c:	e011      	b.n	8003492 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800346e:	f7fe ffa5 	bl	80023bc <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d803      	bhi.n	8003486 <HAL_SPI_Transmit+0x168>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d102      	bne.n	800348c <HAL_SPI_Transmit+0x16e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003490:	e074      	b.n	800357c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ce      	bne.n	800343a <HAL_SPI_Transmit+0x11c>
 800349c:	e04c      	b.n	8003538 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Transmit+0x18e>
 80034a6:	8afb      	ldrh	r3, [r7, #22]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d140      	bne.n	800352e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034d2:	e02c      	b.n	800352e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d113      	bne.n	800350a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	7812      	ldrb	r2, [r2, #0]
 80034ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	1c5a      	adds	r2, r3, #1
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	; 0x36
 8003508:	e011      	b.n	800352e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350a:	f7fe ff57 	bl	80023bc <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d803      	bhi.n	8003522 <HAL_SPI_Transmit+0x204>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d102      	bne.n	8003528 <HAL_SPI_Transmit+0x20a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800352c:	e026      	b.n	800357c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1cd      	bne.n	80034d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa55 	bl	80039ec <SPI_EndRxTxTransaction>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	77fb      	strb	r3, [r7, #31]
 8003578:	e000      	b.n	800357c <HAL_SPI_Transmit+0x25e>
  }

error:
 800357a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800358c:	7ffb      	ldrb	r3, [r7, #31]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b08c      	sub	sp, #48	; 0x30
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	607a      	str	r2, [r7, #4]
 80035a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_SPI_TransmitReceive+0x26>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e18a      	b.n	80038d2 <HAL_SPI_TransmitReceive+0x33c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c4:	f7fe fefa 	bl	80023bc <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035da:	887b      	ldrh	r3, [r7, #2]
 80035dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00f      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x70>
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ec:	d107      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_SPI_TransmitReceive+0x68>
 80035f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d003      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80035fe:	2302      	movs	r3, #2
 8003600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003604:	e15b      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x82>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x82>
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800361e:	e14e      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b04      	cmp	r3, #4
 800362a:	d003      	beq.n	8003634 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2205      	movs	r2, #5
 8003630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	887a      	ldrh	r2, [r7, #2]
 8003656:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	d007      	beq.n	8003688 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003690:	d178      	bne.n	8003784 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_TransmitReceive+0x10a>
 800369a:	8b7b      	ldrh	r3, [r7, #26]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d166      	bne.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	1c9a      	adds	r2, r3, #2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036c4:	e053      	b.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d11b      	bne.n	800370c <HAL_SPI_TransmitReceive+0x176>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036d8:	b29b      	uxth	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_SPI_TransmitReceive+0x176>
 80036de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d113      	bne.n	800370c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d119      	bne.n	800374e <HAL_SPI_TransmitReceive+0x1b8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d014      	beq.n	800374e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372e:	b292      	uxth	r2, r2
 8003730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	1c9a      	adds	r2, r3, #2
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800374a:	2301      	movs	r3, #1
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800374e:	f7fe fe35 	bl	80023bc <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800375a:	429a      	cmp	r2, r3
 800375c:	d807      	bhi.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d003      	beq.n	800376e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800376c:	e0a7      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1a6      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x130>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1a1      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0x130>
 8003782:	e07c      	b.n	800387e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x1fc>
 800378c:	8b7b      	ldrh	r3, [r7, #26]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d16b      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	7812      	ldrb	r2, [r2, #0]
 800379e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037b8:	e057      	b.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d11c      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d017      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d114      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	330c      	adds	r3, #12
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d119      	bne.n	8003844 <HAL_SPI_TransmitReceive+0x2ae>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003836:	b29b      	uxth	r3, r3
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003840:	2301      	movs	r3, #1
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003844:	f7fe fdba 	bl	80023bc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_TransmitReceive+0x2c6>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x2cc>
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003868:	e029      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1a2      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x224>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d19d      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8b2 	bl	80039ec <SPI_EndRxTxTransaction>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800389a:	e010      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	e000      	b.n	80038be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3730      	adds	r7, #48	; 0x30
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038ec:	f7fe fd66 	bl	80023bc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038fc:	f7fe fd5e 	bl	80023bc <HAL_GetTick>
 8003900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	0d1b      	lsrs	r3, r3, #20
 800390a:	69fa      	ldr	r2, [r7, #28]
 800390c:	fb02 f303 	mul.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003912:	e054      	b.n	80039be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d050      	beq.n	80039be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800391c:	f7fe fd4e 	bl	80023bc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	429a      	cmp	r2, r3
 800392a:	d902      	bls.n	8003932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d13d      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394a:	d111      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003954:	d004      	beq.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d107      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003978:	d10f      	bne.n	800399a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e017      	b.n	80039de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d19b      	bne.n	8003914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20000004 	.word	0x20000004

080039ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <SPI_EndRxTxTransaction+0x7c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1b      	ldr	r2, [pc, #108]	; (8003a6c <SPI_EndRxTxTransaction+0x80>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0d5b      	lsrs	r3, r3, #21
 8003a04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a16:	d112      	bne.n	8003a3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f7ff ff5a 	bl	80038dc <SPI_WaitFlagStateUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e00f      	b.n	8003a5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a54:	2b80      	cmp	r3, #128	; 0x80
 8003a56:	d0f2      	beq.n	8003a3e <SPI_EndRxTxTransaction+0x52>
 8003a58:	e000      	b.n	8003a5c <SPI_EndRxTxTransaction+0x70>
        break;
 8003a5a:	bf00      	nop
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	165e9f81 	.word	0x165e9f81

08003a70 <MX_FATFS_Init>:

extern Diskio_drvTypeDef  USER_Driver;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003a74:	4904      	ldr	r1, [pc, #16]	; (8003a88 <MX_FATFS_Init+0x18>)
 8003a76:	4805      	ldr	r0, [pc, #20]	; (8003a8c <MX_FATFS_Init+0x1c>)
 8003a78:	f002 fbe8 	bl	800624c <FATFS_LinkDriver>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	461a      	mov	r2, r3
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <MX_FATFS_Init+0x20>)
 8003a82:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200045e4 	.word	0x200045e4
 8003a8c:	20000010 	.word	0x20000010
 8003a90:	200045e8 	.word	0x200045e8

08003a94 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003a98:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd fae1 	bl	8001078 <SD_disk_initialize>
 8003ab6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fbb9 	bl	8001244 <SD_disk_status>
 8003ad2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003aec:	7bf8      	ldrb	r0, [r7, #15]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	f7fd fbbc 	bl	8001270 <SD_disk_read>
 8003af8:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	4603      	mov	r3, r0
 8003b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003b12:	7bf8      	ldrb	r0, [r7, #15]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	f7fd fc13 	bl	8001344 <SD_disk_write>
 8003b1e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	4603      	mov	r3, r0
 8003b30:	603a      	str	r2, [r7, #0]
 8003b32:	71fb      	strb	r3, [r7, #7]
 8003b34:	460b      	mov	r3, r1
 8003b36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003b38:	79b9      	ldrb	r1, [r7, #6]
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd fc84 	bl	800144c <SD_disk_ioctl>
 8003b44:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <disk_status+0x30>)
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	79fa      	ldrb	r2, [r7, #7]
 8003b68:	4905      	ldr	r1, [pc, #20]	; (8003b80 <disk_status+0x30>)
 8003b6a:	440a      	add	r2, r1
 8003b6c:	7a12      	ldrb	r2, [r2, #8]
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4798      	blx	r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	200029d8 	.word	0x200029d8

08003b84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <disk_initialize+0x48>)
 8003b96:	5cd3      	ldrb	r3, [r2, r3]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d111      	bne.n	8003bc0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <disk_initialize+0x48>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <disk_initialize+0x48>)
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	79fa      	ldrb	r2, [r7, #7]
 8003bb2:	4906      	ldr	r1, [pc, #24]	; (8003bcc <disk_initialize+0x48>)
 8003bb4:	440a      	add	r2, r1
 8003bb6:	7a12      	ldrb	r2, [r2, #8]
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200029d8 	.word	0x200029d8

08003bd0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b087      	sub	sp, #28
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4603      	mov	r3, r0
 8003bde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <disk_read+0x3c>)
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	689c      	ldr	r4, [r3, #8]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	4a07      	ldr	r2, [pc, #28]	; (8003c0c <disk_read+0x3c>)
 8003bf0:	4413      	add	r3, r2
 8003bf2:	7a18      	ldrb	r0, [r3, #8]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	47a0      	blx	r4
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd90      	pop	{r4, r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200029d8 	.word	0x200029d8

08003c10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
 8003c1a:	603b      	str	r3, [r7, #0]
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <disk_write+0x3c>)
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	68dc      	ldr	r4, [r3, #12]
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	4a07      	ldr	r2, [pc, #28]	; (8003c4c <disk_write+0x3c>)
 8003c30:	4413      	add	r3, r2
 8003c32:	7a18      	ldrb	r0, [r3, #8]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	47a0      	blx	r4
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200029d8 	.word	0x200029d8

08003c50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	603a      	str	r2, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <disk_ioctl+0x38>)
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	4906      	ldr	r1, [pc, #24]	; (8003c88 <disk_ioctl+0x38>)
 8003c70:	440a      	add	r2, r1
 8003c72:	7a10      	ldrb	r0, [r2, #8]
 8003c74:	79b9      	ldrb	r1, [r7, #6]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4798      	blx	r3
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200029d8 	.word	0x200029d8

08003c8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3301      	adds	r3, #1
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	b21a      	sxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	b21b      	sxth	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	b21b      	sxth	r3, r3
 8003cac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003cae:	89fb      	ldrh	r3, [r7, #14]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3303      	adds	r3, #3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	3202      	adds	r2, #2
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	3201      	adds	r2, #1
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	7812      	ldrb	r2, [r2, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	887a      	ldrh	r2, [r7, #2]
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	701a      	strb	r2, [r3, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	701a      	strb	r2, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	607a      	str	r2, [r7, #4]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	701a      	strb	r2, [r3, #0]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00d      	beq.n	8003dc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	1c53      	adds	r3, r2, #1
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	6179      	str	r1, [r7, #20]
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f1      	bne.n	8003daa <mem_cpy+0x1a>
	}
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003dd2:	b480      	push	{r7}
 8003dd4:	b087      	sub	sp, #28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	60f8      	str	r0, [r7, #12]
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	617a      	str	r2, [r7, #20]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f3      	bne.n	8003de2 <mem_set+0x10>
}
 8003dfa:	bf00      	nop
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	61fa      	str	r2, [r7, #28]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	61ba      	str	r2, [r7, #24]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	1acb      	subs	r3, r1, r3
 8003e34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <mem_cmp+0x40>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0eb      	beq.n	8003e20 <mem_cmp+0x18>

	return r;
 8003e48:	697b      	ldr	r3, [r7, #20]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003e60:	e002      	b.n	8003e68 <chk_chr+0x12>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3301      	adds	r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <chk_chr+0x26>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d1f2      	bne.n	8003e62 <chk_chr+0xc>
	return *str;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003e96:	2300      	movs	r3, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e029      	b.n	8003ef4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003ea0:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <chk_lock+0xb4>)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	4413      	add	r3, r2
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01d      	beq.n	8003eea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003eae:	4a24      	ldr	r2, [pc, #144]	; (8003f40 <chk_lock+0xb4>)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	4413      	add	r3, r2
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d116      	bne.n	8003eee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	; (8003f40 <chk_lock+0xb4>)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d10c      	bne.n	8003eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ed4:	4a1a      	ldr	r2, [pc, #104]	; (8003f40 <chk_lock+0xb4>)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	4413      	add	r3, r2
 8003edc:	3308      	adds	r3, #8
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d102      	bne.n	8003eee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003ee8:	e007      	b.n	8003efa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003eea:	2301      	movs	r3, #1
 8003eec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d9d2      	bls.n	8003ea0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d109      	bne.n	8003f14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <chk_lock+0x80>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d101      	bne.n	8003f10 <chk_lock+0x84>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e010      	b.n	8003f32 <chk_lock+0xa6>
 8003f10:	2312      	movs	r3, #18
 8003f12:	e00e      	b.n	8003f32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d108      	bne.n	8003f2c <chk_lock+0xa0>
 8003f1a:	4a09      	ldr	r2, [pc, #36]	; (8003f40 <chk_lock+0xb4>)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	4413      	add	r3, r2
 8003f22:	330c      	adds	r3, #12
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d101      	bne.n	8003f30 <chk_lock+0xa4>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	e000      	b.n	8003f32 <chk_lock+0xa6>
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	200029b8 	.word	0x200029b8

08003f44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e002      	b.n	8003f56 <enq_lock+0x12>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3301      	adds	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d806      	bhi.n	8003f6a <enq_lock+0x26>
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <enq_lock+0x40>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	4413      	add	r3, r2
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f2      	bne.n	8003f50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	b2db      	uxtb	r3, r3
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	200029b8 	.word	0x200029b8

08003f88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e01f      	b.n	8003fd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003f98:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <inc_lock+0x118>)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d113      	bne.n	8003fd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <inc_lock+0x118>)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	011b      	lsls	r3, r3, #4
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d109      	bne.n	8003fd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003fbe:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <inc_lock+0x118>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d006      	beq.n	8003fe0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d9dc      	bls.n	8003f98 <inc_lock+0x10>
 8003fde:	e000      	b.n	8003fe2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003fe0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d132      	bne.n	800404e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	e002      	b.n	8003ff4 <inc_lock+0x6c>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d806      	bhi.n	8004008 <inc_lock+0x80>
 8003ffa:	4a29      	ldr	r2, [pc, #164]	; (80040a0 <inc_lock+0x118>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	4413      	add	r3, r2
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f2      	bne.n	8003fee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d101      	bne.n	8004012 <inc_lock+0x8a>
 800400e:	2300      	movs	r3, #0
 8004010:	e040      	b.n	8004094 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4922      	ldr	r1, [pc, #136]	; (80040a0 <inc_lock+0x118>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	440b      	add	r3, r1
 800401e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	491e      	ldr	r1, [pc, #120]	; (80040a0 <inc_lock+0x118>)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	440b      	add	r3, r1
 800402c:	3304      	adds	r3, #4
 800402e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	491a      	ldr	r1, [pc, #104]	; (80040a0 <inc_lock+0x118>)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	440b      	add	r3, r1
 800403c:	3308      	adds	r3, #8
 800403e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <inc_lock+0x118>)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	4413      	add	r3, r2
 8004048:	330c      	adds	r3, #12
 800404a:	2200      	movs	r2, #0
 800404c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <inc_lock+0xe0>
 8004054:	4a12      	ldr	r2, [pc, #72]	; (80040a0 <inc_lock+0x118>)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	4413      	add	r3, r2
 800405c:	330c      	adds	r3, #12
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <inc_lock+0xe0>
 8004064:	2300      	movs	r3, #0
 8004066:	e015      	b.n	8004094 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d108      	bne.n	8004080 <inc_lock+0xf8>
 800406e:	4a0c      	ldr	r2, [pc, #48]	; (80040a0 <inc_lock+0x118>)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	4413      	add	r3, r2
 8004076:	330c      	adds	r3, #12
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	e001      	b.n	8004084 <inc_lock+0xfc>
 8004080:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004084:	4906      	ldr	r1, [pc, #24]	; (80040a0 <inc_lock+0x118>)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	440b      	add	r3, r1
 800408c:	330c      	adds	r3, #12
 800408e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	200029b8 	.word	0x200029b8

080040a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	607b      	str	r3, [r7, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d825      	bhi.n	8004104 <dec_lock+0x60>
		n = Files[i].ctr;
 80040b8:	4a17      	ldr	r2, [pc, #92]	; (8004118 <dec_lock+0x74>)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	330c      	adds	r3, #12
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80040c6:	89fb      	ldrh	r3, [r7, #14]
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040cc:	d101      	bne.n	80040d2 <dec_lock+0x2e>
 80040ce:	2300      	movs	r3, #0
 80040d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80040d2:	89fb      	ldrh	r3, [r7, #14]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <dec_lock+0x3a>
 80040d8:	89fb      	ldrh	r3, [r7, #14]
 80040da:	3b01      	subs	r3, #1
 80040dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <dec_lock+0x74>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	4413      	add	r3, r2
 80040e6:	330c      	adds	r3, #12
 80040e8:	89fa      	ldrh	r2, [r7, #14]
 80040ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80040ec:	89fb      	ldrh	r3, [r7, #14]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d105      	bne.n	80040fe <dec_lock+0x5a>
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <dec_lock+0x74>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	4413      	add	r3, r2
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	737b      	strb	r3, [r7, #13]
 8004102:	e001      	b.n	8004108 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004104:	2302      	movs	r3, #2
 8004106:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004108:	7b7b      	ldrb	r3, [r7, #13]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	200029b8 	.word	0x200029b8

0800411c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e010      	b.n	800414c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <clear_lock+0x44>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d105      	bne.n	8004146 <clear_lock+0x2a>
 800413a:	4a09      	ldr	r2, [pc, #36]	; (8004160 <clear_lock+0x44>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	4413      	add	r3, r2
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3301      	adds	r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d9eb      	bls.n	800412a <clear_lock+0xe>
	}
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	200029b8 	.word	0x200029b8

08004164 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	78db      	ldrb	r3, [r3, #3]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d034      	beq.n	80041e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7858      	ldrb	r0, [r3, #1]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004188:	2301      	movs	r3, #1
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	f7ff fd40 	bl	8003c10 <disk_write>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
 800419a:	e022      	b.n	80041e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	1ad2      	subs	r2, r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d217      	bcs.n	80041e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	789b      	ldrb	r3, [r3, #2]
 80041b6:	613b      	str	r3, [r7, #16]
 80041b8:	e010      	b.n	80041dc <sync_window+0x78>
					wsect += fs->fsize;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4413      	add	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7858      	ldrb	r0, [r3, #1]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80041ce:	2301      	movs	r3, #1
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	f7ff fd1d 	bl	8003c10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d8eb      	bhi.n	80041ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d01b      	beq.n	800423c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffad 	bl	8004164 <sync_window>
 800420a:	4603      	mov	r3, r0
 800420c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800420e:	7bfb      	ldrb	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d113      	bne.n	800423c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7858      	ldrb	r0, [r3, #1]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800421e:	2301      	movs	r3, #1
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	f7ff fcd5 	bl	8003bd0 <disk_read>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800422c:	f04f 33ff 	mov.w	r3, #4294967295
 8004230:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ff87 	bl	8004164 <sync_window>
 8004256:	4603      	mov	r3, r0
 8004258:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d158      	bne.n	8004312 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d148      	bne.n	80042fa <sync_fs+0xb2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	791b      	ldrb	r3, [r3, #4]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d144      	bne.n	80042fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3330      	adds	r3, #48	; 0x30
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fda9 	bl	8003dd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3330      	adds	r3, #48	; 0x30
 8004284:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004288:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd38 	bl	8003d02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3330      	adds	r3, #48	; 0x30
 8004296:	4921      	ldr	r1, [pc, #132]	; (800431c <sync_fs+0xd4>)
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fd4d 	bl	8003d38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3330      	adds	r3, #48	; 0x30
 80042a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80042a6:	491e      	ldr	r1, [pc, #120]	; (8004320 <sync_fs+0xd8>)
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fd45 	bl	8003d38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3330      	adds	r3, #48	; 0x30
 80042b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	4619      	mov	r1, r3
 80042bc:	4610      	mov	r0, r2
 80042be:	f7ff fd3b 	bl	8003d38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3330      	adds	r3, #48	; 0x30
 80042c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f7ff fd31 	bl	8003d38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7858      	ldrb	r0, [r3, #1]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	2301      	movs	r3, #1
 80042f0:	f7ff fc8e 	bl	8003c10 <disk_write>
			fs->fsi_flag = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	2200      	movs	r2, #0
 8004300:	2100      	movs	r1, #0
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fca4 	bl	8003c50 <disk_ioctl>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <sync_fs+0xca>
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004312:	7bfb      	ldrb	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	41615252 	.word	0x41615252
 8004320:	61417272 	.word	0x61417272

08004324 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	3b02      	subs	r3, #2
 8004332:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	3b02      	subs	r3, #2
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d301      	bcc.n	8004344 <clust2sect+0x20>
 8004340:	2300      	movs	r3, #0
 8004342:	e008      	b.n	8004356 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	895b      	ldrh	r3, [r3, #10]
 8004348:	461a      	mov	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	fb03 f202 	mul.w	r2, r3, r2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004354:	4413      	add	r3, r2
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d904      	bls.n	8004382 <get_fat+0x20>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d302      	bcc.n	8004388 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004382:	2301      	movs	r3, #1
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e08f      	b.n	80044a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004388:	f04f 33ff 	mov.w	r3, #4294967295
 800438c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d062      	beq.n	800445c <get_fat+0xfa>
 8004396:	2b03      	cmp	r3, #3
 8004398:	dc7c      	bgt.n	8004494 <get_fat+0x132>
 800439a:	2b01      	cmp	r3, #1
 800439c:	d002      	beq.n	80043a4 <get_fat+0x42>
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d042      	beq.n	8004428 <get_fat+0xc6>
 80043a2:	e077      	b.n	8004494 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6a1a      	ldr	r2, [r3, #32]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0a5b      	lsrs	r3, r3, #9
 80043ba:	4413      	add	r3, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f7ff ff14 	bl	80041ec <move_window>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d167      	bne.n	800449a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4413      	add	r3, r2
 80043d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6a1a      	ldr	r2, [r3, #32]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	4413      	add	r3, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	6938      	ldr	r0, [r7, #16]
 80043ec:	f7ff fefe 	bl	80041ec <move_window>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d153      	bne.n	800449e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4413      	add	r3, r2
 8004400:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <get_fat+0xbc>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	e002      	b.n	8004424 <get_fat+0xc2>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	617b      	str	r3, [r7, #20]
			break;
 8004426:	e03f      	b.n	80044a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	6a1a      	ldr	r2, [r3, #32]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	4413      	add	r3, r2
 8004432:	4619      	mov	r1, r3
 8004434:	6938      	ldr	r0, [r7, #16]
 8004436:	f7ff fed9 	bl	80041ec <move_window>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d130      	bne.n	80044a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800444e:	4413      	add	r3, r2
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fc1b 	bl	8003c8c <ld_word>
 8004456:	4603      	mov	r3, r0
 8004458:	617b      	str	r3, [r7, #20]
			break;
 800445a:	e025      	b.n	80044a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6a1a      	ldr	r2, [r3, #32]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	09db      	lsrs	r3, r3, #7
 8004464:	4413      	add	r3, r2
 8004466:	4619      	mov	r1, r3
 8004468:	6938      	ldr	r0, [r7, #16]
 800446a:	f7ff febf 	bl	80041ec <move_window>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d118      	bne.n	80044a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004482:	4413      	add	r3, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fc19 	bl	8003cbc <ld_dword>
 800448a:	4603      	mov	r3, r0
 800448c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004490:	617b      	str	r3, [r7, #20]
			break;
 8004492:	e009      	b.n	80044a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004494:	2301      	movs	r3, #1
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e006      	b.n	80044a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800449a:	bf00      	nop
 800449c:	e004      	b.n	80044a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800449e:	bf00      	nop
 80044a0:	e002      	b.n	80044a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80044a2:	bf00      	nop
 80044a4:	e000      	b.n	80044a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80044a6:	bf00      	nop
		}
	}

	return val;
 80044a8:	697b      	ldr	r3, [r7, #20]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b089      	sub	sp, #36	; 0x24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80044be:	2302      	movs	r3, #2
 80044c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	f240 80d2 	bls.w	800466e <put_fat+0x1bc>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	f080 80cc 	bcs.w	800466e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	f000 8096 	beq.w	800460c <put_fat+0x15a>
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	f300 80cd 	bgt.w	8004680 <put_fat+0x1ce>
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d002      	beq.n	80044f0 <put_fat+0x3e>
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d06e      	beq.n	80045cc <put_fat+0x11a>
 80044ee:	e0c7      	b.n	8004680 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	085b      	lsrs	r3, r3, #1
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4413      	add	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	0a5b      	lsrs	r3, r3, #9
 8004506:	4413      	add	r3, r2
 8004508:	4619      	mov	r1, r3
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fe6e 	bl	80041ec <move_window>
 8004510:	4603      	mov	r3, r0
 8004512:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004514:	7ffb      	ldrb	r3, [r7, #31]
 8004516:	2b00      	cmp	r3, #0
 8004518:	f040 80ab 	bne.w	8004672 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	1c59      	adds	r1, r3, #1
 8004526:	61b9      	str	r1, [r7, #24]
 8004528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452c:	4413      	add	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00d      	beq.n	8004556 <put_fat+0xa4>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	b25b      	sxtb	r3, r3
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	b25a      	sxtb	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	b25b      	sxtb	r3, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	b25b      	sxtb	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e001      	b.n	800455a <put_fat+0xa8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2201      	movs	r2, #1
 8004562:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	0a5b      	lsrs	r3, r3, #9
 800456c:	4413      	add	r3, r2
 800456e:	4619      	mov	r1, r3
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fe3b 	bl	80041ec <move_window>
 8004576:	4603      	mov	r3, r0
 8004578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800457a:	7ffb      	ldrb	r3, [r7, #31]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d17a      	bne.n	8004676 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458c:	4413      	add	r3, r2
 800458e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <put_fat+0xf0>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	091b      	lsrs	r3, r3, #4
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	e00e      	b.n	80045c0 <put_fat+0x10e>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f023 030f 	bic.w	r3, r3, #15
 80045ac:	b25a      	sxtb	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	b25b      	sxtb	r3, r3
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	70da      	strb	r2, [r3, #3]
			break;
 80045ca:	e059      	b.n	8004680 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	4413      	add	r3, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff fe07 	bl	80041ec <move_window>
 80045de:	4603      	mov	r3, r0
 80045e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80045e2:	7ffb      	ldrb	r3, [r7, #31]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d148      	bne.n	800467a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80045f6:	4413      	add	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	b292      	uxth	r2, r2
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb7f 	bl	8003d02 <st_word>
			fs->wflag = 1;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	70da      	strb	r2, [r3, #3]
			break;
 800460a:	e039      	b.n	8004680 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	4413      	add	r3, r2
 8004616:	4619      	mov	r1, r3
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fde7 	bl	80041ec <move_window>
 800461e:	4603      	mov	r3, r0
 8004620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004622:	7ffb      	ldrb	r3, [r7, #31]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d12a      	bne.n	800467e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fb3c 	bl	8003cbc <ld_dword>
 8004644:	4603      	mov	r3, r0
 8004646:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800464a:	4323      	orrs	r3, r4
 800464c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800465c:	4413      	add	r3, r2
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fb69 	bl	8003d38 <st_dword>
			fs->wflag = 1;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	70da      	strb	r2, [r3, #3]
			break;
 800466c:	e008      	b.n	8004680 <put_fat+0x1ce>
		}
	}
 800466e:	bf00      	nop
 8004670:	e006      	b.n	8004680 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004672:	bf00      	nop
 8004674:	e004      	b.n	8004680 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800467e:	bf00      	nop
	return res;
 8004680:	7ffb      	ldrb	r3, [r7, #31]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3724      	adds	r7, #36	; 0x24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}

0800468a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b088      	sub	sp, #32
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d904      	bls.n	80046b0 <remove_chain+0x26>
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d301      	bcc.n	80046b4 <remove_chain+0x2a>
 80046b0:	2302      	movs	r3, #2
 80046b2:	e04b      	b.n	800474c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	69b8      	ldr	r0, [r7, #24]
 80046c2:	f7ff fef6 	bl	80044b2 <put_fat>
 80046c6:	4603      	mov	r3, r0
 80046c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80046ca:	7ffb      	ldrb	r3, [r7, #31]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <remove_chain+0x4a>
 80046d0:	7ffb      	ldrb	r3, [r7, #31]
 80046d2:	e03b      	b.n	800474c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff fe43 	bl	8004362 <get_fat>
 80046dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d031      	beq.n	8004748 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <remove_chain+0x64>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e02e      	b.n	800474c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f4:	d101      	bne.n	80046fa <remove_chain+0x70>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e028      	b.n	800474c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80046fa:	2200      	movs	r2, #0
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	69b8      	ldr	r0, [r7, #24]
 8004700:	f7ff fed7 	bl	80044b2 <put_fat>
 8004704:	4603      	mov	r3, r0
 8004706:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004708:	7ffb      	ldrb	r3, [r7, #31]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <remove_chain+0x88>
 800470e:	7ffb      	ldrb	r3, [r7, #31]
 8004710:	e01c      	b.n	800474c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	3b02      	subs	r3, #2
 800471c:	429a      	cmp	r2, r3
 800471e:	d20b      	bcs.n	8004738 <remove_chain+0xae>
			fs->free_clst++;
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	791b      	ldrb	r3, [r3, #4]
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	429a      	cmp	r2, r3
 8004744:	d3c6      	bcc.n	80046d4 <remove_chain+0x4a>
 8004746:	e000      	b.n	800474a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004748:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10d      	bne.n	8004786 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <create_chain+0x2c>
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	429a      	cmp	r2, r3
 800477e:	d31b      	bcc.n	80047b8 <create_chain+0x64>
 8004780:	2301      	movs	r3, #1
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e018      	b.n	80047b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fdea 	bl	8004362 <get_fat>
 800478e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d801      	bhi.n	800479a <create_chain+0x46>
 8004796:	2301      	movs	r3, #1
 8004798:	e070      	b.n	800487c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d101      	bne.n	80047a6 <create_chain+0x52>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	e06a      	b.n	800487c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d201      	bcs.n	80047b4 <create_chain+0x60>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	e063      	b.n	800487c <create_chain+0x128>
		scl = clst;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	3301      	adds	r3, #1
 80047c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d307      	bcc.n	80047dc <create_chain+0x88>
				ncl = 2;
 80047cc:	2302      	movs	r3, #2
 80047ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d901      	bls.n	80047dc <create_chain+0x88>
 80047d8:	2300      	movs	r3, #0
 80047da:	e04f      	b.n	800487c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fdbf 	bl	8004362 <get_fat>
 80047e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d003      	beq.n	80047fa <create_chain+0xa6>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d101      	bne.n	80047fe <create_chain+0xaa>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	e03e      	b.n	800487c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d1da      	bne.n	80047bc <create_chain+0x68>
 8004806:	2300      	movs	r3, #0
 8004808:	e038      	b.n	800487c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800480a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	69f9      	ldr	r1, [r7, #28]
 8004812:	6938      	ldr	r0, [r7, #16]
 8004814:	f7ff fe4d 	bl	80044b2 <put_fat>
 8004818:	4603      	mov	r3, r0
 800481a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800481c:	7dfb      	ldrb	r3, [r7, #23]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <create_chain+0xe2>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004828:	69fa      	ldr	r2, [r7, #28]
 800482a:	6839      	ldr	r1, [r7, #0]
 800482c:	6938      	ldr	r0, [r7, #16]
 800482e:	f7ff fe40 	bl	80044b2 <put_fat>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <create_chain+0x116>
		fs->last_clst = ncl;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	3b02      	subs	r3, #2
 800484c:	429a      	cmp	r2, r3
 800484e:	d804      	bhi.n	800485a <create_chain+0x106>
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	1e5a      	subs	r2, r3, #1
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	b2da      	uxtb	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	711a      	strb	r2, [r3, #4]
 8004868:	e007      	b.n	800487a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800486a:	7dfb      	ldrb	r3, [r7, #23]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d102      	bne.n	8004876 <create_chain+0x122>
 8004870:	f04f 33ff 	mov.w	r3, #4294967295
 8004874:	e000      	b.n	8004878 <create_chain+0x124>
 8004876:	2301      	movs	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800487a:	69fb      	ldr	r3, [r7, #28]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	3304      	adds	r3, #4
 800489a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	0a5b      	lsrs	r3, r3, #9
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	8952      	ldrh	r2, [r2, #10]
 80048a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1d1a      	adds	r2, r3, #4
 80048ae:	613a      	str	r2, [r7, #16]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <clmt_clust+0x3a>
 80048ba:	2300      	movs	r3, #0
 80048bc:	e010      	b.n	80048e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d307      	bcc.n	80048d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80048d4:	e7e9      	b.n	80048aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80048d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4413      	add	r3, r2
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004902:	d204      	bcs.n	800490e <dir_sdi+0x22>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <dir_sdi+0x26>
		return FR_INT_ERR;
 800490e:	2302      	movs	r3, #2
 8004910:	e063      	b.n	80049da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d106      	bne.n	8004932 <dir_sdi+0x46>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <dir_sdi+0x46>
		clst = fs->dirbase;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10c      	bne.n	8004952 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	8912      	ldrh	r2, [r2, #8]
 8004940:	4293      	cmp	r3, r2
 8004942:	d301      	bcc.n	8004948 <dir_sdi+0x5c>
 8004944:	2302      	movs	r3, #2
 8004946:	e048      	b.n	80049da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	61da      	str	r2, [r3, #28]
 8004950:	e029      	b.n	80049a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	895b      	ldrh	r3, [r3, #10]
 8004956:	025b      	lsls	r3, r3, #9
 8004958:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800495a:	e019      	b.n	8004990 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6979      	ldr	r1, [r7, #20]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fcfe 	bl	8004362 <get_fat>
 8004966:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d101      	bne.n	8004974 <dir_sdi+0x88>
 8004970:	2301      	movs	r3, #1
 8004972:	e032      	b.n	80049da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d904      	bls.n	8004984 <dir_sdi+0x98>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	429a      	cmp	r2, r3
 8004982:	d301      	bcc.n	8004988 <dir_sdi+0x9c>
 8004984:	2302      	movs	r3, #2
 8004986:	e028      	b.n	80049da <dir_sdi+0xee>
			ofs -= csz;
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	429a      	cmp	r2, r3
 8004996:	d2e1      	bcs.n	800495c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	6938      	ldr	r0, [r7, #16]
 800499c:	f7ff fcc2 	bl	8004324 <clust2sect>
 80049a0:	4602      	mov	r2, r0
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <dir_sdi+0xcc>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e010      	b.n	80049da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	0a5b      	lsrs	r3, r3, #9
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3718      	adds	r7, #24
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	3320      	adds	r3, #32
 80049f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <dir_next+0x28>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a08:	d301      	bcc.n	8004a0e <dir_next+0x2c>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e0aa      	b.n	8004b64 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 8098 	bne.w	8004b4a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10b      	bne.n	8004a44 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	8912      	ldrh	r2, [r2, #8]
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f0c0 8088 	bcc.w	8004b4a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	61da      	str	r2, [r3, #28]
 8004a40:	2304      	movs	r3, #4
 8004a42:	e08f      	b.n	8004b64 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	0a5b      	lsrs	r3, r3, #9
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	8952      	ldrh	r2, [r2, #10]
 8004a4c:	3a01      	subs	r2, #1
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d17a      	bne.n	8004b4a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7ff fc80 	bl	8004362 <get_fat>
 8004a62:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d801      	bhi.n	8004a6e <dir_next+0x8c>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e07a      	b.n	8004b64 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d101      	bne.n	8004a7a <dir_next+0x98>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e074      	b.n	8004b64 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d358      	bcc.n	8004b36 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	61da      	str	r2, [r3, #28]
 8004a90:	2304      	movs	r3, #4
 8004a92:	e067      	b.n	8004b64 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7ff fe59 	bl	8004754 <create_chain>
 8004aa2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <dir_next+0xcc>
 8004aaa:	2307      	movs	r3, #7
 8004aac:	e05a      	b.n	8004b64 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <dir_next+0xd6>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e055      	b.n	8004b64 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d101      	bne.n	8004ac4 <dir_next+0xe2>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04f      	b.n	8004b64 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f7ff fb4d 	bl	8004164 <sync_window>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <dir_next+0xf2>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e047      	b.n	8004b64 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3330      	adds	r3, #48	; 0x30
 8004ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff f977 	bl	8003dd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	6979      	ldr	r1, [r7, #20]
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fc1a 	bl	8004324 <clust2sect>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004af6:	e012      	b.n	8004b1e <dir_next+0x13c>
						fs->wflag = 1;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff fb30 	bl	8004164 <sync_window>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <dir_next+0x12c>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e02a      	b.n	8004b64 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	3301      	adds	r3, #1
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	895b      	ldrh	r3, [r3, #10]
 8004b22:	461a      	mov	r2, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d3e6      	bcc.n	8004af8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004b3c:	6979      	ldr	r1, [r7, #20]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff fbf0 	bl	8004324 <clust2sect>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5c:	441a      	add	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff feb4 	bl	80048ec <dir_sdi>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d12b      	bne.n	8004be6 <dir_alloc+0x7a>
		n = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4619      	mov	r1, r3
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7ff fb27 	bl	80041ec <move_window>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11d      	bne.n	8004be4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2be5      	cmp	r3, #229	; 0xe5
 8004bb0:	d004      	beq.n	8004bbc <dir_alloc+0x50>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d107      	bne.n	8004bcc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d102      	bne.n	8004bd0 <dir_alloc+0x64>
 8004bca:	e00c      	b.n	8004be6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff05 	bl	80049e2 <dir_next>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0d7      	beq.n	8004b92 <dir_alloc+0x26>
 8004be2:	e000      	b.n	8004be6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004be4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d101      	bne.n	8004bf0 <dir_alloc+0x84>
 8004bec:	2307      	movs	r3, #7
 8004bee:	75fb      	strb	r3, [r7, #23]
	return res;
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	331a      	adds	r3, #26
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff f83f 	bl	8003c8c <ld_word>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	d109      	bne.n	8004c2e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	3314      	adds	r3, #20
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff f834 	bl	8003c8c <ld_word>
 8004c24:	4603      	mov	r3, r0
 8004c26:	041b      	lsls	r3, r3, #16
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	331a      	adds	r3, #26
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff f857 	bl	8003d02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d109      	bne.n	8004c70 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f103 0214 	add.w	r2, r3, #20
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	0c1b      	lsrs	r3, r3, #16
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	4619      	mov	r1, r3
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	f7ff f849 	bl	8003d02 <st_word>
	}
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004c86:	2100      	movs	r1, #0
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fe2f 	bl	80048ec <dir_sdi>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c92:	7dfb      	ldrb	r3, [r7, #23]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <dir_find+0x24>
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	e03e      	b.n	8004d1a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	6938      	ldr	r0, [r7, #16]
 8004ca4:	f7ff faa2 	bl	80041ec <move_window>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d12f      	bne.n	8004d12 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <dir_find+0x4e>
 8004cc0:	2304      	movs	r3, #4
 8004cc2:	75fb      	strb	r3, [r7, #23]
 8004cc4:	e028      	b.n	8004d18 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	330b      	adds	r3, #11
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	330b      	adds	r3, #11
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <dir_find+0x86>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a18      	ldr	r0, [r3, #32]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3324      	adds	r3, #36	; 0x24
 8004cf0:	220b      	movs	r2, #11
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f7ff f888 	bl	8003e08 <mem_cmp>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004cfe:	2100      	movs	r1, #0
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fe6e 	bl	80049e2 <dir_next>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004d0a:	7dfb      	ldrb	r3, [r7, #23]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0c5      	beq.n	8004c9c <dir_find+0x24>
 8004d10:	e002      	b.n	8004d18 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004d16:	bf00      	nop

	return res;
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004d30:	2101      	movs	r1, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ff1a 	bl	8004b6c <dir_alloc>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11c      	bne.n	8004d7c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	4619      	mov	r1, r3
 8004d48:	68b8      	ldr	r0, [r7, #8]
 8004d4a:	f7ff fa4f 	bl	80041ec <move_window>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004d52:	7bfb      	ldrb	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d111      	bne.n	8004d7c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff f836 	bl	8003dd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a18      	ldr	r0, [r3, #32]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3324      	adds	r3, #36	; 0x24
 8004d6e:	220b      	movs	r2, #11
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7ff f80d 	bl	8003d90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3324      	adds	r3, #36	; 0x24
 8004d9c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004d9e:	220b      	movs	r2, #11
 8004da0:	2120      	movs	r1, #32
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f7ff f815 	bl	8003dd2 <mem_set>
	si = i = 0; ni = 8;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	61fb      	str	r3, [r7, #28]
 8004db0:	2308      	movs	r3, #8
 8004db2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	61fa      	str	r2, [r7, #28]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004dc2:	7efb      	ldrb	r3, [r7, #27]
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d94e      	bls.n	8004e66 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004dc8:	7efb      	ldrb	r3, [r7, #27]
 8004dca:	2b2f      	cmp	r3, #47	; 0x2f
 8004dcc:	d006      	beq.n	8004ddc <create_name+0x54>
 8004dce:	7efb      	ldrb	r3, [r7, #27]
 8004dd0:	2b5c      	cmp	r3, #92	; 0x5c
 8004dd2:	d110      	bne.n	8004df6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004dd4:	e002      	b.n	8004ddc <create_name+0x54>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	61fb      	str	r3, [r7, #28]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b2f      	cmp	r3, #47	; 0x2f
 8004de6:	d0f6      	beq.n	8004dd6 <create_name+0x4e>
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b5c      	cmp	r3, #92	; 0x5c
 8004df2:	d0f0      	beq.n	8004dd6 <create_name+0x4e>
			break;
 8004df4:	e038      	b.n	8004e68 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004df6:	7efb      	ldrb	r3, [r7, #27]
 8004df8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dfa:	d003      	beq.n	8004e04 <create_name+0x7c>
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d30c      	bcc.n	8004e1e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b0b      	cmp	r3, #11
 8004e08:	d002      	beq.n	8004e10 <create_name+0x88>
 8004e0a:	7efb      	ldrb	r3, [r7, #27]
 8004e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e0e:	d001      	beq.n	8004e14 <create_name+0x8c>
 8004e10:	2306      	movs	r3, #6
 8004e12:	e044      	b.n	8004e9e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004e14:	2308      	movs	r3, #8
 8004e16:	613b      	str	r3, [r7, #16]
 8004e18:	230b      	movs	r3, #11
 8004e1a:	617b      	str	r3, [r7, #20]
			continue;
 8004e1c:	e022      	b.n	8004e64 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004e1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da04      	bge.n	8004e30 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004e26:	7efb      	ldrb	r3, [r7, #27]
 8004e28:	3b80      	subs	r3, #128	; 0x80
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <create_name+0x120>)
 8004e2c:	5cd3      	ldrb	r3, [r2, r3]
 8004e2e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004e30:	7efb      	ldrb	r3, [r7, #27]
 8004e32:	4619      	mov	r1, r3
 8004e34:	481d      	ldr	r0, [pc, #116]	; (8004eac <create_name+0x124>)
 8004e36:	f7ff f80e 	bl	8003e56 <chk_chr>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <create_name+0xbc>
 8004e40:	2306      	movs	r3, #6
 8004e42:	e02c      	b.n	8004e9e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004e44:	7efb      	ldrb	r3, [r7, #27]
 8004e46:	2b60      	cmp	r3, #96	; 0x60
 8004e48:	d905      	bls.n	8004e56 <create_name+0xce>
 8004e4a:	7efb      	ldrb	r3, [r7, #27]
 8004e4c:	2b7a      	cmp	r3, #122	; 0x7a
 8004e4e:	d802      	bhi.n	8004e56 <create_name+0xce>
 8004e50:	7efb      	ldrb	r3, [r7, #27]
 8004e52:	3b20      	subs	r3, #32
 8004e54:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	613a      	str	r2, [r7, #16]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	4413      	add	r3, r2
 8004e60:	7efa      	ldrb	r2, [r7, #27]
 8004e62:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004e64:	e7a6      	b.n	8004db4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004e66:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	441a      	add	r2, r3
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <create_name+0xf4>
 8004e78:	2306      	movs	r3, #6
 8004e7a:	e010      	b.n	8004e9e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2be5      	cmp	r3, #229	; 0xe5
 8004e82:	d102      	bne.n	8004e8a <create_name+0x102>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2205      	movs	r2, #5
 8004e88:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004e8a:	7efb      	ldrb	r3, [r7, #27]
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	d801      	bhi.n	8004e94 <create_name+0x10c>
 8004e90:	2204      	movs	r2, #4
 8004e92:	e000      	b.n	8004e96 <create_name+0x10e>
 8004e94:	2200      	movs	r2, #0
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	330b      	adds	r3, #11
 8004e9a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004e9c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08012724 	.word	0x08012724
 8004eac:	0801258c 	.word	0x0801258c

08004eb0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004ec4:	e002      	b.n	8004ecc <follow_path+0x1c>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b2f      	cmp	r3, #47	; 0x2f
 8004ed2:	d0f8      	beq.n	8004ec6 <follow_path+0x16>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b5c      	cmp	r3, #92	; 0x5c
 8004eda:	d0f4      	beq.n	8004ec6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b1f      	cmp	r3, #31
 8004ee8:	d80a      	bhi.n	8004f00 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2280      	movs	r2, #128	; 0x80
 8004eee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff fcf9 	bl	80048ec <dir_sdi>
 8004efa:	4603      	mov	r3, r0
 8004efc:	75fb      	strb	r3, [r7, #23]
 8004efe:	e043      	b.n	8004f88 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f00:	463b      	mov	r3, r7
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7ff ff3f 	bl	8004d88 <create_name>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f0e:	7dfb      	ldrb	r3, [r7, #23]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d134      	bne.n	8004f7e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7ff feaf 	bl	8004c78 <dir_find>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004f24:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d127      	bne.n	8004f82 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d122      	bne.n	8004f82 <follow_path+0xd2>
 8004f3c:	2305      	movs	r3, #5
 8004f3e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004f40:	e01f      	b.n	8004f82 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f42:	7afb      	ldrb	r3, [r7, #11]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d11c      	bne.n	8004f86 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	799b      	ldrb	r3, [r3, #6]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d102      	bne.n	8004f5e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004f58:	2305      	movs	r3, #5
 8004f5a:	75fb      	strb	r3, [r7, #23]
 8004f5c:	e014      	b.n	8004f88 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f6c:	4413      	add	r3, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7ff fe42 	bl	8004bfa <ld_clust>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004f7c:	e7c0      	b.n	8004f00 <follow_path+0x50>
			if (res != FR_OK) break;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <follow_path+0xd8>
				break;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004f86:	bf00      	nop
			}
		}
	}

	return res;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d031      	beq.n	800500c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e002      	b.n	8004fb6 <get_ldnumber+0x24>
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b20      	cmp	r3, #32
 8004fbc:	d903      	bls.n	8004fc6 <get_ldnumber+0x34>
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b3a      	cmp	r3, #58	; 0x3a
 8004fc4:	d1f4      	bne.n	8004fb0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b3a      	cmp	r3, #58	; 0x3a
 8004fcc:	d11c      	bne.n	8005008 <get_ldnumber+0x76>
			tp = *path;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	60fa      	str	r2, [r7, #12]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	3b30      	subs	r3, #48	; 0x30
 8004fde:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b09      	cmp	r3, #9
 8004fe4:	d80e      	bhi.n	8005004 <get_ldnumber+0x72>
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10a      	bne.n	8005004 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <get_ldnumber+0x72>
					vol = (int)i;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	e002      	b.n	800500e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800500c:	693b      	ldr	r3, [r7, #16]
}
 800500e:	4618      	mov	r0, r3
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
	...

0800501c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	70da      	strb	r2, [r3, #3]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f04f 32ff 	mov.w	r2, #4294967295
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff f8d8 	bl	80041ec <move_window>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <check_fs+0x2a>
 8005042:	2304      	movs	r3, #4
 8005044:	e038      	b.n	80050b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3330      	adds	r3, #48	; 0x30
 800504a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fe1c 	bl	8003c8c <ld_word>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <check_fs+0x48>
 8005060:	2303      	movs	r3, #3
 8005062:	e029      	b.n	80050b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800506a:	2be9      	cmp	r3, #233	; 0xe9
 800506c:	d009      	beq.n	8005082 <check_fs+0x66>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005074:	2beb      	cmp	r3, #235	; 0xeb
 8005076:	d11e      	bne.n	80050b6 <check_fs+0x9a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800507e:	2b90      	cmp	r3, #144	; 0x90
 8005080:	d119      	bne.n	80050b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3330      	adds	r3, #48	; 0x30
 8005086:	3336      	adds	r3, #54	; 0x36
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fe17 	bl	8003cbc <ld_dword>
 800508e:	4603      	mov	r3, r0
 8005090:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005094:	4a0a      	ldr	r2, [pc, #40]	; (80050c0 <check_fs+0xa4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d101      	bne.n	800509e <check_fs+0x82>
 800509a:	2300      	movs	r3, #0
 800509c:	e00c      	b.n	80050b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3330      	adds	r3, #48	; 0x30
 80050a2:	3352      	adds	r3, #82	; 0x52
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fe fe09 	bl	8003cbc <ld_dword>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <check_fs+0xa8>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d101      	bne.n	80050b6 <check_fs+0x9a>
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80050b6:	2302      	movs	r3, #2
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	00544146 	.word	0x00544146
 80050c4:	33544146 	.word	0x33544146

080050c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b096      	sub	sp, #88	; 0x58
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7ff ff58 	bl	8004f92 <get_ldnumber>
 80050e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80050e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da01      	bge.n	80050ee <find_volume+0x26>
 80050ea:	230b      	movs	r3, #11
 80050ec:	e22e      	b.n	800554c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80050ee:	4aa8      	ldr	r2, [pc, #672]	; (8005390 <find_volume+0x2c8>)
 80050f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <find_volume+0x3a>
 80050fe:	230c      	movs	r3, #12
 8005100:	e224      	b.n	800554c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005106:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01a      	beq.n	800514e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fd17 	bl	8003b50 <disk_status>
 8005122:	4603      	mov	r3, r0
 8005124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005128:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10c      	bne.n	800514e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <find_volume+0x82>
 800513a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005146:	230a      	movs	r3, #10
 8005148:	e200      	b.n	800554c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800514a:	2300      	movs	r3, #0
 800514c:	e1fe      	b.n	800554c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005156:	b2da      	uxtb	r2, r3
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fd0f 	bl	8003b84 <disk_initialize>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800516c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005178:	2303      	movs	r3, #3
 800517a:	e1e7      	b.n	800554c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <find_volume+0xca>
 8005182:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800518e:	230a      	movs	r3, #10
 8005190:	e1dc      	b.n	800554c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800519a:	f7ff ff3f 	bl	800501c <check_fs>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80051a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d14b      	bne.n	8005244 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80051ac:	2300      	movs	r3, #0
 80051ae:	643b      	str	r3, [r7, #64]	; 0x40
 80051b0:	e01f      	b.n	80051f2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80051c0:	4413      	add	r3, r2
 80051c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	3304      	adds	r3, #4
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <find_volume+0x114>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	3308      	adds	r3, #8
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fd72 	bl	8003cbc <ld_dword>
 80051d8:	4602      	mov	r2, r0
 80051da:	e000      	b.n	80051de <find_volume+0x116>
 80051dc:	2200      	movs	r2, #0
 80051de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80051e6:	440b      	add	r3, r1
 80051e8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80051ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051ee:	3301      	adds	r3, #1
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
 80051f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d9dc      	bls.n	80051b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80051f8:	2300      	movs	r3, #0
 80051fa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80051fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <find_volume+0x140>
 8005202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005204:	3b01      	subs	r3, #1
 8005206:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005210:	4413      	add	r3, r2
 8005212:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005216:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <find_volume+0x162>
 800521e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005220:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005222:	f7ff fefb 	bl	800501c <check_fs>
 8005226:	4603      	mov	r3, r0
 8005228:	e000      	b.n	800522c <find_volume+0x164>
 800522a:	2303      	movs	r3, #3
 800522c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005234:	2b01      	cmp	r3, #1
 8005236:	d905      	bls.n	8005244 <find_volume+0x17c>
 8005238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800523a:	3301      	adds	r3, #1
 800523c:	643b      	str	r3, [r7, #64]	; 0x40
 800523e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005240:	2b03      	cmp	r3, #3
 8005242:	d9e1      	bls.n	8005208 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005248:	2b04      	cmp	r3, #4
 800524a:	d101      	bne.n	8005250 <find_volume+0x188>
 800524c:	2301      	movs	r3, #1
 800524e:	e17d      	b.n	800554c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005254:	2b01      	cmp	r3, #1
 8005256:	d901      	bls.n	800525c <find_volume+0x194>
 8005258:	230d      	movs	r3, #13
 800525a:	e177      	b.n	800554c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800525c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525e:	3330      	adds	r3, #48	; 0x30
 8005260:	330b      	adds	r3, #11
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fd12 	bl	8003c8c <ld_word>
 8005268:	4603      	mov	r3, r0
 800526a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526e:	d001      	beq.n	8005274 <find_volume+0x1ac>
 8005270:	230d      	movs	r3, #13
 8005272:	e16b      	b.n	800554c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	3330      	adds	r3, #48	; 0x30
 8005278:	3316      	adds	r3, #22
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe fd06 	bl	8003c8c <ld_word>
 8005280:	4603      	mov	r3, r0
 8005282:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <find_volume+0x1d0>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	3330      	adds	r3, #48	; 0x30
 800528e:	3324      	adds	r3, #36	; 0x24
 8005290:	4618      	mov	r0, r3
 8005292:	f7fe fd13 	bl	8003cbc <ld_dword>
 8005296:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800529c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	789b      	ldrb	r3, [r3, #2]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d005      	beq.n	80052bc <find_volume+0x1f4>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	789b      	ldrb	r3, [r3, #2]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d001      	beq.n	80052bc <find_volume+0x1f4>
 80052b8:	230d      	movs	r3, #13
 80052ba:	e147      	b.n	800554c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	789b      	ldrb	r3, [r3, #2]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	895b      	ldrh	r3, [r3, #10]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <find_volume+0x228>
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	895b      	ldrh	r3, [r3, #10]
 80052e2:	461a      	mov	r2, r3
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e6:	895b      	ldrh	r3, [r3, #10]
 80052e8:	3b01      	subs	r3, #1
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <find_volume+0x22c>
 80052f0:	230d      	movs	r3, #13
 80052f2:	e12b      	b.n	800554c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	3330      	adds	r3, #48	; 0x30
 80052f8:	3311      	adds	r3, #17
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fcc6 	bl	8003c8c <ld_word>
 8005300:	4603      	mov	r3, r0
 8005302:	461a      	mov	r2, r3
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530a:	891b      	ldrh	r3, [r3, #8]
 800530c:	f003 030f 	and.w	r3, r3, #15
 8005310:	b29b      	uxth	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <find_volume+0x252>
 8005316:	230d      	movs	r3, #13
 8005318:	e118      	b.n	800554c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	3330      	adds	r3, #48	; 0x30
 800531e:	3313      	adds	r3, #19
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe fcb3 	bl	8003c8c <ld_word>
 8005326:	4603      	mov	r3, r0
 8005328:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800532a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532c:	2b00      	cmp	r3, #0
 800532e:	d106      	bne.n	800533e <find_volume+0x276>
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	3330      	adds	r3, #48	; 0x30
 8005334:	3320      	adds	r3, #32
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fcc0 	bl	8003cbc <ld_dword>
 800533c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	3330      	adds	r3, #48	; 0x30
 8005342:	330e      	adds	r3, #14
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fca1 	bl	8003c8c <ld_word>
 800534a:	4603      	mov	r3, r0
 800534c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800534e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005350:	2b00      	cmp	r3, #0
 8005352:	d101      	bne.n	8005358 <find_volume+0x290>
 8005354:	230d      	movs	r3, #13
 8005356:	e0f9      	b.n	800554c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005358:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	4413      	add	r3, r2
 800535e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005360:	8912      	ldrh	r2, [r2, #8]
 8005362:	0912      	lsrs	r2, r2, #4
 8005364:	b292      	uxth	r2, r2
 8005366:	4413      	add	r3, r2
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800536a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	429a      	cmp	r2, r3
 8005370:	d201      	bcs.n	8005376 <find_volume+0x2ae>
 8005372:	230d      	movs	r3, #13
 8005374:	e0ea      	b.n	800554c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800537e:	8952      	ldrh	r2, [r2, #10]
 8005380:	fbb3 f3f2 	udiv	r3, r3, r2
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <find_volume+0x2cc>
 800538c:	230d      	movs	r3, #13
 800538e:	e0dd      	b.n	800554c <find_volume+0x484>
 8005390:	200029b0 	.word	0x200029b0
		fmt = FS_FAT32;
 8005394:	2303      	movs	r3, #3
 8005396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d802      	bhi.n	80053aa <find_volume+0x2e2>
 80053a4:	2302      	movs	r3, #2
 80053a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d802      	bhi.n	80053ba <find_volume+0x2f2>
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053c6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80053c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053cc:	441a      	add	r2, r3
 80053ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80053d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	441a      	add	r2, r3
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80053dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d11e      	bne.n	8005422 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	3330      	adds	r3, #48	; 0x30
 80053e8:	332a      	adds	r3, #42	; 0x2a
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe fc4e 	bl	8003c8c <ld_word>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <find_volume+0x332>
 80053f6:	230d      	movs	r3, #13
 80053f8:	e0a8      	b.n	800554c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	891b      	ldrh	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <find_volume+0x33e>
 8005402:	230d      	movs	r3, #13
 8005404:	e0a2      	b.n	800554c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	3330      	adds	r3, #48	; 0x30
 800540a:	332c      	adds	r3, #44	; 0x2c
 800540c:	4618      	mov	r0, r3
 800540e:	f7fe fc55 	bl	8003cbc <ld_dword>
 8005412:	4602      	mov	r2, r0
 8005414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005416:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	647b      	str	r3, [r7, #68]	; 0x44
 8005420:	e01f      	b.n	8005462 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	891b      	ldrh	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <find_volume+0x366>
 800542a:	230d      	movs	r3, #13
 800542c:	e08e      	b.n	800554c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005434:	441a      	add	r2, r3
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800543a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800543e:	2b02      	cmp	r3, #2
 8005440:	d103      	bne.n	800544a <find_volume+0x382>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	e00a      	b.n	8005460 <find_volume+0x398>
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	695a      	ldr	r2, [r3, #20]
 800544e:	4613      	mov	r3, r2
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	4413      	add	r3, r2
 8005454:	085a      	lsrs	r2, r3, #1
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005460:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005468:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800546c:	0a5b      	lsrs	r3, r3, #9
 800546e:	429a      	cmp	r2, r3
 8005470:	d201      	bcs.n	8005476 <find_volume+0x3ae>
 8005472:	230d      	movs	r3, #13
 8005474:	e06a      	b.n	800554c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005478:	f04f 32ff 	mov.w	r2, #4294967295
 800547c:	611a      	str	r2, [r3, #16]
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2280      	movs	r2, #128	; 0x80
 800548a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800548c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005490:	2b03      	cmp	r3, #3
 8005492:	d149      	bne.n	8005528 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	3330      	adds	r3, #48	; 0x30
 8005498:	3330      	adds	r3, #48	; 0x30
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fbf6 	bl	8003c8c <ld_word>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d140      	bne.n	8005528 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80054a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054a8:	3301      	adds	r3, #1
 80054aa:	4619      	mov	r1, r3
 80054ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ae:	f7fe fe9d 	bl	80041ec <move_window>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d137      	bne.n	8005528 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80054b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ba:	2200      	movs	r2, #0
 80054bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	3330      	adds	r3, #48	; 0x30
 80054c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe fbe0 	bl	8003c8c <ld_word>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d127      	bne.n	8005528 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	3330      	adds	r3, #48	; 0x30
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fbed 	bl	8003cbc <ld_dword>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <find_volume+0x48c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d11e      	bne.n	8005528 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ec:	3330      	adds	r3, #48	; 0x30
 80054ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fbe2 	bl	8003cbc <ld_dword>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <find_volume+0x490>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005502:	3330      	adds	r3, #48	; 0x30
 8005504:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005508:	4618      	mov	r0, r3
 800550a:	f7fe fbd7 	bl	8003cbc <ld_dword>
 800550e:	4602      	mov	r2, r0
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	3330      	adds	r3, #48	; 0x30
 8005518:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800551c:	4618      	mov	r0, r3
 800551e:	f7fe fbcd 	bl	8003cbc <ld_dword>
 8005522:	4602      	mov	r2, r0
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800552e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <find_volume+0x494>)
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	3301      	adds	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	4b08      	ldr	r3, [pc, #32]	; (800555c <find_volume+0x494>)
 800553a:	801a      	strh	r2, [r3, #0]
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <find_volume+0x494>)
 800553e:	881a      	ldrh	r2, [r3, #0]
 8005540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005542:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005546:	f7fe fde9 	bl	800411c <clear_lock>
#endif
	return FR_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3758      	adds	r7, #88	; 0x58
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	41615252 	.word	0x41615252
 8005558:	61417272 	.word	0x61417272
 800555c:	200029b4 	.word	0x200029b4

08005560 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800556a:	2309      	movs	r3, #9
 800556c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01c      	beq.n	80055ae <validate+0x4e>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d018      	beq.n	80055ae <validate+0x4e>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d013      	beq.n	80055ae <validate+0x4e>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	889a      	ldrh	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	88db      	ldrh	r3, [r3, #6]
 8005590:	429a      	cmp	r2, r3
 8005592:	d10c      	bne.n	80055ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fad8 	bl	8003b50 <disk_status>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <validate+0x4e>
			res = FR_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <validate+0x5a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	e000      	b.n	80055bc <validate+0x5c>
 80055ba:	2300      	movs	r3, #0
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	6013      	str	r3, [r2, #0]
	return res;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80055de:	f107 0310 	add.w	r3, r7, #16
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fcd5 	bl	8004f92 <get_ldnumber>
 80055e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	da01      	bge.n	80055f4 <f_mount+0x28>
 80055f0:	230b      	movs	r3, #11
 80055f2:	e02b      	b.n	800564c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80055f4:	4a17      	ldr	r2, [pc, #92]	; (8005654 <f_mount+0x88>)
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d005      	beq.n	8005610 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005604:	69b8      	ldr	r0, [r7, #24]
 8005606:	f7fe fd89 	bl	800411c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	490d      	ldr	r1, [pc, #52]	; (8005654 <f_mount+0x88>)
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <f_mount+0x66>
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <f_mount+0x6a>
 8005632:	2300      	movs	r3, #0
 8005634:	e00a      	b.n	800564c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005636:	f107 010c 	add.w	r1, r7, #12
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	2200      	movs	r2, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fd41 	bl	80050c8 <find_volume>
 8005646:	4603      	mov	r3, r0
 8005648:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800564a:	7dfb      	ldrb	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	200029b0 	.word	0x200029b0

08005658 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b098      	sub	sp, #96	; 0x60
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <f_open+0x18>
 800566c:	2309      	movs	r3, #9
 800566e:	e1ad      	b.n	80059cc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005676:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005678:	79fa      	ldrb	r2, [r7, #7]
 800567a:	f107 0110 	add.w	r1, r7, #16
 800567e:	f107 0308 	add.w	r3, r7, #8
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fd20 	bl	80050c8 <find_volume>
 8005688:	4603      	mov	r3, r0
 800568a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800568e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005692:	2b00      	cmp	r3, #0
 8005694:	f040 8191 	bne.w	80059ba <f_open+0x362>
		dj.obj.fs = fs;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff fc03 	bl	8004eb0 <follow_path>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80056b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d11a      	bne.n	80056ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80056b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056bc:	b25b      	sxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	da03      	bge.n	80056ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80056c2:	2306      	movs	r3, #6
 80056c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80056c8:	e011      	b.n	80056ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fbd2 	bl	8003e8c <chk_lock>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80056ee:	79fb      	ldrb	r3, [r7, #7]
 80056f0:	f003 031c 	and.w	r3, r3, #28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d07f      	beq.n	80057f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80056f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005704:	2b04      	cmp	r3, #4
 8005706:	d10e      	bne.n	8005726 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005708:	f7fe fc1c 	bl	8003f44 <enq_lock>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d006      	beq.n	8005720 <f_open+0xc8>
 8005712:	f107 0314 	add.w	r3, r7, #20
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff fb03 	bl	8004d22 <dir_register>
 800571c:	4603      	mov	r3, r0
 800571e:	e000      	b.n	8005722 <f_open+0xca>
 8005720:	2312      	movs	r3, #18
 8005722:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005726:	79fb      	ldrb	r3, [r7, #7]
 8005728:	f043 0308 	orr.w	r3, r3, #8
 800572c:	71fb      	strb	r3, [r7, #7]
 800572e:	e010      	b.n	8005752 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005730:	7ebb      	ldrb	r3, [r7, #26]
 8005732:	f003 0311 	and.w	r3, r3, #17
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <f_open+0xea>
					res = FR_DENIED;
 800573a:	2307      	movs	r3, #7
 800573c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005740:	e007      	b.n	8005752 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <f_open+0xfa>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005756:	2b00      	cmp	r3, #0
 8005758:	d168      	bne.n	800582c <f_open+0x1d4>
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d063      	beq.n	800582c <f_open+0x1d4>
				dw = GET_FATTIME();
 8005764:	f7fe f996 	bl	8003a94 <get_fattime>
 8005768:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	330e      	adds	r3, #14
 800576e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005770:	4618      	mov	r0, r3
 8005772:	f7fe fae1 	bl	8003d38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005778:	3316      	adds	r3, #22
 800577a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800577c:	4618      	mov	r0, r3
 800577e:	f7fe fadb 	bl	8003d38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	330b      	adds	r3, #11
 8005786:	2220      	movs	r2, #32
 8005788:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800578e:	4611      	mov	r1, r2
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fa32 	bl	8004bfa <ld_clust>
 8005796:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800579c:	2200      	movs	r2, #0
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fa4a 	bl	8004c38 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80057a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a6:	331c      	adds	r3, #28
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fac4 	bl	8003d38 <st_dword>
					fs->wflag = 1;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2201      	movs	r2, #1
 80057b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d037      	beq.n	800582c <f_open+0x1d4>
						dw = fs->winsect;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80057c2:	f107 0314 	add.w	r3, r7, #20
 80057c6:	2200      	movs	r2, #0
 80057c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe ff5d 	bl	800468a <remove_chain>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80057d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d126      	bne.n	800582c <f_open+0x1d4>
							res = move_window(fs, dw);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fe fd02 	bl	80041ec <move_window>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057f2:	3a01      	subs	r2, #1
 80057f4:	60da      	str	r2, [r3, #12]
 80057f6:	e019      	b.n	800582c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80057f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d115      	bne.n	800582c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005800:	7ebb      	ldrb	r3, [r7, #26]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <f_open+0x1ba>
					res = FR_NO_FILE;
 800580a:	2304      	movs	r3, #4
 800580c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005810:	e00c      	b.n	800582c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <f_open+0x1d4>
 800581c:	7ebb      	ldrb	r3, [r7, #26]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <f_open+0x1d4>
						res = FR_DENIED;
 8005826:	2307      	movs	r3, #7
 8005828:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800582c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005830:	2b00      	cmp	r3, #0
 8005832:	d128      	bne.n	8005886 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005844:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800584e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	2b00      	cmp	r3, #0
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	4611      	mov	r1, r2
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fb8b 	bl	8003f88 <inc_lock>
 8005872:	4602      	mov	r2, r0
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <f_open+0x22e>
 8005880:	2302      	movs	r3, #2
 8005882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8095 	bne.w	80059ba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005894:	4611      	mov	r1, r2
 8005896:	4618      	mov	r0, r3
 8005898:	f7ff f9af 	bl	8004bfa <ld_clust>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a4:	331c      	adds	r3, #28
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fa08 	bl	8003cbc <ld_dword>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	88da      	ldrh	r2, [r3, #6]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3330      	adds	r3, #48	; 0x30
 80058e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe fa72 	bl	8003dd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d060      	beq.n	80059ba <f_open+0x362>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05c      	beq.n	80059ba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
 800591c:	e016      	b.n	800594c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe fd1d 	bl	8004362 <get_fat>
 8005928:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800592a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800592c:	2b01      	cmp	r3, #1
 800592e:	d802      	bhi.n	8005936 <f_open+0x2de>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593c:	d102      	bne.n	8005944 <f_open+0x2ec>
 800593e:	2301      	movs	r3, #1
 8005940:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005944:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	657b      	str	r3, [r7, #84]	; 0x54
 800594c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005950:	2b00      	cmp	r3, #0
 8005952:	d103      	bne.n	800595c <f_open+0x304>
 8005954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005958:	429a      	cmp	r2, r3
 800595a:	d8e0      	bhi.n	800591e <f_open+0x2c6>
				}
				fp->clust = clst;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005960:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005966:	2b00      	cmp	r3, #0
 8005968:	d127      	bne.n	80059ba <f_open+0x362>
 800596a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005970:	2b00      	cmp	r3, #0
 8005972:	d022      	beq.n	80059ba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fcd3 	bl	8004324 <clust2sect>
 800597e:	6478      	str	r0, [r7, #68]	; 0x44
 8005980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <f_open+0x336>
						res = FR_INT_ERR;
 8005986:	2302      	movs	r3, #2
 8005988:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800598c:	e015      	b.n	80059ba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800598e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005990:	0a5a      	lsrs	r2, r3, #9
 8005992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005994:	441a      	add	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	7858      	ldrb	r0, [r3, #1]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a1a      	ldr	r2, [r3, #32]
 80059a8:	2301      	movs	r3, #1
 80059aa:	f7fe f911 	bl	8003bd0 <disk_read>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <f_open+0x362>
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80059ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <f_open+0x370>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80059c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3760      	adds	r7, #96	; 0x60
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f107 0214 	add.w	r2, r7, #20
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff fdb3 	bl	8005560 <validate>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d107      	bne.n	8005a18 <f_read+0x44>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	7d5b      	ldrb	r3, [r3, #21]
 8005a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <f_read+0x4a>
 8005a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a1c:	e115      	b.n	8005c4a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	7d1b      	ldrb	r3, [r3, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <f_read+0x5a>
 8005a2a:	2307      	movs	r3, #7
 8005a2c:	e10d      	b.n	8005c4a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f240 80fe 	bls.w	8005c40 <f_read+0x26c>
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005a48:	e0fa      	b.n	8005c40 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f040 80c6 	bne.w	8005be4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	0a5b      	lsrs	r3, r3, #9
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	8952      	ldrh	r2, [r2, #10]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	4013      	ands	r3, r2
 8005a66:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d12f      	bne.n	8005ace <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a7c:	e013      	b.n	8005aa6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d007      	beq.n	8005a96 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7fe fef9 	bl	8004884 <clmt_clust>
 8005a92:	6338      	str	r0, [r7, #48]	; 0x30
 8005a94:	e007      	b.n	8005aa6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f7fe fc5f 	bl	8004362 <get_fat>
 8005aa4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d804      	bhi.n	8005ab6 <f_read+0xe2>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	755a      	strb	r2, [r3, #21]
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e0c9      	b.n	8005c4a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abc:	d104      	bne.n	8005ac8 <f_read+0xf4>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	755a      	strb	r2, [r3, #21]
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0c0      	b.n	8005c4a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005acc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4610      	mov	r0, r2
 8005ad8:	f7fe fc24 	bl	8004324 <clust2sect>
 8005adc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d104      	bne.n	8005aee <f_read+0x11a>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	755a      	strb	r2, [r3, #21]
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0ad      	b.n	8005c4a <f_read+0x276>
			sect += csect;
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d039      	beq.n	8005b76 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b02:	69fa      	ldr	r2, [r7, #28]
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	4413      	add	r3, r2
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	8952      	ldrh	r2, [r2, #10]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d905      	bls.n	8005b1c <f_read+0x148>
					cc = fs->csize - csect;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	895b      	ldrh	r3, [r3, #10]
 8005b14:	461a      	mov	r2, r3
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	7858      	ldrb	r0, [r3, #1]
 8005b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b26:	f7fe f853 	bl	8003bd0 <disk_read>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <f_read+0x166>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	755a      	strb	r2, [r3, #21]
 8005b36:	2301      	movs	r3, #1
 8005b38:	e087      	b.n	8005c4a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	7d1b      	ldrb	r3, [r3, #20]
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da14      	bge.n	8005b6e <f_read+0x19a>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1a      	ldr	r2, [r3, #32]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d90d      	bls.n	8005b6e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	025b      	lsls	r3, r3, #9
 8005b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5e:	18d0      	adds	r0, r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3330      	adds	r3, #48	; 0x30
 8005b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fe f911 	bl	8003d90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	025b      	lsls	r3, r3, #9
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8005b74:	e050      	b.n	8005c18 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d02e      	beq.n	8005bde <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	7d1b      	ldrb	r3, [r3, #20]
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da18      	bge.n	8005bbc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	7858      	ldrb	r0, [r3, #1]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f7fe f839 	bl	8003c10 <disk_write>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <f_read+0x1da>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	755a      	strb	r2, [r3, #21]
 8005baa:	2301      	movs	r3, #1
 8005bac:	e04d      	b.n	8005c4a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	7d1b      	ldrb	r3, [r3, #20]
 8005bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	7858      	ldrb	r0, [r3, #1]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	f7fe f801 	bl	8003bd0 <disk_read>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <f_read+0x20a>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	755a      	strb	r2, [r3, #21]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e035      	b.n	8005c4a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d901      	bls.n	8005bfe <f_read+0x22a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	4413      	add	r3, r2
 8005c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c10:	4619      	mov	r1, r3
 8005c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c14:	f7fe f8bc 	bl	8003d90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	4413      	add	r3, r2
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	619a      	str	r2, [r3, #24]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c32:	441a      	add	r2, r3
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	601a      	str	r2, [r3, #0]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f47f af01 	bne.w	8005a4a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3738      	adds	r7, #56	; 0x38
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005c52:	b580      	push	{r7, lr}
 8005c54:	b086      	sub	sp, #24
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f107 0208 	add.w	r2, r7, #8
 8005c60:	4611      	mov	r1, r2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fc7c 	bl	8005560 <validate>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005c6c:	7dfb      	ldrb	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d168      	bne.n	8005d44 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7d1b      	ldrb	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d062      	beq.n	8005d44 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7d1b      	ldrb	r3, [r3, #20]
 8005c82:	b25b      	sxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	da15      	bge.n	8005cb4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	7858      	ldrb	r0, [r3, #1]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1a      	ldr	r2, [r3, #32]
 8005c96:	2301      	movs	r3, #1
 8005c98:	f7fd ffba 	bl	8003c10 <disk_write>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <f_sync+0x54>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e04f      	b.n	8005d46 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	7d1b      	ldrb	r3, [r3, #20]
 8005caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005cb4:	f7fd feee 	bl	8003a94 <get_fattime>
 8005cb8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7fe fa92 	bl	80041ec <move_window>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005ccc:	7dfb      	ldrb	r3, [r7, #23]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d138      	bne.n	8005d44 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	330b      	adds	r3, #11
 8005cdc:	781a      	ldrb	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	330b      	adds	r3, #11
 8005ce2:	f042 0220 	orr.w	r2, r2, #32
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	f7fe ff9f 	bl	8004c38 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f103 021c 	add.w	r2, r3, #28
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe f816 	bl	8003d38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3316      	adds	r3, #22
 8005d10:	6939      	ldr	r1, [r7, #16]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe f810 	bl	8003d38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3312      	adds	r3, #18
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd ffef 	bl	8003d02 <st_word>
					fs->wflag = 1;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2201      	movs	r2, #1
 8005d28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fe fa8b 	bl	8004248 <sync_fs>
 8005d32:	4603      	mov	r3, r0
 8005d34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7d1b      	ldrb	r3, [r3, #20]
 8005d3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff7b 	bl	8005c52 <f_sync>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d118      	bne.n	8005d98 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f107 0208 	add.w	r2, r7, #8
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff fbf6 	bl	8005560 <validate>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10c      	bne.n	8005d98 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe f98e 	bl	80040a4 <dec_lock>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005d8c:	7bfb      	ldrb	r3, [r7, #15]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b090      	sub	sp, #64	; 0x40
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f107 0208 	add.w	r2, r7, #8
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fbd3 	bl	8005560 <validate>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005dc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d103      	bne.n	8005dd0 <f_lseek+0x2e>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	7d5b      	ldrb	r3, [r3, #21]
 8005dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005dd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d002      	beq.n	8005dde <f_lseek+0x3c>
 8005dd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ddc:	e1e6      	b.n	80061ac <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80d1 	beq.w	8005f8a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d15a      	bne.n	8005ea6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1d1a      	adds	r2, r3, #4
 8005dfa:	627a      	str	r2, [r7, #36]	; 0x24
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2302      	movs	r3, #2
 8005e02:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d03a      	beq.n	8005e86 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	3301      	adds	r3, #1
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fe fa98 	bl	8004362 <get_fat>
 8005e32:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d804      	bhi.n	8005e44 <f_lseek+0xa2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	755a      	strb	r2, [r3, #21]
 8005e40:	2302      	movs	r3, #2
 8005e42:	e1b3      	b.n	80061ac <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d104      	bne.n	8005e56 <f_lseek+0xb4>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	755a      	strb	r2, [r3, #21]
 8005e52:	2301      	movs	r3, #1
 8005e54:	e1aa      	b.n	80061ac <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d0de      	beq.n	8005e1e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8005e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d809      	bhi.n	8005e7c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	1d1a      	adds	r2, r3, #4
 8005e76:	627a      	str	r2, [r7, #36]	; 0x24
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d3c4      	bcc.n	8005e10 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8005e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d803      	bhi.n	8005e9e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e184      	b.n	80061a8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8005e9e:	2311      	movs	r3, #17
 8005ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005ea4:	e180      	b.n	80061a8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d902      	bls.n	8005eb6 <f_lseek+0x114>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8172 	beq.w	80061a8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe fcda 	bl	8004884 <clmt_clust>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	4619      	mov	r1, r3
 8005ede:	4610      	mov	r0, r2
 8005ee0:	f7fe fa20 	bl	8004324 <clust2sect>
 8005ee4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d104      	bne.n	8005ef6 <f_lseek+0x154>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	755a      	strb	r2, [r3, #21]
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e15a      	b.n	80061ac <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	0a5b      	lsrs	r3, r3, #9
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	8952      	ldrh	r2, [r2, #10]
 8005f00:	3a01      	subs	r2, #1
 8005f02:	4013      	ands	r3, r2
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4413      	add	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8148 	beq.w	80061a8 <f_lseek+0x406>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	f000 8142 	beq.w	80061a8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7d1b      	ldrb	r3, [r3, #20]
 8005f28:	b25b      	sxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da18      	bge.n	8005f60 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	7858      	ldrb	r0, [r3, #1]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f7fd fe67 	bl	8003c10 <disk_write>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d004      	beq.n	8005f52 <f_lseek+0x1b0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	755a      	strb	r2, [r3, #21]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e12c      	b.n	80061ac <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	7d1b      	ldrb	r3, [r3, #20]
 8005f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	7858      	ldrb	r0, [r3, #1]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	f7fd fe2f 	bl	8003bd0 <disk_read>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d004      	beq.n	8005f82 <f_lseek+0x1e0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	755a      	strb	r2, [r3, #21]
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e114      	b.n	80061ac <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	621a      	str	r2, [r3, #32]
 8005f88:	e10e      	b.n	80061a8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d908      	bls.n	8005fa6 <f_lseek+0x204>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	7d1b      	ldrb	r3, [r3, #20]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d102      	bne.n	8005fa6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 80a7 	beq.w	800610c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	895b      	ldrh	r3, [r3, #10]
 8005fc2:	025b      	lsls	r3, r3, #9
 8005fc4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	1e5a      	subs	r2, r3, #1
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	1e59      	subs	r1, r3, #1
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d30f      	bcc.n	8006004 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	1e5a      	subs	r2, r3, #1
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	425b      	negs	r3, r3
 8005fec:	401a      	ands	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
 8006002:	e022      	b.n	800604a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	2b00      	cmp	r3, #0
 800600e:	d119      	bne.n	8006044 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fb9d 	bl	8004754 <create_chain>
 800601a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	2b01      	cmp	r3, #1
 8006020:	d104      	bne.n	800602c <f_lseek+0x28a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	755a      	strb	r2, [r3, #21]
 8006028:	2302      	movs	r3, #2
 800602a:	e0bf      	b.n	80061ac <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800602c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d104      	bne.n	800603e <f_lseek+0x29c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	755a      	strb	r2, [r3, #21]
 800603a:	2301      	movs	r3, #1
 800603c:	e0b6      	b.n	80061ac <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006042:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006048:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800604a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05d      	beq.n	800610c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8006050:	e03a      	b.n	80060c8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	441a      	add	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7d1b      	ldrb	r3, [r3, #20]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe fb6c 	bl	8004754 <create_chain>
 800607c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800607e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006080:	2b00      	cmp	r3, #0
 8006082:	d108      	bne.n	8006096 <f_lseek+0x2f4>
							ofs = 0; break;
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	e022      	b.n	80060d0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe f967 	bl	8004362 <get_fat>
 8006094:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d104      	bne.n	80060a8 <f_lseek+0x306>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	755a      	strb	r2, [r3, #21]
 80060a4:	2301      	movs	r3, #1
 80060a6:	e081      	b.n	80061ac <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80060a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d904      	bls.n	80060b8 <f_lseek+0x316>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d304      	bcc.n	80060c2 <f_lseek+0x320>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	755a      	strb	r2, [r3, #21]
 80060be:	2302      	movs	r3, #2
 80060c0:	e074      	b.n	80061ac <f_lseek+0x40a>
					fp->clust = clst;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060c6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d8c0      	bhi.n	8006052 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699a      	ldr	r2, [r3, #24]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	441a      	add	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d012      	beq.n	800610c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe f91a 	bl	8004324 <clust2sect>
 80060f0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80060f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <f_lseek+0x360>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	755a      	strb	r2, [r3, #21]
 80060fe:	2302      	movs	r3, #2
 8006100:	e054      	b.n	80061ac <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	0a5b      	lsrs	r3, r3, #9
 8006106:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006108:	4413      	add	r3, r2
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699a      	ldr	r2, [r3, #24]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	429a      	cmp	r2, r3
 8006116:	d90a      	bls.n	800612e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	7d1b      	ldrb	r3, [r3, #20]
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	b2da      	uxtb	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	2b00      	cmp	r3, #0
 8006138:	d036      	beq.n	80061a8 <f_lseek+0x406>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006140:	429a      	cmp	r2, r3
 8006142:	d031      	beq.n	80061a8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	7d1b      	ldrb	r3, [r3, #20]
 8006148:	b25b      	sxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	da18      	bge.n	8006180 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	7858      	ldrb	r0, [r3, #1]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	2301      	movs	r3, #1
 800615e:	f7fd fd57 	bl	8003c10 <disk_write>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d004      	beq.n	8006172 <f_lseek+0x3d0>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	755a      	strb	r2, [r3, #21]
 800616e:	2301      	movs	r3, #1
 8006170:	e01c      	b.n	80061ac <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	7d1b      	ldrb	r3, [r3, #20]
 8006176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800617a:	b2da      	uxtb	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	7858      	ldrb	r0, [r3, #1]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800618a:	2301      	movs	r3, #1
 800618c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800618e:	f7fd fd1f 	bl	8003bd0 <disk_read>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <f_lseek+0x400>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	755a      	strb	r2, [r3, #21]
 800619e:	2301      	movs	r3, #1
 80061a0:	e004      	b.n	80061ac <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061a6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80061a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3740      	adds	r7, #64	; 0x40
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80061ca:	4b1f      	ldr	r3, [pc, #124]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061cc:	7a5b      	ldrb	r3, [r3, #9]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d131      	bne.n	8006238 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80061d4:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061d6:	7a5b      	ldrb	r3, [r3, #9]
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	461a      	mov	r2, r3
 80061dc:	4b1a      	ldr	r3, [pc, #104]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061de:	2100      	movs	r1, #0
 80061e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061e4:	7a5b      	ldrb	r3, [r3, #9]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	4a17      	ldr	r2, [pc, #92]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061f4:	7a5b      	ldrb	r3, [r3, #9]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 80061fc:	4413      	add	r3, r2
 80061fe:	79fa      	ldrb	r2, [r7, #7]
 8006200:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006202:	4b11      	ldr	r3, [pc, #68]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 8006204:	7a5b      	ldrb	r3, [r3, #9]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	b2d1      	uxtb	r1, r2
 800620c:	4a0e      	ldr	r2, [pc, #56]	; (8006248 <FATFS_LinkDriverEx+0x94>)
 800620e:	7251      	strb	r1, [r2, #9]
 8006210:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006212:	7dbb      	ldrb	r3, [r7, #22]
 8006214:	3330      	adds	r3, #48	; 0x30
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	3301      	adds	r3, #1
 8006220:	223a      	movs	r2, #58	; 0x3a
 8006222:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3302      	adds	r3, #2
 8006228:	222f      	movs	r2, #47	; 0x2f
 800622a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	3303      	adds	r3, #3
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006238:	7dfb      	ldrb	r3, [r7, #23]
}
 800623a:	4618      	mov	r0, r3
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	200029d8 	.word	0x200029d8

0800624c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006256:	2200      	movs	r2, #0
 8006258:	6839      	ldr	r1, [r7, #0]
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7ff ffaa 	bl	80061b4 <FATFS_LinkDriverEx>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <TEXT_Callback>:
 800626a:	b530      	push	{r4, r5, lr}
 800626c:	6845      	ldr	r5, [r0, #4]
 800626e:	4604      	mov	r4, r0
 8006270:	b085      	sub	sp, #20
 8006272:	4628      	mov	r0, r5
 8006274:	4621      	mov	r1, r4
 8006276:	f008 f847 	bl	800e308 <WIDGET_HandleActive>
 800627a:	2800      	cmp	r0, #0
 800627c:	d056      	beq.n	800632c <TEXT_Callback+0xc2>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d01e      	beq.n	80062c2 <TEXT_Callback+0x58>
 8006284:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006288:	d00e      	beq.n	80062a8 <TEXT_Callback+0x3e>
 800628a:	2b0b      	cmp	r3, #11
 800628c:	d14b      	bne.n	8006326 <TEXT_Callback+0xbc>
 800628e:	4628      	mov	r0, r5
 8006290:	f007 fd78 	bl	800dd84 <GUI_ALLOC_LockH>
 8006294:	ad04      	add	r5, sp, #16
 8006296:	f845 0d08 	str.w	r0, [r5, #-8]!
 800629a:	3044      	adds	r0, #68	; 0x44
 800629c:	f007 ff42 	bl	800e124 <GUI_ALLOC_FreePtr>
 80062a0:	4628      	mov	r0, r5
 80062a2:	f007 fd7d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80062a6:	e03e      	b.n	8006326 <TEXT_Callback+0xbc>
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	b12b      	cbz	r3, 80062b8 <TEXT_Callback+0x4e>
 80062ac:	7a1b      	ldrb	r3, [r3, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	bf0c      	ite	eq
 80062b2:	2102      	moveq	r1, #2
 80062b4:	2101      	movne	r1, #1
 80062b6:	e000      	b.n	80062ba <TEXT_Callback+0x50>
 80062b8:	2103      	movs	r1, #3
 80062ba:	4628      	mov	r0, r5
 80062bc:	f001 f963 	bl	8007586 <WM_NotifyParent>
 80062c0:	e031      	b.n	8006326 <TEXT_Callback+0xbc>
 80062c2:	4628      	mov	r0, r5
 80062c4:	f007 fd5e 	bl	800dd84 <GUI_ALLOC_LockH>
 80062c8:	9000      	str	r0, [sp, #0]
 80062ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80062cc:	f005 fa1c 	bl	800b708 <LCD_SetColor>
 80062d0:	9b00      	ldr	r3, [sp, #0]
 80062d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80062d4:	f006 fb06 	bl	800c8e4 <GUI_SetFont>
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 fdf1 	bl	8006ec0 <WM_GetHasTrans>
 80062de:	b928      	cbnz	r0, 80062ec <TEXT_Callback+0x82>
 80062e0:	9b00      	ldr	r3, [sp, #0]
 80062e2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062e4:	f005 fa08 	bl	800b6f8 <LCD_SetBkColor>
 80062e8:	f006 f95c 	bl	800c5a4 <GUI_Clear>
 80062ec:	9b00      	ldr	r3, [sp, #0]
 80062ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f0:	b1ab      	cbz	r3, 800631e <TEXT_Callback+0xb4>
 80062f2:	2002      	movs	r0, #2
 80062f4:	f006 fb2c 	bl	800c950 <GUI_SetTextMode>
 80062f8:	a802      	add	r0, sp, #8
 80062fa:	f000 ff73 	bl	80071e4 <WM_GetClientRect>
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8006302:	f007 fd3f 	bl	800dd84 <GUI_ALLOC_LockH>
 8006306:	9b00      	ldr	r3, [sp, #0]
 8006308:	9001      	str	r0, [sp, #4]
 800630a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800630e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006312:	a902      	add	r1, sp, #8
 8006314:	f005 ff5d 	bl	800c1d2 <GUI_DispStringInRectWrap>
 8006318:	a801      	add	r0, sp, #4
 800631a:	f007 fd41 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800631e:	4668      	mov	r0, sp
 8006320:	f007 fd3e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006324:	e002      	b.n	800632c <TEXT_Callback+0xc2>
 8006326:	4620      	mov	r0, r4
 8006328:	f002 fb74 	bl	8008a14 <WM_DefaultProc>
 800632c:	b005      	add	sp, #20
 800632e:	bd30      	pop	{r4, r5, pc}

08006330 <TEXT_CreateUser>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006336:	9500      	str	r5, [sp, #0]
 8006338:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800633a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800633c:	f045 0501 	orr.w	r5, r5, #1
 8006340:	9501      	str	r5, [sp, #4]
 8006342:	4d1a      	ldr	r5, [pc, #104]	; (80063ac <TEXT_CreateUser+0x7c>)
 8006344:	9502      	str	r5, [sp, #8]
 8006346:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006348:	3520      	adds	r5, #32
 800634a:	9503      	str	r5, [sp, #12]
 800634c:	f001 ff70 	bl	8008230 <WM_CreateWindowAsChild>
 8006350:	4605      	mov	r5, r0
 8006352:	b340      	cbz	r0, 80063a6 <TEXT_CreateUser+0x76>
 8006354:	b18c      	cbz	r4, 800637a <TEXT_CreateUser+0x4a>
 8006356:	4620      	mov	r0, r4
 8006358:	f7f9 ff3a 	bl	80001d0 <strlen>
 800635c:	3001      	adds	r0, #1
 800635e:	f007 fee9 	bl	800e134 <GUI_ALLOC_AllocZero>
 8006362:	4606      	mov	r6, r0
 8006364:	b150      	cbz	r0, 800637c <TEXT_CreateUser+0x4c>
 8006366:	f007 fd0d 	bl	800dd84 <GUI_ALLOC_LockH>
 800636a:	4621      	mov	r1, r4
 800636c:	9005      	str	r0, [sp, #20]
 800636e:	f00a ff00 	bl	8011172 <strcpy>
 8006372:	a805      	add	r0, sp, #20
 8006374:	f007 fd14 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006378:	e000      	b.n	800637c <TEXT_CreateUser+0x4c>
 800637a:	4626      	mov	r6, r4
 800637c:	4628      	mov	r0, r5
 800637e:	f007 fd01 	bl	800dd84 <GUI_ALLOC_LockH>
 8006382:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006384:	9005      	str	r0, [sp, #20]
 8006386:	2200      	movs	r2, #0
 8006388:	f007 ff8e 	bl	800e2a8 <WIDGET__Init>
 800638c:	9c05      	ldr	r4, [sp, #20]
 800638e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006390:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8006394:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <TEXT_CreateUser+0x80>)
 8006396:	6466      	str	r6, [r4, #68]	; 0x44
 8006398:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800639a:	3434      	adds	r4, #52	; 0x34
 800639c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80063a0:	a805      	add	r0, sp, #20
 80063a2:	f007 fcfd 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80063a6:	4628      	mov	r0, r5
 80063a8:	b006      	add	sp, #24
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	0800626b 	.word	0x0800626b
 80063b0:	20000024 	.word	0x20000024

080063b4 <TEXT_CreateIndirect>:
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	b087      	sub	sp, #28
 80063b8:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 80063bc:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 80063c0:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 80063c4:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 80063c8:	9100      	str	r1, [sp, #0]
 80063ca:	2102      	movs	r1, #2
 80063cc:	9101      	str	r1, [sp, #4]
 80063ce:	8a41      	ldrh	r1, [r0, #18]
 80063d0:	9102      	str	r1, [sp, #8]
 80063d2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80063d6:	9103      	str	r1, [sp, #12]
 80063d8:	6844      	ldr	r4, [r0, #4]
 80063da:	9404      	str	r4, [sp, #16]
 80063dc:	6984      	ldr	r4, [r0, #24]
 80063de:	9405      	str	r4, [sp, #20]
 80063e0:	eb0e 0002 	add.w	r0, lr, r2
 80063e4:	18f9      	adds	r1, r7, r3
 80063e6:	4632      	mov	r2, r6
 80063e8:	462b      	mov	r3, r5
 80063ea:	f7ff ffa1 	bl	8006330 <TEXT_CreateUser>
 80063ee:	b007      	add	sp, #28
 80063f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063f2 <TEXT_SetText>:
 80063f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f4:	460c      	mov	r4, r1
 80063f6:	4605      	mov	r5, r0
 80063f8:	b300      	cbz	r0, 800643c <TEXT_SetText+0x4a>
 80063fa:	f007 fcc3 	bl	800dd84 <GUI_ALLOC_LockH>
 80063fe:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006400:	9000      	str	r0, [sp, #0]
 8006402:	4668      	mov	r0, sp
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f007 fccb 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800640a:	4621      	mov	r1, r4
 800640c:	a801      	add	r0, sp, #4
 800640e:	f005 fa81 	bl	800b914 <GUI__SetText>
 8006412:	f1d0 0401 	rsbs	r4, r0, #1
 8006416:	bf38      	it	cc
 8006418:	2400      	movcc	r4, #0
 800641a:	b984      	cbnz	r4, 800643e <TEXT_SetText+0x4c>
 800641c:	4628      	mov	r0, r5
 800641e:	f007 fcb1 	bl	800dd84 <GUI_ALLOC_LockH>
 8006422:	9a01      	ldr	r2, [sp, #4]
 8006424:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006426:	9000      	str	r0, [sp, #0]
 8006428:	4291      	cmp	r1, r2
 800642a:	bf18      	it	ne
 800642c:	6442      	strne	r2, [r0, #68]	; 0x44
 800642e:	4668      	mov	r0, sp
 8006430:	f007 fcb6 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006434:	4628      	mov	r0, r5
 8006436:	f001 fecd 	bl	80081d4 <WM_InvalidateWindow>
 800643a:	e000      	b.n	800643e <TEXT_SetText+0x4c>
 800643c:	2401      	movs	r4, #1
 800643e:	4620      	mov	r0, r4
 8006440:	b003      	add	sp, #12
 8006442:	bd30      	pop	{r4, r5, pc}

08006444 <FRAMEWIN__GetBorderSize>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	b08a      	sub	sp, #40	; 0x28
 8006448:	4605      	mov	r5, r0
 800644a:	460c      	mov	r4, r1
 800644c:	f007 fc9a 	bl	800dd84 <GUI_ALLOC_LockH>
 8006450:	ab0a      	add	r3, sp, #40	; 0x28
 8006452:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006454:	f843 0d28 	str.w	r0, [r3, #-40]!
 8006458:	4668      	mov	r0, sp
 800645a:	6896      	ldr	r6, [r2, #8]
 800645c:	f007 fca0 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006460:	9501      	str	r5, [sp, #4]
 8006462:	2c03      	cmp	r4, #3
 8006464:	d80b      	bhi.n	800647e <FRAMEWIN__GetBorderSize+0x3a>
 8006466:	e8df f004 	tbb	[pc, r4]
 800646a:	0402      	.short	0x0402
 800646c:	0806      	.short	0x0806
 800646e:	2318      	movs	r3, #24
 8006470:	e004      	b.n	800647c <FRAMEWIN__GetBorderSize+0x38>
 8006472:	2316      	movs	r3, #22
 8006474:	e002      	b.n	800647c <FRAMEWIN__GetBorderSize+0x38>
 8006476:	2315      	movs	r3, #21
 8006478:	e000      	b.n	800647c <FRAMEWIN__GetBorderSize+0x38>
 800647a:	2317      	movs	r3, #23
 800647c:	9302      	str	r3, [sp, #8]
 800647e:	6873      	ldr	r3, [r6, #4]
 8006480:	a801      	add	r0, sp, #4
 8006482:	4798      	blx	r3
 8006484:	b00a      	add	sp, #40	; 0x28
 8006486:	bd70      	pop	{r4, r5, r6, pc}

08006488 <_SetActive>:
 8006488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	460d      	mov	r5, r1
 800648e:	f007 fc79 	bl	800dd84 <GUI_ALLOC_LockH>
 8006492:	9001      	str	r0, [sp, #4]
 8006494:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8006498:	b125      	cbz	r5, 80064a4 <_SetActive+0x1c>
 800649a:	0711      	lsls	r1, r2, #28
 800649c:	d40b      	bmi.n	80064b6 <_SetActive+0x2e>
 800649e:	f042 0208 	orr.w	r2, r2, #8
 80064a2:	e003      	b.n	80064ac <_SetActive+0x24>
 80064a4:	0713      	lsls	r3, r2, #28
 80064a6:	d506      	bpl.n	80064b6 <_SetActive+0x2e>
 80064a8:	f022 0208 	bic.w	r2, r2, #8
 80064ac:	f8a0 207c 	strh.w	r2, [r0, #124]	; 0x7c
 80064b0:	4620      	mov	r0, r4
 80064b2:	f001 fe8f 	bl	80081d4 <WM_InvalidateWindow>
 80064b6:	a801      	add	r0, sp, #4
 80064b8:	f007 fc72 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80064bc:	b003      	add	sp, #12
 80064be:	bd30      	pop	{r4, r5, pc}

080064c0 <FRAMEWIN__cbClient>:
 80064c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064c4:	6845      	ldr	r5, [r0, #4]
 80064c6:	b087      	sub	sp, #28
 80064c8:	4604      	mov	r4, r0
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 ff27 	bl	800731e <WM_GetParent>
 80064d0:	4681      	mov	r9, r0
 80064d2:	f007 fc57 	bl	800dd84 <GUI_ALLOC_LockH>
 80064d6:	4603      	mov	r3, r0
 80064d8:	a806      	add	r0, sp, #24
 80064da:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80064dc:	f840 3d14 	str.w	r3, [r0, #-20]!
 80064e0:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 80064e2:	f8d3 8080 	ldr.w	r8, [r3, #128]	; 0x80
 80064e6:	f007 fc5b 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	2b17      	cmp	r3, #23
 80064ee:	d053      	beq.n	8006598 <FRAMEWIN__cbClient+0xd8>
 80064f0:	dc09      	bgt.n	8006506 <FRAMEWIN__cbClient+0x46>
 80064f2:	2b0f      	cmp	r3, #15
 80064f4:	d014      	beq.n	8006520 <FRAMEWIN__cbClient+0x60>
 80064f6:	dc02      	bgt.n	80064fe <FRAMEWIN__cbClient+0x3e>
 80064f8:	2b0e      	cmp	r3, #14
 80064fa:	d034      	beq.n	8006566 <FRAMEWIN__cbClient+0xa6>
 80064fc:	e046      	b.n	800658c <FRAMEWIN__cbClient+0xcc>
 80064fe:	3b14      	subs	r3, #20
 8006500:	2b01      	cmp	r3, #1
 8006502:	d949      	bls.n	8006598 <FRAMEWIN__cbClient+0xd8>
 8006504:	e042      	b.n	800658c <FRAMEWIN__cbClient+0xcc>
 8006506:	2b1f      	cmp	r3, #31
 8006508:	d028      	beq.n	800655c <FRAMEWIN__cbClient+0x9c>
 800650a:	dc02      	bgt.n	8006512 <FRAMEWIN__cbClient+0x52>
 800650c:	2b1e      	cmp	r3, #30
 800650e:	d01a      	beq.n	8006546 <FRAMEWIN__cbClient+0x86>
 8006510:	e03c      	b.n	800658c <FRAMEWIN__cbClient+0xcc>
 8006512:	2b22      	cmp	r3, #34	; 0x22
 8006514:	d038      	beq.n	8006588 <FRAMEWIN__cbClient+0xc8>
 8006516:	2b31      	cmp	r3, #49	; 0x31
 8006518:	d138      	bne.n	800658c <FRAMEWIN__cbClient+0xcc>
 800651a:	2300      	movs	r3, #0
 800651c:	60e3      	str	r3, [r4, #12]
 800651e:	e03e      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 8006520:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8006524:	429e      	cmp	r6, r3
 8006526:	d004      	beq.n	8006532 <FRAMEWIN__cbClient+0x72>
 8006528:	4630      	mov	r0, r6
 800652a:	f005 f8e5 	bl	800b6f8 <LCD_SetBkColor>
 800652e:	f006 f839 	bl	800c5a4 <GUI_Clear>
 8006532:	2f00      	cmp	r7, #0
 8006534:	d033      	beq.n	800659e <FRAMEWIN__cbClient+0xde>
 8006536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800653a:	ae02      	add	r6, sp, #8
 800653c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8006540:	9503      	str	r5, [sp, #12]
 8006542:	4630      	mov	r0, r6
 8006544:	e026      	b.n	8006594 <FRAMEWIN__cbClient+0xd4>
 8006546:	68e3      	ldr	r3, [r4, #12]
 8006548:	b34b      	cbz	r3, 800659e <FRAMEWIN__cbClient+0xde>
 800654a:	f1b8 0f00 	cmp.w	r8, #0
 800654e:	d017      	beq.n	8006580 <FRAMEWIN__cbClient+0xc0>
 8006550:	45a8      	cmp	r8, r5
 8006552:	d015      	beq.n	8006580 <FRAMEWIN__cbClient+0xc0>
 8006554:	4640      	mov	r0, r8
 8006556:	f001 f821 	bl	800759c <WM_SetFocus>
 800655a:	e020      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 800655c:	4648      	mov	r0, r9
 800655e:	4621      	mov	r1, r4
 8006560:	f007 fed2 	bl	800e308 <WIDGET_HandleActive>
 8006564:	e01b      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 8006566:	68e3      	ldr	r3, [r4, #12]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	2a00      	cmp	r2, #0
 800656c:	dd0e      	ble.n	800658c <FRAMEWIN__cbClient+0xcc>
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b09      	cmp	r3, #9
 8006572:	d005      	beq.n	8006580 <FRAMEWIN__cbClient+0xc0>
 8006574:	2b0a      	cmp	r3, #10
 8006576:	d109      	bne.n	800658c <FRAMEWIN__cbClient+0xcc>
 8006578:	4628      	mov	r0, r5
 800657a:	f000 fcb9 	bl	8006ef0 <WM_SetFocusOnPrevChild>
 800657e:	e00e      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 8006580:	4628      	mov	r0, r5
 8006582:	f000 fce5 	bl	8006f50 <WM_SetFocusOnNextChild>
 8006586:	e00a      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 8006588:	60e6      	str	r6, [r4, #12]
 800658a:	e008      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 800658c:	b127      	cbz	r7, 8006598 <FRAMEWIN__cbClient+0xd8>
 800658e:	f8c4 9004 	str.w	r9, [r4, #4]
 8006592:	4620      	mov	r0, r4
 8006594:	47b8      	blx	r7
 8006596:	e002      	b.n	800659e <FRAMEWIN__cbClient+0xde>
 8006598:	4620      	mov	r0, r4
 800659a:	f002 fa3b 	bl	8008a14 <WM_DefaultProc>
 800659e:	b007      	add	sp, #28
 80065a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080065a4 <FRAMEWIN__CalcTitleHeight>:
 80065a4:	b508      	push	{r3, lr}
 80065a6:	4603      	mov	r3, r0
 80065a8:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 80065aa:	f000 0020 	and.w	r0, r0, #32
 80065ae:	b280      	uxth	r0, r0
 80065b0:	b130      	cbz	r0, 80065c0 <FRAMEWIN__CalcTitleHeight+0x1c>
 80065b2:	f9b3 0054 	ldrsh.w	r0, [r3, #84]	; 0x54
 80065b6:	b918      	cbnz	r0, 80065c0 <FRAMEWIN__CalcTitleHeight+0x1c>
 80065b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80065ba:	f006 f8d7 	bl	800c76c <GUI_GetYSizeOfFont>
 80065be:	3002      	adds	r0, #2
 80065c0:	bd08      	pop	{r3, pc}

080065c2 <FRAMEWIN__GetTitleLimits>:
 80065c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c6:	4607      	mov	r7, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	4616      	mov	r6, r2
 80065cc:	f007 fbda 	bl	800dd84 <GUI_ALLOC_LockH>
 80065d0:	4603      	mov	r3, r0
 80065d2:	a802      	add	r0, sp, #8
 80065d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80065d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80065da:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80065de:	f8b3 8000 	ldrh.w	r8, [r3]
 80065e2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80065e6:	4668      	mov	r0, sp
 80065e8:	f007 fbda 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80065ec:	f8da 3000 	ldr.w	r3, [sl]
 80065f0:	4638      	mov	r0, r7
 80065f2:	2100      	movs	r1, #0
 80065f4:	4798      	blx	r3
 80065f6:	4682      	mov	sl, r0
 80065f8:	4638      	mov	r0, r7
 80065fa:	f000 fe1b 	bl	8007234 <WM_GetFirstChild>
 80065fe:	4604      	mov	r4, r0
 8006600:	b340      	cbz	r0, 8006654 <FRAMEWIN__GetTitleLimits+0x92>
 8006602:	4620      	mov	r0, r4
 8006604:	f007 fbbe 	bl	800dd84 <GUI_ALLOC_LockH>
 8006608:	4603      	mov	r3, r0
 800660a:	fa0f f289 	sxth.w	r2, r9
 800660e:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8006612:	9001      	str	r0, [sp, #4]
 8006614:	1aba      	subs	r2, r7, r2
 8006616:	4552      	cmp	r2, sl
 8006618:	8800      	ldrh	r0, [r0, #0]
 800661a:	8899      	ldrh	r1, [r3, #4]
 800661c:	d113      	bne.n	8006646 <FRAMEWIN__GetTitleLimits+0x84>
 800661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006620:	061b      	lsls	r3, r3, #24
 8006622:	fa0f f288 	sxth.w	r2, r8
 8006626:	d507      	bpl.n	8006638 <FRAMEWIN__GetTitleLimits+0x76>
 8006628:	b203      	sxth	r3, r0
 800662a:	1a9a      	subs	r2, r3, r2
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	dc09      	bgt.n	8006646 <FRAMEWIN__GetTitleLimits+0x84>
 8006632:	3a01      	subs	r2, #1
 8006634:	6032      	str	r2, [r6, #0]
 8006636:	e006      	b.n	8006646 <FRAMEWIN__GetTitleLimits+0x84>
 8006638:	b20b      	sxth	r3, r1
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	682a      	ldr	r2, [r5, #0]
 800663e:	4293      	cmp	r3, r2
 8006640:	bfa4      	itt	ge
 8006642:	3301      	addge	r3, #1
 8006644:	602b      	strge	r3, [r5, #0]
 8006646:	a801      	add	r0, sp, #4
 8006648:	f007 fbaa 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800664c:	4620      	mov	r0, r4
 800664e:	f000 fe56 	bl	80072fe <WM_GetNextSibling>
 8006652:	e7d4      	b.n	80065fe <FRAMEWIN__GetTitleLimits+0x3c>
 8006654:	b002      	add	sp, #8
 8006656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800665a <FRAMEWIN__CalcPositions>:
 800665a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665e:	b087      	sub	sp, #28
 8006660:	4604      	mov	r4, r0
 8006662:	460f      	mov	r7, r1
 8006664:	f007 fb8e 	bl	800dd84 <GUI_ALLOC_LockH>
 8006668:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800666a:	9003      	str	r0, [sp, #12]
 800666c:	6895      	ldr	r5, [r2, #8]
 800666e:	2101      	movs	r1, #1
 8006670:	682a      	ldr	r2, [r5, #0]
 8006672:	4620      	mov	r0, r4
 8006674:	4790      	blx	r2
 8006676:	682a      	ldr	r2, [r5, #0]
 8006678:	2103      	movs	r1, #3
 800667a:	4683      	mov	fp, r0
 800667c:	4620      	mov	r0, r4
 800667e:	4790      	blx	r2
 8006680:	682a      	ldr	r2, [r5, #0]
 8006682:	2102      	movs	r1, #2
 8006684:	4681      	mov	r9, r0
 8006686:	4620      	mov	r0, r4
 8006688:	4790      	blx	r2
 800668a:	682a      	ldr	r2, [r5, #0]
 800668c:	9001      	str	r0, [sp, #4]
 800668e:	2100      	movs	r1, #0
 8006690:	4620      	mov	r0, r4
 8006692:	4790      	blx	r2
 8006694:	4605      	mov	r5, r0
 8006696:	9803      	ldr	r0, [sp, #12]
 8006698:	f001 f83e 	bl	8007718 <WM__GetWindowSizeX>
 800669c:	4682      	mov	sl, r0
 800669e:	9803      	ldr	r0, [sp, #12]
 80066a0:	f001 f841 	bl	8007726 <WM__GetWindowSizeY>
 80066a4:	4680      	mov	r8, r0
 80066a6:	9803      	ldr	r0, [sp, #12]
 80066a8:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 80066aa:	f006 0620 	and.w	r6, r6, #32
 80066ae:	b2b6      	uxth	r6, r6
 80066b0:	b10e      	cbz	r6, 80066b6 <FRAMEWIN__CalcPositions+0x5c>
 80066b2:	f9b0 6058 	ldrsh.w	r6, [r0, #88]	; 0x58
 80066b6:	f7ff ff75 	bl	80065a4 <FRAMEWIN__CalcTitleHeight>
 80066ba:	9903      	ldr	r1, [sp, #12]
 80066bc:	4602      	mov	r2, r0
 80066be:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
 80066c0:	b118      	cbz	r0, 80066ca <FRAMEWIN__CalcPositions+0x70>
 80066c2:	9200      	str	r2, [sp, #0]
 80066c4:	f001 f84b 	bl	800775e <WM_GetWindowSizeY>
 80066c8:	9a00      	ldr	r2, [sp, #0]
 80066ca:	803a      	strh	r2, [r7, #0]
 80066cc:	b292      	uxth	r2, r2
 80066ce:	b2a9      	uxth	r1, r5
 80066d0:	4416      	add	r6, r2
 80066d2:	440e      	add	r6, r1
 80066d4:	8078      	strh	r0, [r7, #2]
 80066d6:	4430      	add	r0, r6
 80066d8:	80f8      	strh	r0, [r7, #6]
 80066da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066de:	9801      	ldr	r0, [sp, #4]
 80066e0:	81fd      	strh	r5, [r7, #14]
 80066e2:	3901      	subs	r1, #1
 80066e4:	ebc9 090a 	rsb	r9, r9, sl
 80066e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066ec:	ebc0 0308 	rsb	r3, r0, r8
 80066f0:	440a      	add	r2, r1
 80066f2:	fa1f fb8b 	uxth.w	fp, fp
 80066f6:	fa1f f989 	uxth.w	r9, r9
 80066fa:	817b      	strh	r3, [r7, #10]
 80066fc:	827a      	strh	r2, [r7, #18]
 80066fe:	f8a7 b004 	strh.w	fp, [r7, #4]
 8006702:	f8a7 9008 	strh.w	r9, [r7, #8]
 8006706:	f8a7 b00c 	strh.w	fp, [r7, #12]
 800670a:	f8a7 9010 	strh.w	r9, [r7, #16]
 800670e:	a803      	add	r0, sp, #12
 8006710:	f007 fb46 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006714:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006718:	9204      	str	r2, [sp, #16]
 800671a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800671e:	9205      	str	r2, [sp, #20]
 8006720:	4620      	mov	r0, r4
 8006722:	aa05      	add	r2, sp, #20
 8006724:	a904      	add	r1, sp, #16
 8006726:	f7ff ff4c 	bl	80065c2 <FRAMEWIN__GetTitleLimits>
 800672a:	9a04      	ldr	r2, [sp, #16]
 800672c:	81ba      	strh	r2, [r7, #12]
 800672e:	9a05      	ldr	r2, [sp, #20]
 8006730:	823a      	strh	r2, [r7, #16]
 8006732:	b007      	add	sp, #28
 8006734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006738 <FRAMEWIN_SetText>:
 8006738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800673a:	460d      	mov	r5, r1
 800673c:	4604      	mov	r4, r0
 800673e:	b1c0      	cbz	r0, 8006772 <FRAMEWIN_SetText+0x3a>
 8006740:	f007 fb20 	bl	800dd84 <GUI_ALLOC_LockH>
 8006744:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006746:	9000      	str	r0, [sp, #0]
 8006748:	4668      	mov	r0, sp
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	f007 fb28 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006750:	a801      	add	r0, sp, #4
 8006752:	4629      	mov	r1, r5
 8006754:	f005 f8de 	bl	800b914 <GUI__SetText>
 8006758:	b158      	cbz	r0, 8006772 <FRAMEWIN_SetText+0x3a>
 800675a:	4620      	mov	r0, r4
 800675c:	f007 fb12 	bl	800dd84 <GUI_ALLOC_LockH>
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	9000      	str	r0, [sp, #0]
 8006764:	6703      	str	r3, [r0, #112]	; 0x70
 8006766:	4668      	mov	r0, sp
 8006768:	f007 fb1a 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800676c:	4620      	mov	r0, r4
 800676e:	f001 fd31 	bl	80081d4 <WM_InvalidateWindow>
 8006772:	b003      	add	sp, #12
 8006774:	bd30      	pop	{r4, r5, pc}
	...

08006778 <FRAMEWIN_CreateUser>:
 8006778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800677c:	b08b      	sub	sp, #44	; 0x2c
 800677e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8006782:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8006784:	9400      	str	r4, [sp, #0]
 8006786:	f449 5480 	orr.w	r4, r9, #4096	; 0x1000
 800678a:	9401      	str	r4, [sp, #4]
 800678c:	4c33      	ldr	r4, [pc, #204]	; (800685c <FRAMEWIN_CreateUser+0xe4>)
 800678e:	9402      	str	r4, [sp, #8]
 8006790:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8006792:	3460      	adds	r4, #96	; 0x60
 8006794:	9403      	str	r4, [sp, #12]
 8006796:	f001 fd4b 	bl	8008230 <WM_CreateWindowAsChild>
 800679a:	4606      	mov	r6, r0
 800679c:	2800      	cmp	r0, #0
 800679e:	d058      	beq.n	8006852 <FRAMEWIN_CreateUser+0xda>
 80067a0:	f007 faf0 	bl	800dd84 <GUI_ALLOC_LockH>
 80067a4:	4d2e      	ldr	r5, [pc, #184]	; (8006860 <FRAMEWIN_CreateUser+0xe8>)
 80067a6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80067a8:	9004      	str	r0, [sp, #16]
 80067aa:	2230      	movs	r2, #48	; 0x30
 80067ac:	f007 fd7c 	bl	800e2a8 <WIDGET__Init>
 80067b0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80067b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067b6:	f858 7d18 	ldr.w	r7, [r8, #-24]!
 80067ba:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80067be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80067c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067ca:	4d26      	ldr	r5, [pc, #152]	; (8006864 <FRAMEWIN_CreateUser+0xec>)
 80067cc:	e884 0003 	stmia.w	r4, {r0, r1}
 80067d0:	667b      	str	r3, [r7, #100]	; 0x64
 80067d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80067d4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80067d8:	2400      	movs	r4, #0
 80067da:	682b      	ldr	r3, [r5, #0]
 80067dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067de:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 80067e2:	66fc      	str	r4, [r7, #108]	; 0x6c
 80067e4:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80067e8:	4640      	mov	r0, r8
 80067ea:	f007 fad9 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80067ee:	4630      	mov	r0, r6
 80067f0:	a905      	add	r1, sp, #20
 80067f2:	f7ff ff32 	bl	800665a <FRAMEWIN__CalcPositions>
 80067f6:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
 80067fa:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 80067fe:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8006802:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8006806:	9403      	str	r4, [sp, #12]
 8006808:	f241 7782 	movw	r7, #6018	; 0x1782
 800680c:	1a5b      	subs	r3, r3, r1
 800680e:	1a12      	subs	r2, r2, r0
 8006810:	9701      	str	r7, [sp, #4]
 8006812:	4f15      	ldr	r7, [pc, #84]	; (8006868 <FRAMEWIN_CreateUser+0xf0>)
 8006814:	9600      	str	r6, [sp, #0]
 8006816:	3201      	adds	r2, #1
 8006818:	3301      	adds	r3, #1
 800681a:	9702      	str	r7, [sp, #8]
 800681c:	f001 fd08 	bl	8008230 <WM_CreateWindowAsChild>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	4604      	mov	r4, r0
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4630      	mov	r0, r6
 8006828:	4798      	blx	r3
 800682a:	4630      	mov	r0, r6
 800682c:	f007 faaa 	bl	800dd84 <GUI_ALLOC_LockH>
 8006830:	9004      	str	r0, [sp, #16]
 8006832:	6684      	str	r4, [r0, #104]	; 0x68
 8006834:	4640      	mov	r0, r8
 8006836:	f007 fab3 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800683a:	f242 0304 	movw	r3, #8196	; 0x2004
 800683e:	ea09 0303 	and.w	r3, r9, r3
 8006842:	b913      	cbnz	r3, 800684a <FRAMEWIN_CreateUser+0xd2>
 8006844:	4630      	mov	r0, r6
 8006846:	f000 fcbf 	bl	80071c8 <WM_DisableMemdev>
 800684a:	4630      	mov	r0, r6
 800684c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800684e:	f7ff ff73 	bl	8006738 <FRAMEWIN_SetText>
 8006852:	4630      	mov	r0, r6
 8006854:	b00b      	add	sp, #44	; 0x2c
 8006856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800685a:	bf00      	nop
 800685c:	080068b7 	.word	0x080068b7
 8006860:	20000034 	.word	0x20000034
 8006864:	2000005c 	.word	0x2000005c
 8006868:	080064c1 	.word	0x080064c1

0800686c <FRAMEWIN_CreateIndirect>:
 800686c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800686e:	b089      	sub	sp, #36	; 0x24
 8006870:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8006874:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8006878:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
 800687c:	f9b0 e00a 	ldrsh.w	lr, [r0, #10]
 8006880:	9100      	str	r1, [sp, #0]
 8006882:	2100      	movs	r1, #0
 8006884:	9101      	str	r1, [sp, #4]
 8006886:	8a41      	ldrh	r1, [r0, #18]
 8006888:	9102      	str	r1, [sp, #8]
 800688a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800688e:	9103      	str	r1, [sp, #12]
 8006890:	6844      	ldr	r4, [r0, #4]
 8006892:	9404      	str	r4, [sp, #16]
 8006894:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8006896:	9405      	str	r4, [sp, #20]
 8006898:	6984      	ldr	r4, [r0, #24]
 800689a:	9406      	str	r4, [sp, #24]
 800689c:	eb0e 0002 	add.w	r0, lr, r2
 80068a0:	18f9      	adds	r1, r7, r3
 80068a2:	4632      	mov	r2, r6
 80068a4:	462b      	mov	r3, r5
 80068a6:	f7ff ff67 	bl	8006778 <FRAMEWIN_CreateUser>
 80068aa:	b009      	add	sp, #36	; 0x24
 80068ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068ae <FRAMEWIN_SetActive>:
 80068ae:	b108      	cbz	r0, 80068b4 <FRAMEWIN_SetActive+0x6>
 80068b0:	f7ff bdea 	b.w	8006488 <_SetActive>
 80068b4:	4770      	bx	lr

080068b6 <FRAMEWIN_Callback>:
 80068b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068ba:	6844      	ldr	r4, [r0, #4]
 80068bc:	b086      	sub	sp, #24
 80068be:	4605      	mov	r5, r0
 80068c0:	4620      	mov	r0, r4
 80068c2:	f007 fa5f 	bl	800dd84 <GUI_ALLOC_LockH>
 80068c6:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80068c8:	9000      	str	r0, [sp, #0]
 80068ca:	f8d0 7088 	ldr.w	r7, [r0, #136]	; 0x88
 80068ce:	f8d0 6080 	ldr.w	r6, [r0, #128]	; 0x80
 80068d2:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 80068d6:	f8b0 907c 	ldrh.w	r9, [r0, #124]	; 0x7c
 80068da:	b113      	cbz	r3, 80068e2 <FRAMEWIN_Callback+0x2c>
 80068dc:	f8d3 a000 	ldr.w	sl, [r3]
 80068e0:	e000      	b.n	80068e4 <FRAMEWIN_Callback+0x2e>
 80068e2:	469a      	mov	sl, r3
 80068e4:	4668      	mov	r0, sp
 80068e6:	f007 fa5b 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80068ea:	b13f      	cbz	r7, 80068fc <FRAMEWIN_Callback+0x46>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4628      	mov	r0, r5
 80068f0:	4798      	blx	r3
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 811d 	bne.w	8006b32 <FRAMEWIN_Callback+0x27c>
 80068f8:	683f      	ldr	r7, [r7, #0]
 80068fa:	e7f6      	b.n	80068ea <FRAMEWIN_Callback+0x34>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	2b17      	cmp	r3, #23
 8006900:	f000 808a 	beq.w	8006a18 <FRAMEWIN_Callback+0x162>
 8006904:	dc18      	bgt.n	8006938 <FRAMEWIN_Callback+0x82>
 8006906:	2b0f      	cmp	r3, #15
 8006908:	d043      	beq.n	8006992 <FRAMEWIN_Callback+0xdc>
 800690a:	dc06      	bgt.n	800691a <FRAMEWIN_Callback+0x64>
 800690c:	2b0b      	cmp	r3, #11
 800690e:	f000 80fe 	beq.w	8006b0e <FRAMEWIN_Callback+0x258>
 8006912:	2b0d      	cmp	r3, #13
 8006914:	f000 80c0 	beq.w	8006a98 <FRAMEWIN_Callback+0x1e2>
 8006918:	e103      	b.n	8006b22 <FRAMEWIN_Callback+0x26c>
 800691a:	2b11      	cmp	r3, #17
 800691c:	d01b      	beq.n	8006956 <FRAMEWIN_Callback+0xa0>
 800691e:	2b14      	cmp	r3, #20
 8006920:	f040 80ff 	bne.w	8006b22 <FRAMEWIN_Callback+0x26c>
 8006924:	4620      	mov	r0, r4
 8006926:	a901      	add	r1, sp, #4
 8006928:	f7ff fe97 	bl	800665a <FRAMEWIN__CalcPositions>
 800692c:	ab02      	add	r3, sp, #8
 800692e:	cb03      	ldmia	r3!, {r0, r1}
 8006930:	68ea      	ldr	r2, [r5, #12]
 8006932:	6010      	str	r0, [r2, #0]
 8006934:	6051      	str	r1, [r2, #4]
 8006936:	e0fc      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006938:	2b26      	cmp	r3, #38	; 0x26
 800693a:	d070      	beq.n	8006a1e <FRAMEWIN_Callback+0x168>
 800693c:	dc05      	bgt.n	800694a <FRAMEWIN_Callback+0x94>
 800693e:	2b1e      	cmp	r3, #30
 8006940:	d07b      	beq.n	8006a3a <FRAMEWIN_Callback+0x184>
 8006942:	2b20      	cmp	r3, #32
 8006944:	f000 80b6 	beq.w	8006ab4 <FRAMEWIN_Callback+0x1fe>
 8006948:	e0eb      	b.n	8006b22 <FRAMEWIN_Callback+0x26c>
 800694a:	2b2a      	cmp	r3, #42	; 0x2a
 800694c:	d013      	beq.n	8006976 <FRAMEWIN_Callback+0xc0>
 800694e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8006952:	d025      	beq.n	80069a0 <FRAMEWIN_Callback+0xea>
 8006954:	e0e5      	b.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006956:	4620      	mov	r0, r4
 8006958:	68ee      	ldr	r6, [r5, #12]
 800695a:	f007 fa13 	bl	800dd84 <GUI_ALLOC_LockH>
 800695e:	9001      	str	r0, [sp, #4]
 8006960:	8933      	ldrh	r3, [r6, #8]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d105      	bne.n	8006972 <FRAMEWIN_Callback+0xbc>
 8006966:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 800696a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696e:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8006972:	a801      	add	r0, sp, #4
 8006974:	e0d3      	b.n	8006b1e <FRAMEWIN_Callback+0x268>
 8006976:	4620      	mov	r0, r4
 8006978:	f007 fa04 	bl	800dd84 <GUI_ALLOC_LockH>
 800697c:	68eb      	ldr	r3, [r5, #12]
 800697e:	9000      	str	r0, [sp, #0]
 8006980:	b113      	cbz	r3, 8006988 <FRAMEWIN_Callback+0xd2>
 8006982:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 8006986:	e002      	b.n	800698e <FRAMEWIN_Callback+0xd8>
 8006988:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800698c:	60eb      	str	r3, [r5, #12]
 800698e:	4668      	mov	r0, sp
 8006990:	e03f      	b.n	8006a12 <FRAMEWIN_Callback+0x15c>
 8006992:	f1ba 0f00 	cmp.w	sl, #0
 8006996:	f000 80c4 	beq.w	8006b22 <FRAMEWIN_Callback+0x26c>
 800699a:	4620      	mov	r0, r4
 800699c:	47d0      	blx	sl
 800699e:	e0c0      	b.n	8006b22 <FRAMEWIN_Callback+0x26c>
 80069a0:	4620      	mov	r0, r4
 80069a2:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80069a6:	f007 f9ed 	bl	800dd84 <GUI_ALLOC_LockH>
 80069aa:	ae06      	add	r6, sp, #24
 80069ac:	f8b0 707c 	ldrh.w	r7, [r0, #124]	; 0x7c
 80069b0:	f846 0d14 	str.w	r0, [r6, #-20]!
 80069b4:	4630      	mov	r0, r6
 80069b6:	f007 f9f3 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80069ba:	68eb      	ldr	r3, [r5, #12]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80b8 	beq.w	8006b32 <FRAMEWIN_Callback+0x27c>
 80069c2:	f898 3008 	ldrb.w	r3, [r8, #8]
 80069c6:	b1cb      	cbz	r3, 80069fc <FRAMEWIN_Callback+0x146>
 80069c8:	073b      	lsls	r3, r7, #28
 80069ca:	d402      	bmi.n	80069d2 <FRAMEWIN_Callback+0x11c>
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fde5 	bl	800759c <WM_SetFocus>
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 feda 	bl	800778c <WM_BringToTop>
 80069d8:	f407 7388 	and.w	r3, r7, #272	; 0x110
 80069dc:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80069e0:	f040 80a7 	bne.w	8006b32 <FRAMEWIN_Callback+0x27c>
 80069e4:	f007 0780 	and.w	r7, r7, #128	; 0x80
 80069e8:	b2bb      	uxth	r3, r7
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 80a1 	bne.w	8006b32 <FRAMEWIN_Callback+0x27c>
 80069f0:	4620      	mov	r0, r4
 80069f2:	4641      	mov	r1, r8
 80069f4:	2205      	movs	r2, #5
 80069f6:	f000 fad9 	bl	8006fac <WM_SetCaptureMove>
 80069fa:	e09a      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 80069fc:	4620      	mov	r0, r4
 80069fe:	f007 f9c1 	bl	800dd84 <GUI_ALLOC_LockH>
 8006a02:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8006a06:	9001      	str	r0, [sp, #4]
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
 8006a10:	4630      	mov	r0, r6
 8006a12:	f007 f9c5 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006a16:	e08c      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a18:	f8c5 800c 	str.w	r8, [r5, #12]
 8006a1c:	e089      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a1e:	68eb      	ldr	r3, [r5, #12]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f040 8086 	bne.w	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a26:	a906      	add	r1, sp, #24
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	2327      	movs	r3, #39	; 0x27
 8006a2c:	f841 3d14 	str.w	r3, [r1, #-20]!
 8006a30:	68a8      	ldr	r0, [r5, #8]
 8006a32:	9403      	str	r4, [sp, #12]
 8006a34:	f000 f95e 	bl	8006cf4 <WM__SendMessage>
 8006a38:	e07b      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a3a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8006a3e:	f1b9 0f01 	cmp.w	r9, #1
 8006a42:	d124      	bne.n	8006a8e <FRAMEWIN_Callback+0x1d8>
 8006a44:	4630      	mov	r0, r6
 8006a46:	f000 fcf6 	bl	8007436 <WM_IsWindow>
 8006a4a:	b158      	cbz	r0, 8006a64 <FRAMEWIN_Callback+0x1ae>
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f000 fda5 	bl	800759c <WM_SetFocus>
 8006a52:	4630      	mov	r0, r6
 8006a54:	f000 fcc8 	bl	80073e8 <WM_HasFocus>
 8006a58:	b188      	cbz	r0, 8006a7e <FRAMEWIN_Callback+0x1c8>
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f007 fc3d 	bl	800e2dc <WIDGET_OrState>
 8006a62:	e00c      	b.n	8006a7e <FRAMEWIN_Callback+0x1c8>
 8006a64:	4640      	mov	r0, r8
 8006a66:	f000 fa73 	bl	8006f50 <WM_SetFocusOnNextChild>
 8006a6a:	4606      	mov	r6, r0
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f007 f989 	bl	800dd84 <GUI_ALLOC_LockH>
 8006a72:	9000      	str	r0, [sp, #0]
 8006a74:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
 8006a78:	4668      	mov	r0, sp
 8006a7a:	f007 f991 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	2101      	movs	r1, #1
 8006a82:	f7ff ff14 	bl	80068ae <FRAMEWIN_SetActive>
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d153      	bne.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a8a:	60ee      	str	r6, [r5, #12]
 8006a8c:	e051      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a8e:	4620      	mov	r0, r4
 8006a90:	4639      	mov	r1, r7
 8006a92:	f7ff ff0c 	bl	80068ae <FRAMEWIN_SetActive>
 8006a96:	e04c      	b.n	8006b32 <FRAMEWIN_Callback+0x27c>
 8006a98:	f019 0f08 	tst.w	r9, #8
 8006a9c:	d141      	bne.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006a9e:	68eb      	ldr	r3, [r5, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d03d      	beq.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006aa6:	7a1b      	ldrb	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d03a      	beq.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fd75 	bl	800759c <WM_SetFocus>
 8006ab2:	e036      	b.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006ab4:	68ee      	ldr	r6, [r5, #12]
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d033      	beq.n	8006b22 <FRAMEWIN_Callback+0x26c>
 8006aba:	6870      	ldr	r0, [r6, #4]
 8006abc:	4621      	mov	r1, r4
 8006abe:	f000 f8ed 	bl	8006c9c <WM__IsAncestorOrSelf>
 8006ac2:	b180      	cbz	r0, 8006ae6 <FRAMEWIN_Callback+0x230>
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	f7ff fcde 	bl	8006488 <_SetActive>
 8006acc:	6870      	ldr	r0, [r6, #4]
 8006ace:	4621      	mov	r1, r4
 8006ad0:	f000 f8d3 	bl	8006c7a <WM__IsAncestor>
 8006ad4:	b328      	cbz	r0, 8006b22 <FRAMEWIN_Callback+0x26c>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f007 f954 	bl	800dd84 <GUI_ALLOC_LockH>
 8006adc:	ab06      	add	r3, sp, #24
 8006ade:	6872      	ldr	r2, [r6, #4]
 8006ae0:	f843 0d14 	str.w	r0, [r3, #-20]!
 8006ae4:	e00f      	b.n	8006b06 <FRAMEWIN_Callback+0x250>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4639      	mov	r1, r7
 8006aea:	f7ff fccd 	bl	8006488 <_SetActive>
 8006aee:	6830      	ldr	r0, [r6, #0]
 8006af0:	4621      	mov	r1, r4
 8006af2:	f000 f8c2 	bl	8006c7a <WM__IsAncestor>
 8006af6:	b1a0      	cbz	r0, 8006b22 <FRAMEWIN_Callback+0x26c>
 8006af8:	4620      	mov	r0, r4
 8006afa:	f007 f943 	bl	800dd84 <GUI_ALLOC_LockH>
 8006afe:	ab06      	add	r3, sp, #24
 8006b00:	6832      	ldr	r2, [r6, #0]
 8006b02:	f843 0d14 	str.w	r0, [r3, #-20]!
 8006b06:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	e007      	b.n	8006b1e <FRAMEWIN_Callback+0x268>
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f007 f938 	bl	800dd84 <GUI_ALLOC_LockH>
 8006b14:	9000      	str	r0, [sp, #0]
 8006b16:	3070      	adds	r0, #112	; 0x70
 8006b18:	f007 fb04 	bl	800e124 <GUI_ALLOC_FreePtr>
 8006b1c:	4668      	mov	r0, sp
 8006b1e:	f007 f93f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006b22:	4620      	mov	r0, r4
 8006b24:	4629      	mov	r1, r5
 8006b26:	f007 fbef 	bl	800e308 <WIDGET_HandleActive>
 8006b2a:	b110      	cbz	r0, 8006b32 <FRAMEWIN_Callback+0x27c>
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f001 ff71 	bl	8008a14 <WM_DefaultProc>
 8006b32:	b006      	add	sp, #24
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b38 <FRAMEWIN_GetActive>:
 8006b38:	b513      	push	{r0, r1, r4, lr}
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	b158      	cbz	r0, 8006b56 <FRAMEWIN_GetActive+0x1e>
 8006b3e:	f007 f921 	bl	800dd84 <GUI_ALLOC_LockH>
 8006b42:	ab02      	add	r3, sp, #8
 8006b44:	f8b0 407c 	ldrh.w	r4, [r0, #124]	; 0x7c
 8006b48:	f843 0d04 	str.w	r0, [r3, #-4]!
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 8006b52:	f007 f925 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006b56:	4620      	mov	r0, r4
 8006b58:	b002      	add	sp, #8
 8006b5a:	bd10      	pop	{r4, pc}

08006b5c <GUI_CreateDialogBox>:
 8006b5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b60:	4606      	mov	r6, r0
 8006b62:	4688      	mov	r8, r1
 8006b64:	4614      	mov	r4, r2
 8006b66:	461d      	mov	r5, r3
 8006b68:	b913      	cbnz	r3, 8006b70 <GUI_CreateDialogBox+0x14>
 8006b6a:	f000 fb57 	bl	800721c <WM_GetDesktopWindow>
 8006b6e:	4605      	mov	r5, r0
 8006b70:	9400      	str	r4, [sp, #0]
 8006b72:	4630      	mov	r0, r6
 8006b74:	6834      	ldr	r4, [r6, #0]
 8006b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	47a0      	blx	r4
 8006b7e:	4604      	mov	r4, r0
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d039      	beq.n	8006bf8 <GUI_CreateDialogBox+0x9c>
 8006b84:	f000 fb3c 	bl	8007200 <WM_GetClientWindow>
 8006b88:	8a71      	ldrh	r1, [r6, #18]
 8006b8a:	4607      	mov	r7, r0
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f007 fba5 	bl	800e2dc <WIDGET_OrState>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fd93 	bl	80076be <WM_ShowWindow>
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b9e:	f000 fd8e 	bl	80076be <WM_ShowWindow>
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	dd0f      	ble.n	8006bc8 <GUI_CreateDialogBox+0x6c>
 8006ba8:	f856 cf1c 	ldr.w	ip, [r6, #28]!
 8006bac:	2200      	movs	r2, #0
 8006bae:	9200      	str	r2, [sp, #0]
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	47e0      	blx	ip
 8006bb8:	4681      	mov	r9, r0
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d1ed      	bne.n	8006b9a <GUI_CreateDialogBox+0x3e>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f001 fbe0 	bl	8008384 <WM_DeleteWindow>
 8006bc4:	4648      	mov	r0, r9
 8006bc6:	e018      	b.n	8006bfa <GUI_CreateDialogBox+0x9e>
 8006bc8:	4638      	mov	r0, r7
 8006bca:	211d      	movs	r1, #29
 8006bcc:	f000 fccb 	bl	8007566 <WM_SendMessageNoPara>
 8006bd0:	1c6b      	adds	r3, r5, #1
 8006bd2:	d011      	beq.n	8006bf8 <GUI_CreateDialogBox+0x9c>
 8006bd4:	f000 fb36 	bl	8007244 <WM_GetFocusedWindow>
 8006bd8:	b150      	cbz	r0, 8006bf0 <GUI_CreateDialogBox+0x94>
 8006bda:	f007 f8c9 	bl	800dd70 <GUI_ALLOC_h2p>
 8006bde:	6980      	ldr	r0, [r0, #24]
 8006be0:	42a0      	cmp	r0, r4
 8006be2:	d00a      	beq.n	8006bfa <GUI_CreateDialogBox+0x9e>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d1f8      	bne.n	8006bda <GUI_CreateDialogBox+0x7e>
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 f9b1 	bl	8006f50 <WM_SetFocusOnNextChild>
 8006bee:	e003      	b.n	8006bf8 <GUI_CreateDialogBox+0x9c>
 8006bf0:	42a5      	cmp	r5, r4
 8006bf2:	d1f9      	bne.n	8006be8 <GUI_CreateDialogBox+0x8c>
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	e000      	b.n	8006bfa <GUI_CreateDialogBox+0x9e>
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	b003      	add	sp, #12
 8006bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006c00 <WM__ForEachDesc>:
 8006c00:	b570      	push	{r4, r5, r6, lr}
 8006c02:	460d      	mov	r5, r1
 8006c04:	4616      	mov	r6, r2
 8006c06:	f007 f8b3 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c0a:	69c4      	ldr	r4, [r0, #28]
 8006c0c:	b164      	cbz	r4, 8006c28 <WM__ForEachDesc+0x28>
 8006c0e:	4620      	mov	r0, r4
 8006c10:	4631      	mov	r1, r6
 8006c12:	47a8      	blx	r5
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	4632      	mov	r2, r6
 8006c1a:	f7ff fff1 	bl	8006c00 <WM__ForEachDesc>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f007 f8a6 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c24:	6a04      	ldr	r4, [r0, #32]
 8006c26:	e7f1      	b.n	8006c0c <WM__ForEachDesc+0xc>
 8006c28:	bd70      	pop	{r4, r5, r6, pc}

08006c2a <WM__GetFirstSibling>:
 8006c2a:	b508      	push	{r3, lr}
 8006c2c:	f000 fb77 	bl	800731e <WM_GetParent>
 8006c30:	b118      	cbz	r0, 8006c3a <WM__GetFirstSibling+0x10>
 8006c32:	f007 f89d 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c36:	69c0      	ldr	r0, [r0, #28]
 8006c38:	bd08      	pop	{r3, pc}
 8006c3a:	bd08      	pop	{r3, pc}

08006c3c <WM__GetLastSibling>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	4604      	mov	r4, r0
 8006c40:	b130      	cbz	r0, 8006c50 <WM__GetLastSibling+0x14>
 8006c42:	4620      	mov	r0, r4
 8006c44:	f007 f894 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c48:	6a03      	ldr	r3, [r0, #32]
 8006c4a:	b10b      	cbz	r3, 8006c50 <WM__GetLastSibling+0x14>
 8006c4c:	461c      	mov	r4, r3
 8006c4e:	e7f8      	b.n	8006c42 <WM__GetLastSibling+0x6>
 8006c50:	4620      	mov	r0, r4
 8006c52:	bd10      	pop	{r4, pc}

08006c54 <WM__GetPrevSibling>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	4605      	mov	r5, r0
 8006c58:	f7ff ffe7 	bl	8006c2a <WM__GetFirstSibling>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	b154      	cbz	r4, 8006c76 <WM__GetPrevSibling+0x22>
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d007      	beq.n	8006c74 <WM__GetPrevSibling+0x20>
 8006c64:	4620      	mov	r0, r4
 8006c66:	f007 f883 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c6a:	6a03      	ldr	r3, [r0, #32]
 8006c6c:	42ab      	cmp	r3, r5
 8006c6e:	d002      	beq.n	8006c76 <WM__GetPrevSibling+0x22>
 8006c70:	461c      	mov	r4, r3
 8006c72:	e7f4      	b.n	8006c5e <WM__GetPrevSibling+0xa>
 8006c74:	2400      	movs	r4, #0
 8006c76:	4620      	mov	r0, r4
 8006c78:	bd38      	pop	{r3, r4, r5, pc}

08006c7a <WM__IsAncestor>:
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	b908      	cbnz	r0, 8006c84 <WM__IsAncestor+0xa>
 8006c80:	2000      	movs	r0, #0
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d0fb      	beq.n	8006c80 <WM__IsAncestor+0x6>
 8006c88:	f007 f872 	bl	800dd70 <GUI_ALLOC_h2p>
 8006c8c:	6980      	ldr	r0, [r0, #24]
 8006c8e:	42a0      	cmp	r0, r4
 8006c90:	d002      	beq.n	8006c98 <WM__IsAncestor+0x1e>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d1f8      	bne.n	8006c88 <WM__IsAncestor+0xe>
 8006c96:	e7f3      	b.n	8006c80 <WM__IsAncestor+0x6>
 8006c98:	2001      	movs	r0, #1
 8006c9a:	bd10      	pop	{r4, pc}

08006c9c <WM__IsAncestorOrSelf>:
 8006c9c:	4288      	cmp	r0, r1
 8006c9e:	d001      	beq.n	8006ca4 <WM__IsAncestorOrSelf+0x8>
 8006ca0:	f7ff bfeb 	b.w	8006c7a <WM__IsAncestor>
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	4770      	bx	lr

08006ca8 <WM__IsChild>:
 8006ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006caa:	460d      	mov	r5, r1
 8006cac:	4604      	mov	r4, r0
 8006cae:	b160      	cbz	r0, 8006cca <WM__IsChild+0x22>
 8006cb0:	f007 f868 	bl	800dd84 <GUI_ALLOC_LockH>
 8006cb4:	9001      	str	r0, [sp, #4]
 8006cb6:	b120      	cbz	r0, 8006cc2 <WM__IsChild+0x1a>
 8006cb8:	6984      	ldr	r4, [r0, #24]
 8006cba:	1b63      	subs	r3, r4, r5
 8006cbc:	425c      	negs	r4, r3
 8006cbe:	415c      	adcs	r4, r3
 8006cc0:	e000      	b.n	8006cc4 <WM__IsChild+0x1c>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	a801      	add	r0, sp, #4
 8006cc6:	f007 f86b 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	b003      	add	sp, #12
 8006cce:	bd30      	pop	{r4, r5, pc}

08006cd0 <WM__GetFocusedChild>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4d06      	ldr	r5, [pc, #24]	; (8006cec <WM__GetFocusedChild+0x1c>)
 8006cd4:	4c06      	ldr	r4, [pc, #24]	; (8006cf0 <WM__GetFocusedChild+0x20>)
 8006cd6:	682b      	ldr	r3, [r5, #0]
 8006cd8:	4601      	mov	r1, r0
 8006cda:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006cde:	f7ff ffe3 	bl	8006ca8 <WM__IsChild>
 8006ce2:	b110      	cbz	r0, 8006cea <WM__GetFocusedChild+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	20004a74 	.word	0x20004a74
 8006cf0:	20004a64 	.word	0x20004a64

08006cf4 <WM__SendMessage>:
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	4c0d      	ldr	r4, [pc, #52]	; (8006d2c <WM__SendMessage+0x38>)
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	2b13      	cmp	r3, #19
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460d      	mov	r5, r1
 8006d00:	dc12      	bgt.n	8006d28 <WM__SendMessage+0x34>
 8006d02:	f007 f835 	bl	800dd70 <GUI_ALLOC_h2p>
 8006d06:	6903      	ldr	r3, [r0, #16]
 8006d08:	606e      	str	r6, [r5, #4]
 8006d0a:	b143      	cbz	r3, 8006d1e <WM__SendMessage+0x2a>
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	4628      	mov	r0, r5
 8006d10:	3201      	adds	r2, #1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	4798      	blx	r3
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	4628      	mov	r0, r5
 8006d20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006d24:	f001 be76 	b.w	8008a14 <WM_DefaultProc>
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	bf00      	nop
 8006d2c:	200029e4 	.word	0x200029e4

08006d30 <WM__SendMessageNoPara>:
 8006d30:	b530      	push	{r4, r5, lr}
 8006d32:	b085      	sub	sp, #20
 8006d34:	4604      	mov	r4, r0
 8006d36:	2210      	movs	r2, #16
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4668      	mov	r0, sp
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	f00a f9e3 	bl	8011108 <memset>
 8006d42:	4620      	mov	r0, r4
 8006d44:	f007 f814 	bl	800dd70 <GUI_ALLOC_h2p>
 8006d48:	6903      	ldr	r3, [r0, #16]
 8006d4a:	b11b      	cbz	r3, 8006d54 <WM__SendMessageNoPara+0x24>
 8006d4c:	9401      	str	r4, [sp, #4]
 8006d4e:	9500      	str	r5, [sp, #0]
 8006d50:	4668      	mov	r0, sp
 8006d52:	4798      	blx	r3
 8006d54:	b005      	add	sp, #20
 8006d56:	bd30      	pop	{r4, r5, pc}

08006d58 <WM__UpdateChildPositions>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	69c4      	ldr	r4, [r0, #28]
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	468a      	mov	sl, r1
 8006d64:	4693      	mov	fp, r2
 8006d66:	2c00      	cmp	r4, #0
 8006d68:	d06d      	beq.n	8006e46 <WM__UpdateChildPositions+0xee>
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f007 f80a 	bl	800dd84 <GUI_ALLOC_LockH>
 8006d70:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d72:	9005      	str	r0, [sp, #20]
 8006d74:	f401 7320 	and.w	r3, r1, #640	; 0x280
 8006d78:	2b80      	cmp	r3, #128	; 0x80
 8006d7a:	f8b0 8000 	ldrh.w	r8, [r0]
 8006d7e:	8842      	ldrh	r2, [r0, #2]
 8006d80:	8886      	ldrh	r6, [r0, #4]
 8006d82:	88c5      	ldrh	r5, [r0, #6]
 8006d84:	d008      	beq.n	8006d98 <WM__UpdateChildPositions+0x40>
 8006d86:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006d8a:	d108      	bne.n	8006d9e <WM__UpdateChildPositions+0x46>
 8006d8c:	eb08 090a 	add.w	r9, r8, sl
 8006d90:	fa1f f989 	uxth.w	r9, r9
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	e008      	b.n	8006daa <WM__UpdateChildPositions+0x52>
 8006d98:	9803      	ldr	r0, [sp, #12]
 8006d9a:	b283      	uxth	r3, r0
 8006d9c:	e001      	b.n	8006da2 <WM__UpdateChildPositions+0x4a>
 8006d9e:	fa1f f38a 	uxth.w	r3, sl
 8006da2:	eb03 0908 	add.w	r9, r3, r8
 8006da6:	fa1f f989 	uxth.w	r9, r9
 8006daa:	f401 61a0 	and.w	r1, r1, #1280	; 0x500
 8006dae:	4433      	add	r3, r6
 8006db0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	d008      	beq.n	8006dca <WM__UpdateChildPositions+0x72>
 8006db8:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 8006dbc:	d108      	bne.n	8006dd0 <WM__UpdateChildPositions+0x78>
 8006dbe:	eb02 0c0b 	add.w	ip, r2, fp
 8006dc2:	fa1f fc8c 	uxth.w	ip, ip
 8006dc6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8006dc8:	e008      	b.n	8006ddc <WM__UpdateChildPositions+0x84>
 8006dca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006dcc:	b28f      	uxth	r7, r1
 8006dce:	e001      	b.n	8006dd4 <WM__UpdateChildPositions+0x7c>
 8006dd0:	fa1f f78b 	uxth.w	r7, fp
 8006dd4:	eb07 0c02 	add.w	ip, r7, r2
 8006dd8:	fa1f fc8c 	uxth.w	ip, ip
 8006ddc:	fa0f f989 	sxth.w	r9, r9
 8006de0:	fa0f f888 	sxth.w	r8, r8
 8006de4:	b212      	sxth	r2, r2
 8006de6:	442f      	add	r7, r5
 8006de8:	fa0f fc8c 	sxth.w	ip, ip
 8006dec:	ebb9 0108 	subs.w	r1, r9, r8
 8006df0:	9202      	str	r2, [sp, #8]
 8006df2:	b2bf      	uxth	r7, r7
 8006df4:	ebc2 020c 	rsb	r2, r2, ip
 8006df8:	d100      	bne.n	8006dfc <WM__UpdateChildPositions+0xa4>
 8006dfa:	b142      	cbz	r2, 8006e0e <WM__UpdateChildPositions+0xb6>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	f8cd c000 	str.w	ip, [sp]
 8006e04:	f000 f9de 	bl	80071c4 <WM_MoveWindow>
 8006e08:	f8dd c000 	ldr.w	ip, [sp]
 8006e0c:	9b01      	ldr	r3, [sp, #4]
 8006e0e:	b21b      	sxth	r3, r3
 8006e10:	ebc9 0903 	rsb	r9, r9, r3
 8006e14:	b236      	sxth	r6, r6
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	ebc6 0808 	rsb	r8, r6, r8
 8006e1c:	b23f      	sxth	r7, r7
 8006e1e:	b22d      	sxth	r5, r5
 8006e20:	ebcc 0c07 	rsb	ip, ip, r7
 8006e24:	1b5d      	subs	r5, r3, r5
 8006e26:	eb19 0108 	adds.w	r1, r9, r8
 8006e2a:	eb0c 0205 	add.w	r2, ip, r5
 8006e2e:	d100      	bne.n	8006e32 <WM__UpdateChildPositions+0xda>
 8006e30:	b112      	cbz	r2, 8006e38 <WM__UpdateChildPositions+0xe0>
 8006e32:	4620      	mov	r0, r4
 8006e34:	f000 fb1c 	bl	8007470 <WM_ResizeWindow>
 8006e38:	a806      	add	r0, sp, #24
 8006e3a:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8006e3e:	6a1c      	ldr	r4, [r3, #32]
 8006e40:	f006 ffae 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006e44:	e78f      	b.n	8006d66 <WM__UpdateChildPositions+0xe>
 8006e46:	b007      	add	sp, #28
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006e4c <WM__AddCriticalHandle>:
 8006e4c:	4b02      	ldr	r3, [pc, #8]	; (8006e58 <WM__AddCriticalHandle+0xc>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	6002      	str	r2, [r0, #0]
 8006e52:	6018      	str	r0, [r3, #0]
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	20004a90 	.word	0x20004a90

08006e5c <WM__GetClientRectEx>:
 8006e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e5e:	460d      	mov	r5, r1
 8006e60:	b158      	cbz	r0, 8006e7a <WM__GetClientRectEx+0x1e>
 8006e62:	b151      	cbz	r1, 8006e7a <WM__GetClientRectEx+0x1e>
 8006e64:	f006 ff8e 	bl	800dd84 <GUI_ALLOC_LockH>
 8006e68:	ac02      	add	r4, sp, #8
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	f844 0d04 	str.w	r0, [r4, #-4]!
 8006e70:	f001 f866 	bl	8007f40 <WM__GetClientRectWin>
 8006e74:	4620      	mov	r0, r4
 8006e76:	f006 ff93 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006e7a:	b003      	add	sp, #12
 8006e7c:	bd30      	pop	{r4, r5, pc}
	...

08006e80 <WM_SetHasTrans>:
 8006e80:	b513      	push	{r0, r1, r4, lr}
 8006e82:	4604      	mov	r4, r0
 8006e84:	b1b8      	cbz	r0, 8006eb6 <WM_SetHasTrans+0x36>
 8006e86:	f006 ff7d 	bl	800dd84 <GUI_ALLOC_LockH>
 8006e8a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006e8c:	9001      	str	r0, [sp, #4]
 8006e8e:	07db      	lsls	r3, r3, #31
 8006e90:	d40e      	bmi.n	8006eb0 <WM_SetHasTrans+0x30>
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 fc28 	bl	80076e8 <WM_ValidateWindow>
 8006e98:	9b01      	ldr	r3, [sp, #4]
 8006e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e9c:	f042 0201 	orr.w	r2, r2, #1
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ea2:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <WM_SetHasTrans+0x3c>)
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	f001 f992 	bl	80081d4 <WM_InvalidateWindow>
 8006eb0:	a801      	add	r0, sp, #4
 8006eb2:	f006 ff75 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	bf00      	nop
 8006ebc:	20004aa4 	.word	0x20004aa4

08006ec0 <WM_GetHasTrans>:
 8006ec0:	b508      	push	{r3, lr}
 8006ec2:	b128      	cbz	r0, 8006ed0 <WM_GetHasTrans+0x10>
 8006ec4:	f006 ff54 	bl	800dd70 <GUI_ALLOC_h2p>
 8006ec8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006eca:	f000 0001 	and.w	r0, r0, #1
 8006ece:	bd08      	pop	{r3, pc}
 8006ed0:	bd08      	pop	{r3, pc}

08006ed2 <_GetPrevChild>:
 8006ed2:	b510      	push	{r4, lr}
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	b918      	cbnz	r0, 8006ee0 <_GetPrevChild+0xe>
 8006ed8:	4620      	mov	r0, r4
 8006eda:	f7ff feaf 	bl	8006c3c <WM__GetLastSibling>
 8006ede:	e003      	b.n	8006ee8 <_GetPrevChild+0x16>
 8006ee0:	f7ff feb8 	bl	8006c54 <WM__GetPrevSibling>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d0f7      	beq.n	8006ed8 <_GetPrevChild+0x6>
 8006ee8:	42a0      	cmp	r0, r4
 8006eea:	bf08      	it	eq
 8006eec:	2000      	moveq	r0, #0
 8006eee:	bd10      	pop	{r4, pc}

08006ef0 <WM_SetFocusOnPrevChild>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	b1b0      	cbz	r0, 8006f24 <WM_SetFocusOnPrevChild+0x34>
 8006ef6:	f7ff feeb 	bl	8006cd0 <WM__GetFocusedChild>
 8006efa:	f7ff ffea 	bl	8006ed2 <_GetPrevChild>
 8006efe:	4605      	mov	r5, r0
 8006f00:	4604      	mov	r4, r0
 8006f02:	4620      	mov	r0, r4
 8006f04:	f000 fa7e 	bl	8007404 <WM_IsFocusable>
 8006f08:	b930      	cbnz	r0, 8006f18 <WM_SetFocusOnPrevChild+0x28>
 8006f0a:	b12c      	cbz	r4, 8006f18 <WM_SetFocusOnPrevChild+0x28>
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7ff ffe0 	bl	8006ed2 <_GetPrevChild>
 8006f12:	42a8      	cmp	r0, r5
 8006f14:	4604      	mov	r4, r0
 8006f16:	d1f4      	bne.n	8006f02 <WM_SetFocusOnPrevChild+0x12>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 fb3f 	bl	800759c <WM_SetFocus>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	bf18      	it	ne
 8006f22:	2400      	movne	r4, #0
 8006f24:	4620      	mov	r0, r4
 8006f26:	bd38      	pop	{r3, r4, r5, pc}

08006f28 <_GetNextChild>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	460c      	mov	r4, r1
 8006f2e:	b921      	cbnz	r1, 8006f3a <_GetNextChild+0x12>
 8006f30:	4628      	mov	r0, r5
 8006f32:	f006 ff1d 	bl	800dd70 <GUI_ALLOC_h2p>
 8006f36:	69c0      	ldr	r0, [r0, #28]
 8006f38:	e005      	b.n	8006f46 <_GetNextChild+0x1e>
 8006f3a:	4608      	mov	r0, r1
 8006f3c:	f006 ff18 	bl	800dd70 <GUI_ALLOC_h2p>
 8006f40:	6a00      	ldr	r0, [r0, #32]
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d0f4      	beq.n	8006f30 <_GetNextChild+0x8>
 8006f46:	42a0      	cmp	r0, r4
 8006f48:	bf08      	it	eq
 8006f4a:	2000      	moveq	r0, #0
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006f50 <WM_SetFocusOnNextChild>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	4605      	mov	r5, r0
 8006f54:	b328      	cbz	r0, 8006fa2 <WM_SetFocusOnNextChild+0x52>
 8006f56:	f7ff febb 	bl	8006cd0 <WM__GetFocusedChild>
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f7ff ffe3 	bl	8006f28 <_GetNextChild>
 8006f62:	4606      	mov	r6, r0
 8006f64:	4604      	mov	r4, r0
 8006f66:	4620      	mov	r0, r4
 8006f68:	f000 fa4c 	bl	8007404 <WM_IsFocusable>
 8006f6c:	b938      	cbnz	r0, 8006f7e <WM_SetFocusOnNextChild+0x2e>
 8006f6e:	b13c      	cbz	r4, 8006f80 <WM_SetFocusOnNextChild+0x30>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f7ff ffd8 	bl	8006f28 <_GetNextChild>
 8006f78:	42b0      	cmp	r0, r6
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	d1f3      	bne.n	8006f66 <WM_SetFocusOnNextChild+0x16>
 8006f7e:	b90c      	cbnz	r4, 8006f84 <WM_SetFocusOnNextChild+0x34>
 8006f80:	2400      	movs	r4, #0
 8006f82:	e00f      	b.n	8006fa4 <WM_SetFocusOnNextChild+0x54>
 8006f84:	4d08      	ldr	r5, [pc, #32]	; (8006fa8 <WM_SetFocusOnNextChild+0x58>)
 8006f86:	4620      	mov	r0, r4
 8006f88:	682e      	ldr	r6, [r5, #0]
 8006f8a:	f000 ffe5 	bl	8007f58 <WM__GetTopLevelLayer>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d008      	beq.n	8006fa4 <WM_SetFocusOnNextChild+0x54>
 8006f92:	6028      	str	r0, [r5, #0]
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 fb01 	bl	800759c <WM_SetFocus>
 8006f9a:	602e      	str	r6, [r5, #0]
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d1ef      	bne.n	8006f80 <WM_SetFocusOnNextChild+0x30>
 8006fa0:	e000      	b.n	8006fa4 <WM_SetFocusOnNextChild+0x54>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	20004a74 	.word	0x20004a74

08006fac <WM_SetCaptureMove>:
 8006fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	460d      	mov	r5, r1
 8006fb6:	4691      	mov	r9, r2
 8006fb8:	4698      	mov	r8, r3
 8006fba:	f000 fa07 	bl	80073cc <WM_HasCaptured>
 8006fbe:	4e21      	ldr	r6, [pc, #132]	; (8007044 <WM_SetCaptureMove+0x98>)
 8006fc0:	b940      	cbnz	r0, 8006fd4 <WM_SetCaptureMove+0x28>
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	f000 f859 	bl	800707c <WM_SetCapture>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	8033      	strh	r3, [r6, #0]
 8006fce:	686b      	ldr	r3, [r5, #4]
 8006fd0:	8073      	strh	r3, [r6, #2]
 8006fd2:	e034      	b.n	800703e <WM_SetCaptureMove+0x92>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	f9b6 7000 	ldrsh.w	r7, [r6]
 8006fda:	686d      	ldr	r5, [r5, #4]
 8006fdc:	1bdf      	subs	r7, r3, r7
 8006fde:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	1aed      	subs	r5, r5, r3
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	d102      	bne.n	8006ff2 <WM_SetCaptureMove+0x46>
 8006fec:	f1b8 0f00 	cmp.w	r8, #0
 8006ff0:	d021      	beq.n	8007036 <WM_SetCaptureMove+0x8a>
 8006ff2:	4669      	mov	r1, sp
 8006ff4:	f000 f9de 	bl	80073b4 <WM_GetWindowRectEx>
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d005      	beq.n	800700a <WM_SetCaptureMove+0x5e>
 8006ffe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007002:	3b01      	subs	r3, #1
 8007004:	4498      	add	r8, r3
 8007006:	f8ad 8006 	strh.w	r8, [sp, #6]
 800700a:	4620      	mov	r0, r4
 800700c:	f000 f987 	bl	800731e <WM_GetParent>
 8007010:	a902      	add	r1, sp, #8
 8007012:	f000 f9cf 	bl	80073b4 <WM_GetWindowRectEx>
 8007016:	4668      	mov	r0, sp
 8007018:	4639      	mov	r1, r7
 800701a:	462a      	mov	r2, r5
 800701c:	f005 fbd5 	bl	800c7ca <GUI_MoveRect>
 8007020:	a802      	add	r0, sp, #8
 8007022:	4601      	mov	r1, r0
 8007024:	464a      	mov	r2, r9
 8007026:	f004 fc20 	bl	800b86a <GUI__ReduceRect>
 800702a:	4668      	mov	r0, sp
 800702c:	a902      	add	r1, sp, #8
 800702e:	f005 fc17 	bl	800c860 <GUI_RectsIntersect>
 8007032:	b120      	cbz	r0, 800703e <WM_SetCaptureMove+0x92>
 8007034:	4620      	mov	r0, r4
 8007036:	4639      	mov	r1, r7
 8007038:	462a      	mov	r2, r5
 800703a:	f000 f8c3 	bl	80071c4 <WM_MoveWindow>
 800703e:	b005      	add	sp, #20
 8007040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007044:	200029e8 	.word	0x200029e8

08007048 <WM__ReleaseCapture>:
 8007048:	b530      	push	{r4, r5, lr}
 800704a:	4d0a      	ldr	r5, [pc, #40]	; (8007074 <WM__ReleaseCapture+0x2c>)
 800704c:	4c0a      	ldr	r4, [pc, #40]	; (8007078 <WM__ReleaseCapture+0x30>)
 800704e:	682b      	ldr	r3, [r5, #0]
 8007050:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8007054:	b085      	sub	sp, #20
 8007056:	b150      	cbz	r0, 800706e <WM__ReleaseCapture+0x26>
 8007058:	a904      	add	r1, sp, #16
 800705a:	2318      	movs	r3, #24
 800705c:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007060:	4669      	mov	r1, sp
 8007062:	f7ff fe47 	bl	8006cf4 <WM__SendMessage>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	2200      	movs	r2, #0
 800706a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800706e:	b005      	add	sp, #20
 8007070:	bd30      	pop	{r4, r5, pc}
 8007072:	bf00      	nop
 8007074:	20004a74 	.word	0x20004a74
 8007078:	20004a98 	.word	0x20004a98

0800707c <WM_SetCapture>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <WM_SetCapture+0x28>)
 8007080:	4a09      	ldr	r2, [pc, #36]	; (80070a8 <WM_SetCapture+0x2c>)
 8007082:	4604      	mov	r4, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	460f      	mov	r7, r1
 8007088:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 800708c:	42a1      	cmp	r1, r4
 800708e:	4615      	mov	r5, r2
 8007090:	461e      	mov	r6, r3
 8007092:	d001      	beq.n	8007098 <WM_SetCapture+0x1c>
 8007094:	f7ff ffd8 	bl	8007048 <WM__ReleaseCapture>
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
 800709e:	4b03      	ldr	r3, [pc, #12]	; (80070ac <WM_SetCapture+0x30>)
 80070a0:	701f      	strb	r7, [r3, #0]
 80070a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a4:	20004a74 	.word	0x20004a74
 80070a8:	20004a98 	.word	0x20004a98
 80070ac:	20004a78 	.word	0x20004a78

080070b0 <_MoveDescendents>:
 80070b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070b4:	b088      	sub	sp, #32
 80070b6:	4606      	mov	r6, r0
 80070b8:	460c      	mov	r4, r1
 80070ba:	4615      	mov	r5, r2
 80070bc:	a804      	add	r0, sp, #16
 80070be:	2100      	movs	r1, #0
 80070c0:	2210      	movs	r2, #16
 80070c2:	f00a f821 	bl	8011108 <memset>
 80070c6:	b336      	cbz	r6, 8007116 <_MoveDescendents+0x66>
 80070c8:	4630      	mov	r0, r6
 80070ca:	f006 fe5b 	bl	800dd84 <GUI_ALLOC_LockH>
 80070ce:	4621      	mov	r1, r4
 80070d0:	462a      	mov	r2, r5
 80070d2:	9001      	str	r0, [sp, #4]
 80070d4:	f005 fb79 	bl	800c7ca <GUI_MoveRect>
 80070d8:	9801      	ldr	r0, [sp, #4]
 80070da:	4621      	mov	r1, r4
 80070dc:	3008      	adds	r0, #8
 80070de:	462a      	mov	r2, r5
 80070e0:	f005 fb73 	bl	800c7ca <GUI_MoveRect>
 80070e4:	a808      	add	r0, sp, #32
 80070e6:	f850 2d1c 	ldr.w	r2, [r0, #-28]!
 80070ea:	f8d2 801c 	ldr.w	r8, [r2, #28]
 80070ee:	6a17      	ldr	r7, [r2, #32]
 80070f0:	f006 fe56 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80070f4:	4640      	mov	r0, r8
 80070f6:	4621      	mov	r1, r4
 80070f8:	462a      	mov	r2, r5
 80070fa:	f7ff ffd9 	bl	80070b0 <_MoveDescendents>
 80070fe:	2303      	movs	r3, #3
 8007100:	9304      	str	r3, [sp, #16]
 8007102:	4630      	mov	r0, r6
 8007104:	ab02      	add	r3, sp, #8
 8007106:	a904      	add	r1, sp, #16
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	9402      	str	r4, [sp, #8]
 800710c:	9503      	str	r5, [sp, #12]
 800710e:	463e      	mov	r6, r7
 8007110:	f7ff fdf0 	bl	8006cf4 <WM__SendMessage>
 8007114:	e7d7      	b.n	80070c6 <_MoveDescendents+0x16>
 8007116:	b008      	add	sp, #32
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800711c <WM__MoveWindow>:
 800711c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007120:	b08b      	sub	sp, #44	; 0x2c
 8007122:	4606      	mov	r6, r0
 8007124:	460d      	mov	r5, r1
 8007126:	4614      	mov	r4, r2
 8007128:	a806      	add	r0, sp, #24
 800712a:	2100      	movs	r1, #0
 800712c:	2210      	movs	r2, #16
 800712e:	f009 ffeb 	bl	8011108 <memset>
 8007132:	2e00      	cmp	r6, #0
 8007134:	d043      	beq.n	80071be <WM__MoveWindow+0xa2>
 8007136:	b90d      	cbnz	r5, 800713c <WM__MoveWindow+0x20>
 8007138:	2c00      	cmp	r4, #0
 800713a:	d040      	beq.n	80071be <WM__MoveWindow+0xa2>
 800713c:	4630      	mov	r0, r6
 800713e:	f006 fe21 	bl	800dd84 <GUI_ALLOC_LockH>
 8007142:	4603      	mov	r3, r0
 8007144:	9001      	str	r0, [sp, #4]
 8007146:	c803      	ldmia	r0, {r0, r1}
 8007148:	f10d 0808 	add.w	r8, sp, #8
 800714c:	e888 0003 	stmia.w	r8, {r0, r1}
 8007150:	4622      	mov	r2, r4
 8007152:	4618      	mov	r0, r3
 8007154:	4629      	mov	r1, r5
 8007156:	f005 fb38 	bl	800c7ca <GUI_MoveRect>
 800715a:	9801      	ldr	r0, [sp, #4]
 800715c:	af0a      	add	r7, sp, #40	; 0x28
 800715e:	4629      	mov	r1, r5
 8007160:	4622      	mov	r2, r4
 8007162:	3008      	adds	r0, #8
 8007164:	f005 fb31 	bl	800c7ca <GUI_MoveRect>
 8007168:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800716c:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8007170:	4638      	mov	r0, r7
 8007172:	f006 fe15 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007176:	4622      	mov	r2, r4
 8007178:	4648      	mov	r0, r9
 800717a:	4629      	mov	r1, r5
 800717c:	f7ff ff98 	bl	80070b0 <_MoveDescendents>
 8007180:	4630      	mov	r0, r6
 8007182:	f006 fdff 	bl	800dd84 <GUI_ALLOC_LockH>
 8007186:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007188:	9001      	str	r0, [sp, #4]
 800718a:	0792      	lsls	r2, r2, #30
 800718c:	d50a      	bpl.n	80071a4 <WM__MoveWindow+0x88>
 800718e:	6981      	ldr	r1, [r0, #24]
 8007190:	b141      	cbz	r1, 80071a4 <WM__MoveWindow+0x88>
 8007192:	6a02      	ldr	r2, [r0, #32]
 8007194:	f000 ffb5 	bl	8008102 <WM__InvalidateParent>
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	4640      	mov	r0, r8
 800719c:	6999      	ldr	r1, [r3, #24]
 800719e:	6a1a      	ldr	r2, [r3, #32]
 80071a0:	f000 ffaf 	bl	8008102 <WM__InvalidateParent>
 80071a4:	4638      	mov	r0, r7
 80071a6:	f006 fdfb 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80071aa:	2303      	movs	r3, #3
 80071ac:	9306      	str	r3, [sp, #24]
 80071ae:	4630      	mov	r0, r6
 80071b0:	ab04      	add	r3, sp, #16
 80071b2:	a906      	add	r1, sp, #24
 80071b4:	9309      	str	r3, [sp, #36]	; 0x24
 80071b6:	9504      	str	r5, [sp, #16]
 80071b8:	9405      	str	r4, [sp, #20]
 80071ba:	f7ff fd9b 	bl	8006cf4 <WM__SendMessage>
 80071be:	b00b      	add	sp, #44	; 0x2c
 80071c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080071c4 <WM_MoveWindow>:
 80071c4:	f7ff bfaa 	b.w	800711c <WM__MoveWindow>

080071c8 <WM_DisableMemdev>:
 80071c8:	b508      	push	{r3, lr}
 80071ca:	b138      	cbz	r0, 80071dc <WM_DisableMemdev+0x14>
 80071cc:	f006 fdd0 	bl	800dd70 <GUI_ALLOC_h2p>
 80071d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80071d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d6:	f023 0304 	bic.w	r3, r3, #4
 80071da:	6283      	str	r3, [r0, #40]	; 0x28
 80071dc:	bd08      	pop	{r3, pc}

080071de <WM_ForEachDesc>:
 80071de:	f7ff bd0f 	b.w	8006c00 <WM__ForEachDesc>
	...

080071e4 <WM_GetClientRect>:
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <WM_GetClientRect+0x14>)
 80071e6:	4601      	mov	r1, r0
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	b910      	cbnz	r0, 80071f2 <WM_GetClientRect+0xe>
 80071ec:	4b03      	ldr	r3, [pc, #12]	; (80071fc <WM_GetClientRect+0x18>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80071f2:	f7ff be33 	b.w	8006e5c <WM__GetClientRectEx>
 80071f6:	bf00      	nop
 80071f8:	20004a50 	.word	0x20004a50
 80071fc:	20000084 	.word	0x20000084

08007200 <WM_GetClientWindow>:
 8007200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007202:	2300      	movs	r3, #0
 8007204:	a904      	add	r1, sp, #16
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	2317      	movs	r3, #23
 800720a:	f841 3d10 	str.w	r3, [r1, #-16]!
 800720e:	4669      	mov	r1, sp
 8007210:	f000 fe87 	bl	8007f22 <WM_SendMessage>
 8007214:	9803      	ldr	r0, [sp, #12]
 8007216:	b005      	add	sp, #20
 8007218:	f85d fb04 	ldr.w	pc, [sp], #4

0800721c <WM_GetDesktopWindow>:
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <WM_GetDesktopWindow+0x10>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	7c5a      	ldrb	r2, [r3, #17]
 8007222:	4b03      	ldr	r3, [pc, #12]	; (8007230 <WM_GetDesktopWindow+0x14>)
 8007224:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000084 	.word	0x20000084
 8007230:	20004a54 	.word	0x20004a54

08007234 <WM_GetFirstChild>:
 8007234:	b508      	push	{r3, lr}
 8007236:	4603      	mov	r3, r0
 8007238:	b110      	cbz	r0, 8007240 <WM_GetFirstChild+0xc>
 800723a:	f006 fd99 	bl	800dd70 <GUI_ALLOC_h2p>
 800723e:	69c3      	ldr	r3, [r0, #28]
 8007240:	4618      	mov	r0, r3
 8007242:	bd08      	pop	{r3, pc}

08007244 <WM_GetFocusedWindow>:
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <WM_GetFocusedWindow+0xc>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b02      	ldr	r3, [pc, #8]	; (8007254 <WM_GetFocusedWindow+0x10>)
 800724a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800724e:	4770      	bx	lr
 8007250:	20004a74 	.word	0x20004a74
 8007254:	20004a64 	.word	0x20004a64

08007258 <WM_GetId>:
 8007258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800725a:	4604      	mov	r4, r0
 800725c:	2210      	movs	r2, #16
 800725e:	4668      	mov	r0, sp
 8007260:	2100      	movs	r1, #0
 8007262:	f009 ff51 	bl	8011108 <memset>
 8007266:	2315      	movs	r3, #21
 8007268:	4620      	mov	r0, r4
 800726a:	4669      	mov	r1, sp
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	f000 fe58 	bl	8007f22 <WM_SendMessage>
 8007272:	9803      	ldr	r0, [sp, #12]
 8007274:	b004      	add	sp, #16
 8007276:	bd10      	pop	{r4, pc}

08007278 <_GetDialogItem>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4606      	mov	r6, r0
 800727c:	460d      	mov	r5, r1
 800727e:	f006 fd77 	bl	800dd70 <GUI_ALLOC_h2p>
 8007282:	69c4      	ldr	r4, [r0, #28]
 8007284:	b14c      	cbz	r4, 800729a <_GetDialogItem+0x22>
 8007286:	4620      	mov	r0, r4
 8007288:	f7ff ffe6 	bl	8007258 <WM_GetId>
 800728c:	42a8      	cmp	r0, r5
 800728e:	4620      	mov	r0, r4
 8007290:	d013      	beq.n	80072ba <_GetDialogItem+0x42>
 8007292:	f006 fd6d 	bl	800dd70 <GUI_ALLOC_h2p>
 8007296:	6a04      	ldr	r4, [r0, #32]
 8007298:	e7f4      	b.n	8007284 <_GetDialogItem+0xc>
 800729a:	4630      	mov	r0, r6
 800729c:	f006 fd68 	bl	800dd70 <GUI_ALLOC_h2p>
 80072a0:	69c4      	ldr	r4, [r0, #28]
 80072a2:	4620      	mov	r0, r4
 80072a4:	b144      	cbz	r4, 80072b8 <_GetDialogItem+0x40>
 80072a6:	4629      	mov	r1, r5
 80072a8:	f7ff ffe6 	bl	8007278 <_GetDialogItem>
 80072ac:	b928      	cbnz	r0, 80072ba <_GetDialogItem+0x42>
 80072ae:	4620      	mov	r0, r4
 80072b0:	f006 fd5e 	bl	800dd70 <GUI_ALLOC_h2p>
 80072b4:	6a04      	ldr	r4, [r0, #32]
 80072b6:	e7f4      	b.n	80072a2 <_GetDialogItem+0x2a>
 80072b8:	bd70      	pop	{r4, r5, r6, pc}
 80072ba:	bd70      	pop	{r4, r5, r6, pc}

080072bc <WM_GetDialogItem>:
 80072bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072be:	460d      	mov	r5, r1
 80072c0:	4604      	mov	r4, r0
 80072c2:	b1c8      	cbz	r0, 80072f8 <WM_GetDialogItem+0x3c>
 80072c4:	f006 fd5e 	bl	800dd84 <GUI_ALLOC_LockH>
 80072c8:	ab02      	add	r3, sp, #8
 80072ca:	69c4      	ldr	r4, [r0, #28]
 80072cc:	f843 0d04 	str.w	r0, [r3, #-4]!
 80072d0:	4618      	mov	r0, r3
 80072d2:	f006 fd65 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80072d6:	b17c      	cbz	r4, 80072f8 <WM_GetDialogItem+0x3c>
 80072d8:	4620      	mov	r0, r4
 80072da:	f7ff ffbd 	bl	8007258 <WM_GetId>
 80072de:	42a8      	cmp	r0, r5
 80072e0:	d00a      	beq.n	80072f8 <WM_GetDialogItem+0x3c>
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7ff ffc7 	bl	8007278 <_GetDialogItem>
 80072ea:	b920      	cbnz	r0, 80072f6 <WM_GetDialogItem+0x3a>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f006 fd3f 	bl	800dd70 <GUI_ALLOC_h2p>
 80072f2:	6a04      	ldr	r4, [r0, #32]
 80072f4:	e7ef      	b.n	80072d6 <WM_GetDialogItem+0x1a>
 80072f6:	4604      	mov	r4, r0
 80072f8:	4620      	mov	r0, r4
 80072fa:	b003      	add	sp, #12
 80072fc:	bd30      	pop	{r4, r5, pc}

080072fe <WM_GetNextSibling>:
 80072fe:	b508      	push	{r3, lr}
 8007300:	4603      	mov	r3, r0
 8007302:	b110      	cbz	r0, 800730a <WM_GetNextSibling+0xc>
 8007304:	f006 fd34 	bl	800dd70 <GUI_ALLOC_h2p>
 8007308:	6a03      	ldr	r3, [r0, #32]
 800730a:	4618      	mov	r0, r3
 800730c:	bd08      	pop	{r3, pc}

0800730e <WM_GetWindowOrgX>:
 800730e:	b508      	push	{r3, lr}
 8007310:	b120      	cbz	r0, 800731c <WM_GetWindowOrgX+0xe>
 8007312:	f006 fd2d 	bl	800dd70 <GUI_ALLOC_h2p>
 8007316:	f9b0 0000 	ldrsh.w	r0, [r0]
 800731a:	bd08      	pop	{r3, pc}
 800731c:	bd08      	pop	{r3, pc}

0800731e <WM_GetParent>:
 800731e:	b508      	push	{r3, lr}
 8007320:	4603      	mov	r3, r0
 8007322:	b110      	cbz	r0, 800732a <WM_GetParent+0xc>
 8007324:	f006 fd24 	bl	800dd70 <GUI_ALLOC_h2p>
 8007328:	6983      	ldr	r3, [r0, #24]
 800732a:	4618      	mov	r0, r3
 800732c:	bd08      	pop	{r3, pc}

0800732e <WM_BringToBottom>:
 800732e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007332:	4604      	mov	r4, r0
 8007334:	b087      	sub	sp, #28
 8007336:	2800      	cmp	r0, #0
 8007338:	d039      	beq.n	80073ae <WM_BringToBottom+0x80>
 800733a:	f006 fd23 	bl	800dd84 <GUI_ALLOC_LockH>
 800733e:	4603      	mov	r3, r0
 8007340:	9001      	str	r0, [sp, #4]
 8007342:	c803      	ldmia	r0, {r0, r1}
 8007344:	ad04      	add	r5, sp, #16
 8007346:	e885 0003 	stmia.w	r5, {r0, r1}
 800734a:	a801      	add	r0, sp, #4
 800734c:	6a1e      	ldr	r6, [r3, #32]
 800734e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8007352:	f006 fd25 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007356:	4620      	mov	r0, r4
 8007358:	f7ff fc7c 	bl	8006c54 <WM__GetPrevSibling>
 800735c:	4607      	mov	r7, r0
 800735e:	b330      	cbz	r0, 80073ae <WM_BringToBottom+0x80>
 8007360:	4620      	mov	r0, r4
 8007362:	f7ff ffdc 	bl	800731e <WM_GetParent>
 8007366:	f019 0f02 	tst.w	r9, #2
 800736a:	4680      	mov	r8, r0
 800736c:	d004      	beq.n	8007378 <WM_BringToBottom+0x4a>
 800736e:	4628      	mov	r0, r5
 8007370:	4641      	mov	r1, r8
 8007372:	4632      	mov	r2, r6
 8007374:	f000 feda 	bl	800812c <WM__InvalidateRectEx>
 8007378:	4620      	mov	r0, r4
 800737a:	f006 fd03 	bl	800dd84 <GUI_ALLOC_LockH>
 800737e:	9001      	str	r0, [sp, #4]
 8007380:	4640      	mov	r0, r8
 8007382:	f006 fcff 	bl	800dd84 <GUI_ALLOC_LockH>
 8007386:	9003      	str	r0, [sp, #12]
 8007388:	4638      	mov	r0, r7
 800738a:	f006 fcfb 	bl	800dd84 <GUI_ALLOC_LockH>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	9a01      	ldr	r2, [sp, #4]
 8007392:	69d9      	ldr	r1, [r3, #28]
 8007394:	6206      	str	r6, [r0, #32]
 8007396:	9002      	str	r0, [sp, #8]
 8007398:	6211      	str	r1, [r2, #32]
 800739a:	a801      	add	r0, sp, #4
 800739c:	61dc      	str	r4, [r3, #28]
 800739e:	f006 fcff 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80073a2:	a803      	add	r0, sp, #12
 80073a4:	f006 fcfc 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80073a8:	a802      	add	r0, sp, #8
 80073aa:	f006 fcf9 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80073ae:	b007      	add	sp, #28
 80073b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080073b4 <WM_GetWindowRectEx>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	b130      	cbz	r0, 80073c8 <WM_GetWindowRectEx+0x14>
 80073ba:	b129      	cbz	r1, 80073c8 <WM_GetWindowRectEx+0x14>
 80073bc:	f006 fcd8 	bl	800dd70 <GUI_ALLOC_h2p>
 80073c0:	4603      	mov	r3, r0
 80073c2:	cb03      	ldmia	r3!, {r0, r1}
 80073c4:	6020      	str	r0, [r4, #0]
 80073c6:	6061      	str	r1, [r4, #4]
 80073c8:	bd10      	pop	{r4, pc}
	...

080073cc <WM_HasCaptured>:
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <WM_HasCaptured+0x14>)
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <WM_HasCaptured+0x18>)
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	1ac3      	subs	r3, r0, r3
 80073d8:	4258      	negs	r0, r3
 80073da:	4158      	adcs	r0, r3
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20004a74 	.word	0x20004a74
 80073e4:	20004a98 	.word	0x20004a98

080073e8 <WM_HasFocus>:
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <WM_HasFocus+0x14>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <WM_HasFocus+0x18>)
 80073ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073f2:	1ac3      	subs	r3, r0, r3
 80073f4:	4258      	negs	r0, r3
 80073f6:	4158      	adcs	r0, r3
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20004a74 	.word	0x20004a74
 8007400:	20004a64 	.word	0x20004a64

08007404 <WM_IsFocusable>:
 8007404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007406:	4604      	mov	r4, r0
 8007408:	b908      	cbnz	r0, 800740e <WM_IsFocusable+0xa>
 800740a:	2000      	movs	r0, #0
 800740c:	e011      	b.n	8007432 <WM_IsFocusable+0x2e>
 800740e:	f006 fcaf 	bl	800dd70 <GUI_ALLOC_h2p>
 8007412:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007414:	079a      	lsls	r2, r3, #30
 8007416:	d5f8      	bpl.n	800740a <WM_IsFocusable+0x6>
 8007418:	f013 0310 	ands.w	r3, r3, #16
 800741c:	d1f5      	bne.n	800740a <WM_IsFocusable+0x6>
 800741e:	a904      	add	r1, sp, #16
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	231f      	movs	r3, #31
 8007424:	f841 3d10 	str.w	r3, [r1, #-16]!
 8007428:	4620      	mov	r0, r4
 800742a:	4669      	mov	r1, sp
 800742c:	f000 fd79 	bl	8007f22 <WM_SendMessage>
 8007430:	9803      	ldr	r0, [sp, #12]
 8007432:	b004      	add	sp, #16
 8007434:	bd10      	pop	{r4, pc}

08007436 <WM_IsWindow>:
 8007436:	f000 bd2b 	b.w	8007e90 <WM__IsWindow>
	...

0800743c <WM_OnKey>:
 800743c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <WM_OnKey+0x2c>)
 8007440:	4603      	mov	r3, r0
 8007442:	6810      	ldr	r0, [r2, #0]
 8007444:	4a09      	ldr	r2, [pc, #36]	; (800746c <WM_OnKey+0x30>)
 8007446:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800744a:	b148      	cbz	r0, 8007460 <WM_OnKey+0x24>
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	230e      	movs	r3, #14
 8007450:	9101      	str	r1, [sp, #4]
 8007452:	9302      	str	r3, [sp, #8]
 8007454:	a902      	add	r1, sp, #8
 8007456:	ab00      	add	r3, sp, #0
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	f7ff fc4b 	bl	8006cf4 <WM__SendMessage>
 800745e:	2001      	movs	r0, #1
 8007460:	b007      	add	sp, #28
 8007462:	f85d fb04 	ldr.w	pc, [sp], #4
 8007466:	bf00      	nop
 8007468:	20004a74 	.word	0x20004a74
 800746c:	20004a64 	.word	0x20004a64

08007470 <WM_ResizeWindow>:
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	ea51 0302 	orrs.w	r3, r1, r2
 8007478:	b08a      	sub	sp, #40	; 0x28
 800747a:	4680      	mov	r8, r0
 800747c:	460e      	mov	r6, r1
 800747e:	4617      	mov	r7, r2
 8007480:	d06e      	beq.n	8007560 <WM_ResizeWindow+0xf0>
 8007482:	2800      	cmp	r0, #0
 8007484:	d06c      	beq.n	8007560 <WM_ResizeWindow+0xf0>
 8007486:	f006 fc7d 	bl	800dd84 <GUI_ALLOC_LockH>
 800748a:	4603      	mov	r3, r0
 800748c:	9003      	str	r0, [sp, #12]
 800748e:	c803      	ldmia	r0, {r0, r1}
 8007490:	ad04      	add	r5, sp, #16
 8007492:	ac06      	add	r4, sp, #24
 8007494:	e885 0003 	stmia.w	r5, {r0, r1}
 8007498:	e884 0003 	stmia.w	r4, {r0, r1}
 800749c:	b17e      	cbz	r6, 80074be <WM_ResizeWindow+0x4e>
 800749e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074a0:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80074a4:	2a80      	cmp	r2, #128	; 0x80
 80074a6:	d105      	bne.n	80074b4 <WM_ResizeWindow+0x44>
 80074a8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80074ac:	1b96      	subs	r6, r2, r6
 80074ae:	f8ad 6018 	strh.w	r6, [sp, #24]
 80074b2:	e004      	b.n	80074be <WM_ResizeWindow+0x4e>
 80074b4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80074b8:	4416      	add	r6, r2
 80074ba:	f8ad 601c 	strh.w	r6, [sp, #28]
 80074be:	b187      	cbz	r7, 80074e2 <WM_ResizeWindow+0x72>
 80074c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074c2:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80074c6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80074ca:	d105      	bne.n	80074d8 <WM_ResizeWindow+0x68>
 80074cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80074d0:	1bd7      	subs	r7, r2, r7
 80074d2:	f8ad 701a 	strh.w	r7, [sp, #26]
 80074d6:	e004      	b.n	80074e2 <WM_ResizeWindow+0x72>
 80074d8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80074dc:	4417      	add	r7, r2
 80074de:	f8ad 701e 	strh.w	r7, [sp, #30]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	03da      	lsls	r2, r3, #15
 80074e6:	d502      	bpl.n	80074ee <WM_ResizeWindow+0x7e>
 80074e8:	4640      	mov	r0, r8
 80074ea:	f000 fce1 	bl	8007eb0 <WM__InvalidateDrawAndDescs>
 80074ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074f2:	9b03      	ldr	r3, [sp, #12]
 80074f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	079b      	lsls	r3, r3, #30
 80074fc:	d50a      	bpl.n	8007514 <WM_ResizeWindow+0xa4>
 80074fe:	a808      	add	r0, sp, #32
 8007500:	4629      	mov	r1, r5
 8007502:	4622      	mov	r2, r4
 8007504:	f005 f936 	bl	800c774 <GUI_MergeRect>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	a808      	add	r0, sp, #32
 800750c:	6999      	ldr	r1, [r3, #24]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	f000 fe0c 	bl	800812c <WM__InvalidateRectEx>
 8007514:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 8007518:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800751c:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 8007520:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8007524:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
 8007528:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800752c:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8007530:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8007534:	1ae3      	subs	r3, r4, r3
 8007536:	1a38      	subs	r0, r7, r0
 8007538:	ac0a      	add	r4, sp, #40	; 0x28
 800753a:	1aaa      	subs	r2, r5, r2
 800753c:	9000      	str	r0, [sp, #0]
 800753e:	1a71      	subs	r1, r6, r1
 8007540:	9803      	ldr	r0, [sp, #12]
 8007542:	f7ff fc09 	bl	8006d58 <WM__UpdateChildPositions>
 8007546:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800754a:	f101 0008 	add.w	r0, r1, #8
 800754e:	f004 f8f7 	bl	800b740 <GUI__IntersectRect>
 8007552:	4640      	mov	r0, r8
 8007554:	2105      	movs	r1, #5
 8007556:	f000 fce8 	bl	8007f2a <WM__SendMsgNoData>
 800755a:	4620      	mov	r0, r4
 800755c:	f006 fc20 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007560:	b00a      	add	sp, #40	; 0x28
 8007562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007566 <WM_SendMessageNoPara>:
 8007566:	f7ff bbe3 	b.w	8006d30 <WM__SendMessageNoPara>

0800756a <WM_SendToParent>:
 800756a:	b538      	push	{r3, r4, r5, lr}
 800756c:	4605      	mov	r5, r0
 800756e:	460c      	mov	r4, r1
 8007570:	b141      	cbz	r1, 8007584 <WM_SendToParent+0x1a>
 8007572:	f7ff fed4 	bl	800731e <WM_GetParent>
 8007576:	b128      	cbz	r0, 8007584 <WM_SendToParent+0x1a>
 8007578:	60a5      	str	r5, [r4, #8]
 800757a:	4621      	mov	r1, r4
 800757c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007580:	f7ff bbb8 	b.w	8006cf4 <WM__SendMessage>
 8007584:	bd38      	pop	{r3, r4, r5, pc}

08007586 <WM_NotifyParent>:
 8007586:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007588:	2326      	movs	r3, #38	; 0x26
 800758a:	9103      	str	r1, [sp, #12]
 800758c:	4669      	mov	r1, sp
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	f7ff ffeb 	bl	800756a <WM_SendToParent>
 8007594:	b005      	add	sp, #20
 8007596:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800759c <WM_SetFocus>:
 800759c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759e:	b087      	sub	sp, #28
 80075a0:	4604      	mov	r4, r0
 80075a2:	2100      	movs	r1, #0
 80075a4:	a802      	add	r0, sp, #8
 80075a6:	2210      	movs	r2, #16
 80075a8:	f009 fdae 	bl	8011108 <memset>
 80075ac:	2c00      	cmp	r4, #0
 80075ae:	d03a      	beq.n	8007626 <WM_SetFocus+0x8a>
 80075b0:	4b1f      	ldr	r3, [pc, #124]	; (8007630 <WM_SetFocus+0x94>)
 80075b2:	4a20      	ldr	r2, [pc, #128]	; (8007634 <WM_SetFocus+0x98>)
 80075b4:	6819      	ldr	r1, [r3, #0]
 80075b6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80075ba:	4284      	cmp	r4, r0
 80075bc:	4616      	mov	r6, r2
 80075be:	461f      	mov	r7, r3
 80075c0:	d031      	beq.n	8007626 <WM_SetFocus+0x8a>
 80075c2:	231e      	movs	r3, #30
 80075c4:	e88d 0011 	stmia.w	sp, {r0, r4}
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	b110      	cbz	r0, 80075d2 <WM_SetFocus+0x36>
 80075cc:	a902      	add	r1, sp, #8
 80075ce:	f7ff fb91 	bl	8006cf4 <WM__SendMessage>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4620      	mov	r0, r4
 80075d6:	a902      	add	r1, sp, #8
 80075d8:	9305      	str	r3, [sp, #20]
 80075da:	f7ff fb8b 	bl	8006cf4 <WM__SendMessage>
 80075de:	9d05      	ldr	r5, [sp, #20]
 80075e0:	bb15      	cbnz	r5, 8007628 <WM_SetFocus+0x8c>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7ff fe98 	bl	800731e <WM_GetParent>
 80075ee:	4604      	mov	r4, r0
 80075f0:	b138      	cbz	r0, 8007602 <WM_SetFocus+0x66>
 80075f2:	2320      	movs	r3, #32
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	a902      	add	r1, sp, #8
 80075f8:	ab00      	add	r3, sp, #0
 80075fa:	9305      	str	r3, [sp, #20]
 80075fc:	f7ff fb7a 	bl	8006cf4 <WM__SendMessage>
 8007600:	e7f2      	b.n	80075e8 <WM_SetFocus+0x4c>
 8007602:	9c00      	ldr	r4, [sp, #0]
 8007604:	4620      	mov	r0, r4
 8007606:	f000 fc43 	bl	8007e90 <WM__IsWindow>
 800760a:	b168      	cbz	r0, 8007628 <WM_SetFocus+0x8c>
 800760c:	4620      	mov	r0, r4
 800760e:	f7ff fe86 	bl	800731e <WM_GetParent>
 8007612:	4604      	mov	r4, r0
 8007614:	b140      	cbz	r0, 8007628 <WM_SetFocus+0x8c>
 8007616:	2320      	movs	r3, #32
 8007618:	9302      	str	r3, [sp, #8]
 800761a:	a902      	add	r1, sp, #8
 800761c:	ab00      	add	r3, sp, #0
 800761e:	9305      	str	r3, [sp, #20]
 8007620:	f7ff fb68 	bl	8006cf4 <WM__SendMessage>
 8007624:	e7f2      	b.n	800760c <WM_SetFocus+0x70>
 8007626:	2501      	movs	r5, #1
 8007628:	4628      	mov	r0, r5
 800762a:	b007      	add	sp, #28
 800762c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800762e:	bf00      	nop
 8007630:	20004a74 	.word	0x20004a74
 8007634:	20004a64 	.word	0x20004a64

08007638 <WM_SetSize>:
 8007638:	e92d 41e7 	stmdb	sp!, {r0, r1, r2, r5, r6, r7, r8, lr}
 800763c:	460e      	mov	r6, r1
 800763e:	4690      	mov	r8, r2
 8007640:	4607      	mov	r7, r0
 8007642:	b1d0      	cbz	r0, 800767a <WM_SetSize+0x42>
 8007644:	f006 fb9e 	bl	800dd84 <GUI_ALLOC_LockH>
 8007648:	4603      	mov	r3, r0
 800764a:	a802      	add	r0, sp, #8
 800764c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007650:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007654:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 8007658:	f840 3d04 	str.w	r3, [r0, #-4]!
 800765c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007660:	1a8a      	subs	r2, r1, r2
 8007662:	1aed      	subs	r5, r5, r3
 8007664:	43d2      	mvns	r2, r2
 8007666:	43ed      	mvns	r5, r5
 8007668:	4416      	add	r6, r2
 800766a:	4445      	add	r5, r8
 800766c:	f006 fb98 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007670:	4638      	mov	r0, r7
 8007672:	4631      	mov	r1, r6
 8007674:	462a      	mov	r2, r5
 8007676:	f7ff fefb 	bl	8007470 <WM_ResizeWindow>
 800767a:	b003      	add	sp, #12
 800767c:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}

08007680 <WM_SetUserClipRect>:
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <WM_SetUserClipRect+0x14>)
 8007682:	b510      	push	{r4, lr}
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8007688:	6458      	str	r0, [r3, #68]	; 0x44
 800768a:	f000 fbdd 	bl	8007e48 <WM__ActivateClipRect>
 800768e:	4620      	mov	r0, r4
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	20000084 	.word	0x20000084

08007698 <WM_InvalidateWindowAndDescs>:
 8007698:	b510      	push	{r4, lr}
 800769a:	4604      	mov	r4, r0
 800769c:	b170      	cbz	r0, 80076bc <WM_InvalidateWindowAndDescs+0x24>
 800769e:	f000 fd99 	bl	80081d4 <WM_InvalidateWindow>
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff fdc6 	bl	8007234 <WM_GetFirstChild>
 80076a8:	4604      	mov	r4, r0
 80076aa:	b13c      	cbz	r4, 80076bc <WM_InvalidateWindowAndDescs+0x24>
 80076ac:	4620      	mov	r0, r4
 80076ae:	f7ff fff3 	bl	8007698 <WM_InvalidateWindowAndDescs>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f006 fb5c 	bl	800dd70 <GUI_ALLOC_h2p>
 80076b8:	6a04      	ldr	r4, [r0, #32]
 80076ba:	e7f6      	b.n	80076aa <WM_InvalidateWindowAndDescs+0x12>
 80076bc:	bd10      	pop	{r4, pc}

080076be <WM_ShowWindow>:
 80076be:	b513      	push	{r0, r1, r4, lr}
 80076c0:	4604      	mov	r4, r0
 80076c2:	b170      	cbz	r0, 80076e2 <WM_ShowWindow+0x24>
 80076c4:	f006 fb5e 	bl	800dd84 <GUI_ALLOC_LockH>
 80076c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80076ca:	9001      	str	r0, [sp, #4]
 80076cc:	0793      	lsls	r3, r2, #30
 80076ce:	d405      	bmi.n	80076dc <WM_ShowWindow+0x1e>
 80076d0:	f042 0202 	orr.w	r2, r2, #2
 80076d4:	6282      	str	r2, [r0, #40]	; 0x28
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7ff ffde 	bl	8007698 <WM_InvalidateWindowAndDescs>
 80076dc:	a801      	add	r0, sp, #4
 80076de:	f006 fb5f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80076e2:	b002      	add	sp, #8
 80076e4:	bd10      	pop	{r4, pc}
	...

080076e8 <WM_ValidateWindow>:
 80076e8:	b507      	push	{r0, r1, r2, lr}
 80076ea:	b178      	cbz	r0, 800770c <WM_ValidateWindow+0x24>
 80076ec:	f006 fb4a 	bl	800dd84 <GUI_ALLOC_LockH>
 80076f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80076f2:	9001      	str	r0, [sp, #4]
 80076f4:	069a      	lsls	r2, r3, #26
 80076f6:	d506      	bpl.n	8007706 <WM_ValidateWindow+0x1e>
 80076f8:	f023 0320 	bic.w	r3, r3, #32
 80076fc:	6283      	str	r3, [r0, #40]	; 0x28
 80076fe:	4b05      	ldr	r3, [pc, #20]	; (8007714 <WM_ValidateWindow+0x2c>)
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	3a01      	subs	r2, #1
 8007704:	801a      	strh	r2, [r3, #0]
 8007706:	a801      	add	r0, sp, #4
 8007708:	f006 fb4a 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800770c:	b003      	add	sp, #12
 800770e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007712:	bf00      	nop
 8007714:	20004a6c 	.word	0x20004a6c

08007718 <WM__GetWindowSizeX>:
 8007718:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800771c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8007720:	1ad0      	subs	r0, r2, r3
 8007722:	3001      	adds	r0, #1
 8007724:	4770      	bx	lr

08007726 <WM__GetWindowSizeY>:
 8007726:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800772a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800772e:	1ad0      	subs	r0, r2, r3
 8007730:	3001      	adds	r0, #1
 8007732:	4770      	bx	lr

08007734 <WM_GetWindowSizeX>:
 8007734:	b513      	push	{r0, r1, r4, lr}
 8007736:	b908      	cbnz	r0, 800773c <WM_GetWindowSizeX+0x8>
 8007738:	f000 fef0 	bl	800851c <WM_GetActiveWindow>
 800773c:	f006 fb22 	bl	800dd84 <GUI_ALLOC_LockH>
 8007740:	ab02      	add	r3, sp, #8
 8007742:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007746:	f843 0d04 	str.w	r0, [r3, #-4]!
 800774a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800774e:	4618      	mov	r0, r3
 8007750:	1aa4      	subs	r4, r4, r2
 8007752:	f006 fb25 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007756:	3401      	adds	r4, #1
 8007758:	4620      	mov	r0, r4
 800775a:	b002      	add	sp, #8
 800775c:	bd10      	pop	{r4, pc}

0800775e <WM_GetWindowSizeY>:
 800775e:	b513      	push	{r0, r1, r4, lr}
 8007760:	b908      	cbnz	r0, 8007766 <WM_GetWindowSizeY+0x8>
 8007762:	f000 fedb 	bl	800851c <WM_GetActiveWindow>
 8007766:	f006 fb0d 	bl	800dd84 <GUI_ALLOC_LockH>
 800776a:	ab02      	add	r3, sp, #8
 800776c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007770:	f843 0d04 	str.w	r0, [r3, #-4]!
 8007774:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8007778:	4618      	mov	r0, r3
 800777a:	1aa4      	subs	r4, r4, r2
 800777c:	f006 fb10 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007780:	3401      	adds	r4, #1
 8007782:	4620      	mov	r0, r4
 8007784:	b002      	add	sp, #8
 8007786:	bd10      	pop	{r4, pc}

08007788 <_cbInvalidateOne>:
 8007788:	f000 bd24 	b.w	80081d4 <WM_InvalidateWindow>

0800778c <WM_BringToTop>:
 800778c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	2800      	cmp	r0, #0
 8007792:	d032      	beq.n	80077fa <WM_BringToTop+0x6e>
 8007794:	f006 faf6 	bl	800dd84 <GUI_ALLOC_LockH>
 8007798:	ac02      	add	r4, sp, #8
 800779a:	4603      	mov	r3, r0
 800779c:	f844 0d08 	str.w	r0, [r4, #-8]!
 80077a0:	6a00      	ldr	r0, [r0, #32]
 80077a2:	b908      	cbnz	r0, 80077a8 <WM_BringToTop+0x1c>
 80077a4:	4668      	mov	r0, sp
 80077a6:	e00e      	b.n	80077c6 <WM_BringToTop+0x3a>
 80077a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077aa:	071a      	lsls	r2, r3, #28
 80077ac:	d411      	bmi.n	80077d2 <WM_BringToTop+0x46>
 80077ae:	f006 fae9 	bl	800dd84 <GUI_ALLOC_LockH>
 80077b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80077b4:	ae02      	add	r6, sp, #8
 80077b6:	071b      	lsls	r3, r3, #28
 80077b8:	f846 0d04 	str.w	r0, [r6, #-4]!
 80077bc:	d506      	bpl.n	80077cc <WM_BringToTop+0x40>
 80077be:	4668      	mov	r0, sp
 80077c0:	f006 faee 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80077c4:	4630      	mov	r0, r6
 80077c6:	f006 faeb 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80077ca:	e016      	b.n	80077fa <WM_BringToTop+0x6e>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f006 fae7 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80077d2:	9b00      	ldr	r3, [sp, #0]
 80077d4:	4668      	mov	r0, sp
 80077d6:	699e      	ldr	r6, [r3, #24]
 80077d8:	f006 fae2 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 fae5 	bl	8007dac <WM__RemoveWindowFromList>
 80077e2:	4631      	mov	r1, r6
 80077e4:	4628      	mov	r0, r5
 80077e6:	f000 fa8f 	bl	8007d08 <WM__InsertWindowIntoList>
 80077ea:	4628      	mov	r0, r5
 80077ec:	f000 fcf2 	bl	80081d4 <WM_InvalidateWindow>
 80077f0:	4628      	mov	r0, r5
 80077f2:	4903      	ldr	r1, [pc, #12]	; (8007800 <WM_BringToTop+0x74>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	f7ff fcf2 	bl	80071de <WM_ForEachDesc>
 80077fa:	b002      	add	sp, #8
 80077fc:	bd70      	pop	{r4, r5, r6, pc}
 80077fe:	bf00      	nop
 8007800:	08007789 	.word	0x08007789

08007804 <_OnExit>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <_OnExit+0x68>)
 8007808:	4d19      	ldr	r5, [pc, #100]	; (8007870 <_OnExit+0x6c>)
 800780a:	4a1a      	ldr	r2, [pc, #104]	; (8007874 <_OnExit+0x70>)
 800780c:	481a      	ldr	r0, [pc, #104]	; (8007878 <_OnExit+0x74>)
 800780e:	2400      	movs	r4, #0
 8007810:	701c      	strb	r4, [r3, #0]
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <_OnExit+0x78>)
 8007814:	6014      	str	r4, [r2, #0]
 8007816:	601c      	str	r4, [r3, #0]
 8007818:	4b19      	ldr	r3, [pc, #100]	; (8007880 <_OnExit+0x7c>)
 800781a:	6054      	str	r4, [r2, #4]
 800781c:	601c      	str	r4, [r3, #0]
 800781e:	4b19      	ldr	r3, [pc, #100]	; (8007884 <_OnExit+0x80>)
 8007820:	601c      	str	r4, [r3, #0]
 8007822:	605c      	str	r4, [r3, #4]
 8007824:	4b18      	ldr	r3, [pc, #96]	; (8007888 <_OnExit+0x84>)
 8007826:	601c      	str	r4, [r3, #0]
 8007828:	4b18      	ldr	r3, [pc, #96]	; (800788c <_OnExit+0x88>)
 800782a:	601c      	str	r4, [r3, #0]
 800782c:	4b18      	ldr	r3, [pc, #96]	; (8007890 <_OnExit+0x8c>)
 800782e:	601c      	str	r4, [r3, #0]
 8007830:	4b18      	ldr	r3, [pc, #96]	; (8007894 <_OnExit+0x90>)
 8007832:	601c      	str	r4, [r3, #0]
 8007834:	4b18      	ldr	r3, [pc, #96]	; (8007898 <_OnExit+0x94>)
 8007836:	4621      	mov	r1, r4
 8007838:	601c      	str	r4, [r3, #0]
 800783a:	2218      	movs	r2, #24
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	4798      	blx	r3
 8007840:	4b16      	ldr	r3, [pc, #88]	; (800789c <_OnExit+0x98>)
 8007842:	4817      	ldr	r0, [pc, #92]	; (80078a0 <_OnExit+0x9c>)
 8007844:	601c      	str	r4, [r3, #0]
 8007846:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <_OnExit+0xa0>)
 8007848:	4621      	mov	r1, r4
 800784a:	601c      	str	r4, [r3, #0]
 800784c:	605c      	str	r4, [r3, #4]
 800784e:	2210      	movs	r2, #16
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	4798      	blx	r3
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	4814      	ldr	r0, [pc, #80]	; (80078a8 <_OnExit+0xa4>)
 8007858:	4621      	mov	r1, r4
 800785a:	2210      	movs	r2, #16
 800785c:	4798      	blx	r3
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	4812      	ldr	r0, [pc, #72]	; (80078ac <_OnExit+0xa8>)
 8007862:	4621      	mov	r1, r4
 8007864:	2210      	movs	r2, #16
 8007866:	4798      	blx	r3
 8007868:	bd38      	pop	{r3, r4, r5, pc}
 800786a:	bf00      	nop
 800786c:	20002a14 	.word	0x20002a14
 8007870:	20000070 	.word	0x20000070
 8007874:	20004a64 	.word	0x20004a64
 8007878:	200029f8 	.word	0x200029f8
 800787c:	200029f4 	.word	0x200029f4
 8007880:	20004a90 	.word	0x20004a90
 8007884:	20004a98 	.word	0x20004a98
 8007888:	20004aa4 	.word	0x20004aa4
 800788c:	20004a50 	.word	0x20004a50
 8007890:	20004a84 	.word	0x20004a84
 8007894:	20004a94 	.word	0x20004a94
 8007898:	20002a10 	.word	0x20002a10
 800789c:	20004a60 	.word	0x20004a60
 80078a0:	20004bec 	.word	0x20004bec
 80078a4:	20004a54 	.word	0x20004a54
 80078a8:	20004bdc 	.word	0x20004bdc
 80078ac:	20004bcc 	.word	0x20004bcc

080078b0 <_Paint1>:
 80078b0:	b510      	push	{r4, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	f006 fa5c 	bl	800dd70 <GUI_ALLOC_h2p>
 80078b8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80078ba:	4a04      	ldr	r2, [pc, #16]	; (80078cc <_Paint1+0x1c>)
 80078bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80078c0:	4b03      	ldr	r3, [pc, #12]	; (80078d0 <_Paint1+0x20>)
 80078c2:	4620      	mov	r0, r4
 80078c4:	bf08      	it	eq
 80078c6:	4613      	moveq	r3, r2
 80078c8:	4798      	blx	r3
 80078ca:	bd10      	pop	{r4, pc}
 80078cc:	080087bd 	.word	0x080087bd
 80078d0:	08008d2d 	.word	0x08008d2d

080078d4 <_Findy1>:
 80078d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d6:	4605      	mov	r5, r0
 80078d8:	b085      	sub	sp, #20
 80078da:	460c      	mov	r4, r1
 80078dc:	4616      	mov	r6, r2
 80078de:	2d00      	cmp	r5, #0
 80078e0:	d04c      	beq.n	800797c <_Findy1+0xa8>
 80078e2:	4628      	mov	r0, r5
 80078e4:	f006 fa4e 	bl	800dd84 <GUI_ALLOC_LockH>
 80078e8:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80078ea:	9001      	str	r0, [sp, #4]
 80078ec:	07bb      	lsls	r3, r7, #30
 80078ee:	4601      	mov	r1, r0
 80078f0:	d53d      	bpl.n	800796e <_Findy1+0x9a>
 80078f2:	ad02      	add	r5, sp, #8
 80078f4:	b126      	cbz	r6, 8007900 <_Findy1+0x2c>
 80078f6:	4628      	mov	r0, r5
 80078f8:	4632      	mov	r2, r6
 80078fa:	f003 ff3f 	bl	800b77c <GUI__IntersectRects>
 80078fe:	e002      	b.n	8007906 <_Findy1+0x32>
 8007900:	c803      	ldmia	r0, {r0, r1}
 8007902:	e885 0003 	stmia.w	r5, {r0, r1}
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f004 ffa9 	bl	800c860 <GUI_RectsIntersect>
 800790e:	b370      	cbz	r0, 800796e <_Findy1+0x9a>
 8007910:	f017 0f01 	tst.w	r7, #1
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	d11e      	bne.n	8007956 <_Findy1+0x82>
 8007918:	b13e      	cbz	r6, 800792a <_Findy1+0x56>
 800791a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800791e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8007922:	429a      	cmp	r2, r3
 8007924:	bfa8      	it	ge
 8007926:	4613      	movge	r3, r2
 8007928:	e001      	b.n	800792e <_Findy1+0x5a>
 800792a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800792e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8007932:	4293      	cmp	r3, r2
 8007934:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8007938:	dd06      	ble.n	8007948 <_Findy1+0x74>
 800793a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800793e:	b219      	sxth	r1, r3
 8007940:	428a      	cmp	r2, r1
 8007942:	db14      	blt.n	800796e <_Findy1+0x9a>
 8007944:	3b01      	subs	r3, #1
 8007946:	e004      	b.n	8007952 <_Findy1+0x7e>
 8007948:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800794c:	b219      	sxth	r1, r3
 800794e:	428a      	cmp	r2, r1
 8007950:	dd0d      	ble.n	800796e <_Findy1+0x9a>
 8007952:	80e3      	strh	r3, [r4, #6]
 8007954:	e00b      	b.n	800796e <_Findy1+0x9a>
 8007956:	69df      	ldr	r7, [r3, #28]
 8007958:	b14f      	cbz	r7, 800796e <_Findy1+0x9a>
 800795a:	4638      	mov	r0, r7
 800795c:	4621      	mov	r1, r4
 800795e:	462a      	mov	r2, r5
 8007960:	f7ff ffb8 	bl	80078d4 <_Findy1>
 8007964:	4638      	mov	r0, r7
 8007966:	f006 fa03 	bl	800dd70 <GUI_ALLOC_h2p>
 800796a:	6a07      	ldr	r7, [r0, #32]
 800796c:	e7f4      	b.n	8007958 <_Findy1+0x84>
 800796e:	a804      	add	r0, sp, #16
 8007970:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007974:	6a1d      	ldr	r5, [r3, #32]
 8007976:	f006 fa13 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800797a:	e7b0      	b.n	80078de <_Findy1+0xa>
 800797c:	b005      	add	sp, #20
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007980 <_Findx0>:
 8007980:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	460f      	mov	r7, r1
 8007988:	4690      	mov	r8, r2
 800798a:	2500      	movs	r5, #0
 800798c:	2c00      	cmp	r4, #0
 800798e:	d037      	beq.n	8007a00 <_Findx0+0x80>
 8007990:	4620      	mov	r0, r4
 8007992:	f006 f9f7 	bl	800dd84 <GUI_ALLOC_LockH>
 8007996:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8007998:	9001      	str	r0, [sp, #4]
 800799a:	07b2      	lsls	r2, r6, #30
 800799c:	4601      	mov	r1, r0
 800799e:	d528      	bpl.n	80079f2 <_Findx0+0x72>
 80079a0:	ac02      	add	r4, sp, #8
 80079a2:	f1b8 0f00 	cmp.w	r8, #0
 80079a6:	d004      	beq.n	80079b2 <_Findx0+0x32>
 80079a8:	4620      	mov	r0, r4
 80079aa:	4642      	mov	r2, r8
 80079ac:	f003 fee6 	bl	800b77c <GUI__IntersectRects>
 80079b0:	e002      	b.n	80079b8 <_Findx0+0x38>
 80079b2:	c803      	ldmia	r0, {r0, r1}
 80079b4:	e884 0003 	stmia.w	r4, {r0, r1}
 80079b8:	4638      	mov	r0, r7
 80079ba:	4621      	mov	r1, r4
 80079bc:	f004 ff50 	bl	800c860 <GUI_RectsIntersect>
 80079c0:	b1b8      	cbz	r0, 80079f2 <_Findx0+0x72>
 80079c2:	07f3      	lsls	r3, r6, #31
 80079c4:	d405      	bmi.n	80079d2 <_Findx0+0x52>
 80079c6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80079ca:	3301      	adds	r3, #1
 80079cc:	803b      	strh	r3, [r7, #0]
 80079ce:	2501      	movs	r5, #1
 80079d0:	e00f      	b.n	80079f2 <_Findx0+0x72>
 80079d2:	9b01      	ldr	r3, [sp, #4]
 80079d4:	69de      	ldr	r6, [r3, #28]
 80079d6:	b166      	cbz	r6, 80079f2 <_Findx0+0x72>
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	4622      	mov	r2, r4
 80079de:	f7ff ffcf 	bl	8007980 <_Findx0>
 80079e2:	2800      	cmp	r0, #0
 80079e4:	4630      	mov	r0, r6
 80079e6:	bf18      	it	ne
 80079e8:	2501      	movne	r5, #1
 80079ea:	f006 f9c1 	bl	800dd70 <GUI_ALLOC_h2p>
 80079ee:	6a06      	ldr	r6, [r0, #32]
 80079f0:	e7f1      	b.n	80079d6 <_Findx0+0x56>
 80079f2:	a804      	add	r0, sp, #16
 80079f4:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 80079f8:	6a1c      	ldr	r4, [r3, #32]
 80079fa:	f006 f9d1 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80079fe:	e7c5      	b.n	800798c <_Findx0+0xc>
 8007a00:	4628      	mov	r0, r5
 8007a02:	b004      	add	sp, #16
 8007a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a08 <_Findx1>:
 8007a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a0a:	4604      	mov	r4, r0
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4617      	mov	r7, r2
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	d031      	beq.n	8007a7a <_Findx1+0x72>
 8007a16:	4620      	mov	r0, r4
 8007a18:	f006 f9b4 	bl	800dd84 <GUI_ALLOC_LockH>
 8007a1c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8007a1e:	9001      	str	r0, [sp, #4]
 8007a20:	07aa      	lsls	r2, r5, #30
 8007a22:	4601      	mov	r1, r0
 8007a24:	d522      	bpl.n	8007a6c <_Findx1+0x64>
 8007a26:	ac02      	add	r4, sp, #8
 8007a28:	b127      	cbz	r7, 8007a34 <_Findx1+0x2c>
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	f003 fea5 	bl	800b77c <GUI__IntersectRects>
 8007a32:	e002      	b.n	8007a3a <_Findx1+0x32>
 8007a34:	c803      	ldmia	r0, {r0, r1}
 8007a36:	e884 0003 	stmia.w	r4, {r0, r1}
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	f004 ff0f 	bl	800c860 <GUI_RectsIntersect>
 8007a42:	b198      	cbz	r0, 8007a6c <_Findx1+0x64>
 8007a44:	07eb      	lsls	r3, r5, #31
 8007a46:	d404      	bmi.n	8007a52 <_Findx1+0x4a>
 8007a48:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	80b3      	strh	r3, [r6, #4]
 8007a50:	e00c      	b.n	8007a6c <_Findx1+0x64>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	69dd      	ldr	r5, [r3, #28]
 8007a56:	b14d      	cbz	r5, 8007a6c <_Findx1+0x64>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	f7ff ffd3 	bl	8007a08 <_Findx1>
 8007a62:	4628      	mov	r0, r5
 8007a64:	f006 f984 	bl	800dd70 <GUI_ALLOC_h2p>
 8007a68:	6a05      	ldr	r5, [r0, #32]
 8007a6a:	e7f4      	b.n	8007a56 <_Findx1+0x4e>
 8007a6c:	a804      	add	r0, sp, #16
 8007a6e:	f850 3d0c 	ldr.w	r3, [r0, #-12]!
 8007a72:	6a1c      	ldr	r4, [r3, #32]
 8007a74:	f006 f994 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007a78:	e7cb      	b.n	8007a12 <_Findx1+0xa>
 8007a7a:	b005      	add	sp, #20
 8007a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007a80 <_Paint1Trans>:
 8007a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a84:	4d21      	ldr	r5, [pc, #132]	; (8007b0c <_Paint1Trans+0x8c>)
 8007a86:	682b      	ldr	r3, [r5, #0]
 8007a88:	4606      	mov	r6, r0
 8007a8a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007a8c:	f006 f97a 	bl	800dd84 <GUI_ALLOC_LockH>
 8007a90:	9000      	str	r0, [sp, #0]
 8007a92:	4630      	mov	r0, r6
 8007a94:	f006 f976 	bl	800dd84 <GUI_ALLOC_LockH>
 8007a98:	ac02      	add	r4, sp, #8
 8007a9a:	4601      	mov	r1, r0
 8007a9c:	9001      	str	r0, [sp, #4]
 8007a9e:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8007aa2:	3008      	adds	r0, #8
 8007aa4:	f004 fedc 	bl	800c860 <GUI_RectsIntersect>
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	b328      	cbz	r0, 8007af8 <_Paint1Trans+0x78>
 8007aac:	9901      	ldr	r1, [sp, #4]
 8007aae:	9a00      	ldr	r2, [sp, #0]
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	4c17      	ldr	r4, [pc, #92]	; (8007b10 <_Paint1Trans+0x90>)
 8007ab4:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 8007ab6:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8007aba:	f101 0008 	add.w	r0, r1, #8
 8007abe:	3208      	adds	r2, #8
 8007ac0:	f003 fe5c 	bl	800b77c <GUI__IntersectRects>
 8007ac4:	4668      	mov	r0, sp
 8007ac6:	f006 f96b 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007aca:	9a01      	ldr	r2, [sp, #4]
 8007acc:	682b      	ldr	r3, [r5, #0]
 8007ace:	f9b2 1000 	ldrsh.w	r1, [r2]
 8007ad2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007ad6:	64d9      	str	r1, [r3, #76]	; 0x4c
 8007ad8:	651a      	str	r2, [r3, #80]	; 0x50
 8007ada:	a801      	add	r0, sp, #4
 8007adc:	6026      	str	r6, [r4, #0]
 8007ade:	f006 f95f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff fee4 	bl	80078b0 <_Paint1>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	651f      	str	r7, [r3, #80]	; 0x50
 8007af0:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 8007af4:	2701      	movs	r7, #1
 8007af6:	e005      	b.n	8007b04 <_Paint1Trans+0x84>
 8007af8:	4668      	mov	r0, sp
 8007afa:	f006 f951 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007afe:	a801      	add	r0, sp, #4
 8007b00:	f006 f94e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007b04:	4638      	mov	r0, r7
 8007b06:	b002      	add	sp, #8
 8007b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b0c:	20000084 	.word	0x20000084
 8007b10:	20004a50 	.word	0x20004a50

08007b14 <_PaintTransChildren>:
 8007b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b18:	4606      	mov	r6, r0
 8007b1a:	f006 f933 	bl	800dd84 <GUI_ALLOC_LockH>
 8007b1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b20:	9001      	str	r0, [sp, #4]
 8007b22:	079b      	lsls	r3, r3, #30
 8007b24:	d405      	bmi.n	8007b32 <_PaintTransChildren+0x1e>
 8007b26:	a801      	add	r0, sp, #4
 8007b28:	f006 f93a 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007b2c:	b002      	add	sp, #8
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	69c4      	ldr	r4, [r0, #28]
 8007b34:	2c00      	cmp	r4, #0
 8007b36:	d0f6      	beq.n	8007b26 <_PaintTransChildren+0x12>
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f006 f923 	bl	800dd84 <GUI_ALLOC_LockH>
 8007b3e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007b40:	ad02      	add	r5, sp, #8
 8007b42:	f003 0303 	and.w	r3, r3, #3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	f845 0d08 	str.w	r0, [r5, #-8]!
 8007b4c:	d137      	bne.n	8007bbe <_PaintTransChildren+0xaa>
 8007b4e:	9901      	ldr	r1, [sp, #4]
 8007b50:	3108      	adds	r1, #8
 8007b52:	f004 fe85 	bl	800c860 <GUI_RectsIntersect>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d031      	beq.n	8007bbe <_PaintTransChildren+0xaa>
 8007b5a:	a802      	add	r0, sp, #8
 8007b5c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 8007b60:	f8b3 9008 	ldrh.w	r9, [r3, #8]
 8007b64:	f8b3 800a 	ldrh.w	r8, [r3, #10]
 8007b68:	899f      	ldrh	r7, [r3, #12]
 8007b6a:	f8b3 a00e 	ldrh.w	sl, [r3, #14]
 8007b6e:	f006 f917 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007b72:	4668      	mov	r0, sp
 8007b74:	f006 f914 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f7ff ff81 	bl	8007a80 <_Paint1Trans>
 8007b7e:	b170      	cbz	r0, 8007b9e <_PaintTransChildren+0x8a>
 8007b80:	4620      	mov	r0, r4
 8007b82:	f006 f8f5 	bl	800dd70 <GUI_ALLOC_h2p>
 8007b86:	9000      	str	r0, [sp, #0]
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f7ff ffc3 	bl	8007b14 <_PaintTransChildren>
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f006 f8ee 	bl	800dd70 <GUI_ALLOC_h2p>
 8007b94:	9000      	str	r0, [sp, #0]
 8007b96:	4630      	mov	r0, r6
 8007b98:	f006 f8ea 	bl	800dd70 <GUI_ALLOC_h2p>
 8007b9c:	9001      	str	r0, [sp, #4]
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f006 f8f0 	bl	800dd84 <GUI_ALLOC_LockH>
 8007ba4:	9001      	str	r0, [sp, #4]
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f006 f8ec 	bl	800dd84 <GUI_ALLOC_LockH>
 8007bac:	9b01      	ldr	r3, [sp, #4]
 8007bae:	9000      	str	r0, [sp, #0]
 8007bb0:	f8a3 9008 	strh.w	r9, [r3, #8]
 8007bb4:	f8a3 800a 	strh.w	r8, [r3, #10]
 8007bb8:	819f      	strh	r7, [r3, #12]
 8007bba:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	4668      	mov	r0, sp
 8007bc2:	6a1c      	ldr	r4, [r3, #32]
 8007bc4:	f006 f8ec 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007bc8:	e7b4      	b.n	8007b34 <_PaintTransChildren+0x20>
	...

08007bcc <WM__PaintWinAndOverlays>:
 8007bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bce:	4604      	mov	r4, r0
 8007bd0:	f006 f8d8 	bl	800dd84 <GUI_ALLOC_LockH>
 8007bd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007bd6:	9001      	str	r0, [sp, #4]
 8007bd8:	f640 0301 	movw	r3, #2049	; 0x801
 8007bdc:	4013      	ands	r3, r2
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d005      	beq.n	8007bee <WM__PaintWinAndOverlays+0x22>
 8007be2:	a801      	add	r0, sp, #4
 8007be4:	f006 f8dc 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007be8:	4620      	mov	r0, r4
 8007bea:	f7ff fe61 	bl	80078b0 <_Paint1>
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <WM__PaintWinAndOverlays+0x74>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	b313      	cbz	r3, 8007c3a <WM__PaintWinAndOverlays+0x6e>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7ff ff8d 	bl	8007b14 <_PaintTransChildren>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f006 f8b8 	bl	800dd70 <GUI_ALLOC_h2p>
 8007c00:	6985      	ldr	r5, [r0, #24]
 8007c02:	6a04      	ldr	r4, [r0, #32]
 8007c04:	b1cd      	cbz	r5, 8007c3a <WM__PaintWinAndOverlays+0x6e>
 8007c06:	b194      	cbz	r4, 8007c2e <WM__PaintWinAndOverlays+0x62>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f006 f8b1 	bl	800dd70 <GUI_ALLOC_h2p>
 8007c0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d102      	bne.n	8007c1e <WM__PaintWinAndOverlays+0x52>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f7ff ff31 	bl	8007a80 <_Paint1Trans>
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f7ff ff78 	bl	8007b14 <_PaintTransChildren>
 8007c24:	4620      	mov	r0, r4
 8007c26:	f006 f8a3 	bl	800dd70 <GUI_ALLOC_h2p>
 8007c2a:	6a04      	ldr	r4, [r0, #32]
 8007c2c:	e7eb      	b.n	8007c06 <WM__PaintWinAndOverlays+0x3a>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f006 f89e 	bl	800dd70 <GUI_ALLOC_h2p>
 8007c34:	6a04      	ldr	r4, [r0, #32]
 8007c36:	6985      	ldr	r5, [r0, #24]
 8007c38:	e7e4      	b.n	8007c04 <WM__PaintWinAndOverlays+0x38>
 8007c3a:	b003      	add	sp, #12
 8007c3c:	bd30      	pop	{r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	20004aa4 	.word	0x20004aa4

08007c44 <_cbPaintMemDev>:
 8007c44:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	4d17      	ldr	r5, [pc, #92]	; (8007ca8 <_cbPaintMemDev+0x64>)
 8007c4a:	682b      	ldr	r3, [r5, #0]
 8007c4c:	4606      	mov	r6, r0
 8007c4e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c50:	f006 f898 	bl	800dd84 <GUI_ALLOC_LockH>
 8007c54:	682a      	ldr	r2, [r5, #0]
 8007c56:	f8b0 a008 	ldrh.w	sl, [r0, #8]
 8007c5a:	f8b0 900a 	ldrh.w	r9, [r0, #10]
 8007c5e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
 8007c62:	89c7      	ldrh	r7, [r0, #14]
 8007c64:	ac02      	add	r4, sp, #8
 8007c66:	3208      	adds	r2, #8
 8007c68:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007c6c:	f100 0308 	add.w	r3, r0, #8
 8007c70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c74:	e883 0003 	stmia.w	r3, {r0, r1}
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f006 f891 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007c7e:	6830      	ldr	r0, [r6, #0]
 8007c80:	f7ff ffa4 	bl	8007bcc <WM__PaintWinAndOverlays>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007c88:	f006 f87c 	bl	800dd84 <GUI_ALLOC_LockH>
 8007c8c:	9001      	str	r0, [sp, #4]
 8007c8e:	f8a0 a008 	strh.w	sl, [r0, #8]
 8007c92:	f8a0 900a 	strh.w	r9, [r0, #10]
 8007c96:	f8a0 800c 	strh.w	r8, [r0, #12]
 8007c9a:	81c7      	strh	r7, [r0, #14]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f006 f87f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007ca2:	b002      	add	sp, #8
 8007ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca8:	20000084 	.word	0x20000084

08007cac <WM__ClipAtParentBorders>:
 8007cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	f006 f866 	bl	800dd84 <GUI_ALLOC_LockH>
 8007cb8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007cba:	ac02      	add	r4, sp, #8
 8007cbc:	f013 0602 	ands.w	r6, r3, #2
 8007cc0:	4601      	mov	r1, r0
 8007cc2:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007cc6:	d104      	bne.n	8007cd2 <WM__ClipAtParentBorders+0x26>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f006 f869 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007cce:	4630      	mov	r0, r6
 8007cd0:	e016      	b.n	8007d00 <WM__ClipAtParentBorders+0x54>
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f003 fd34 	bl	800b740 <GUI__IntersectRect>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	699e      	ldr	r6, [r3, #24]
 8007cdc:	4620      	mov	r0, r4
 8007cde:	b956      	cbnz	r6, 8007cf6 <WM__ClipAtParentBorders+0x4a>
 8007ce0:	f006 f85e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007ce4:	4b07      	ldr	r3, [pc, #28]	; (8007d04 <WM__ClipAtParentBorders+0x58>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4295      	cmp	r5, r2
 8007cea:	d008      	beq.n	8007cfe <WM__ClipAtParentBorders+0x52>
 8007cec:	6858      	ldr	r0, [r3, #4]
 8007cee:	1a2b      	subs	r3, r5, r0
 8007cf0:	4258      	negs	r0, r3
 8007cf2:	4158      	adcs	r0, r3
 8007cf4:	e004      	b.n	8007d00 <WM__ClipAtParentBorders+0x54>
 8007cf6:	f006 f853 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007cfa:	4635      	mov	r5, r6
 8007cfc:	e7d9      	b.n	8007cb2 <WM__ClipAtParentBorders+0x6>
 8007cfe:	2001      	movs	r0, #1
 8007d00:	b003      	add	sp, #12
 8007d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d04:	20004a54 	.word	0x20004a54

08007d08 <WM__InsertWindowIntoList>:
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	460d      	mov	r5, r1
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d049      	beq.n	8007da8 <WM__InsertWindowIntoList+0xa0>
 8007d14:	f006 f836 	bl	800dd84 <GUI_ALLOC_LockH>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	6203      	str	r3, [r0, #32]
 8007d1c:	6185      	str	r5, [r0, #24]
 8007d1e:	9001      	str	r0, [sp, #4]
 8007d20:	4628      	mov	r0, r5
 8007d22:	f006 f82f 	bl	800dd84 <GUI_ALLOC_LockH>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	69c5      	ldr	r5, [r0, #28]
 8007d2a:	9002      	str	r0, [sp, #8]
 8007d2c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8007d2e:	b92d      	cbnz	r5, 8007d3c <WM__InsertWindowIntoList+0x34>
 8007d30:	61c4      	str	r4, [r0, #28]
 8007d32:	a801      	add	r0, sp, #4
 8007d34:	f006 f834 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007d38:	a802      	add	r0, sp, #8
 8007d3a:	e033      	b.n	8007da4 <WM__InsertWindowIntoList+0x9c>
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	f006 f821 	bl	800dd84 <GUI_ALLOC_LockH>
 8007d42:	ae04      	add	r6, sp, #16
 8007d44:	f007 0708 	and.w	r7, r7, #8
 8007d48:	f846 0d04 	str.w	r0, [r6, #-4]!
 8007d4c:	b977      	cbnz	r7, 8007d6c <WM__InsertWindowIntoList+0x64>
 8007d4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d50:	071a      	lsls	r2, r3, #28
 8007d52:	d50b      	bpl.n	8007d6c <WM__InsertWindowIntoList+0x64>
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	621d      	str	r5, [r3, #32]
 8007d58:	9b02      	ldr	r3, [sp, #8]
 8007d5a:	a801      	add	r0, sp, #4
 8007d5c:	61dc      	str	r4, [r3, #28]
 8007d5e:	f006 f81f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007d62:	a802      	add	r0, sp, #8
 8007d64:	f006 f81c 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007d68:	4630      	mov	r0, r6
 8007d6a:	e01b      	b.n	8007da4 <WM__InsertWindowIntoList+0x9c>
 8007d6c:	a802      	add	r0, sp, #8
 8007d6e:	f006 f817 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007d72:	4630      	mov	r0, r6
 8007d74:	f006 f814 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f005 fff9 	bl	800dd70 <GUI_ALLOC_h2p>
 8007d7e:	9003      	str	r0, [sp, #12]
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	6a1d      	ldr	r5, [r3, #32]
 8007d84:	b90d      	cbnz	r5, 8007d8a <WM__InsertWindowIntoList+0x82>
 8007d86:	621c      	str	r4, [r3, #32]
 8007d88:	e00b      	b.n	8007da2 <WM__InsertWindowIntoList+0x9a>
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f005 fff0 	bl	800dd70 <GUI_ALLOC_h2p>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	d1f4      	bne.n	8007d7e <WM__InsertWindowIntoList+0x76>
 8007d94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d96:	071b      	lsls	r3, r3, #28
 8007d98:	d5f1      	bpl.n	8007d7e <WM__InsertWindowIntoList+0x76>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	621c      	str	r4, [r3, #32]
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	621d      	str	r5, [r3, #32]
 8007da2:	a801      	add	r0, sp, #4
 8007da4:	f005 fffc 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007da8:	b005      	add	sp, #20
 8007daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dac <WM__RemoveWindowFromList>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	4604      	mov	r4, r0
 8007db0:	f005 ffde 	bl	800dd70 <GUI_ALLOC_h2p>
 8007db4:	4605      	mov	r5, r0
 8007db6:	6980      	ldr	r0, [r0, #24]
 8007db8:	b1a8      	cbz	r0, 8007de6 <WM__RemoveWindowFromList+0x3a>
 8007dba:	f005 ffd9 	bl	800dd70 <GUI_ALLOC_h2p>
 8007dbe:	69c3      	ldr	r3, [r0, #28]
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	d105      	bne.n	8007dd2 <WM__RemoveWindowFromList+0x26>
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f005 ffd2 	bl	800dd70 <GUI_ALLOC_h2p>
 8007dcc:	6a03      	ldr	r3, [r0, #32]
 8007dce:	61f3      	str	r3, [r6, #28]
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	b143      	cbz	r3, 8007de6 <WM__RemoveWindowFromList+0x3a>
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f005 ffcb 	bl	800dd70 <GUI_ALLOC_h2p>
 8007dda:	6a03      	ldr	r3, [r0, #32]
 8007ddc:	42a3      	cmp	r3, r4
 8007dde:	d1f8      	bne.n	8007dd2 <WM__RemoveWindowFromList+0x26>
 8007de0:	6a2b      	ldr	r3, [r5, #32]
 8007de2:	6203      	str	r3, [r0, #32]
 8007de4:	bd70      	pop	{r4, r5, r6, pc}
 8007de6:	bd70      	pop	{r4, r5, r6, pc}

08007de8 <WM__Client2Screen>:
 8007de8:	4603      	mov	r3, r0
 8007dea:	4608      	mov	r0, r1
 8007dec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007df0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8007df4:	f004 bce9 	b.w	800c7ca <GUI_MoveRect>

08007df8 <_SetClipRectUserIntersect>:
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <_SetClipRectUserIntersect+0x48>)
 8007dfa:	b530      	push	{r4, r5, lr}
 8007dfc:	681c      	ldr	r4, [r3, #0]
 8007dfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8007e00:	b085      	sub	sp, #20
 8007e02:	4605      	mov	r5, r0
 8007e04:	b1ba      	cbz	r2, 8007e36 <_SetClipRectUserIntersect+0x3e>
 8007e06:	6810      	ldr	r0, [r2, #0]
 8007e08:	6851      	ldr	r1, [r2, #4]
 8007e0a:	ab02      	add	r3, sp, #8
 8007e0c:	c303      	stmia	r3!, {r0, r1}
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <_SetClipRectUserIntersect+0x4c>)
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	b900      	cbnz	r0, 8007e16 <_SetClipRectUserIntersect+0x1e>
 8007e14:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007e16:	f005 ffb5 	bl	800dd84 <GUI_ALLOC_LockH>
 8007e1a:	ac04      	add	r4, sp, #16
 8007e1c:	a902      	add	r1, sp, #8
 8007e1e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8007e22:	f7ff ffe1 	bl	8007de8 <WM__Client2Screen>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f005 ffba 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007e2c:	a802      	add	r0, sp, #8
 8007e2e:	4629      	mov	r1, r5
 8007e30:	f003 fc86 	bl	800b740 <GUI__IntersectRect>
 8007e34:	a802      	add	r0, sp, #8
 8007e36:	f002 ffa3 	bl	800ad80 <LCD_SetClipRectEx>
 8007e3a:	b005      	add	sp, #20
 8007e3c:	bd30      	pop	{r4, r5, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000084 	.word	0x20000084
 8007e44:	20004a50 	.word	0x20004a50

08007e48 <WM__ActivateClipRect>:
 8007e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4a:	4b0e      	ldr	r3, [pc, #56]	; (8007e84 <WM__ActivateClipRect+0x3c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007e52:	b10a      	cbz	r2, 8007e58 <WM__ActivateClipRect+0x10>
 8007e54:	480c      	ldr	r0, [pc, #48]	; (8007e88 <WM__ActivateClipRect+0x40>)
 8007e56:	e011      	b.n	8007e7c <WM__ActivateClipRect+0x34>
 8007e58:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8007e5a:	f005 ff93 	bl	800dd84 <GUI_ALLOC_LockH>
 8007e5e:	9001      	str	r0, [sp, #4]
 8007e60:	c803      	ldmia	r0, {r0, r1}
 8007e62:	ac02      	add	r4, sp, #8
 8007e64:	e884 0003 	stmia.w	r4, {r0, r1}
 8007e68:	a801      	add	r0, sp, #4
 8007e6a:	f005 ff99 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <WM__ActivateClipRect+0x44>)
 8007e70:	6819      	ldr	r1, [r3, #0]
 8007e72:	b111      	cbz	r1, 8007e7a <WM__ActivateClipRect+0x32>
 8007e74:	4620      	mov	r0, r4
 8007e76:	f7ff ff19 	bl	8007cac <WM__ClipAtParentBorders>
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f7ff ffbc 	bl	8007df8 <_SetClipRectUserIntersect>
 8007e80:	b004      	add	sp, #16
 8007e82:	bd10      	pop	{r4, pc}
 8007e84:	20000084 	.word	0x20000084
 8007e88:	20002a00 	.word	0x20002a00
 8007e8c:	20004a50 	.word	0x20004a50

08007e90 <WM__IsWindow>:
 8007e90:	4b06      	ldr	r3, [pc, #24]	; (8007eac <WM__IsWindow+0x1c>)
 8007e92:	b510      	push	{r4, lr}
 8007e94:	4604      	mov	r4, r0
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	b128      	cbz	r0, 8007ea6 <WM__IsWindow+0x16>
 8007e9a:	42a0      	cmp	r0, r4
 8007e9c:	d004      	beq.n	8007ea8 <WM__IsWindow+0x18>
 8007e9e:	f005 ff67 	bl	800dd70 <GUI_ALLOC_h2p>
 8007ea2:	6940      	ldr	r0, [r0, #20]
 8007ea4:	e7f8      	b.n	8007e98 <WM__IsWindow+0x8>
 8007ea6:	bd10      	pop	{r4, pc}
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	20004a70 	.word	0x20004a70

08007eb0 <WM__InvalidateDrawAndDescs>:
 8007eb0:	b513      	push	{r0, r1, r4, lr}
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	b300      	cbz	r0, 8007ef8 <WM__InvalidateDrawAndDescs+0x48>
 8007eb6:	f005 ff65 	bl	800dd84 <GUI_ALLOC_LockH>
 8007eba:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007ebc:	9001      	str	r0, [sp, #4]
 8007ebe:	0793      	lsls	r3, r2, #30
 8007ec0:	d517      	bpl.n	8007ef2 <WM__InvalidateDrawAndDescs+0x42>
 8007ec2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007ec4:	b140      	cbz	r0, 8007ed8 <WM__InvalidateDrawAndDescs+0x28>
 8007ec6:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <WM__InvalidateDrawAndDescs+0x4c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	42a3      	cmp	r3, r4
 8007ecc:	d004      	beq.n	8007ed8 <WM__InvalidateDrawAndDescs+0x28>
 8007ece:	f001 fdf9 	bl	8009ac4 <GUI_MEMDEV_Delete>
 8007ed2:	9b01      	ldr	r3, [sp, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f7ff f9ab 	bl	8007234 <WM_GetFirstChild>
 8007ede:	4604      	mov	r4, r0
 8007ee0:	b13c      	cbz	r4, 8007ef2 <WM__InvalidateDrawAndDescs+0x42>
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff ffe4 	bl	8007eb0 <WM__InvalidateDrawAndDescs>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f005 ff41 	bl	800dd70 <GUI_ALLOC_h2p>
 8007eee:	6a04      	ldr	r4, [r0, #32]
 8007ef0:	e7f6      	b.n	8007ee0 <WM__InvalidateDrawAndDescs+0x30>
 8007ef2:	a801      	add	r0, sp, #4
 8007ef4:	f005 ff54 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8007ef8:	b002      	add	sp, #8
 8007efa:	bd10      	pop	{r4, pc}
 8007efc:	20004aa0 	.word	0x20004aa0

08007f00 <WM__RectIsNZ>:
 8007f00:	f9b0 2000 	ldrsh.w	r2, [r0]
 8007f04:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	dc08      	bgt.n	8007f1e <WM__RectIsNZ+0x1e>
 8007f0c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8007f10:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	bfcc      	ite	gt
 8007f18:	2000      	movgt	r0, #0
 8007f1a:	2001      	movle	r0, #1
 8007f1c:	4770      	bx	lr
 8007f1e:	2000      	movs	r0, #0
 8007f20:	4770      	bx	lr

08007f22 <WM_SendMessage>:
 8007f22:	b108      	cbz	r0, 8007f28 <WM_SendMessage+0x6>
 8007f24:	f7fe bee6 	b.w	8006cf4 <WM__SendMessage>
 8007f28:	4770      	bx	lr

08007f2a <WM__SendMsgNoData>:
 8007f2a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f2c:	ab04      	add	r3, sp, #16
 8007f2e:	9001      	str	r0, [sp, #4]
 8007f30:	f843 1d10 	str.w	r1, [r3, #-16]!
 8007f34:	4669      	mov	r1, sp
 8007f36:	f7fe fedd 	bl	8006cf4 <WM__SendMessage>
 8007f3a:	b005      	add	sp, #20
 8007f3c:	f85d fb04 	ldr.w	pc, [sp], #4

08007f40 <WM__GetClientRectWin>:
 8007f40:	2300      	movs	r3, #0
 8007f42:	800b      	strh	r3, [r1, #0]
 8007f44:	8882      	ldrh	r2, [r0, #4]
 8007f46:	804b      	strh	r3, [r1, #2]
 8007f48:	8803      	ldrh	r3, [r0, #0]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	808b      	strh	r3, [r1, #4]
 8007f4e:	88c2      	ldrh	r2, [r0, #6]
 8007f50:	8843      	ldrh	r3, [r0, #2]
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	80cb      	strh	r3, [r1, #6]
 8007f56:	4770      	bx	lr

08007f58 <WM__GetTopLevelLayer>:
 8007f58:	b510      	push	{r4, lr}
 8007f5a:	4604      	mov	r4, r0
 8007f5c:	f005 ff08 	bl	800dd70 <GUI_ALLOC_h2p>
 8007f60:	6980      	ldr	r0, [r0, #24]
 8007f62:	2800      	cmp	r0, #0
 8007f64:	d1f9      	bne.n	8007f5a <WM__GetTopLevelLayer+0x2>
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <WM__GetTopLevelLayer+0x24>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4294      	cmp	r4, r2
 8007f6c:	d005      	beq.n	8007f7a <WM__GetTopLevelLayer+0x22>
 8007f6e:	6858      	ldr	r0, [r3, #4]
 8007f70:	4284      	cmp	r4, r0
 8007f72:	bf14      	ite	ne
 8007f74:	f04f 30ff 	movne.w	r0, #4294967295
 8007f78:	2001      	moveq	r0, #1
 8007f7a:	bd10      	pop	{r4, pc}
 8007f7c:	20004a54 	.word	0x20004a54

08007f80 <_Invalidate1Abs>:
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	b085      	sub	sp, #20
 8007f84:	4606      	mov	r6, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	4617      	mov	r7, r2
 8007f8a:	f005 fef1 	bl	800dd70 <GUI_ALLOC_h2p>
 8007f8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007f90:	9001      	str	r0, [sp, #4]
 8007f92:	07a3      	lsls	r3, r4, #30
 8007f94:	d53e      	bpl.n	8008014 <_Invalidate1Abs+0x94>
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7ff ffb2 	bl	8007f00 <WM__RectIsNZ>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	d039      	beq.n	8008014 <_Invalidate1Abs+0x94>
 8007fa0:	f640 0301 	movw	r3, #2049	; 0x801
 8007fa4:	4023      	ands	r3, r4
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d034      	beq.n	8008014 <_Invalidate1Abs+0x94>
 8007faa:	4630      	mov	r0, r6
 8007fac:	f005 feea 	bl	800dd84 <GUI_ALLOC_LockH>
 8007fb0:	ac02      	add	r4, sp, #8
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	9001      	str	r0, [sp, #4]
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f003 fbdf 	bl	800b77c <GUI__IntersectRects>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	f7ff ff9e 	bl	8007f00 <WM__RectIsNZ>
 8007fc4:	b318      	cbz	r0, 800800e <_Invalidate1Abs+0x8e>
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fca:	f244 0120 	movw	r1, #16416	; 0x4020
 8007fce:	4011      	ands	r1, r2
 8007fd0:	f103 0508 	add.w	r5, r3, #8
 8007fd4:	b129      	cbz	r1, 8007fe2 <_Invalidate1Abs+0x62>
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4622      	mov	r2, r4
 8007fdc:	f004 fbca 	bl	800c774 <GUI_MergeRect>
 8007fe0:	e015      	b.n	800800e <_Invalidate1Abs+0x8e>
 8007fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007fe6:	4317      	orrs	r7, r2
 8007fe8:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fec:	629f      	str	r7, [r3, #40]	; 0x28
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <_Invalidate1Abs+0x98>)
 8007ff0:	881a      	ldrh	r2, [r3, #0]
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	801a      	strh	r2, [r3, #0]
 8007ff8:	f7ff ffae 	bl	8007f58 <WM__GetTopLevelLayer>
 8007ffc:	4b07      	ldr	r3, [pc, #28]	; (800801c <_Invalidate1Abs+0x9c>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	fa02 f000 	lsl.w	r0, r2, r0
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	4302      	orrs	r2, r0
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	f003 fee7 	bl	800bddc <GUI_SignalEvent>
 800800e:	a801      	add	r0, sp, #4
 8008010:	f005 fec6 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008014:	b005      	add	sp, #20
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008018:	20004a6c 	.word	0x20004a6c
 800801c:	20004a7c 	.word	0x20004a7c

08008020 <WM__Invalidate1Abs>:
 8008020:	2220      	movs	r2, #32
 8008022:	f7ff bfad 	b.w	8007f80 <_Invalidate1Abs>

08008026 <WM_InvalidateWindowAndDescsEx>:
 8008026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008028:	460f      	mov	r7, r1
 800802a:	b085      	sub	sp, #20
 800802c:	4615      	mov	r5, r2
 800802e:	4606      	mov	r6, r0
 8008030:	b348      	cbz	r0, 8008086 <WM_InvalidateWindowAndDescsEx+0x60>
 8008032:	f005 fea7 	bl	800dd84 <GUI_ALLOC_LockH>
 8008036:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008038:	ac04      	add	r4, sp, #16
 800803a:	079b      	lsls	r3, r3, #30
 800803c:	4602      	mov	r2, r0
 800803e:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008042:	d403      	bmi.n	800804c <WM_InvalidateWindowAndDescsEx+0x26>
 8008044:	4620      	mov	r0, r4
 8008046:	f005 feab 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800804a:	e01c      	b.n	8008086 <WM_InvalidateWindowAndDescsEx+0x60>
 800804c:	a802      	add	r0, sp, #8
 800804e:	4639      	mov	r1, r7
 8008050:	f003 fb94 	bl	800b77c <GUI__IntersectRects>
 8008054:	2800      	cmp	r0, #0
 8008056:	d0f5      	beq.n	8008044 <WM_InvalidateWindowAndDescsEx+0x1e>
 8008058:	4620      	mov	r0, r4
 800805a:	f005 fea1 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800805e:	4630      	mov	r0, r6
 8008060:	a902      	add	r1, sp, #8
 8008062:	462a      	mov	r2, r5
 8008064:	f7ff ff8c 	bl	8007f80 <_Invalidate1Abs>
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff f8e3 	bl	8007234 <WM_GetFirstChild>
 800806e:	4604      	mov	r4, r0
 8008070:	b14c      	cbz	r4, 8008086 <WM_InvalidateWindowAndDescsEx+0x60>
 8008072:	4620      	mov	r0, r4
 8008074:	a902      	add	r1, sp, #8
 8008076:	462a      	mov	r2, r5
 8008078:	f7ff ffd5 	bl	8008026 <WM_InvalidateWindowAndDescsEx>
 800807c:	4620      	mov	r0, r4
 800807e:	f005 fe77 	bl	800dd70 <GUI_ALLOC_h2p>
 8008082:	6a04      	ldr	r4, [r0, #32]
 8008084:	e7f4      	b.n	8008070 <WM_InvalidateWindowAndDescsEx+0x4a>
 8008086:	b005      	add	sp, #20
 8008088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800808a <WM__InvalidateRect>:
 800808a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800808e:	4680      	mov	r8, r0
 8008090:	4617      	mov	r7, r2
 8008092:	461d      	mov	r5, r3
 8008094:	460c      	mov	r4, r1
 8008096:	2900      	cmp	r1, #0
 8008098:	d030      	beq.n	80080fc <WM__InvalidateRect+0x72>
 800809a:	4608      	mov	r0, r1
 800809c:	f005 fe72 	bl	800dd84 <GUI_ALLOC_LockH>
 80080a0:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	07b3      	lsls	r3, r6, #30
 80080a6:	4602      	mov	r2, r0
 80080a8:	d525      	bpl.n	80080f6 <WM__InvalidateRect+0x6c>
 80080aa:	a802      	add	r0, sp, #8
 80080ac:	4641      	mov	r1, r8
 80080ae:	f003 fb65 	bl	800b77c <GUI__IntersectRects>
 80080b2:	b300      	cbz	r0, 80080f6 <WM__InvalidateRect+0x6c>
 80080b4:	f640 0301 	movw	r3, #2049	; 0x801
 80080b8:	4033      	ands	r3, r6
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d107      	bne.n	80080ce <WM__InvalidateRect+0x44>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	a802      	add	r0, sp, #8
 80080c2:	6999      	ldr	r1, [r3, #24]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	462b      	mov	r3, r5
 80080c8:	f7ff ffdf 	bl	800808a <WM__InvalidateRect>
 80080cc:	e004      	b.n	80080d8 <WM__InvalidateRect+0x4e>
 80080ce:	4620      	mov	r0, r4
 80080d0:	a902      	add	r1, sp, #8
 80080d2:	462a      	mov	r2, r5
 80080d4:	f7ff ff54 	bl	8007f80 <_Invalidate1Abs>
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	69dc      	ldr	r4, [r3, #28]
 80080dc:	b15c      	cbz	r4, 80080f6 <WM__InvalidateRect+0x6c>
 80080de:	42bc      	cmp	r4, r7
 80080e0:	d009      	beq.n	80080f6 <WM__InvalidateRect+0x6c>
 80080e2:	4620      	mov	r0, r4
 80080e4:	a902      	add	r1, sp, #8
 80080e6:	462a      	mov	r2, r5
 80080e8:	f7ff ff9d 	bl	8008026 <WM_InvalidateWindowAndDescsEx>
 80080ec:	4620      	mov	r0, r4
 80080ee:	f005 fe3f 	bl	800dd70 <GUI_ALLOC_h2p>
 80080f2:	6a04      	ldr	r4, [r0, #32]
 80080f4:	e7f2      	b.n	80080dc <WM__InvalidateRect+0x52>
 80080f6:	a801      	add	r0, sp, #4
 80080f8:	f005 fe52 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80080fc:	b004      	add	sp, #16
 80080fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008102 <WM__InvalidateParent>:
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	4605      	mov	r5, r0
 8008106:	4608      	mov	r0, r1
 8008108:	460c      	mov	r4, r1
 800810a:	4616      	mov	r6, r2
 800810c:	f005 fe30 	bl	800dd70 <GUI_ALLOC_h2p>
 8008110:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008112:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008116:	4628      	mov	r0, r5
 8008118:	4621      	mov	r1, r4
 800811a:	4632      	mov	r2, r6
 800811c:	bf0c      	ite	eq
 800811e:	2320      	moveq	r3, #32
 8008120:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 8008124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008128:	f7ff bfaf 	b.w	800808a <WM__InvalidateRect>

0800812c <WM__InvalidateRectEx>:
 800812c:	2320      	movs	r3, #32
 800812e:	f7ff bfac 	b.w	800808a <WM__InvalidateRect>

08008132 <WM__DetachWindow>:
 8008132:	b513      	push	{r0, r1, r4, lr}
 8008134:	4604      	mov	r4, r0
 8008136:	f005 fe25 	bl	800dd84 <GUI_ALLOC_LockH>
 800813a:	6981      	ldr	r1, [r0, #24]
 800813c:	9001      	str	r0, [sp, #4]
 800813e:	b141      	cbz	r1, 8008152 <WM__DetachWindow+0x20>
 8008140:	6a02      	ldr	r2, [r0, #32]
 8008142:	f7ff fff3 	bl	800812c <WM__InvalidateRectEx>
 8008146:	4620      	mov	r0, r4
 8008148:	f7ff fe30 	bl	8007dac <WM__RemoveWindowFromList>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	619a      	str	r2, [r3, #24]
 8008152:	a801      	add	r0, sp, #4
 8008154:	f005 fe24 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008158:	b002      	add	sp, #8
 800815a:	bd10      	pop	{r4, pc}

0800815c <WM_InvalidateRect>:
 800815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815e:	460f      	mov	r7, r1
 8008160:	b087      	sub	sp, #28
 8008162:	4605      	mov	r5, r0
 8008164:	2800      	cmp	r0, #0
 8008166:	d033      	beq.n	80081d0 <WM_InvalidateRect+0x74>
 8008168:	f005 fe0c 	bl	800dd84 <GUI_ALLOC_LockH>
 800816c:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800816e:	9001      	str	r0, [sp, #4]
 8008170:	07b2      	lsls	r2, r6, #30
 8008172:	d52a      	bpl.n	80081ca <WM_InvalidateRect+0x6e>
 8008174:	c803      	ldmia	r0, {r0, r1}
 8008176:	ac04      	add	r4, sp, #16
 8008178:	03f3      	lsls	r3, r6, #15
 800817a:	e884 0003 	stmia.w	r4, {r0, r1}
 800817e:	d502      	bpl.n	8008186 <WM_InvalidateRect+0x2a>
 8008180:	4628      	mov	r0, r5
 8008182:	f7ff fe95 	bl	8007eb0 <WM__InvalidateDrawAndDescs>
 8008186:	b15f      	cbz	r7, 80081a0 <WM_InvalidateRect+0x44>
 8008188:	6838      	ldr	r0, [r7, #0]
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	ab02      	add	r3, sp, #8
 800818e:	c303      	stmia	r3!, {r0, r1}
 8008190:	9801      	ldr	r0, [sp, #4]
 8008192:	a902      	add	r1, sp, #8
 8008194:	f7ff fe28 	bl	8007de8 <WM__Client2Screen>
 8008198:	4620      	mov	r0, r4
 800819a:	a902      	add	r1, sp, #8
 800819c:	f003 fad0 	bl	800b740 <GUI__IntersectRect>
 80081a0:	4620      	mov	r0, r4
 80081a2:	4629      	mov	r1, r5
 80081a4:	f7ff fd82 	bl	8007cac <WM__ClipAtParentBorders>
 80081a8:	b178      	cbz	r0, 80081ca <WM_InvalidateRect+0x6e>
 80081aa:	f640 0301 	movw	r3, #2049	; 0x801
 80081ae:	4033      	ands	r3, r6
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d106      	bne.n	80081c2 <WM_InvalidateRect+0x66>
 80081b4:	9b01      	ldr	r3, [sp, #4]
 80081b6:	4620      	mov	r0, r4
 80081b8:	6999      	ldr	r1, [r3, #24]
 80081ba:	6a1a      	ldr	r2, [r3, #32]
 80081bc:	f7ff ffb6 	bl	800812c <WM__InvalidateRectEx>
 80081c0:	e003      	b.n	80081ca <WM_InvalidateRect+0x6e>
 80081c2:	4628      	mov	r0, r5
 80081c4:	4621      	mov	r1, r4
 80081c6:	f7ff ff2b 	bl	8008020 <WM__Invalidate1Abs>
 80081ca:	a801      	add	r0, sp, #4
 80081cc:	f005 fde8 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80081d0:	b007      	add	sp, #28
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081d4 <WM_InvalidateWindow>:
 80081d4:	2100      	movs	r1, #0
 80081d6:	f7ff bfc1 	b.w	800815c <WM_InvalidateRect>

080081da <WM__SelectTopLevelLayer>:
 80081da:	b508      	push	{r3, lr}
 80081dc:	f7ff febc 	bl	8007f58 <WM__GetTopLevelLayer>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	db03      	blt.n	80081ec <WM__SelectTopLevelLayer+0x12>
 80081e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80081e8:	f003 bedc 	b.w	800bfa4 <GUI_SelectLayer>
 80081ec:	bd08      	pop	{r3, pc}
	...

080081f0 <WM_SelectWindow>:
 80081f0:	4a0d      	ldr	r2, [pc, #52]	; (8008228 <WM_SelectWindow+0x38>)
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	b570      	push	{r4, r5, r6, lr}
 80081f6:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80081f8:	4604      	mov	r4, r0
 80081fa:	4616      	mov	r6, r2
 80081fc:	b908      	cbnz	r0, 8008202 <WM_SelectWindow+0x12>
 80081fe:	4a0b      	ldr	r2, [pc, #44]	; (800822c <WM_SelectWindow+0x3c>)
 8008200:	6814      	ldr	r4, [r2, #0]
 8008202:	649c      	str	r4, [r3, #72]	; 0x48
 8008204:	4620      	mov	r0, r4
 8008206:	f7ff ffe8 	bl	80081da <WM__SelectTopLevelLayer>
 800820a:	f003 f9b9 	bl	800b580 <LCD_SetClipRectMax>
 800820e:	4620      	mov	r0, r4
 8008210:	f005 fdae 	bl	800dd70 <GUI_ALLOC_h2p>
 8008214:	6833      	ldr	r3, [r6, #0]
 8008216:	f9b0 1000 	ldrsh.w	r1, [r0]
 800821a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800821e:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008220:	651a      	str	r2, [r3, #80]	; 0x50
 8008222:	4628      	mov	r0, r5
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	bf00      	nop
 8008228:	20000084 	.word	0x20000084
 800822c:	20004a70 	.word	0x20004a70

08008230 <WM_CreateWindowAsChild>:
 8008230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008234:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008236:	469b      	mov	fp, r3
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <WM_CreateWindowAsChild+0x138>)
 800823a:	4607      	mov	r7, r0
 800823c:	4688      	mov	r8, r1
 800823e:	4692      	mov	sl, r2
 8008240:	681e      	ldr	r6, [r3, #0]
 8008242:	bb65      	cbnz	r5, 800829e <WM_CreateWindowAsChild+0x6e>
 8008244:	4b49      	ldr	r3, [pc, #292]	; (800836c <WM_CreateWindowAsChild+0x13c>)
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	b363      	cbz	r3, 80082a4 <WM_CreateWindowAsChild+0x74>
 800824a:	4b49      	ldr	r3, [pc, #292]	; (8008370 <WM_CreateWindowAsChild+0x140>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	7c5a      	ldrb	r2, [r3, #17]
 8008250:	4b48      	ldr	r3, [pc, #288]	; (8008374 <WM_CreateWindowAsChild+0x144>)
 8008252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008256:	1c5a      	adds	r2, r3, #1
 8008258:	d024      	beq.n	80082a4 <WM_CreateWindowAsChild+0x74>
 800825a:	b31b      	cbz	r3, 80082a4 <WM_CreateWindowAsChild+0x74>
 800825c:	461d      	mov	r5, r3
 800825e:	4628      	mov	r0, r5
 8008260:	f005 fd90 	bl	800dd84 <GUI_ALLOC_LockH>
 8008264:	f9b0 2000 	ldrsh.w	r2, [r0]
 8008268:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800826c:	9001      	str	r0, [sp, #4]
 800826e:	4417      	add	r7, r2
 8008270:	4498      	add	r8, r3
 8008272:	f1ba 0f00 	cmp.w	sl, #0
 8008276:	d105      	bne.n	8008284 <WM_CreateWindowAsChild+0x54>
 8008278:	f9b0 a004 	ldrsh.w	sl, [r0, #4]
 800827c:	ebc2 0a0a 	rsb	sl, r2, sl
 8008280:	f10a 0a01 	add.w	sl, sl, #1
 8008284:	f1bb 0f00 	cmp.w	fp, #0
 8008288:	d105      	bne.n	8008296 <WM_CreateWindowAsChild+0x66>
 800828a:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800828e:	ebc3 0b0b 	rsb	fp, r3, fp
 8008292:	f10b 0b01 	add.w	fp, fp, #1
 8008296:	a801      	add	r0, sp, #4
 8008298:	f005 fd82 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800829c:	e002      	b.n	80082a4 <WM_CreateWindowAsChild+0x74>
 800829e:	1c6b      	adds	r3, r5, #1
 80082a0:	d1dd      	bne.n	800825e <WM_CreateWindowAsChild+0x2e>
 80082a2:	2500      	movs	r5, #0
 80082a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80082a6:	302c      	adds	r0, #44	; 0x2c
 80082a8:	f005 ff44 	bl	800e134 <GUI_ALLOC_AllocZero>
 80082ac:	4604      	mov	r4, r0
 80082ae:	2800      	cmp	r0, #0
 80082b0:	d056      	beq.n	8008360 <WM_CreateWindowAsChild+0x130>
 80082b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082b4:	431e      	orrs	r6, r3
 80082b6:	4b2d      	ldr	r3, [pc, #180]	; (800836c <WM_CreateWindowAsChild+0x13c>)
 80082b8:	881a      	ldrh	r2, [r3, #0]
 80082ba:	3201      	adds	r2, #1
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	f005 fd61 	bl	800dd84 <GUI_ALLOC_LockH>
 80082c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082c4:	6103      	str	r3, [r0, #16]
 80082c6:	f10d 0908 	add.w	r9, sp, #8
 80082ca:	4b2b      	ldr	r3, [pc, #172]	; (8008378 <WM_CreateWindowAsChild+0x148>)
 80082cc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80082ce:	f849 0d08 	str.w	r0, [r9, #-8]!
 80082d2:	4033      	ands	r3, r6
 80082d4:	8007      	strh	r7, [r0, #0]
 80082d6:	f8a0 8002 	strh.w	r8, [r0, #2]
 80082da:	4457      	add	r7, sl
 80082dc:	44d8      	add	r8, fp
 80082de:	4313      	orrs	r3, r2
 80082e0:	3f01      	subs	r7, #1
 80082e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80082e6:	6283      	str	r3, [r0, #40]	; 0x28
 80082e8:	8087      	strh	r7, [r0, #4]
 80082ea:	f8a0 8006 	strh.w	r8, [r0, #6]
 80082ee:	4668      	mov	r0, sp
 80082f0:	f005 fd56 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80082f4:	4b21      	ldr	r3, [pc, #132]	; (800837c <WM_CreateWindowAsChild+0x14c>)
 80082f6:	6818      	ldr	r0, [r3, #0]
 80082f8:	b148      	cbz	r0, 800830e <WM_CreateWindowAsChild+0xde>
 80082fa:	f005 fd39 	bl	800dd70 <GUI_ALLOC_h2p>
 80082fe:	4607      	mov	r7, r0
 8008300:	4620      	mov	r0, r4
 8008302:	f005 fd35 	bl	800dd70 <GUI_ALLOC_h2p>
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6143      	str	r3, [r0, #20]
 800830a:	617c      	str	r4, [r7, #20]
 800830c:	e000      	b.n	8008310 <WM_CreateWindowAsChild+0xe0>
 800830e:	601c      	str	r4, [r3, #0]
 8008310:	4629      	mov	r1, r5
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff fcf8 	bl	8007d08 <WM__InsertWindowIntoList>
 8008318:	06b5      	lsls	r5, r6, #26
 800831a:	d502      	bpl.n	8008322 <WM_CreateWindowAsChild+0xf2>
 800831c:	4620      	mov	r0, r4
 800831e:	f7ff ff67 	bl	80081f0 <WM_SelectWindow>
 8008322:	07f0      	lsls	r0, r6, #31
 8008324:	d503      	bpl.n	800832e <WM_CreateWindowAsChild+0xfe>
 8008326:	4b16      	ldr	r3, [pc, #88]	; (8008380 <WM_CreateWindowAsChild+0x150>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	3201      	adds	r2, #1
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	0671      	lsls	r1, r6, #25
 8008330:	d502      	bpl.n	8008338 <WM_CreateWindowAsChild+0x108>
 8008332:	4620      	mov	r0, r4
 8008334:	f7fe fffb 	bl	800732e <WM_BringToBottom>
 8008338:	07b2      	lsls	r2, r6, #30
 800833a:	d50d      	bpl.n	8008358 <WM_CreateWindowAsChild+0x128>
 800833c:	4620      	mov	r0, r4
 800833e:	f005 fd21 	bl	800dd84 <GUI_ALLOC_LockH>
 8008342:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008344:	9000      	str	r0, [sp, #0]
 8008346:	f043 0302 	orr.w	r3, r3, #2
 800834a:	6283      	str	r3, [r0, #40]	; 0x28
 800834c:	4668      	mov	r0, sp
 800834e:	f005 fd27 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008352:	4620      	mov	r0, r4
 8008354:	f7ff ff3e 	bl	80081d4 <WM_InvalidateWindow>
 8008358:	4620      	mov	r0, r4
 800835a:	2101      	movs	r1, #1
 800835c:	f7ff fde5 	bl	8007f2a <WM__SendMsgNoData>
 8008360:	4620      	mov	r0, r4
 8008362:	b003      	add	sp, #12
 8008364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008368:	20004a84 	.word	0x20004a84
 800836c:	20004a4c 	.word	0x20004a4c
 8008370:	20000084 	.word	0x20000084
 8008374:	20004a54 	.word	0x20004a54
 8008378:	003f3f9f 	.word	0x003f3f9f
 800837c:	20004a70 	.word	0x20004a70
 8008380:	20004aa4 	.word	0x20004aa4

08008384 <WM_DeleteWindow>:
 8008384:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008386:	4604      	mov	r4, r0
 8008388:	2800      	cmp	r0, #0
 800838a:	d06e      	beq.n	800846a <WM_DeleteWindow+0xe6>
 800838c:	f7ff fd80 	bl	8007e90 <WM__IsWindow>
 8008390:	2800      	cmp	r0, #0
 8008392:	d06a      	beq.n	800846a <WM_DeleteWindow+0xe6>
 8008394:	4620      	mov	r0, r4
 8008396:	f7ff fddf 	bl	8007f58 <WM__GetTopLevelLayer>
 800839a:	210b      	movs	r1, #11
 800839c:	4605      	mov	r5, r0
 800839e:	4620      	mov	r0, r4
 80083a0:	f7ff fdc3 	bl	8007f2a <WM__SendMsgNoData>
 80083a4:	4620      	mov	r0, r4
 80083a6:	f006 fad9 	bl	800e95c <WM__DeleteAssocTimer>
 80083aa:	4620      	mov	r0, r4
 80083ac:	f005 fcea 	bl	800dd84 <GUI_ALLOC_LockH>
 80083b0:	9001      	str	r0, [sp, #4]
 80083b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80083b4:	b108      	cbz	r0, 80083ba <WM_DeleteWindow+0x36>
 80083b6:	f001 fb85 	bl	8009ac4 <GUI_MEMDEV_Delete>
 80083ba:	4b2d      	ldr	r3, [pc, #180]	; (8008470 <WM_DeleteWindow+0xec>)
 80083bc:	4a2d      	ldr	r2, [pc, #180]	; (8008474 <WM_DeleteWindow+0xf0>)
 80083be:	2100      	movs	r1, #0
 80083c0:	6019      	str	r1, [r3, #0]
 80083c2:	4b2d      	ldr	r3, [pc, #180]	; (8008478 <WM_DeleteWindow+0xf4>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80083ca:	42a0      	cmp	r0, r4
 80083cc:	bf08      	it	eq
 80083ce:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80083d2:	4a2a      	ldr	r2, [pc, #168]	; (800847c <WM_DeleteWindow+0xf8>)
 80083d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80083d8:	42a1      	cmp	r1, r4
 80083da:	bf04      	itt	eq
 80083dc:	2100      	moveq	r1, #0
 80083de:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80083e2:	4b27      	ldr	r3, [pc, #156]	; (8008480 <WM_DeleteWindow+0xfc>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	b12b      	cbz	r3, 80083f4 <WM_DeleteWindow+0x70>
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	42a2      	cmp	r2, r4
 80083ec:	bf04      	itt	eq
 80083ee:	2200      	moveq	r2, #0
 80083f0:	605a      	streq	r2, [r3, #4]
 80083f2:	e7f7      	b.n	80083e4 <WM_DeleteWindow+0x60>
 80083f4:	4620      	mov	r0, r4
 80083f6:	2107      	movs	r1, #7
 80083f8:	f7ff f8c5 	bl	8007586 <WM_NotifyParent>
 80083fc:	9e01      	ldr	r6, [sp, #4]
 80083fe:	69f0      	ldr	r0, [r6, #28]
 8008400:	f7ff ffc0 	bl	8008384 <WM_DeleteWindow>
 8008404:	69f3      	ldr	r3, [r6, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1f9      	bne.n	80083fe <WM_DeleteWindow+0x7a>
 800840a:	4620      	mov	r0, r4
 800840c:	f7ff fe91 	bl	8008132 <WM__DetachWindow>
 8008410:	4b1c      	ldr	r3, [pc, #112]	; (8008484 <WM_DeleteWindow+0x100>)
 8008412:	6818      	ldr	r0, [r3, #0]
 8008414:	b150      	cbz	r0, 800842c <WM_DeleteWindow+0xa8>
 8008416:	f005 fcab 	bl	800dd70 <GUI_ALLOC_h2p>
 800841a:	4606      	mov	r6, r0
 800841c:	6940      	ldr	r0, [r0, #20]
 800841e:	42a0      	cmp	r0, r4
 8008420:	d1f8      	bne.n	8008414 <WM_DeleteWindow+0x90>
 8008422:	4620      	mov	r0, r4
 8008424:	f005 fca4 	bl	800dd70 <GUI_ALLOC_h2p>
 8008428:	6943      	ldr	r3, [r0, #20]
 800842a:	6173      	str	r3, [r6, #20]
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	07da      	lsls	r2, r3, #31
 8008432:	d503      	bpl.n	800843c <WM_DeleteWindow+0xb8>
 8008434:	4a14      	ldr	r2, [pc, #80]	; (8008488 <WM_DeleteWindow+0x104>)
 8008436:	6811      	ldr	r1, [r2, #0]
 8008438:	3901      	subs	r1, #1
 800843a:	6011      	str	r1, [r2, #0]
 800843c:	069b      	lsls	r3, r3, #26
 800843e:	d503      	bpl.n	8008448 <WM_DeleteWindow+0xc4>
 8008440:	4b12      	ldr	r3, [pc, #72]	; (800848c <WM_DeleteWindow+0x108>)
 8008442:	881a      	ldrh	r2, [r3, #0]
 8008444:	3a01      	subs	r2, #1
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	a801      	add	r0, sp, #4
 800844a:	f005 fca9 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800844e:	4b10      	ldr	r3, [pc, #64]	; (8008490 <WM_DeleteWindow+0x10c>)
 8008450:	881a      	ldrh	r2, [r3, #0]
 8008452:	4620      	mov	r0, r4
 8008454:	3a01      	subs	r2, #1
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	f005 fcce 	bl	800ddf8 <GUI_ALLOC_Free>
 800845c:	2d00      	cmp	r5, #0
 800845e:	db04      	blt.n	800846a <WM_DeleteWindow+0xe6>
 8008460:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <WM_DeleteWindow+0x110>)
 8008462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008466:	f7ff fec3 	bl	80081f0 <WM_SelectWindow>
 800846a:	b002      	add	sp, #8
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	bf00      	nop
 8008470:	20002a10 	.word	0x20002a10
 8008474:	20004a64 	.word	0x20004a64
 8008478:	20004a74 	.word	0x20004a74
 800847c:	20004a98 	.word	0x20004a98
 8008480:	20004a90 	.word	0x20004a90
 8008484:	20004a70 	.word	0x20004a70
 8008488:	20004aa4 	.word	0x20004aa4
 800848c:	20004a6c 	.word	0x20004a6c
 8008490:	20004a4c 	.word	0x20004a4c
 8008494:	20004a54 	.word	0x20004a54

08008498 <_Exec1Input>:
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <_Exec1Input+0x70>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800849e:	461e      	mov	r6, r3
 80084a0:	b1d2      	cbz	r2, 80084d8 <_Exec1Input+0x40>
 80084a2:	4b1a      	ldr	r3, [pc, #104]	; (800850c <_Exec1Input+0x74>)
 80084a4:	681c      	ldr	r4, [r3, #0]
 80084a6:	b1b4      	cbz	r4, 80084d6 <_Exec1Input+0x3e>
 80084a8:	4620      	mov	r0, r4
 80084aa:	f005 fc6b 	bl	800dd84 <GUI_ALLOC_LockH>
 80084ae:	4603      	mov	r3, r0
 80084b0:	a802      	add	r0, sp, #8
 80084b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b4:	f840 3d04 	str.w	r3, [r0, #-4]!
 80084b8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80084bc:	695d      	ldr	r5, [r3, #20]
 80084be:	d006      	beq.n	80084ce <_Exec1Input+0x36>
 80084c0:	f005 fc6e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80084c4:	4620      	mov	r0, r4
 80084c6:	f7ff ff5d 	bl	8008384 <WM_DeleteWindow>
 80084ca:	462c      	mov	r4, r5
 80084cc:	e7eb      	b.n	80084a6 <_Exec1Input+0xe>
 80084ce:	462c      	mov	r4, r5
 80084d0:	f005 fc66 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80084d4:	e7e7      	b.n	80084a6 <_Exec1Input+0xe>
 80084d6:	6034      	str	r4, [r6, #0]
 80084d8:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <_Exec1Input+0x78>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	b103      	cbz	r3, 80084e0 <_Exec1Input+0x48>
 80084de:	4798      	blx	r3
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <_Exec1Input+0x7c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	b953      	cbnz	r3, 80084fc <_Exec1Input+0x64>
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <_Exec1Input+0x80>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80084ee:	b148      	cbz	r0, 8008504 <_Exec1Input+0x6c>
 80084f0:	f003 fd76 	bl	800bfe0 <GUI_PollKeyMsg>
 80084f4:	3000      	adds	r0, #0
 80084f6:	bf18      	it	ne
 80084f8:	2001      	movne	r0, #1
 80084fa:	e003      	b.n	8008504 <_Exec1Input+0x6c>
 80084fc:	4798      	blx	r3
 80084fe:	2800      	cmp	r0, #0
 8008500:	d0f1      	beq.n	80084e6 <_Exec1Input+0x4e>
 8008502:	2001      	movs	r0, #1
 8008504:	b002      	add	sp, #8
 8008506:	bd70      	pop	{r4, r5, r6, pc}
 8008508:	200029f4 	.word	0x200029f4
 800850c:	20004a70 	.word	0x20004a70
 8008510:	20004a5c 	.word	0x20004a5c
 8008514:	20004b08 	.word	0x20004b08
 8008518:	20000084 	.word	0x20000084

0800851c <WM_GetActiveWindow>:
 800851c:	4b01      	ldr	r3, [pc, #4]	; (8008524 <WM_GetActiveWindow+0x8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008522:	4770      	bx	lr
 8008524:	20000084 	.word	0x20000084

08008528 <WM__GetNextIVR>:
 8008528:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800852c:	4f5d      	ldr	r7, [pc, #372]	; (80086a4 <WM__GetNextIVR+0x17c>)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8008534:	2800      	cmp	r0, #0
 8008536:	f000 80b2 	beq.w	800869e <WM__GetNextIVR+0x176>
 800853a:	4b5b      	ldr	r3, [pc, #364]	; (80086a8 <WM__GetNextIVR+0x180>)
 800853c:	695a      	ldr	r2, [r3, #20]
 800853e:	2a01      	cmp	r2, #1
 8008540:	461c      	mov	r4, r3
 8008542:	dd03      	ble.n	800854c <WM__GetNextIVR+0x24>
 8008544:	3a01      	subs	r2, #1
 8008546:	615a      	str	r2, [r3, #20]
 8008548:	2000      	movs	r0, #0
 800854a:	e0a8      	b.n	800869e <WM__GetNextIVR+0x176>
 800854c:	f104 0608 	add.w	r6, r4, #8
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008556:	3301      	adds	r3, #1
 8008558:	ad02      	add	r5, sp, #8
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008560:	b923      	cbnz	r3, 800856c <WM__GetNextIVR+0x44>
 8008562:	8823      	ldrh	r3, [r4, #0]
 8008564:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008568:	8863      	ldrh	r3, [r4, #2]
 800856a:	e011      	b.n	8008590 <WM__GetNextIVR+0x68>
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	8962      	ldrh	r2, [r4, #10]
 8008570:	f8ad 200a 	strh.w	r2, [sp, #10]
 8008574:	3301      	adds	r3, #1
 8008576:	b29b      	uxth	r3, r3
 8008578:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800857c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8008580:	b21b      	sxth	r3, r3
 8008582:	429a      	cmp	r2, r3
 8008584:	da06      	bge.n	8008594 <WM__GetNextIVR+0x6c>
 8008586:	8823      	ldrh	r3, [r4, #0]
 8008588:	f8ad 3008 	strh.w	r3, [sp, #8]
 800858c:	89e3      	ldrh	r3, [r4, #14]
 800858e:	3301      	adds	r3, #1
 8008590:	f8ad 300a 	strh.w	r3, [sp, #10]
 8008594:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8008598:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800859c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80086a8 <WM__GetNextIVR+0x180>
 80085a0:	429a      	cmp	r2, r3
 80085a2:	dd04      	ble.n	80085ae <WM__GetNextIVR+0x86>
 80085a4:	6963      	ldr	r3, [r4, #20]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	2000      	movs	r0, #0
 80085aa:	6163      	str	r3, [r4, #20]
 80085ac:	e077      	b.n	800869e <WM__GetNextIVR+0x176>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80085b2:	f005 fbe7 	bl	800dd84 <GUI_ALLOC_LockH>
 80085b6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80085ba:	f9b8 3000 	ldrsh.w	r3, [r8]
 80085be:	9001      	str	r0, [sp, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d11c      	bne.n	80085fe <WM__GetNextIVR+0xd6>
 80085c4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80085c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80085cc:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80085d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80085d4:	4b33      	ldr	r3, [pc, #204]	; (80086a4 <WM__GetNextIVR+0x17c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085da:	b15a      	cbz	r2, 80085f4 <WM__GetNextIVR+0xcc>
 80085dc:	4610      	mov	r0, r2
 80085de:	f005 fbc7 	bl	800dd70 <GUI_ALLOC_h2p>
 80085e2:	4680      	mov	r8, r0
 80085e4:	2200      	movs	r2, #0
 80085e6:	6a00      	ldr	r0, [r0, #32]
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7ff f973 	bl	80078d4 <_Findy1>
 80085ee:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80085f2:	e7f2      	b.n	80085da <WM__GetNextIVR+0xb2>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	4629      	mov	r1, r5
 80085f8:	69d8      	ldr	r0, [r3, #28]
 80085fa:	f7ff f96b 	bl	80078d4 <_Findy1>
 80085fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008602:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800860a:	b16a      	cbz	r2, 8008628 <WM__GetNextIVR+0x100>
 800860c:	4610      	mov	r0, r2
 800860e:	f005 fbaf 	bl	800dd70 <GUI_ALLOC_h2p>
 8008612:	4629      	mov	r1, r5
 8008614:	4680      	mov	r8, r0
 8008616:	2200      	movs	r2, #0
 8008618:	6a00      	ldr	r0, [r0, #32]
 800861a:	f7ff f9b1 	bl	8007980 <_Findx0>
 800861e:	2800      	cmp	r0, #0
 8008620:	d1ed      	bne.n	80085fe <WM__GetNextIVR+0xd6>
 8008622:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8008626:	e7f0      	b.n	800860a <WM__GetNextIVR+0xe2>
 8008628:	9b01      	ldr	r3, [sp, #4]
 800862a:	4629      	mov	r1, r5
 800862c:	69d8      	ldr	r0, [r3, #28]
 800862e:	f7ff f9a7 	bl	8007980 <_Findx0>
 8008632:	2800      	cmp	r0, #0
 8008634:	d1e3      	bne.n	80085fe <WM__GetNextIVR+0xd6>
 8008636:	88a3      	ldrh	r3, [r4, #4]
 8008638:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 800863c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008640:	b21b      	sxth	r3, r3
 8008642:	429a      	cmp	r2, r3
 8008644:	dd07      	ble.n	8008656 <WM__GetNextIVR+0x12e>
 8008646:	e895 0003 	ldmia.w	r5, {r0, r1}
 800864a:	e886 0003 	stmia.w	r6, {r0, r1}
 800864e:	a801      	add	r0, sp, #4
 8008650:	f005 fba6 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008654:	e797      	b.n	8008586 <WM__GetNextIVR+0x5e>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800865a:	b152      	cbz	r2, 8008672 <WM__GetNextIVR+0x14a>
 800865c:	4610      	mov	r0, r2
 800865e:	f005 fb87 	bl	800dd70 <GUI_ALLOC_h2p>
 8008662:	4607      	mov	r7, r0
 8008664:	2200      	movs	r2, #0
 8008666:	6a00      	ldr	r0, [r0, #32]
 8008668:	4629      	mov	r1, r5
 800866a:	f7ff f9cd 	bl	8007a08 <_Findx1>
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	e7f3      	b.n	800865a <WM__GetNextIVR+0x132>
 8008672:	af04      	add	r7, sp, #16
 8008674:	4629      	mov	r1, r5
 8008676:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 800867a:	69d8      	ldr	r0, [r3, #28]
 800867c:	f7ff f9c4 	bl	8007a08 <_Findx1>
 8008680:	4638      	mov	r0, r7
 8008682:	f005 fb8d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008686:	6923      	ldr	r3, [r4, #16]
 8008688:	f644 6220 	movw	r2, #20000	; 0x4e20
 800868c:	4293      	cmp	r3, r2
 800868e:	dc89      	bgt.n	80085a4 <WM__GetNextIVR+0x7c>
 8008690:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008694:	e886 0003 	stmia.w	r6, {r0, r1}
 8008698:	f7ff fbd6 	bl	8007e48 <WM__ActivateClipRect>
 800869c:	2001      	movs	r0, #1
 800869e:	b004      	add	sp, #16
 80086a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a4:	20000084 	.word	0x20000084
 80086a8:	200029f8 	.word	0x200029f8

080086ac <WM__InitIVRSearch>:
 80086ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b0:	4f39      	ldr	r7, [pc, #228]	; (8008798 <WM__InitIVRSearch+0xec>)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80086b8:	b086      	sub	sp, #24
 80086ba:	4606      	mov	r6, r0
 80086bc:	b912      	cbnz	r2, 80086c4 <WM__InitIVRSearch+0x18>
 80086be:	f7ff fbc3 	bl	8007e48 <WM__ActivateClipRect>
 80086c2:	e064      	b.n	800878e <WM__InitIVRSearch+0xe2>
 80086c4:	4d35      	ldr	r5, [pc, #212]	; (800879c <WM__InitIVRSearch+0xf0>)
 80086c6:	696a      	ldr	r2, [r5, #20]
 80086c8:	3201      	adds	r2, #1
 80086ca:	2a01      	cmp	r2, #1
 80086cc:	616a      	str	r2, [r5, #20]
 80086ce:	462c      	mov	r4, r5
 80086d0:	dc5d      	bgt.n	800878e <WM__InitIVRSearch+0xe2>
 80086d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80086d4:	f005 fb56 	bl	800dd84 <GUI_ALLOC_LockH>
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	612a      	str	r2, [r5, #16]
 80086de:	4a30      	ldr	r2, [pc, #192]	; (80087a0 <WM__InitIVRSearch+0xf4>)
 80086e0:	9000      	str	r0, [sp, #0]
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	b12a      	cbz	r2, 80086f2 <WM__InitIVRSearch+0x46>
 80086e6:	f100 0308 	add.w	r3, r0, #8
 80086ea:	aa02      	add	r2, sp, #8
 80086ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086f0:	e005      	b.n	80086fe <WM__InitIVRSearch+0x52>
 80086f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80086f4:	f012 0802 	ands.w	r8, r2, #2
 80086f8:	d00a      	beq.n	8008710 <WM__InitIVRSearch+0x64>
 80086fa:	c803      	ldmia	r0, {r0, r1}
 80086fc:	aa02      	add	r2, sp, #8
 80086fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8008702:	ad02      	add	r5, sp, #8
 8008704:	b166      	cbz	r6, 8008720 <WM__InitIVRSearch+0x74>
 8008706:	4628      	mov	r0, r5
 8008708:	4631      	mov	r1, r6
 800870a:	f003 f819 	bl	800b740 <GUI__IntersectRect>
 800870e:	e007      	b.n	8008720 <WM__InitIVRSearch+0x74>
 8008710:	696b      	ldr	r3, [r5, #20]
 8008712:	4668      	mov	r0, sp
 8008714:	3b01      	subs	r3, #1
 8008716:	616b      	str	r3, [r5, #20]
 8008718:	f005 fb42 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800871c:	4640      	mov	r0, r8
 800871e:	e037      	b.n	8008790 <WM__InitIVRSearch+0xe4>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	4e20      	ldr	r6, [pc, #128]	; (80087a4 <WM__InitIVRSearch+0xf8>)
 8008724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008726:	b1c2      	cbz	r2, 800875a <WM__InitIVRSearch+0xae>
 8008728:	9b00      	ldr	r3, [sp, #0]
 800872a:	6810      	ldr	r0, [r2, #0]
 800872c:	6851      	ldr	r1, [r2, #4]
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	ab04      	add	r3, sp, #16
 8008732:	c303      	stmia	r3!, {r0, r1}
 8008734:	6833      	ldr	r3, [r6, #0]
 8008736:	b133      	cbz	r3, 8008746 <WM__InitIVRSearch+0x9a>
 8008738:	a801      	add	r0, sp, #4
 800873a:	f005 fb31 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800873e:	6830      	ldr	r0, [r6, #0]
 8008740:	f005 fb20 	bl	800dd84 <GUI_ALLOC_LockH>
 8008744:	9001      	str	r0, [sp, #4]
 8008746:	9801      	ldr	r0, [sp, #4]
 8008748:	a904      	add	r1, sp, #16
 800874a:	f7ff fb4d 	bl	8007de8 <WM__Client2Screen>
 800874e:	4628      	mov	r0, r5
 8008750:	a904      	add	r1, sp, #16
 8008752:	f002 fff5 	bl	800b740 <GUI__IntersectRect>
 8008756:	a801      	add	r0, sp, #4
 8008758:	e000      	b.n	800875c <WM__InitIVRSearch+0xb0>
 800875a:	4668      	mov	r0, sp
 800875c:	f005 fb20 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008760:	6831      	ldr	r1, [r6, #0]
 8008762:	b119      	cbz	r1, 800876c <WM__InitIVRSearch+0xc0>
 8008764:	4628      	mov	r0, r5
 8008766:	f7ff faa1 	bl	8007cac <WM__ClipAtParentBorders>
 800876a:	b128      	cbz	r0, 8008778 <WM__InitIVRSearch+0xcc>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	4628      	mov	r0, r5
 8008770:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8008772:	f7ff fa9b 	bl	8007cac <WM__ClipAtParentBorders>
 8008776:	b918      	cbnz	r0, 8008780 <WM__InitIVRSearch+0xd4>
 8008778:	6963      	ldr	r3, [r4, #20]
 800877a:	3b01      	subs	r3, #1
 800877c:	6163      	str	r3, [r4, #20]
 800877e:	e007      	b.n	8008790 <WM__InitIVRSearch+0xe4>
 8008780:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008784:	e884 0003 	stmia.w	r4, {r0, r1}
 8008788:	f7ff fece 	bl	8008528 <WM__GetNextIVR>
 800878c:	e000      	b.n	8008790 <WM__InitIVRSearch+0xe4>
 800878e:	2001      	movs	r0, #1
 8008790:	b006      	add	sp, #24
 8008792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008796:	bf00      	nop
 8008798:	20000084 	.word	0x20000084
 800879c:	200029f8 	.word	0x200029f8
 80087a0:	20004a80 	.word	0x20004a80
 80087a4:	20004a50 	.word	0x20004a50

080087a8 <WM_SetDefault>:
 80087a8:	b508      	push	{r3, lr}
 80087aa:	f004 f8db 	bl	800c964 <GL_SetDefault>
 80087ae:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <WM_SetDefault+0x10>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2200      	movs	r2, #0
 80087b4:	645a      	str	r2, [r3, #68]	; 0x44
 80087b6:	bd08      	pop	{r3, pc}
 80087b8:	20000084 	.word	0x20000084

080087bc <WM__Paint1>:
 80087bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087be:	b089      	sub	sp, #36	; 0x24
 80087c0:	4604      	mov	r4, r0
 80087c2:	f005 fadf 	bl	800dd84 <GUI_ALLOC_LockH>
 80087c6:	6907      	ldr	r7, [r0, #16]
 80087c8:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80087ca:	9001      	str	r0, [sp, #4]
 80087cc:	3008      	adds	r0, #8
 80087ce:	c803      	ldmia	r0, {r0, r1}
 80087d0:	ad02      	add	r5, sp, #8
 80087d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80087d6:	a801      	add	r0, sp, #4
 80087d8:	f005 fae2 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80087dc:	2f00      	cmp	r7, #0
 80087de:	d031      	beq.n	8008844 <WM__Paint1+0x88>
 80087e0:	07b3      	lsls	r3, r6, #30
 80087e2:	d52f      	bpl.n	8008844 <WM__Paint1+0x88>
 80087e4:	4620      	mov	r0, r4
 80087e6:	212e      	movs	r1, #46	; 0x2e
 80087e8:	f7fe febd 	bl	8007566 <WM_SendMessageNoPara>
 80087ec:	4b16      	ldr	r3, [pc, #88]	; (8008848 <WM__Paint1+0x8c>)
 80087ee:	781a      	ldrb	r2, [r3, #0]
 80087f0:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80087f4:	f102 0201 	add.w	r2, r2, #1
 80087f8:	701a      	strb	r2, [r3, #0]
 80087fa:	461e      	mov	r6, r3
 80087fc:	d00a      	beq.n	8008814 <WM__Paint1+0x58>
 80087fe:	230f      	movs	r3, #15
 8008800:	9405      	str	r4, [sp, #20]
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	9507      	str	r5, [sp, #28]
 8008806:	f7ff ffcf 	bl	80087a8 <WM_SetDefault>
 800880a:	4620      	mov	r0, r4
 800880c:	a904      	add	r1, sp, #16
 800880e:	f7fe fa71 	bl	8006cf4 <WM__SendMessage>
 8008812:	e010      	b.n	8008836 <WM__Paint1+0x7a>
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff ff49 	bl	80086ac <WM__InitIVRSearch>
 800881a:	b160      	cbz	r0, 8008836 <WM__Paint1+0x7a>
 800881c:	230f      	movs	r3, #15
 800881e:	9304      	str	r3, [sp, #16]
 8008820:	9405      	str	r4, [sp, #20]
 8008822:	9507      	str	r5, [sp, #28]
 8008824:	f7ff ffc0 	bl	80087a8 <WM_SetDefault>
 8008828:	4620      	mov	r0, r4
 800882a:	a904      	add	r1, sp, #16
 800882c:	f7fe fa62 	bl	8006cf4 <WM__SendMessage>
 8008830:	f7ff fe7a 	bl	8008528 <WM__GetNextIVR>
 8008834:	e7f1      	b.n	800881a <WM__Paint1+0x5e>
 8008836:	7833      	ldrb	r3, [r6, #0]
 8008838:	4620      	mov	r0, r4
 800883a:	3b01      	subs	r3, #1
 800883c:	212f      	movs	r1, #47	; 0x2f
 800883e:	7033      	strb	r3, [r6, #0]
 8008840:	f7fe fe91 	bl	8007566 <WM_SendMessageNoPara>
 8008844:	b009      	add	sp, #36	; 0x24
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008848:	20004a80 	.word	0x20004a80

0800884c <WM__Paint>:
 800884c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800884e:	b089      	sub	sp, #36	; 0x24
 8008850:	ac06      	add	r4, sp, #24
 8008852:	9003      	str	r0, [sp, #12]
 8008854:	f005 fa96 	bl	800dd84 <GUI_ALLOC_LockH>
 8008858:	f100 0208 	add.w	r2, r0, #8
 800885c:	4603      	mov	r3, r0
 800885e:	9005      	str	r0, [sp, #20]
 8008860:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008864:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008866:	699e      	ldr	r6, [r3, #24]
 8008868:	691f      	ldr	r7, [r3, #16]
 800886a:	e884 0003 	stmia.w	r4, {r0, r1}
 800886e:	a805      	add	r0, sp, #20
 8008870:	f005 fa96 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008874:	f244 0320 	movw	r3, #16416	; 0x4020
 8008878:	402b      	ands	r3, r5
 800887a:	2b00      	cmp	r3, #0
 800887c:	d034      	beq.n	80088e8 <WM__Paint+0x9c>
 800887e:	b1bf      	cbz	r7, 80088b0 <WM__Paint+0x64>
 8008880:	4620      	mov	r0, r4
 8008882:	9903      	ldr	r1, [sp, #12]
 8008884:	f7ff fa12 	bl	8007cac <WM__ClipAtParentBorders>
 8008888:	b190      	cbz	r0, 80088b0 <WM__Paint+0x64>
 800888a:	9803      	ldr	r0, [sp, #12]
 800888c:	f7ff fcb0 	bl	80081f0 <WM_SelectWindow>
 8008890:	0769      	lsls	r1, r5, #29
 8008892:	d50f      	bpl.n	80088b4 <WM__Paint+0x68>
 8008894:	b126      	cbz	r6, 80088a0 <WM__Paint+0x54>
 8008896:	f005 0501 	and.w	r5, r5, #1
 800889a:	f085 0501 	eor.w	r5, r5, #1
 800889e:	e000      	b.n	80088a2 <WM__Paint+0x56>
 80088a0:	2501      	movs	r5, #1
 80088a2:	9500      	str	r5, [sp, #0]
 80088a4:	4620      	mov	r0, r4
 80088a6:	4912      	ldr	r1, [pc, #72]	; (80088f0 <WM__Paint+0xa4>)
 80088a8:	aa03      	add	r2, sp, #12
 80088aa:	2300      	movs	r3, #0
 80088ac:	f000 fa9c 	bl	8008de8 <GUI_MEMDEV_Draw>
 80088b0:	2400      	movs	r4, #0
 80088b2:	e003      	b.n	80088bc <WM__Paint+0x70>
 80088b4:	9803      	ldr	r0, [sp, #12]
 80088b6:	f7ff f989 	bl	8007bcc <WM__PaintWinAndOverlays>
 80088ba:	2401      	movs	r4, #1
 80088bc:	9803      	ldr	r0, [sp, #12]
 80088be:	f005 fa61 	bl	800dd84 <GUI_ALLOC_LockH>
 80088c2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80088c4:	9005      	str	r0, [sp, #20]
 80088c6:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80088ca:	f023 0320 	bic.w	r3, r3, #32
 80088ce:	0492      	lsls	r2, r2, #18
 80088d0:	bf48      	it	mi
 80088d2:	f043 0304 	orrmi.w	r3, r3, #4
 80088d6:	6283      	str	r3, [r0, #40]	; 0x28
 80088d8:	a805      	add	r0, sp, #20
 80088da:	f005 fa61 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <WM__Paint+0xa8>)
 80088e0:	881a      	ldrh	r2, [r3, #0]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e000      	b.n	80088ea <WM__Paint+0x9e>
 80088e8:	461c      	mov	r4, r3
 80088ea:	4620      	mov	r0, r4
 80088ec:	b009      	add	sp, #36	; 0x24
 80088ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088f0:	08007c45 	.word	0x08007c45
 80088f4:	20004a6c 	.word	0x20004a6c

080088f8 <_Exec1Draw>:
 80088f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088fc:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <_Exec1Draw+0x70>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8008904:	b09c      	sub	sp, #112	; 0x70
 8008906:	461d      	mov	r5, r3
 8008908:	2800      	cmp	r0, #0
 800890a:	d02a      	beq.n	8008962 <_Exec1Draw+0x6a>
 800890c:	4b17      	ldr	r3, [pc, #92]	; (800896c <_Exec1Draw+0x74>)
 800890e:	8818      	ldrh	r0, [r3, #0]
 8008910:	b338      	cbz	r0, 8008962 <_Exec1Draw+0x6a>
 8008912:	4a17      	ldr	r2, [pc, #92]	; (8008970 <_Exec1Draw+0x78>)
 8008914:	6814      	ldr	r4, [r2, #0]
 8008916:	4616      	mov	r6, r2
 8008918:	b90c      	cbnz	r4, 800891e <_Exec1Draw+0x26>
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <_Exec1Draw+0x7c>)
 800891c:	681c      	ldr	r4, [r3, #0]
 800891e:	4668      	mov	r0, sp
 8008920:	f003 ffbc 	bl	800c89c <GUI_SaveContext_W>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8008928:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800892a:	b924      	cbnz	r4, 8008936 <_Exec1Draw+0x3e>
 800892c:	2400      	movs	r4, #0
 800892e:	e00d      	b.n	800894c <_Exec1Draw+0x54>
 8008930:	f1b8 0f00 	cmp.w	r8, #0
 8008934:	d10a      	bne.n	800894c <_Exec1Draw+0x54>
 8008936:	4620      	mov	r0, r4
 8008938:	f7ff ff88 	bl	800884c <WM__Paint>
 800893c:	4680      	mov	r8, r0
 800893e:	4620      	mov	r0, r4
 8008940:	f005 fa16 	bl	800dd70 <GUI_ALLOC_h2p>
 8008944:	6944      	ldr	r4, [r0, #20]
 8008946:	2c00      	cmp	r4, #0
 8008948:	d1f2      	bne.n	8008930 <_Exec1Draw+0x38>
 800894a:	e7ef      	b.n	800892c <_Exec1Draw+0x34>
 800894c:	4638      	mov	r0, r7
 800894e:	6034      	str	r4, [r6, #0]
 8008950:	f003 ffc3 	bl	800c8da <GUI_SetColor>
 8008954:	4628      	mov	r0, r5
 8008956:	f003 ffbe 	bl	800c8d6 <GUI_SetBkColor>
 800895a:	4668      	mov	r0, sp
 800895c:	f003 ffa8 	bl	800c8b0 <GUI_RestoreContext>
 8008960:	2001      	movs	r0, #1
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	20000084 	.word	0x20000084
 800896c:	20004a6c 	.word	0x20004a6c
 8008970:	20002a10 	.word	0x20002a10
 8008974:	20004a70 	.word	0x20004a70

08008978 <WM_Exec>:
 8008978:	4b18      	ldr	r3, [pc, #96]	; (80089dc <WM_Exec+0x64>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	b103      	cbz	r3, 8008982 <WM_Exec+0xa>
 8008980:	4798      	blx	r3
 8008982:	2500      	movs	r5, #0
 8008984:	f7ff fd88 	bl	8008498 <_Exec1Input>
 8008988:	b108      	cbz	r0, 800898e <WM_Exec+0x16>
 800898a:	2501      	movs	r5, #1
 800898c:	e7fa      	b.n	8008984 <WM_Exec+0xc>
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <WM_Exec+0x68>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8008996:	b144      	cbz	r4, 80089aa <WM_Exec+0x32>
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <WM_Exec+0x6c>)
 800899a:	881c      	ldrh	r4, [r3, #0]
 800899c:	b12c      	cbz	r4, 80089aa <WM_Exec+0x32>
 800899e:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <WM_Exec+0x70>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	b1a3      	cbz	r3, 80089ce <WM_Exec+0x56>
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4798      	blx	r3
 80089a8:	2401      	movs	r4, #1
 80089aa:	f7ff ffa5 	bl	80088f8 <_Exec1Draw>
 80089ae:	4606      	mov	r6, r0
 80089b0:	b108      	cbz	r0, 80089b6 <WM_Exec+0x3e>
 80089b2:	2501      	movs	r5, #1
 80089b4:	e7f9      	b.n	80089aa <WM_Exec+0x32>
 80089b6:	b174      	cbz	r4, 80089d6 <WM_Exec+0x5e>
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <WM_Exec+0x70>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	b123      	cbz	r3, 80089c8 <WM_Exec+0x50>
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4798      	blx	r3
 80089c2:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <WM_Exec+0x74>)
 80089c4:	601e      	str	r6, [r3, #0]
 80089c6:	e006      	b.n	80089d6 <WM_Exec+0x5e>
 80089c8:	f003 f856 	bl	800ba78 <GUI__ManageCache>
 80089cc:	e003      	b.n	80089d6 <WM_Exec+0x5e>
 80089ce:	2001      	movs	r0, #1
 80089d0:	f003 f852 	bl	800ba78 <GUI__ManageCache>
 80089d4:	e7e8      	b.n	80089a8 <WM_Exec+0x30>
 80089d6:	4628      	mov	r0, r5
 80089d8:	bd70      	pop	{r4, r5, r6, pc}
 80089da:	bf00      	nop
 80089dc:	20004a60 	.word	0x20004a60
 80089e0:	20000084 	.word	0x20000084
 80089e4:	20004a6c 	.word	0x20004a6c
 80089e8:	20004a94 	.word	0x20004a94
 80089ec:	20004a7c 	.word	0x20004a7c

080089f0 <WM_Activate>:
 80089f0:	4b02      	ldr	r3, [pc, #8]	; (80089fc <WM_Activate+0xc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80089fa:	4770      	bx	lr
 80089fc:	20000084 	.word	0x20000084

08008a00 <WM_Deactivate>:
 8008a00:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <WM_Deactivate+0x10>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8008a0a:	f002 bdb9 	b.w	800b580 <LCD_SetClipRectMax>
 8008a0e:	bf00      	nop
 8008a10:	20000084 	.word	0x20000084

08008a14 <WM_DefaultProc>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	6840      	ldr	r0, [r0, #4]
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	68e1      	ldr	r1, [r4, #12]
 8008a1e:	2b17      	cmp	r3, #23
 8008a20:	d00f      	beq.n	8008a42 <WM_DefaultProc+0x2e>
 8008a22:	dc06      	bgt.n	8008a32 <WM_DefaultProc+0x1e>
 8008a24:	2b0e      	cmp	r3, #14
 8008a26:	d00e      	beq.n	8008a46 <WM_DefaultProc+0x32>
 8008a28:	2b14      	cmp	r3, #20
 8008a2a:	d114      	bne.n	8008a56 <WM_DefaultProc+0x42>
 8008a2c:	f7fe fa16 	bl	8006e5c <WM__GetClientRectEx>
 8008a30:	e011      	b.n	8008a56 <WM_DefaultProc+0x42>
 8008a32:	2b22      	cmp	r3, #34	; 0x22
 8008a34:	d00c      	beq.n	8008a50 <WM_DefaultProc+0x3c>
 8008a36:	2b28      	cmp	r3, #40	; 0x28
 8008a38:	d10d      	bne.n	8008a56 <WM_DefaultProc+0x42>
 8008a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a3e:	f7ff bbc9 	b.w	80081d4 <WM_InvalidateWindow>
 8008a42:	60e0      	str	r0, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	4621      	mov	r1, r4
 8008a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a4c:	f7fe bd8d 	b.w	800756a <WM_SendToParent>
 8008a50:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008a54:	e000      	b.n	8008a58 <WM_DefaultProc+0x44>
 8008a56:	2300      	movs	r3, #0
 8008a58:	60e3      	str	r3, [r4, #12]
 8008a5a:	bd10      	pop	{r4, pc}

08008a5c <_cbBackWin>:
 8008a5c:	6803      	ldr	r3, [r0, #0]
 8008a5e:	2b0e      	cmp	r3, #14
 8008a60:	b510      	push	{r4, lr}
 8008a62:	4604      	mov	r4, r0
 8008a64:	d002      	beq.n	8008a6c <_cbBackWin+0x10>
 8008a66:	2b0f      	cmp	r3, #15
 8008a68:	d009      	beq.n	8008a7e <_cbBackWin+0x22>
 8008a6a:	e020      	b.n	8008aae <_cbBackWin+0x52>
 8008a6c:	68c3      	ldr	r3, [r0, #12]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	2a01      	cmp	r2, #1
 8008a72:	d121      	bne.n	8008ab8 <_cbBackWin+0x5c>
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a7a:	f003 baa9 	b.w	800bfd0 <GUI_StoreKey>
 8008a7e:	4a0f      	ldr	r2, [pc, #60]	; (8008abc <_cbBackWin+0x60>)
 8008a80:	6843      	ldr	r3, [r0, #4]
 8008a82:	6811      	ldr	r1, [r2, #0]
 8008a84:	428b      	cmp	r3, r1
 8008a86:	d006      	beq.n	8008a96 <_cbBackWin+0x3a>
 8008a88:	6852      	ldr	r2, [r2, #4]
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	bf14      	ite	ne
 8008a8e:	f04f 33ff 	movne.w	r3, #4294967295
 8008a92:	2301      	moveq	r3, #1
 8008a94:	e000      	b.n	8008a98 <_cbBackWin+0x3c>
 8008a96:	2300      	movs	r3, #0
 8008a98:	4a09      	ldr	r2, [pc, #36]	; (8008ac0 <_cbBackWin+0x64>)
 8008a9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008a9e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008aa2:	4298      	cmp	r0, r3
 8008aa4:	d003      	beq.n	8008aae <_cbBackWin+0x52>
 8008aa6:	f003 ff16 	bl	800c8d6 <GUI_SetBkColor>
 8008aaa:	f003 fd7b 	bl	800c5a4 <GUI_Clear>
 8008aae:	4620      	mov	r0, r4
 8008ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ab4:	f7ff bfae 	b.w	8008a14 <WM_DefaultProc>
 8008ab8:	bd10      	pop	{r4, pc}
 8008aba:	bf00      	nop
 8008abc:	20004a54 	.word	0x20004a54
 8008ac0:	20004a88 	.word	0x20004a88

08008ac4 <WM_Init>:
 8008ac4:	b530      	push	{r4, r5, lr}
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	; (8008b74 <WM_Init+0xb0>)
 8008ac8:	7818      	ldrb	r0, [r3, #0]
 8008aca:	b085      	sub	sp, #20
 8008acc:	461d      	mov	r5, r3
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d14d      	bne.n	8008b6e <WM_Init+0xaa>
 8008ad2:	4b29      	ldr	r3, [pc, #164]	; (8008b78 <WM_Init+0xb4>)
 8008ad4:	6018      	str	r0, [r3, #0]
 8008ad6:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <WM_Init+0xb8>)
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	4b29      	ldr	r3, [pc, #164]	; (8008b80 <WM_Init+0xbc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6458      	str	r0, [r3, #68]	; 0x44
 8008ae0:	4b28      	ldr	r3, [pc, #160]	; (8008b84 <WM_Init+0xc0>)
 8008ae2:	8018      	strh	r0, [r3, #0]
 8008ae4:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <WM_Init+0xc4>)
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	8018      	strh	r0, [r3, #0]
 8008aea:	4620      	mov	r0, r4
 8008aec:	f003 fc10 	bl	800c310 <GUI_DEVICE__GetpDriver>
 8008af0:	b1c0      	cbz	r0, 8008b24 <WM_Init+0x60>
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295
 8008af6:	2302      	movs	r3, #2
 8008af8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8008afc:	2000      	movs	r0, #0
 8008afe:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8008b02:	4b22      	ldr	r3, [pc, #136]	; (8008b8c <WM_Init+0xc8>)
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	9003      	str	r0, [sp, #12]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	f7ff fb90 	bl	8008230 <WM_CreateWindowAsChild>
 8008b10:	4b1f      	ldr	r3, [pc, #124]	; (8008b90 <WM_Init+0xcc>)
 8008b12:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008b16:	4b1f      	ldr	r3, [pc, #124]	; (8008b94 <WM_Init+0xd0>)
 8008b18:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8008b1c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008b20:	f7ff fb58 	bl	80081d4 <WM_InvalidateWindow>
 8008b24:	3401      	adds	r4, #1
 8008b26:	2c02      	cmp	r4, #2
 8008b28:	d1df      	bne.n	8008aea <WM_Init+0x26>
 8008b2a:	481b      	ldr	r0, [pc, #108]	; (8008b98 <WM_Init+0xd4>)
 8008b2c:	f7fe f98e 	bl	8006e4c <WM__AddCriticalHandle>
 8008b30:	481a      	ldr	r0, [pc, #104]	; (8008b9c <WM_Init+0xd8>)
 8008b32:	f7fe f98b 	bl	8006e4c <WM__AddCriticalHandle>
 8008b36:	481a      	ldr	r0, [pc, #104]	; (8008ba0 <WM_Init+0xdc>)
 8008b38:	f7fe f988 	bl	8006e4c <WM__AddCriticalHandle>
 8008b3c:	4819      	ldr	r0, [pc, #100]	; (8008ba4 <WM_Init+0xe0>)
 8008b3e:	f7fe f985 	bl	8006e4c <WM__AddCriticalHandle>
 8008b42:	4819      	ldr	r0, [pc, #100]	; (8008ba8 <WM_Init+0xe4>)
 8008b44:	f7fe f982 	bl	8006e4c <WM__AddCriticalHandle>
 8008b48:	4818      	ldr	r0, [pc, #96]	; (8008bac <WM_Init+0xe8>)
 8008b4a:	f7fe f97f 	bl	8006e4c <WM__AddCriticalHandle>
 8008b4e:	4b10      	ldr	r3, [pc, #64]	; (8008b90 <WM_Init+0xcc>)
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff fb4d 	bl	80081f0 <WM_SelectWindow>
 8008b56:	f7ff ff4b 	bl	80089f0 <WM_Activate>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	702b      	strb	r3, [r5, #0]
 8008b5e:	4814      	ldr	r0, [pc, #80]	; (8008bb0 <WM_Init+0xec>)
 8008b60:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <WM_Init+0xf0>)
 8008b62:	6003      	str	r3, [r0, #0]
 8008b64:	b005      	add	sp, #20
 8008b66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b6a:	f003 bd2b 	b.w	800c5c4 <GUI__RegisterExit>
 8008b6e:	b005      	add	sp, #20
 8008b70:	bd30      	pop	{r4, r5, pc}
 8008b72:	bf00      	nop
 8008b74:	20002a14 	.word	0x20002a14
 8008b78:	20004a70 	.word	0x20004a70
 8008b7c:	20002a10 	.word	0x20002a10
 8008b80:	20000084 	.word	0x20000084
 8008b84:	20004a6c 	.word	0x20004a6c
 8008b88:	20004a4c 	.word	0x20004a4c
 8008b8c:	08008a5d 	.word	0x08008a5d
 8008b90:	20004a54 	.word	0x20004a54
 8008b94:	20004a88 	.word	0x20004a88
 8008b98:	20004bec 	.word	0x20004bec
 8008b9c:	20004bdc 	.word	0x20004bdc
 8008ba0:	20004bcc 	.word	0x20004bcc
 8008ba4:	20004bf4 	.word	0x20004bf4
 8008ba8:	20004be4 	.word	0x20004be4
 8008bac:	20004bd4 	.word	0x20004bd4
 8008bb0:	200029ec 	.word	0x200029ec
 8008bb4:	08007805 	.word	0x08007805

08008bb8 <_CreateStaticDevice>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	b087      	sub	sp, #28
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	f005 f8e0 	bl	800dd84 <GUI_ALLOC_LockH>
 8008bc4:	af06      	add	r7, sp, #24
 8008bc6:	f8b0 8000 	ldrh.w	r8, [r0]
 8008bca:	8886      	ldrh	r6, [r0, #4]
 8008bcc:	f8b0 9002 	ldrh.w	r9, [r0, #2]
 8008bd0:	f8b0 b006 	ldrh.w	fp, [r0, #6]
 8008bd4:	f847 0d04 	str.w	r0, [r7, #-4]!
 8008bd8:	fa0f f888 	sxth.w	r8, r8
 8008bdc:	b236      	sxth	r6, r6
 8008bde:	ebc8 0606 	rsb	r6, r8, r6
 8008be2:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8008be6:	3601      	adds	r6, #1
 8008be8:	4638      	mov	r0, r7
 8008bea:	fa0f f989 	sxth.w	r9, r9
 8008bee:	fa0f f58b 	sxth.w	r5, fp
 8008bf2:	f005 f8d5 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008bf6:	ebc9 0505 	rsb	r5, r9, r5
 8008bfa:	2e00      	cmp	r6, #0
 8008bfc:	f105 0501 	add.w	r5, r5, #1
 8008c00:	dd4d      	ble.n	8008c9e <_CreateStaticDevice+0xe6>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	dd4b      	ble.n	8008c9e <_CreateStaticDevice+0xe6>
 8008c06:	f1ba 0f00 	cmp.w	sl, #0
 8008c0a:	d04a      	beq.n	8008ca2 <_CreateStaticDevice+0xea>
 8008c0c:	4650      	mov	r0, sl
 8008c0e:	f005 f8b9 	bl	800dd84 <GUI_ALLOC_LockH>
 8008c12:	ab06      	add	r3, sp, #24
 8008c14:	8886      	ldrh	r6, [r0, #4]
 8008c16:	f843 0d08 	str.w	r0, [r3, #-8]!
 8008c1a:	88c5      	ldrh	r5, [r0, #6]
 8008c1c:	b236      	sxth	r6, r6
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f005 f8be 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008c24:	4546      	cmp	r6, r8
 8008c26:	d102      	bne.n	8008c2e <_CreateStaticDevice+0x76>
 8008c28:	b22d      	sxth	r5, r5
 8008c2a:	454d      	cmp	r5, r9
 8008c2c:	d032      	beq.n	8008c94 <_CreateStaticDevice+0xdc>
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4641      	mov	r1, r8
 8008c32:	464a      	mov	r2, r9
 8008c34:	f000 f888 	bl	8008d48 <GUI_MEMDEV_SetOrg>
 8008c38:	e02c      	b.n	8008c94 <_CreateStaticDevice+0xdc>
 8008c3a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c40:	6283      	str	r3, [r0, #40]	; 0x28
 8008c42:	4638      	mov	r0, r7
 8008c44:	f005 f8ac 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008c48:	4640      	mov	r0, r8
 8008c4a:	f000 ff99 	bl	8009b80 <GUI_MEMDEV_Select>
 8008c4e:	4607      	mov	r7, r0
 8008c50:	4650      	mov	r0, sl
 8008c52:	f003 f995 	bl	800bf80 <GUI__AlphaPreserveTrans>
 8008c56:	4640      	mov	r0, r8
 8008c58:	f000 f8b6 	bl	8008dc8 <GUI_MEMDEV_GetDataPtr>
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <_CreateStaticDevice+0x15c>)
 8008c5e:	4b2e      	ldr	r3, [pc, #184]	; (8008d18 <_CreateStaticDevice+0x160>)
 8008c60:	7811      	ldrb	r1, [r2, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4375      	muls	r5, r6
 8008c66:	00aa      	lsls	r2, r5, #2
 8008c68:	4e2c      	ldr	r6, [pc, #176]	; (8008d1c <_CreateStaticDevice+0x164>)
 8008c6a:	4d2d      	ldr	r5, [pc, #180]	; (8008d20 <_CreateStaticDevice+0x168>)
 8008c6c:	4798      	blx	r3
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f8d5 8000 	ldr.w	r8, [r5]
 8008c74:	6034      	str	r4, [r6, #0]
 8008c76:	f7fe fb4a 	bl	800730e <WM_GetWindowOrgX>
 8008c7a:	6028      	str	r0, [r5, #0]
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7ff fd9d 	bl	80087bc <WM__Paint1>
 8008c82:	2000      	movs	r0, #0
 8008c84:	f8c5 8000 	str.w	r8, [r5]
 8008c88:	6030      	str	r0, [r6, #0]
 8008c8a:	f003 f979 	bl	800bf80 <GUI__AlphaPreserveTrans>
 8008c8e:	4638      	mov	r0, r7
 8008c90:	f000 ff76 	bl	8009b80 <GUI_MEMDEV_Select>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f005 f86b 	bl	800dd70 <GUI_ALLOC_h2p>
 8008c9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008c9c:	e037      	b.n	8008d0e <_CreateStaticDevice+0x156>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	e035      	b.n	8008d0e <_CreateStaticDevice+0x156>
 8008ca2:	f7fe fabb 	bl	800721c <WM_GetDesktopWindow>
 8008ca6:	4284      	cmp	r4, r0
 8008ca8:	d112      	bne.n	8008cd0 <_CreateStaticDevice+0x118>
 8008caa:	f002 f8fb 	bl	800aea4 <LCD_GetXSize>
 8008cae:	4682      	mov	sl, r0
 8008cb0:	f002 f900 	bl	800aeb4 <LCD_GetYSize>
 8008cb4:	4556      	cmp	r6, sl
 8008cb6:	dc02      	bgt.n	8008cbe <_CreateStaticDevice+0x106>
 8008cb8:	4285      	cmp	r5, r0
 8008cba:	dd09      	ble.n	8008cd0 <_CreateStaticDevice+0x118>
 8008cbc:	e000      	b.n	8008cc0 <_CreateStaticDevice+0x108>
 8008cbe:	4656      	mov	r6, sl
 8008cc0:	4285      	cmp	r5, r0
 8008cc2:	bfa8      	it	ge
 8008cc4:	4605      	movge	r5, r0
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	4620      	mov	r0, r4
 8008cca:	462a      	mov	r2, r5
 8008ccc:	f7fe fcb4 	bl	8007638 <WM_SetSize>
 8008cd0:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <_CreateStaticDevice+0x16c>)
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	f04f 0a01 	mov.w	sl, #1
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <_CreateStaticDevice+0x170>)
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4649      	mov	r1, r9
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	f8cd a000 	str.w	sl, [sp]
 8008ce8:	f000 fe54 	bl	8009994 <GUI_MEMDEV__CreateFixed>
 8008cec:	4680      	mov	r8, r0
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f005 f848 	bl	800dd84 <GUI_ALLOC_LockH>
 8008cf4:	9005      	str	r0, [sp, #20]
 8008cf6:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	d19c      	bne.n	8008c3a <_CreateStaticDevice+0x82>
 8008d00:	4638      	mov	r0, r7
 8008d02:	f005 f84d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008d06:	4620      	mov	r0, r4
 8008d08:	f7ff fd58 	bl	80087bc <WM__Paint1>
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	b007      	add	sp, #28
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d14:	20000060 	.word	0x20000060
 8008d18:	20000070 	.word	0x20000070
 8008d1c:	20004aa0 	.word	0x20004aa0
 8008d20:	20004ab8 	.word	0x20004ab8
 8008d24:	080127e4 	.word	0x080127e4
 8008d28:	080138e8 	.word	0x080138e8

08008d2c <GUI_MEMDEV_Paint1Static>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4605      	mov	r5, r0
 8008d30:	2405      	movs	r4, #5
 8008d32:	4628      	mov	r0, r5
 8008d34:	f7ff ff40 	bl	8008bb8 <_CreateStaticDevice>
 8008d38:	b910      	cbnz	r0, 8008d40 <GUI_MEMDEV_Paint1Static+0x14>
 8008d3a:	3c01      	subs	r4, #1
 8008d3c:	d1f9      	bne.n	8008d32 <GUI_MEMDEV_Paint1Static+0x6>
 8008d3e:	bd38      	pop	{r3, r4, r5, pc}
 8008d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d44:	f006 bafa 	b.w	800f33c <GUI_MEMDEV_Write>

08008d48 <GUI_MEMDEV_SetOrg>:
 8008d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	b918      	cbnz	r0, 8008d58 <GUI_MEMDEV_SetOrg+0x10>
 8008d50:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <GUI_MEMDEV_SetOrg+0x50>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008d56:	b1e8      	cbz	r0, 8008d94 <GUI_MEMDEV_SetOrg+0x4c>
 8008d58:	f005 f814 	bl	800dd84 <GUI_ALLOC_LockH>
 8008d5c:	b2a4      	uxth	r4, r4
 8008d5e:	b2ad      	uxth	r5, r5
 8008d60:	80c4      	strh	r4, [r0, #6]
 8008d62:	8085      	strh	r5, [r0, #4]
 8008d64:	9000      	str	r0, [sp, #0]
 8008d66:	f002 fc0b 	bl	800b580 <LCD_SetClipRectMax>
 8008d6a:	9b00      	ldr	r3, [sp, #0]
 8008d6c:	6958      	ldr	r0, [r3, #20]
 8008d6e:	b170      	cbz	r0, 8008d8e <GUI_MEMDEV_SetOrg+0x46>
 8008d70:	f005 f808 	bl	800dd84 <GUI_ALLOC_LockH>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	9001      	str	r0, [sp, #4]
 8008d78:	891a      	ldrh	r2, [r3, #8]
 8008d7a:	895b      	ldrh	r3, [r3, #10]
 8008d7c:	8082      	strh	r2, [r0, #4]
 8008d7e:	80c3      	strh	r3, [r0, #6]
 8008d80:	b112      	cbz	r2, 8008d88 <GUI_MEMDEV_SetOrg+0x40>
 8008d82:	b10b      	cbz	r3, 8008d88 <GUI_MEMDEV_SetOrg+0x40>
 8008d84:	8005      	strh	r5, [r0, #0]
 8008d86:	8044      	strh	r4, [r0, #2]
 8008d88:	a801      	add	r0, sp, #4
 8008d8a:	f005 f809 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008d8e:	4668      	mov	r0, sp
 8008d90:	f005 f806 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	20000084 	.word	0x20000084

08008d9c <GUI_MEMDEV_GetYSize>:
 8008d9c:	b513      	push	{r0, r1, r4, lr}
 8008d9e:	b920      	cbnz	r0, 8008daa <GUI_MEMDEV_GetYSize+0xe>
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <GUI_MEMDEV_GetYSize+0x28>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008da6:	4604      	mov	r4, r0
 8008da8:	b148      	cbz	r0, 8008dbe <GUI_MEMDEV_GetYSize+0x22>
 8008daa:	f004 ffeb 	bl	800dd84 <GUI_ALLOC_LockH>
 8008dae:	ab02      	add	r3, sp, #8
 8008db0:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 8008db4:	f843 0d04 	str.w	r0, [r3, #-4]!
 8008db8:	4618      	mov	r0, r3
 8008dba:	f004 fff1 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd10      	pop	{r4, pc}
 8008dc4:	20000084 	.word	0x20000084

08008dc8 <GUI_MEMDEV_GetDataPtr>:
 8008dc8:	b513      	push	{r0, r1, r4, lr}
 8008dca:	b150      	cbz	r0, 8008de2 <GUI_MEMDEV_GetDataPtr+0x1a>
 8008dcc:	f004 ffda 	bl	800dd84 <GUI_ALLOC_LockH>
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	a802      	add	r0, sp, #8
 8008dd4:	f840 4d04 	str.w	r4, [r0, #-4]!
 8008dd8:	f004 ffe2 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008ddc:	f104 0018 	add.w	r0, r4, #24
 8008de0:	e7ff      	b.n	8008de2 <GUI_MEMDEV_GetDataPtr+0x1a>
 8008de2:	b002      	add	sp, #8
 8008de4:	bd10      	pop	{r4, pc}
	...

08008de8 <GUI_MEMDEV_Draw>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	461e      	mov	r6, r3
 8008dee:	b089      	sub	sp, #36	; 0x24
 8008df0:	4b4e      	ldr	r3, [pc, #312]	; (8008f2c <GUI_MEMDEV_Draw+0x144>)
 8008df2:	9204      	str	r2, [sp, #16]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	7c54      	ldrb	r4, [r2, #17]
 8008dfa:	4a4d      	ldr	r2, [pc, #308]	; (8008f30 <GUI_MEMDEV_Draw+0x148>)
 8008dfc:	5712      	ldrsb	r2, [r2, r4]
 8008dfe:	2a01      	cmp	r2, #1
 8008e00:	4605      	mov	r5, r0
 8008e02:	469b      	mov	fp, r3
 8008e04:	4620      	mov	r0, r4
 8008e06:	dd06      	ble.n	8008e16 <GUI_MEMDEV_Draw+0x2e>
 8008e08:	f002 f83a 	bl	800ae80 <LCD_GetXSizeEx>
 8008e0c:	4607      	mov	r7, r0
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f002 f839 	bl	800ae86 <LCD_GetYSizeEx>
 8008e14:	e005      	b.n	8008e22 <GUI_MEMDEV_Draw+0x3a>
 8008e16:	f002 f839 	bl	800ae8c <LCD_GetVXSizeEx>
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f002 f838 	bl	800ae92 <LCD_GetVYSizeEx>
 8008e22:	4604      	mov	r4, r0
 8008e24:	b325      	cbz	r5, 8008e70 <GUI_MEMDEV_Draw+0x88>
 8008e26:	a806      	add	r0, sp, #24
 8008e28:	a907      	add	r1, sp, #28
 8008e2a:	f003 fc91 	bl	800c750 <GUI_GetOrg>
 8008e2e:	9b06      	ldr	r3, [sp, #24]
 8008e30:	f9b5 a000 	ldrsh.w	sl, [r5]
 8008e34:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8008e38:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
 8008e3c:	441f      	add	r7, r3
 8008e3e:	9b07      	ldr	r3, [sp, #28]
 8008e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e44:	3f01      	subs	r7, #1
 8008e46:	4297      	cmp	r7, r2
 8008e48:	bfd4      	ite	le
 8008e4a:	ebca 0707 	rsble	r7, sl, r7
 8008e4e:	ebca 0702 	rsbgt	r7, sl, r2
 8008e52:	441c      	add	r4, r3
 8008e54:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8008e58:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8008e5c:	3c01      	subs	r4, #1
 8008e5e:	4294      	cmp	r4, r2
 8008e60:	bfd4      	ite	le
 8008e62:	ebc8 0404 	rsble	r4, r8, r4
 8008e66:	ebc8 0402 	rsbgt	r4, r8, r2
 8008e6a:	3701      	adds	r7, #1
 8008e6c:	3401      	adds	r4, #1
 8008e6e:	e001      	b.n	8008e74 <GUI_MEMDEV_Draw+0x8c>
 8008e70:	46a8      	mov	r8, r5
 8008e72:	46aa      	mov	sl, r5
 8008e74:	b906      	cbnz	r6, 8008e78 <GUI_MEMDEV_Draw+0x90>
 8008e76:	4266      	negs	r6, r4
 8008e78:	2f00      	cmp	r7, #0
 8008e7a:	dd52      	ble.n	8008f22 <GUI_MEMDEV_Draw+0x13a>
 8008e7c:	2c00      	cmp	r4, #0
 8008e7e:	dd50      	ble.n	8008f22 <GUI_MEMDEV_Draw+0x13a>
 8008e80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e82:	9300      	str	r3, [sp, #0]
 8008e84:	4650      	mov	r0, sl
 8008e86:	4641      	mov	r1, r8
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	f000 fe3c 	bl	8009b08 <GUI_MEMDEV_CreateEx>
 8008e90:	4605      	mov	r5, r0
 8008e92:	b920      	cbnz	r0, 8008e9e <GUI_MEMDEV_Draw+0xb6>
 8008e94:	9804      	ldr	r0, [sp, #16]
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	4798      	blx	r3
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	e042      	b.n	8008f24 <GUI_MEMDEV_Draw+0x13c>
 8008e9e:	f7ff ff7d 	bl	8008d9c <GUI_MEMDEV_GetYSize>
 8008ea2:	42a0      	cmp	r0, r4
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	d006      	beq.n	8008eb6 <GUI_MEMDEV_Draw+0xce>
 8008ea8:	f8db 3000 	ldr.w	r3, [fp]
 8008eac:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008eae:	b110      	cbz	r0, 8008eb6 <GUI_MEMDEV_Draw+0xce>
 8008eb0:	2132      	movs	r1, #50	; 0x32
 8008eb2:	f7fd ff3d 	bl	8006d30 <WM__SendMessageNoPara>
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 fe62 	bl	8009b80 <GUI_MEMDEV_Select>
 8008ebc:	4273      	negs	r3, r6
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	46a1      	mov	r9, r4
 8008ec2:	2700      	movs	r7, #0
 8008ec4:	45b1      	cmp	r9, r6
 8008ec6:	da03      	bge.n	8008ed0 <GUI_MEMDEV_Draw+0xe8>
 8008ec8:	4628      	mov	r0, r5
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f006 fb36 	bl	800f53c <GUI_MEMDEV_ReduceYSize>
 8008ed0:	b147      	cbz	r7, 8008ee4 <GUI_MEMDEV_Draw+0xfc>
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	eb07 0208 	add.w	r2, r7, r8
 8008eda:	f7ff ff35 	bl	8008d48 <GUI_MEMDEV_SetOrg>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f006 fb42 	bl	800f568 <GUI_MEMDEV_Clear>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	9804      	ldr	r0, [sp, #16]
 8008ee8:	4798      	blx	r3
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <GUI_MEMDEV_Draw+0x14c>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	b10b      	cbz	r3, 8008ef4 <GUI_MEMDEV_Draw+0x10c>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4798      	blx	r3
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f000 febb 	bl	8009c70 <GUI_MEMDEV_CopyToLCD>
 8008efa:	4437      	add	r7, r6
 8008efc:	9b05      	ldr	r3, [sp, #20]
 8008efe:	42a7      	cmp	r7, r4
 8008f00:	4499      	add	r9, r3
 8008f02:	dbdf      	blt.n	8008ec4 <GUI_MEMDEV_Draw+0xdc>
 8008f04:	4628      	mov	r0, r5
 8008f06:	f000 fddd 	bl	8009ac4 <GUI_MEMDEV_Delete>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	f000 fe38 	bl	8009b80 <GUI_MEMDEV_Select>
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d006      	beq.n	8008f22 <GUI_MEMDEV_Draw+0x13a>
 8008f14:	f8db 3000 	ldr.w	r3, [fp]
 8008f18:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008f1a:	b110      	cbz	r0, 8008f22 <GUI_MEMDEV_Draw+0x13a>
 8008f1c:	2133      	movs	r1, #51	; 0x33
 8008f1e:	f7fd ff07 	bl	8006d30 <WM__SendMessageNoPara>
 8008f22:	2000      	movs	r0, #0
 8008f24:	b009      	add	sp, #36	; 0x24
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20000084 	.word	0x20000084
 8008f30:	20004aa8 	.word	0x20004aa8
 8008f34:	20002a18 	.word	0x20002a18

08008f38 <_GetDevData>:
 8008f38:	4802      	ldr	r0, [pc, #8]	; (8008f44 <_GetDevData+0xc>)
 8008f3a:	2901      	cmp	r1, #1
 8008f3c:	bf18      	it	ne
 8008f3e:	2000      	movne	r0, #0
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	080127e4 	.word	0x080127e4

08008f48 <_GetDevFunc>:
 8008f48:	4802      	ldr	r0, [pc, #8]	; (8008f54 <_GetDevFunc+0xc>)
 8008f4a:	2916      	cmp	r1, #22
 8008f4c:	bf18      	it	ne
 8008f4e:	2000      	movne	r0, #0
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	0800f14d 	.word	0x0800f14d

08008f58 <_GetDevProp>:
 8008f58:	2908      	cmp	r1, #8
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2020      	moveq	r0, #32
 8008f5e:	2000      	movne	r0, #0
 8008f60:	4770      	bx	lr

08008f62 <_SetOrg>:
 8008f62:	b508      	push	{r3, lr}
 8008f64:	6800      	ldr	r0, [r0, #0]
 8008f66:	68c3      	ldr	r3, [r0, #12]
 8008f68:	6a1b      	ldr	r3, [r3, #32]
 8008f6a:	4798      	blx	r3
 8008f6c:	bd08      	pop	{r3, pc}

08008f6e <_GetRect>:
 8008f6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f70:	6880      	ldr	r0, [r0, #8]
 8008f72:	460c      	mov	r4, r1
 8008f74:	f004 ff06 	bl	800dd84 <GUI_ALLOC_LockH>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	a802      	add	r0, sp, #8
 8008f7c:	8899      	ldrh	r1, [r3, #4]
 8008f7e:	88da      	ldrh	r2, [r3, #6]
 8008f80:	891d      	ldrh	r5, [r3, #8]
 8008f82:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008f86:	895b      	ldrh	r3, [r3, #10]
 8008f88:	8021      	strh	r1, [r4, #0]
 8008f8a:	8062      	strh	r2, [r4, #2]
 8008f8c:	4429      	add	r1, r5
 8008f8e:	441a      	add	r2, r3
 8008f90:	3901      	subs	r1, #1
 8008f92:	3a01      	subs	r2, #1
 8008f94:	80a1      	strh	r1, [r4, #4]
 8008f96:	80e2      	strh	r2, [r4, #6]
 8008f98:	f004 ff02 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bd30      	pop	{r4, r5, pc}

08008fa0 <_XY2PTR>:
 8008fa0:	4b0e      	ldr	r3, [pc, #56]	; (8008fdc <_XY2PTR+0x3c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008faa:	460e      	mov	r6, r1
 8008fac:	f004 feea 	bl	800dd84 <GUI_ALLOC_LockH>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	a802      	add	r0, sp, #8
 8008fb4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 8008fb8:	f840 3d04 	str.w	r3, [r0, #-4]!
 8008fbc:	f103 0118 	add.w	r1, r3, #24
 8008fc0:	1b36      	subs	r6, r6, r4
 8008fc2:	68dc      	ldr	r4, [r3, #12]
 8008fc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008fc8:	fb04 1406 	mla	r4, r4, r6, r1
 8008fcc:	1aed      	subs	r5, r5, r3
 8008fce:	f004 fee7 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8008fd2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	b002      	add	sp, #8
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	20000084 	.word	0x20000084

08008fe0 <_GetPixelIndex>:
 8008fe0:	b508      	push	{r3, lr}
 8008fe2:	4608      	mov	r0, r1
 8008fe4:	4611      	mov	r1, r2
 8008fe6:	f7ff ffdb 	bl	8008fa0 <_XY2PTR>
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	bd08      	pop	{r3, pc}
	...

08008ff0 <_XorPixel>:
 8008ff0:	4b15      	ldr	r3, [pc, #84]	; (8009048 <_XorPixel+0x58>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ff6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8008ff8:	4615      	mov	r5, r2
 8008ffa:	460e      	mov	r6, r1
 8008ffc:	f004 fec2 	bl	800dd84 <GUI_ALLOC_LockH>
 8009000:	4629      	mov	r1, r5
 8009002:	9000      	str	r0, [sp, #0]
 8009004:	4630      	mov	r0, r6
 8009006:	f7ff ffcb 	bl	8008fa0 <_XY2PTR>
 800900a:	9b00      	ldr	r3, [sp, #0]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	4604      	mov	r4, r0
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4798      	blx	r3
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	4058      	eors	r0, r3
 800901a:	9b00      	ldr	r3, [sp, #0]
 800901c:	6020      	str	r0, [r4, #0]
 800901e:	6958      	ldr	r0, [r3, #20]
 8009020:	b160      	cbz	r0, 800903c <_XorPixel+0x4c>
 8009022:	f004 feaf 	bl	800dd84 <GUI_ALLOC_LockH>
 8009026:	ac02      	add	r4, sp, #8
 8009028:	6883      	ldr	r3, [r0, #8]
 800902a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4631      	mov	r1, r6
 8009032:	462a      	mov	r2, r5
 8009034:	4798      	blx	r3
 8009036:	4620      	mov	r0, r4
 8009038:	f004 feb2 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800903c:	4668      	mov	r0, sp
 800903e:	f004 feaf 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009042:	b002      	add	sp, #8
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	bf00      	nop
 8009048:	20000084 	.word	0x20000084

0800904c <_SetPixelIndex>:
 800904c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800904e:	461c      	mov	r4, r3
 8009050:	4b10      	ldr	r3, [pc, #64]	; (8009094 <_SetPixelIndex+0x48>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009056:	460e      	mov	r6, r1
 8009058:	4615      	mov	r5, r2
 800905a:	f004 fe93 	bl	800dd84 <GUI_ALLOC_LockH>
 800905e:	4629      	mov	r1, r5
 8009060:	9000      	str	r0, [sp, #0]
 8009062:	4630      	mov	r0, r6
 8009064:	f7ff ff9c 	bl	8008fa0 <_XY2PTR>
 8009068:	9b00      	ldr	r3, [sp, #0]
 800906a:	6004      	str	r4, [r0, #0]
 800906c:	6958      	ldr	r0, [r3, #20]
 800906e:	b160      	cbz	r0, 800908a <_SetPixelIndex+0x3e>
 8009070:	f004 fe88 	bl	800dd84 <GUI_ALLOC_LockH>
 8009074:	ac02      	add	r4, sp, #8
 8009076:	6883      	ldr	r3, [r0, #8]
 8009078:	f844 0d04 	str.w	r0, [r4, #-4]!
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4631      	mov	r1, r6
 8009080:	462a      	mov	r2, r5
 8009082:	4798      	blx	r3
 8009084:	4620      	mov	r0, r4
 8009086:	f004 fe8b 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800908a:	4668      	mov	r0, sp
 800908c:	f004 fe88 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009090:	b002      	add	sp, #8
 8009092:	bd70      	pop	{r4, r5, r6, pc}
 8009094:	20000084 	.word	0x20000084

08009098 <_DrawVLine>:
 8009098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800909c:	4d2c      	ldr	r5, [pc, #176]	; (8009150 <_DrawVLine+0xb8>)
 800909e:	461e      	mov	r6, r3
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80090a4:	460f      	mov	r7, r1
 80090a6:	4614      	mov	r4, r2
 80090a8:	f004 fe6c 	bl	800dd84 <GUI_ALLOC_LockH>
 80090ac:	9000      	str	r0, [sp, #0]
 80090ae:	6940      	ldr	r0, [r0, #20]
 80090b0:	46a9      	mov	r9, r5
 80090b2:	b108      	cbz	r0, 80090b8 <_DrawVLine+0x20>
 80090b4:	f004 fe66 	bl	800dd84 <GUI_ALLOC_LockH>
 80090b8:	9001      	str	r0, [sp, #4]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4638      	mov	r0, r7
 80090be:	f7ff ff6f 	bl	8008fa0 <_XY2PTR>
 80090c2:	f8d9 2000 	ldr.w	r2, [r9]
 80090c6:	9b00      	ldr	r3, [sp, #0]
 80090c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80090ca:	7c12      	ldrb	r2, [r2, #16]
 80090cc:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80090d0:	f8d1 9000 	ldr.w	r9, [r1]
 80090d4:	07d2      	lsls	r2, r2, #31
 80090d6:	4605      	mov	r5, r0
 80090d8:	d51f      	bpl.n	800911a <_DrawVLine+0x82>
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4798      	blx	r3
 80090e2:	4680      	mov	r8, r0
 80090e4:	9801      	ldr	r0, [sp, #4]
 80090e6:	b128      	cbz	r0, 80090f4 <_DrawVLine+0x5c>
 80090e8:	6882      	ldr	r2, [r0, #8]
 80090ea:	4639      	mov	r1, r7
 80090ec:	f8d2 c000 	ldr.w	ip, [r2]
 80090f0:	4622      	mov	r2, r4
 80090f2:	47e0      	blx	ip
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	ea83 0308 	eor.w	r3, r3, r8
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	9b00      	ldr	r3, [sp, #0]
 80090fe:	3401      	adds	r4, #1
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	42b4      	cmp	r4, r6
 8009104:	441d      	add	r5, r3
 8009106:	dded      	ble.n	80090e4 <_DrawVLine+0x4c>
 8009108:	4668      	mov	r0, sp
 800910a:	f004 fe49 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	b1d3      	cbz	r3, 8009148 <_DrawVLine+0xb0>
 8009112:	a801      	add	r0, sp, #4
 8009114:	f004 fe44 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009118:	e016      	b.n	8009148 <_DrawVLine+0xb0>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	b163      	cbz	r3, 8009138 <_DrawVLine+0xa0>
 800911e:	9801      	ldr	r0, [sp, #4]
 8009120:	6883      	ldr	r3, [r0, #8]
 8009122:	4622      	mov	r2, r4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4639      	mov	r1, r7
 8009128:	3401      	adds	r4, #1
 800912a:	4798      	blx	r3
 800912c:	42b4      	cmp	r4, r6
 800912e:	f8c5 9000 	str.w	r9, [r5]
 8009132:	4445      	add	r5, r8
 8009134:	ddf3      	ble.n	800911e <_DrawVLine+0x86>
 8009136:	e7e7      	b.n	8009108 <_DrawVLine+0x70>
 8009138:	1b34      	subs	r4, r6, r4
 800913a:	3401      	adds	r4, #1
 800913c:	3c01      	subs	r4, #1
 800913e:	f8c5 9000 	str.w	r9, [r5]
 8009142:	4445      	add	r5, r8
 8009144:	d1fa      	bne.n	800913c <_DrawVLine+0xa4>
 8009146:	e7df      	b.n	8009108 <_DrawVLine+0x70>
 8009148:	b003      	add	sp, #12
 800914a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800914e:	bf00      	nop
 8009150:	20000084 	.word	0x20000084

08009154 <_FillRect>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009208 <_FillRect+0xb4>
 800915c:	4614      	mov	r4, r2
 800915e:	f8db 2000 	ldr.w	r2, [fp]
 8009162:	b085      	sub	sp, #20
 8009164:	6e10      	ldr	r0, [r2, #96]	; 0x60
 8009166:	460f      	mov	r7, r1
 8009168:	461d      	mov	r5, r3
 800916a:	f004 fe0b 	bl	800dd84 <GUI_ALLOC_LockH>
 800916e:	4621      	mov	r1, r4
 8009170:	9002      	str	r0, [sp, #8]
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff ff14 	bl	8008fa0 <_XY2PTR>
 8009178:	9a02      	ldr	r2, [sp, #8]
 800917a:	f8db 3000 	ldr.w	r3, [fp]
 800917e:	f8d2 900c 	ldr.w	r9, [r2, #12]
 8009182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009184:	4606      	mov	r6, r0
 8009186:	6950      	ldr	r0, [r2, #20]
 8009188:	f8d3 a000 	ldr.w	sl, [r3]
 800918c:	1bed      	subs	r5, r5, r7
 800918e:	3501      	adds	r5, #1
 8009190:	b338      	cbz	r0, 80091e2 <_FillRect+0x8e>
 8009192:	f004 fdf7 	bl	800dd84 <GUI_ALLOC_LockH>
 8009196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009198:	f10d 0810 	add.w	r8, sp, #16
 800919c:	1b13      	subs	r3, r2, r4
 800919e:	f848 0d04 	str.w	r0, [r8, #-4]!
 80091a2:	3301      	adds	r3, #1
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	4639      	mov	r1, r7
 80091a8:	4622      	mov	r2, r4
 80091aa:	462b      	mov	r3, r5
 80091ac:	f006 f9b0 	bl	800f510 <GUI_USAGE_AddRect>
 80091b0:	4640      	mov	r0, r8
 80091b2:	f004 fdf5 	bl	800dda0 <GUI_ALLOC_UnlockH>
 80091b6:	e014      	b.n	80091e2 <_FillRect+0x8e>
 80091b8:	f8db 3000 	ldr.w	r3, [fp]
 80091bc:	7c1b      	ldrb	r3, [r3, #16]
 80091be:	07db      	lsls	r3, r3, #31
 80091c0:	d513      	bpl.n	80091ea <_FillRect+0x96>
 80091c2:	9b02      	ldr	r3, [sp, #8]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	4798      	blx	r3
 80091cc:	4632      	mov	r2, r6
 80091ce:	462b      	mov	r3, r5
 80091d0:	6811      	ldr	r1, [r2, #0]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	ea81 0100 	eor.w	r1, r1, r0
 80091d8:	f842 1b04 	str.w	r1, [r2], #4
 80091dc:	d1f8      	bne.n	80091d0 <_FillRect+0x7c>
 80091de:	444e      	add	r6, r9
 80091e0:	3401      	adds	r4, #1
 80091e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091e4:	429c      	cmp	r4, r3
 80091e6:	dde7      	ble.n	80091b8 <_FillRect+0x64>
 80091e8:	e008      	b.n	80091fc <_FillRect+0xa8>
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	ddf7      	ble.n	80091de <_FillRect+0x8a>
 80091ee:	462b      	mov	r3, r5
 80091f0:	4632      	mov	r2, r6
 80091f2:	3b01      	subs	r3, #1
 80091f4:	f842 ab04 	str.w	sl, [r2], #4
 80091f8:	d1fb      	bne.n	80091f2 <_FillRect+0x9e>
 80091fa:	e7f0      	b.n	80091de <_FillRect+0x8a>
 80091fc:	a802      	add	r0, sp, #8
 80091fe:	f004 fdcf 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009202:	b005      	add	sp, #20
 8009204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009208:	20000084 	.word	0x20000084

0800920c <_DrawHLine>:
 800920c:	b507      	push	{r0, r1, r2, lr}
 800920e:	9200      	str	r2, [sp, #0]
 8009210:	f7ff ffa0 	bl	8009154 <_FillRect>
 8009214:	b003      	add	sp, #12
 8009216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800921c <_DrawBitmap>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	4c90      	ldr	r4, [pc, #576]	; (8009464 <_DrawBitmap+0x248>)
 8009222:	b091      	sub	sp, #68	; 0x44
 8009224:	469b      	mov	fp, r3
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	9008      	str	r0, [sp, #32]
 800922a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800922c:	9207      	str	r2, [sp, #28]
 800922e:	460e      	mov	r6, r1
 8009230:	f8dd a074 	ldr.w	sl, [sp, #116]	; 0x74
 8009234:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8009236:	2800      	cmp	r0, #0
 8009238:	f000 838b 	beq.w	8009952 <_DrawBitmap+0x736>
 800923c:	f004 fda2 	bl	800dd84 <GUI_ALLOC_LockH>
 8009240:	900e      	str	r0, [sp, #56]	; 0x38
 8009242:	6940      	ldr	r0, [r0, #20]
 8009244:	b108      	cbz	r0, 800924a <_DrawBitmap+0x2e>
 8009246:	f004 fd9d 	bl	800dd84 <GUI_ALLOC_LockH>
 800924a:	900f      	str	r0, [sp, #60]	; 0x3c
 800924c:	a810      	add	r0, sp, #64	; 0x40
 800924e:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	930a      	str	r3, [sp, #40]	; 0x28
 8009256:	f004 fda3 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800925a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800925c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800925e:	4437      	add	r7, r6
 8009260:	9704      	str	r7, [sp, #16]
 8009262:	b150      	cbz	r0, 800927a <_DrawBitmap+0x5e>
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	7c1b      	ldrb	r3, [r3, #16]
 8009268:	079c      	lsls	r4, r3, #30
 800926a:	d406      	bmi.n	800927a <_DrawBitmap+0x5e>
 800926c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800926e:	9700      	str	r7, [sp, #0]
 8009270:	9904      	ldr	r1, [sp, #16]
 8009272:	9a07      	ldr	r2, [sp, #28]
 8009274:	465b      	mov	r3, fp
 8009276:	f006 f94b 	bl	800f510 <GUI_USAGE_AddRect>
 800927a:	9804      	ldr	r0, [sp, #16]
 800927c:	9907      	ldr	r1, [sp, #28]
 800927e:	f7ff fe8f 	bl	8008fa0 <_XY2PTR>
 8009282:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009284:	2f17      	cmp	r7, #23
 8009286:	4606      	mov	r6, r0
 8009288:	dd64      	ble.n	8009354 <_DrawBitmap+0x138>
 800928a:	ea4f 078b 	mov.w	r7, fp, lsl #2
 800928e:	9706      	str	r7, [sp, #24]
 8009290:	f04f 0900 	mov.w	r9, #0
 8009294:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009296:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009298:	45b9      	cmp	r9, r7
 800929a:	da57      	bge.n	800934c <_DrawBitmap+0x130>
 800929c:	b130      	cbz	r0, 80092ac <_DrawBitmap+0x90>
 800929e:	6883      	ldr	r3, [r0, #8]
 80092a0:	9a07      	ldr	r2, [sp, #28]
 80092a2:	685c      	ldr	r4, [r3, #4]
 80092a4:	9904      	ldr	r1, [sp, #16]
 80092a6:	444a      	add	r2, r9
 80092a8:	465b      	mov	r3, fp
 80092aa:	47a0      	blx	r4
 80092ac:	9f08      	ldr	r7, [sp, #32]
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	68d8      	ldr	r0, [r3, #12]
 80092b2:	b130      	cbz	r0, 80092c2 <_DrawBitmap+0xa6>
 80092b4:	4b6c      	ldr	r3, [pc, #432]	; (8009468 <_DrawBitmap+0x24c>)
 80092b6:	9a06      	ldr	r2, [sp, #24]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4630      	mov	r0, r6
 80092bc:	4651      	mov	r1, sl
 80092be:	4798      	blx	r3
 80092c0:	e03d      	b.n	800933e <_DrawBitmap+0x122>
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	4798      	blx	r3
 80092c6:	0e00      	lsrs	r0, r0, #24
 80092c8:	9005      	str	r0, [sp, #20]
 80092ca:	4635      	mov	r5, r6
 80092cc:	465f      	mov	r7, fp
 80092ce:	4654      	mov	r4, sl
 80092d0:	463b      	mov	r3, r7
 80092d2:	4622      	mov	r2, r4
 80092d4:	f04f 0800 	mov.w	r8, #0
 80092d8:	f852 1b04 	ldr.w	r1, [r2], #4
 80092dc:	9805      	ldr	r0, [sp, #20]
 80092de:	0e09      	lsrs	r1, r1, #24
 80092e0:	4281      	cmp	r1, r0
 80092e2:	9805      	ldr	r0, [sp, #20]
 80092e4:	bf08      	it	eq
 80092e6:	f108 0801 	addeq.w	r8, r8, #1
 80092ea:	4281      	cmp	r1, r0
 80092ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80092f0:	d012      	beq.n	8009318 <_DrawBitmap+0xfc>
 80092f2:	f1b8 0f00 	cmp.w	r8, #0
 80092f6:	d012      	beq.n	800931e <_DrawBitmap+0x102>
 80092f8:	4a5b      	ldr	r2, [pc, #364]	; (8009468 <_DrawBitmap+0x24c>)
 80092fa:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80092fe:	f8d2 c000 	ldr.w	ip, [r2]
 8009302:	9303      	str	r3, [sp, #12]
 8009304:	4628      	mov	r0, r5
 8009306:	4621      	mov	r1, r4
 8009308:	461a      	mov	r2, r3
 800930a:	47e0      	blx	ip
 800930c:	9b03      	ldr	r3, [sp, #12]
 800930e:	ebc8 0707 	rsb	r7, r8, r7
 8009312:	441d      	add	r5, r3
 8009314:	441c      	add	r4, r3
 8009316:	e010      	b.n	800933a <_DrawBitmap+0x11e>
 8009318:	2b00      	cmp	r3, #0
 800931a:	d1dd      	bne.n	80092d8 <_DrawBitmap+0xbc>
 800931c:	e7e9      	b.n	80092f2 <_DrawBitmap+0xd6>
 800931e:	6820      	ldr	r0, [r4, #0]
 8009320:	0e02      	lsrs	r2, r0, #24
 8009322:	2aff      	cmp	r2, #255	; 0xff
 8009324:	d006      	beq.n	8009334 <_DrawBitmap+0x118>
 8009326:	4b51      	ldr	r3, [pc, #324]	; (800946c <_DrawBitmap+0x250>)
 8009328:	6829      	ldr	r1, [r5, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	43d2      	mvns	r2, r2
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	4798      	blx	r3
 8009332:	6028      	str	r0, [r5, #0]
 8009334:	3504      	adds	r5, #4
 8009336:	3404      	adds	r4, #4
 8009338:	3f01      	subs	r7, #1
 800933a:	2f00      	cmp	r7, #0
 800933c:	d1c8      	bne.n	80092d0 <_DrawBitmap+0xb4>
 800933e:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009340:	44ba      	add	sl, r7
 8009342:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009344:	f109 0901 	add.w	r9, r9, #1
 8009348:	443e      	add	r6, r7
 800934a:	e7a3      	b.n	8009294 <_DrawBitmap+0x78>
 800934c:	2800      	cmp	r0, #0
 800934e:	f040 82fd 	bne.w	800994c <_DrawBitmap+0x730>
 8009352:	e2fe      	b.n	8009952 <_DrawBitmap+0x736>
 8009354:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009356:	2f10      	cmp	r7, #16
 8009358:	d134      	bne.n	80093c4 <_DrawBitmap+0x1a8>
 800935a:	1f06      	subs	r6, r0, #4
 800935c:	2500      	movs	r5, #0
 800935e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009360:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8009362:	42bd      	cmp	r5, r7
 8009364:	f280 80a3 	bge.w	80094ae <_DrawBitmap+0x292>
 8009368:	9f07      	ldr	r7, [sp, #28]
 800936a:	442f      	add	r7, r5
 800936c:	b13c      	cbz	r4, 800937e <_DrawBitmap+0x162>
 800936e:	68a3      	ldr	r3, [r4, #8]
 8009370:	9904      	ldr	r1, [sp, #16]
 8009372:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8009376:	4620      	mov	r0, r4
 8009378:	463a      	mov	r2, r7
 800937a:	465b      	mov	r3, fp
 800937c:	47e0      	blx	ip
 800937e:	f1aa 0902 	sub.w	r9, sl, #2
 8009382:	9605      	str	r6, [sp, #20]
 8009384:	46d8      	mov	r8, fp
 8009386:	9808      	ldr	r0, [sp, #32]
 8009388:	9904      	ldr	r1, [sp, #16]
 800938a:	6903      	ldr	r3, [r0, #16]
 800938c:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	4459      	add	r1, fp
 8009394:	ebc8 0101 	rsb	r1, r8, r1
 8009398:	9103      	str	r1, [sp, #12]
 800939a:	4798      	blx	r3
 800939c:	9b05      	ldr	r3, [sp, #20]
 800939e:	9903      	ldr	r1, [sp, #12]
 80093a0:	f843 0f04 	str.w	r0, [r3, #4]!
 80093a4:	9305      	str	r3, [sp, #20]
 80093a6:	b124      	cbz	r4, 80093b2 <_DrawBitmap+0x196>
 80093a8:	68a3      	ldr	r3, [r4, #8]
 80093aa:	4620      	mov	r0, r4
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	463a      	mov	r2, r7
 80093b0:	4798      	blx	r3
 80093b2:	f1b8 0801 	subs.w	r8, r8, #1
 80093b6:	d1e6      	bne.n	8009386 <_DrawBitmap+0x16a>
 80093b8:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80093ba:	44ba      	add	sl, r7
 80093bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80093be:	3501      	adds	r5, #1
 80093c0:	443e      	add	r6, r7
 80093c2:	e7cc      	b.n	800935e <_DrawBitmap+0x142>
 80093c4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80093c6:	2f08      	cmp	r7, #8
 80093c8:	f100 0604 	add.w	r6, r0, #4
 80093cc:	d173      	bne.n	80094b6 <_DrawBitmap+0x29a>
 80093ce:	9f07      	ldr	r7, [sp, #28]
 80093d0:	9907      	ldr	r1, [sp, #28]
 80093d2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80093d6:	1a7b      	subs	r3, r7, r1
 80093d8:	4293      	cmp	r3, r2
 80093da:	f1a6 0004 	sub.w	r0, r6, #4
 80093de:	da66      	bge.n	80094ae <_DrawBitmap+0x292>
 80093e0:	4b20      	ldr	r3, [pc, #128]	; (8009464 <_DrawBitmap+0x248>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	7c1b      	ldrb	r3, [r3, #16]
 80093e6:	b36d      	cbz	r5, 8009444 <_DrawBitmap+0x228>
 80093e8:	f013 0303 	ands.w	r3, r3, #3
 80093ec:	d005      	beq.n	80093fa <_DrawBitmap+0x1de>
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d157      	bne.n	80094a2 <_DrawBitmap+0x286>
 80093f2:	46b1      	mov	r9, r6
 80093f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80093f8:	e01c      	b.n	8009434 <_DrawBitmap+0x218>
 80093fa:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80093fe:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009402:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8009406:	3301      	adds	r3, #1
 8009408:	455b      	cmp	r3, fp
 800940a:	d1f6      	bne.n	80093fa <_DrawBitmap+0x1de>
 800940c:	e049      	b.n	80094a2 <_DrawBitmap+0x286>
 800940e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009412:	f849 3c04 	str.w	r3, [r9, #-4]
 8009416:	b12c      	cbz	r4, 8009424 <_DrawBitmap+0x208>
 8009418:	68a3      	ldr	r3, [r4, #8]
 800941a:	4620      	mov	r0, r4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4641      	mov	r1, r8
 8009420:	463a      	mov	r2, r7
 8009422:	4798      	blx	r3
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	445b      	add	r3, fp
 800942c:	4543      	cmp	r3, r8
 800942e:	f109 0904 	add.w	r9, r9, #4
 8009432:	d036      	beq.n	80094a2 <_DrawBitmap+0x286>
 8009434:	9804      	ldr	r0, [sp, #16]
 8009436:	ebc0 030a 	rsb	r3, r0, sl
 800943a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0f0      	beq.n	8009424 <_DrawBitmap+0x208>
 8009442:	e7e4      	b.n	800940e <_DrawBitmap+0x1f2>
 8009444:	f013 0303 	ands.w	r3, r3, #3
 8009448:	d005      	beq.n	8009456 <_DrawBitmap+0x23a>
 800944a:	2b02      	cmp	r3, #2
 800944c:	d129      	bne.n	80094a2 <_DrawBitmap+0x286>
 800944e:	46b1      	mov	r9, r6
 8009450:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009454:	e01d      	b.n	8009492 <_DrawBitmap+0x276>
 8009456:	4b04      	ldr	r3, [pc, #16]	; (8009468 <_DrawBitmap+0x24c>)
 8009458:	4651      	mov	r1, sl
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	465a      	mov	r2, fp
 800945e:	4798      	blx	r3
 8009460:	e01f      	b.n	80094a2 <_DrawBitmap+0x286>
 8009462:	bf00      	nop
 8009464:	20000084 	.word	0x20000084
 8009468:	20000074 	.word	0x20000074
 800946c:	20000078 	.word	0x20000078
 8009470:	f849 3c04 	str.w	r3, [r9, #-4]
 8009474:	b12c      	cbz	r4, 8009482 <_DrawBitmap+0x266>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	4620      	mov	r0, r4
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4641      	mov	r1, r8
 800947e:	463a      	mov	r2, r7
 8009480:	4798      	blx	r3
 8009482:	9b04      	ldr	r3, [sp, #16]
 8009484:	f108 0801 	add.w	r8, r8, #1
 8009488:	445b      	add	r3, fp
 800948a:	4543      	cmp	r3, r8
 800948c:	f109 0904 	add.w	r9, r9, #4
 8009490:	d007      	beq.n	80094a2 <_DrawBitmap+0x286>
 8009492:	9904      	ldr	r1, [sp, #16]
 8009494:	ebc1 030a 	rsb	r3, r1, sl
 8009498:	f813 3008 	ldrb.w	r3, [r3, r8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f0      	beq.n	8009482 <_DrawBitmap+0x266>
 80094a0:	e7e6      	b.n	8009470 <_DrawBitmap+0x254>
 80094a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a6:	4492      	add	sl, r2
 80094a8:	3701      	adds	r7, #1
 80094aa:	441e      	add	r6, r3
 80094ac:	e790      	b.n	80093d0 <_DrawBitmap+0x1b4>
 80094ae:	2c00      	cmp	r4, #0
 80094b0:	f040 824c 	bne.w	800994c <_DrawBitmap+0x730>
 80094b4:	e24d      	b.n	8009952 <_DrawBitmap+0x736>
 80094b6:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80094b8:	4bb2      	ldr	r3, [pc, #712]	; (8009784 <_DrawBitmap+0x568>)
 80094ba:	9608      	str	r6, [sp, #32]
 80094bc:	007f      	lsls	r7, r7, #1
 80094be:	970c      	str	r7, [sp, #48]	; 0x30
 80094c0:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80094c2:	00bf      	lsls	r7, r7, #2
 80094c4:	970d      	str	r7, [sp, #52]	; 0x34
 80094c6:	9f07      	ldr	r7, [sp, #28]
 80094c8:	9705      	str	r7, [sp, #20]
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	bf08      	it	eq
 80094ce:	461d      	moveq	r5, r3
 80094d0:	9f08      	ldr	r7, [sp, #32]
 80094d2:	9807      	ldr	r0, [sp, #28]
 80094d4:	1f3c      	subs	r4, r7, #4
 80094d6:	9f05      	ldr	r7, [sp, #20]
 80094d8:	1a3b      	subs	r3, r7, r0
 80094da:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80094dc:	42bb      	cmp	r3, r7
 80094de:	f280 8233 	bge.w	8009948 <_DrawBitmap+0x72c>
 80094e2:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80094e4:	2f02      	cmp	r7, #2
 80094e6:	f000 80ad 	beq.w	8009644 <_DrawBitmap+0x428>
 80094ea:	2f04      	cmp	r7, #4
 80094ec:	f000 8150 	beq.w	8009790 <_DrawBitmap+0x574>
 80094f0:	2f01      	cmp	r7, #1
 80094f2:	f040 821f 	bne.w	8009934 <_DrawBitmap+0x718>
 80094f6:	f8df 9294 	ldr.w	r9, [pc, #660]	; 800978c <_DrawBitmap+0x570>
 80094fa:	f8d9 3000 	ldr.w	r3, [r9]
 80094fe:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8009500:	f004 fc40 	bl	800dd84 <GUI_ALLOC_LockH>
 8009504:	f89a 3000 	ldrb.w	r3, [sl]
 8009508:	4a9f      	ldr	r2, [pc, #636]	; (8009788 <_DrawBitmap+0x56c>)
 800950a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800950c:	5cd6      	ldrb	r6, [r2, r3]
 800950e:	f8d9 3000 	ldr.w	r3, [r9]
 8009512:	900e      	str	r0, [sp, #56]	; 0x38
 8009514:	7c1b      	ldrb	r3, [r3, #16]
 8009516:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	2b02      	cmp	r3, #2
 8009520:	465f      	mov	r7, fp
 8009522:	f1c1 0808 	rsb	r8, r1, #8
 8009526:	fa46 f601 	asr.w	r6, r6, r1
 800952a:	d020      	beq.n	800956e <_DrawBitmap+0x352>
 800952c:	2b03      	cmp	r3, #3
 800952e:	d061      	beq.n	80095f4 <_DrawBitmap+0x3d8>
 8009530:	2b01      	cmp	r3, #1
 8009532:	d05f      	beq.n	80095f4 <_DrawBitmap+0x3d8>
 8009534:	4652      	mov	r2, sl
 8009536:	4547      	cmp	r7, r8
 8009538:	bf38      	it	cc
 800953a:	46b8      	movcc	r8, r7
 800953c:	ebc8 0707 	rsb	r7, r8, r7
 8009540:	4643      	mov	r3, r8
 8009542:	4621      	mov	r1, r4
 8009544:	f006 0001 	and.w	r0, r6, #1
 8009548:	3b01      	subs	r3, #1
 800954a:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 800954e:	f841 0b04 	str.w	r0, [r1], #4
 8009552:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009556:	d1f5      	bne.n	8009544 <_DrawBitmap+0x328>
 8009558:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800955c:	2f00      	cmp	r7, #0
 800955e:	d06d      	beq.n	800963c <_DrawBitmap+0x420>
 8009560:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8009564:	4988      	ldr	r1, [pc, #544]	; (8009788 <_DrawBitmap+0x56c>)
 8009566:	f04f 0808 	mov.w	r8, #8
 800956a:	5cce      	ldrb	r6, [r1, r3]
 800956c:	e7e3      	b.n	8009536 <_DrawBitmap+0x31a>
 800956e:	686b      	ldr	r3, [r5, #4]
 8009570:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8009574:	930b      	str	r3, [sp, #44]	; 0x2c
 8009576:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800957a:	4547      	cmp	r7, r8
 800957c:	bf38      	it	cc
 800957e:	46b8      	movcc	r8, r7
 8009580:	ebc8 0707 	rsb	r7, r8, r7
 8009584:	f1bc 0f00 	cmp.w	ip, #0
 8009588:	d026      	beq.n	80095d8 <_DrawBitmap+0x3bc>
 800958a:	b91e      	cbnz	r6, 8009594 <_DrawBitmap+0x378>
 800958c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8009590:	44c1      	add	r9, r8
 8009592:	e025      	b.n	80095e0 <_DrawBitmap+0x3c4>
 8009594:	07f0      	lsls	r0, r6, #31
 8009596:	d50c      	bpl.n	80095b2 <_DrawBitmap+0x396>
 8009598:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800959c:	9a05      	ldr	r2, [sp, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f8cd c00c 	str.w	ip, [sp, #12]
 80095a4:	4660      	mov	r0, ip
 80095a6:	4649      	mov	r1, r9
 80095a8:	4798      	blx	r3
 80095aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ac:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	f1b8 0801 	subs.w	r8, r8, #1
 80095b6:	f109 0901 	add.w	r9, r9, #1
 80095ba:	f104 0404 	add.w	r4, r4, #4
 80095be:	d00f      	beq.n	80095e0 <_DrawBitmap+0x3c4>
 80095c0:	0876      	lsrs	r6, r6, #1
 80095c2:	e7e2      	b.n	800958a <_DrawBitmap+0x36e>
 80095c4:	07f1      	lsls	r1, r6, #31
 80095c6:	bf44      	itt	mi
 80095c8:	9b0b      	ldrmi	r3, [sp, #44]	; 0x2c
 80095ca:	6023      	strmi	r3, [r4, #0]
 80095cc:	f1b8 0801 	subs.w	r8, r8, #1
 80095d0:	f104 0404 	add.w	r4, r4, #4
 80095d4:	d004      	beq.n	80095e0 <_DrawBitmap+0x3c4>
 80095d6:	0876      	lsrs	r6, r6, #1
 80095d8:	2e00      	cmp	r6, #0
 80095da:	d1f3      	bne.n	80095c4 <_DrawBitmap+0x3a8>
 80095dc:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 80095e0:	b367      	cbz	r7, 800963c <_DrawBitmap+0x420>
 80095e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e4:	4a68      	ldr	r2, [pc, #416]	; (8009788 <_DrawBitmap+0x56c>)
 80095e6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80095ea:	9009      	str	r0, [sp, #36]	; 0x24
 80095ec:	5cd6      	ldrb	r6, [r2, r3]
 80095ee:	f04f 0808 	mov.w	r8, #8
 80095f2:	e7c2      	b.n	800957a <_DrawBitmap+0x35e>
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	4798      	blx	r3
 80095fc:	4651      	mov	r1, sl
 80095fe:	4547      	cmp	r7, r8
 8009600:	bf38      	it	cc
 8009602:	46b8      	movcc	r8, r7
 8009604:	ebc8 0707 	rsb	r7, r8, r7
 8009608:	1d23      	adds	r3, r4, #4
 800960a:	46c6      	mov	lr, r8
 800960c:	07f2      	lsls	r2, r6, #31
 800960e:	d504      	bpl.n	800961a <_DrawBitmap+0x3fe>
 8009610:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009614:	4042      	eors	r2, r0
 8009616:	f843 2c04 	str.w	r2, [r3, #-4]
 800961a:	f1be 0e01 	subs.w	lr, lr, #1
 800961e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009622:	f103 0304 	add.w	r3, r3, #4
 8009626:	d1f1      	bne.n	800960c <_DrawBitmap+0x3f0>
 8009628:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 800962c:	b137      	cbz	r7, 800963c <_DrawBitmap+0x420>
 800962e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009632:	4a55      	ldr	r2, [pc, #340]	; (8009788 <_DrawBitmap+0x56c>)
 8009634:	f04f 0808 	mov.w	r8, #8
 8009638:	5cd6      	ldrb	r6, [r2, r3]
 800963a:	e7e0      	b.n	80095fe <_DrawBitmap+0x3e2>
 800963c:	a80e      	add	r0, sp, #56	; 0x38
 800963e:	f004 fbaf 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009642:	e177      	b.n	8009934 <_DrawBitmap+0x718>
 8009644:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8009646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009648:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
 800964c:	f1c7 0604 	rsb	r6, r7, #4
 8009650:	f89a 7000 	ldrb.w	r7, [sl]
 8009654:	409f      	lsls	r7, r3
 8009656:	4b4d      	ldr	r3, [pc, #308]	; (800978c <_DrawBitmap+0x570>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	7c1b      	ldrb	r3, [r3, #16]
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	2b01      	cmp	r3, #1
 8009662:	b2f6      	uxtb	r6, r6
 8009664:	b2ff      	uxtb	r7, r7
 8009666:	d066      	beq.n	8009736 <_DrawBitmap+0x51a>
 8009668:	d308      	bcc.n	800967c <_DrawBitmap+0x460>
 800966a:	2b02      	cmp	r3, #2
 800966c:	f040 8162 	bne.w	8009934 <_DrawBitmap+0x718>
 8009670:	9804      	ldr	r0, [sp, #16]
 8009672:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009676:	46d8      	mov	r8, fp
 8009678:	9006      	str	r0, [sp, #24]
 800967a:	e03e      	b.n	80096fa <_DrawBitmap+0x4de>
 800967c:	4652      	mov	r2, sl
 800967e:	465b      	mov	r3, fp
 8009680:	429e      	cmp	r6, r3
 8009682:	bfc8      	it	gt
 8009684:	b2de      	uxtbgt	r6, r3
 8009686:	1b9b      	subs	r3, r3, r6
 8009688:	4631      	mov	r1, r6
 800968a:	4620      	mov	r0, r4
 800968c:	ea4f 1c97 	mov.w	ip, r7, lsr #6
 8009690:	3901      	subs	r1, #1
 8009692:	f855 c02c 	ldr.w	ip, [r5, ip, lsl #2]
 8009696:	f840 cb04 	str.w	ip, [r0], #4
 800969a:	00bf      	lsls	r7, r7, #2
 800969c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80096a0:	b2ff      	uxtb	r7, r7
 80096a2:	d1f3      	bne.n	800968c <_DrawBitmap+0x470>
 80096a4:	3e01      	subs	r6, #1
 80096a6:	b2f6      	uxtb	r6, r6
 80096a8:	3601      	adds	r6, #1
 80096aa:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8140 	beq.w	8009934 <_DrawBitmap+0x718>
 80096b4:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 80096b8:	2604      	movs	r6, #4
 80096ba:	e7e1      	b.n	8009680 <_DrawBitmap+0x464>
 80096bc:	9906      	ldr	r1, [sp, #24]
 80096be:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 80096c2:	4449      	add	r1, r9
 80096c4:	d122      	bne.n	800970c <_DrawBitmap+0x4f0>
 80096c6:	f109 0901 	add.w	r9, r9, #1
 80096ca:	fa5f f289 	uxtb.w	r2, r9
 80096ce:	00bf      	lsls	r7, r7, #2
 80096d0:	4296      	cmp	r6, r2
 80096d2:	b2ff      	uxtb	r7, r7
 80096d4:	d1f2      	bne.n	80096bc <_DrawBitmap+0x4a0>
 80096d6:	9f06      	ldr	r7, [sp, #24]
 80096d8:	3e01      	subs	r6, #1
 80096da:	b2f6      	uxtb	r6, r6
 80096dc:	1c7b      	adds	r3, r7, #1
 80096de:	1c72      	adds	r2, r6, #1
 80096e0:	199e      	adds	r6, r3, r6
 80096e2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80096e6:	9606      	str	r6, [sp, #24]
 80096e8:	f1b8 0f00 	cmp.w	r8, #0
 80096ec:	f000 8122 	beq.w	8009934 <_DrawBitmap+0x718>
 80096f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f2:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80096f6:	9309      	str	r3, [sp, #36]	; 0x24
 80096f8:	2604      	movs	r6, #4
 80096fa:	4546      	cmp	r6, r8
 80096fc:	bfc8      	it	gt
 80096fe:	fa5f f688 	uxtbgt.w	r6, r8
 8009702:	ebc6 0808 	rsb	r8, r6, r8
 8009706:	f04f 0900 	mov.w	r9, #0
 800970a:	e7d7      	b.n	80096bc <_DrawBitmap+0x4a0>
 800970c:	09ba      	lsrs	r2, r7, #6
 800970e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8009712:	f844 2029 	str.w	r2, [r4, r9, lsl #2]
 8009716:	f1bc 0f00 	cmp.w	ip, #0
 800971a:	d0d4      	beq.n	80096c6 <_DrawBitmap+0x4aa>
 800971c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8009720:	6812      	ldr	r2, [r2, #0]
 8009722:	920b      	str	r2, [sp, #44]	; 0x2c
 8009724:	4660      	mov	r0, ip
 8009726:	f8cd c00c 	str.w	ip, [sp, #12]
 800972a:	9a05      	ldr	r2, [sp, #20]
 800972c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800972e:	4798      	blx	r3
 8009730:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009734:	e7c7      	b.n	80096c6 <_DrawBitmap+0x4aa>
 8009736:	4650      	mov	r0, sl
 8009738:	465b      	mov	r3, fp
 800973a:	429e      	cmp	r6, r3
 800973c:	bfc8      	it	gt
 800973e:	b2de      	uxtbgt	r6, r3
 8009740:	1b9b      	subs	r3, r3, r6
 8009742:	1d22      	adds	r2, r4, #4
 8009744:	46b4      	mov	ip, r6
 8009746:	f017 0fc0 	tst.w	r7, #192	; 0xc0
 800974a:	d005      	beq.n	8009758 <_DrawBitmap+0x53c>
 800974c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8009750:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 8009754:	f842 1c04 	str.w	r1, [r2, #-4]
 8009758:	f10c 3cff 	add.w	ip, ip, #4294967295
 800975c:	00bf      	lsls	r7, r7, #2
 800975e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009762:	b2ff      	uxtb	r7, r7
 8009764:	f102 0204 	add.w	r2, r2, #4
 8009768:	d1ed      	bne.n	8009746 <_DrawBitmap+0x52a>
 800976a:	3e01      	subs	r6, #1
 800976c:	b2f6      	uxtb	r6, r6
 800976e:	3601      	adds	r6, #1
 8009770:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80dd 	beq.w	8009934 <_DrawBitmap+0x718>
 800977a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 800977e:	2604      	movs	r6, #4
 8009780:	e7db      	b.n	800973a <_DrawBitmap+0x51e>
 8009782:	bf00      	nop
 8009784:	080127a4 	.word	0x080127a4
 8009788:	080137d4 	.word	0x080137d4
 800978c:	20000084 	.word	0x20000084
 8009790:	4a71      	ldr	r2, [pc, #452]	; (8009958 <_DrawBitmap+0x73c>)
 8009792:	f89a 3000 	ldrb.w	r3, [sl]
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	980d      	ldr	r0, [sp, #52]	; 0x34
 800979a:	7c12      	ldrb	r2, [r2, #16]
 800979c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800979e:	f002 0203 	and.w	r2, r2, #3
 80097a2:	4083      	lsls	r3, r0
 80097a4:	2a01      	cmp	r2, #1
 80097a6:	b2de      	uxtb	r6, r3
 80097a8:	f000 809c 	beq.w	80098e4 <_DrawBitmap+0x6c8>
 80097ac:	d302      	bcc.n	80097b4 <_DrawBitmap+0x598>
 80097ae:	2a02      	cmp	r2, #2
 80097b0:	d035      	beq.n	800981e <_DrawBitmap+0x602>
 80097b2:	e0bf      	b.n	8009934 <_DrawBitmap+0x718>
 80097b4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80097b6:	b15f      	cbz	r7, 80097d0 <_DrawBitmap+0x5b4>
 80097b8:	0936      	lsrs	r6, r6, #4
 80097ba:	f10a 0201 	add.w	r2, sl, #1
 80097be:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	f89a 6001 	ldrb.w	r6, [sl, #1]
 80097c8:	9c08      	ldr	r4, [sp, #32]
 80097ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80097ce:	e001      	b.n	80097d4 <_DrawBitmap+0x5b8>
 80097d0:	465b      	mov	r3, fp
 80097d2:	4652      	mov	r2, sl
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	dd1a      	ble.n	800980e <_DrawBitmap+0x5f2>
 80097d8:	1058      	asrs	r0, r3, #1
 80097da:	f104 0108 	add.w	r1, r4, #8
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	eb02 0800 	add.w	r8, r2, r0
 80097e6:	ea4f 1c16 	mov.w	ip, r6, lsr #4
 80097ea:	f006 060f 	and.w	r6, r6, #15
 80097ee:	f855 702c 	ldr.w	r7, [r5, ip, lsl #2]
 80097f2:	f841 7c08 	str.w	r7, [r1, #-8]
 80097f6:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
 80097fa:	f841 6c04 	str.w	r6, [r1, #-4]
 80097fe:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8009802:	4542      	cmp	r2, r8
 8009804:	f101 0108 	add.w	r1, r1, #8
 8009808:	d1ed      	bne.n	80097e6 <_DrawBitmap+0x5ca>
 800980a:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 8090 	beq.w	8009934 <_DrawBitmap+0x718>
 8009814:	0936      	lsrs	r6, r6, #4
 8009816:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	e08a      	b.n	8009934 <_DrawBitmap+0x718>
 800981e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8009820:	b1c0      	cbz	r0, 8009854 <_DrawBitmap+0x638>
 8009822:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8009826:	d00a      	beq.n	800983e <_DrawBitmap+0x622>
 8009828:	0936      	lsrs	r6, r6, #4
 800982a:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	b12f      	cbz	r7, 800983e <_DrawBitmap+0x622>
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	9904      	ldr	r1, [sp, #16]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	9a05      	ldr	r2, [sp, #20]
 800983a:	4638      	mov	r0, r7
 800983c:	4798      	blx	r3
 800983e:	9904      	ldr	r1, [sp, #16]
 8009840:	9c08      	ldr	r4, [sp, #32]
 8009842:	f89a 6001 	ldrb.w	r6, [sl, #1]
 8009846:	f101 0801 	add.w	r8, r1, #1
 800984a:	f10b 3cff 	add.w	ip, fp, #4294967295
 800984e:	f10a 0901 	add.w	r9, sl, #1
 8009852:	e011      	b.n	8009878 <_DrawBitmap+0x65c>
 8009854:	46dc      	mov	ip, fp
 8009856:	46d1      	mov	r9, sl
 8009858:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800985c:	e00c      	b.n	8009878 <_DrawBitmap+0x65c>
 800985e:	f016 0ff0 	tst.w	r6, #240	; 0xf0
 8009862:	d10d      	bne.n	8009880 <_DrawBitmap+0x664>
 8009864:	f016 060f 	ands.w	r6, r6, #15
 8009868:	d11b      	bne.n	80098a2 <_DrawBitmap+0x686>
 800986a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
 800986e:	3408      	adds	r4, #8
 8009870:	f108 0802 	add.w	r8, r8, #2
 8009874:	f1ac 0c02 	sub.w	ip, ip, #2
 8009878:	f1bc 0f01 	cmp.w	ip, #1
 800987c:	dcef      	bgt.n	800985e <_DrawBitmap+0x642>
 800987e:	e021      	b.n	80098c4 <_DrawBitmap+0x6a8>
 8009880:	0933      	lsrs	r3, r6, #4
 8009882:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	2f00      	cmp	r7, #0
 800988a:	d0eb      	beq.n	8009864 <_DrawBitmap+0x648>
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	9a05      	ldr	r2, [sp, #20]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f8cd c00c 	str.w	ip, [sp, #12]
 8009896:	4638      	mov	r0, r7
 8009898:	4641      	mov	r1, r8
 800989a:	4798      	blx	r3
 800989c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80098a0:	e7e0      	b.n	8009864 <_DrawBitmap+0x648>
 80098a2:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80098a6:	6063      	str	r3, [r4, #4]
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	d0de      	beq.n	800986a <_DrawBitmap+0x64e>
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	9a05      	ldr	r2, [sp, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f8cd c00c 	str.w	ip, [sp, #12]
 80098b6:	4638      	mov	r0, r7
 80098b8:	f108 0101 	add.w	r1, r8, #1
 80098bc:	4798      	blx	r3
 80098be:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80098c2:	e7d2      	b.n	800986a <_DrawBitmap+0x64e>
 80098c4:	f1bc 0f00 	cmp.w	ip, #0
 80098c8:	d034      	beq.n	8009934 <_DrawBitmap+0x718>
 80098ca:	0936      	lsrs	r6, r6, #4
 80098cc:	d032      	beq.n	8009934 <_DrawBitmap+0x718>
 80098ce:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	b377      	cbz	r7, 8009934 <_DrawBitmap+0x718>
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	9a05      	ldr	r2, [sp, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4638      	mov	r0, r7
 80098de:	4641      	mov	r1, r8
 80098e0:	4798      	blx	r3
 80098e2:	e027      	b.n	8009934 <_DrawBitmap+0x718>
 80098e4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 80098e6:	f1c7 0302 	rsb	r3, r7, #2
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	4657      	mov	r7, sl
 80098ee:	465a      	mov	r2, fp
 80098f0:	4293      	cmp	r3, r2
 80098f2:	bfc8      	it	gt
 80098f4:	b2d3      	uxtbgt	r3, r2
 80098f6:	1ad2      	subs	r2, r2, r3
 80098f8:	1d20      	adds	r0, r4, #4
 80098fa:	469c      	mov	ip, r3
 80098fc:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8009900:	d005      	beq.n	800990e <_DrawBitmap+0x6f2>
 8009902:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8009906:	f081 01ff 	eor.w	r1, r1, #255	; 0xff
 800990a:	f840 1c04 	str.w	r1, [r0, #-4]
 800990e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009912:	0136      	lsls	r6, r6, #4
 8009914:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
 8009918:	b2f6      	uxtb	r6, r6
 800991a:	f100 0004 	add.w	r0, r0, #4
 800991e:	d1ed      	bne.n	80098fc <_DrawBitmap+0x6e0>
 8009920:	3b01      	subs	r3, #1
 8009922:	b2db      	uxtb	r3, r3
 8009924:	3301      	adds	r3, #1
 8009926:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800992a:	b11a      	cbz	r2, 8009934 <_DrawBitmap+0x718>
 800992c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
 8009930:	2302      	movs	r3, #2
 8009932:	e7dd      	b.n	80098f0 <_DrawBitmap+0x6d4>
 8009934:	9b05      	ldr	r3, [sp, #20]
 8009936:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8009938:	3301      	adds	r3, #1
 800993a:	44ba      	add	sl, r7
 800993c:	9305      	str	r3, [sp, #20]
 800993e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009940:	9b08      	ldr	r3, [sp, #32]
 8009942:	443b      	add	r3, r7
 8009944:	9308      	str	r3, [sp, #32]
 8009946:	e5c3      	b.n	80094d0 <_DrawBitmap+0x2b4>
 8009948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800994a:	b113      	cbz	r3, 8009952 <_DrawBitmap+0x736>
 800994c:	a80f      	add	r0, sp, #60	; 0x3c
 800994e:	f004 fa27 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009952:	b011      	add	sp, #68	; 0x44
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	20000084 	.word	0x20000084

0800995c <GUI_MEMDEV__WriteToActiveAt>:
 800995c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009960:	460e      	mov	r6, r1
 8009962:	4690      	mov	r8, r2
 8009964:	4607      	mov	r7, r0
 8009966:	f004 fa0d 	bl	800dd84 <GUI_ALLOC_LockH>
 800996a:	6803      	ldr	r3, [r0, #0]
 800996c:	ac02      	add	r4, sp, #8
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009976:	2000      	movs	r0, #0
 8009978:	2116      	movs	r1, #22
 800997a:	4798      	blx	r3
 800997c:	4605      	mov	r5, r0
 800997e:	4620      	mov	r0, r4
 8009980:	f004 fa0e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009984:	b11d      	cbz	r5, 800998e <GUI_MEMDEV__WriteToActiveAt+0x32>
 8009986:	4638      	mov	r0, r7
 8009988:	4631      	mov	r1, r6
 800998a:	4642      	mov	r2, r8
 800998c:	47a8      	blx	r5
 800998e:	b002      	add	sp, #8
 8009990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009994 <GUI_MEMDEV__CreateFixed>:
 8009994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009998:	4e3e      	ldr	r6, [pc, #248]	; (8009a94 <GUI_MEMDEV__CreateFixed+0x100>)
 800999a:	b087      	sub	sp, #28
 800999c:	461d      	mov	r5, r3
 800999e:	6833      	ldr	r3, [r6, #0]
 80099a0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80099a2:	7c5b      	ldrb	r3, [r3, #17]
 80099a4:	4683      	mov	fp, r0
 80099a6:	468a      	mov	sl, r1
 80099a8:	4690      	mov	r8, r2
 80099aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80099ac:	9912      	ldr	r1, [sp, #72]	; 0x48
 80099ae:	2200      	movs	r2, #0
 80099b0:	f002 fcc0 	bl	800c334 <GUI_DEVICE_Create>
 80099b4:	4604      	mov	r4, r0
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d033      	beq.n	8009a22 <GUI_MEMDEV__CreateFixed+0x8e>
 80099ba:	6903      	ldr	r3, [r0, #16]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4798      	blx	r3
 80099c0:	f001 fb1d 	bl	800affe <LCD__GetBPPDevice>
 80099c4:	fb08 f600 	mul.w	r6, r8, r0
 80099c8:	9003      	str	r0, [sp, #12]
 80099ca:	3607      	adds	r6, #7
 80099cc:	f004 fb1a 	bl	800e004 <GUI_ALLOC_RequestSize>
 80099d0:	f017 0901 	ands.w	r9, r7, #1
 80099d4:	ea4f 06d6 	mov.w	r6, r6, lsr #3
 80099d8:	d104      	bne.n	80099e4 <GUI_MEMDEV__CreateFixed+0x50>
 80099da:	2304      	movs	r3, #4
 80099dc:	fb90 f0f3 	sdiv	r0, r0, r3
 80099e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80099e4:	2d00      	cmp	r5, #0
 80099e6:	dc09      	bgt.n	80099fc <GUI_MEMDEV__CreateFixed+0x68>
 80099e8:	b11e      	cbz	r6, 80099f2 <GUI_MEMDEV__CreateFixed+0x5e>
 80099ea:	3818      	subs	r0, #24
 80099ec:	fbb0 f0f6 	udiv	r0, r0, r6
 80099f0:	e000      	b.n	80099f4 <GUI_MEMDEV__CreateFixed+0x60>
 80099f2:	4630      	mov	r0, r6
 80099f4:	426d      	negs	r5, r5
 80099f6:	42a8      	cmp	r0, r5
 80099f8:	bfb8      	it	lt
 80099fa:	4605      	movlt	r5, r0
 80099fc:	f1b9 0f00 	cmp.w	r9, #0
 8009a00:	d109      	bne.n	8009a16 <GUI_MEMDEV__CreateFixed+0x82>
 8009a02:	f8cd 9000 	str.w	r9, [sp]
 8009a06:	4658      	mov	r0, fp
 8009a08:	4651      	mov	r1, sl
 8009a0a:	4642      	mov	r2, r8
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	f005 fd3f 	bl	800f490 <GUI_USAGE_BM_Create>
 8009a12:	4607      	mov	r7, r0
 8009a14:	e000      	b.n	8009a18 <GUI_MEMDEV__CreateFixed+0x84>
 8009a16:	2700      	movs	r7, #0
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	dc04      	bgt.n	8009a26 <GUI_MEMDEV__CreateFixed+0x92>
 8009a1c:	4620      	mov	r0, r4
 8009a1e:	f002 fc87 	bl	800c330 <GUI_DEVICE_Delete>
 8009a22:	2000      	movs	r0, #0
 8009a24:	e032      	b.n	8009a8c <GUI_MEMDEV__CreateFixed+0xf8>
 8009a26:	fb06 f005 	mul.w	r0, r6, r5
 8009a2a:	3018      	adds	r0, #24
 8009a2c:	f1b9 0f00 	cmp.w	r9, #0
 8009a30:	d002      	beq.n	8009a38 <GUI_MEMDEV__CreateFixed+0xa4>
 8009a32:	f004 fb73 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 8009a36:	e001      	b.n	8009a3c <GUI_MEMDEV__CreateFixed+0xa8>
 8009a38:	f004 fb7c 	bl	800e134 <GUI_ALLOC_AllocZero>
 8009a3c:	4681      	mov	r9, r0
 8009a3e:	b940      	cbnz	r0, 8009a52 <GUI_MEMDEV__CreateFixed+0xbe>
 8009a40:	4620      	mov	r0, r4
 8009a42:	f002 fc75 	bl	800c330 <GUI_DEVICE_Delete>
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	d0eb      	beq.n	8009a22 <GUI_MEMDEV__CreateFixed+0x8e>
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	f004 f9d4 	bl	800ddf8 <GUI_ALLOC_Free>
 8009a50:	e01b      	b.n	8009a8a <GUI_MEMDEV__CreateFixed+0xf6>
 8009a52:	f004 f997 	bl	800dd84 <GUI_ALLOC_LockH>
 8009a56:	4603      	mov	r3, r0
 8009a58:	a806      	add	r0, sp, #24
 8009a5a:	9a03      	ldr	r2, [sp, #12]
 8009a5c:	f840 3d04 	str.w	r3, [r0, #-4]!
 8009a60:	611a      	str	r2, [r3, #16]
 8009a62:	601c      	str	r4, [r3, #0]
 8009a64:	f8a3 b004 	strh.w	fp, [r3, #4]
 8009a68:	f8a3 a006 	strh.w	sl, [r3, #6]
 8009a6c:	f8a3 8008 	strh.w	r8, [r3, #8]
 8009a70:	815d      	strh	r5, [r3, #10]
 8009a72:	60de      	str	r6, [r3, #12]
 8009a74:	615f      	str	r7, [r3, #20]
 8009a76:	f004 f993 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009a7a:	4a06      	ldr	r2, [pc, #24]	; (8009a94 <GUI_MEMDEV__CreateFixed+0x100>)
 8009a7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a7e:	6123      	str	r3, [r4, #16]
 8009a80:	6813      	ldr	r3, [r2, #0]
 8009a82:	f8c4 9008 	str.w	r9, [r4, #8]
 8009a86:	7c5b      	ldrb	r3, [r3, #17]
 8009a88:	61a3      	str	r3, [r4, #24]
 8009a8a:	4648      	mov	r0, r9
 8009a8c:	b007      	add	sp, #28
 8009a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a92:	bf00      	nop
 8009a94:	20000084 	.word	0x20000084

08009a98 <GUI_MEMDEV_GetBitsPerPixel>:
 8009a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	b170      	cbz	r0, 8009abc <GUI_MEMDEV_GetBitsPerPixel+0x24>
 8009a9e:	f004 f971 	bl	800dd84 <GUI_ALLOC_LockH>
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	ac02      	add	r4, sp, #8
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	4798      	blx	r3
 8009ab0:	f001 faa5 	bl	800affe <LCD__GetBPPDevice>
 8009ab4:	4605      	mov	r5, r0
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f004 f972 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009abc:	4628      	mov	r0, r5
 8009abe:	b003      	add	sp, #12
 8009ac0:	bd30      	pop	{r4, r5, pc}
	...

08009ac4 <GUI_MEMDEV_Delete>:
 8009ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	b1d0      	cbz	r0, 8009b00 <GUI_MEMDEV_Delete+0x3c>
 8009aca:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <GUI_MEMDEV_Delete+0x40>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad0:	4283      	cmp	r3, r0
 8009ad2:	d101      	bne.n	8009ad8 <GUI_MEMDEV_Delete+0x14>
 8009ad4:	f002 fef6 	bl	800c8c4 <GUI_SelectLCD>
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f004 f953 	bl	800dd84 <GUI_ALLOC_LockH>
 8009ade:	9001      	str	r0, [sp, #4]
 8009ae0:	6940      	ldr	r0, [r0, #20]
 8009ae2:	b108      	cbz	r0, 8009ae8 <GUI_MEMDEV_Delete+0x24>
 8009ae4:	f005 fd00 	bl	800f4e8 <GUI_USAGE_DecUseCnt>
 8009ae8:	ad02      	add	r5, sp, #8
 8009aea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	f002 fc1e 	bl	800c330 <GUI_DEVICE_Delete>
 8009af4:	4628      	mov	r0, r5
 8009af6:	f004 f953 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009afa:	4620      	mov	r0, r4
 8009afc:	f004 f97c 	bl	800ddf8 <GUI_ALLOC_Free>
 8009b00:	b003      	add	sp, #12
 8009b02:	bd30      	pop	{r4, r5, pc}
 8009b04:	20000084 	.word	0x20000084

08009b08 <GUI_MEMDEV_CreateEx>:
 8009b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	469a      	mov	sl, r3
 8009b0e:	4b19      	ldr	r3, [pc, #100]	; (8009b74 <GUI_MEMDEV_CreateEx+0x6c>)
 8009b10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4607      	mov	r7, r0
 8009b16:	7c58      	ldrb	r0, [r3, #17]
 8009b18:	4b17      	ldr	r3, [pc, #92]	; (8009b78 <GUI_MEMDEV_CreateEx+0x70>)
 8009b1a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8009b1e:	4688      	mov	r8, r1
 8009b20:	4691      	mov	r9, r2
 8009b22:	68e3      	ldr	r3, [r4, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b04      	cmp	r3, #4
 8009b28:	d006      	beq.n	8009b38 <GUI_MEMDEV_CreateEx+0x30>
 8009b2a:	6824      	ldr	r4, [r4, #0]
 8009b2c:	2c00      	cmp	r4, #0
 8009b2e:	d1f8      	bne.n	8009b22 <GUI_MEMDEV_CreateEx+0x1a>
 8009b30:	f002 fbee 	bl	800c310 <GUI_DEVICE__GetpDriver>
 8009b34:	4604      	mov	r4, r0
 8009b36:	b130      	cbz	r0, 8009b46 <GUI_MEMDEV_CreateEx+0x3e>
 8009b38:	68e3      	ldr	r3, [r4, #12]
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3e:	2101      	movs	r1, #1
 8009b40:	4798      	blx	r3
 8009b42:	4606      	mov	r6, r0
 8009b44:	b908      	cbnz	r0, 8009b4a <GUI_MEMDEV_CreateEx+0x42>
 8009b46:	2000      	movs	r0, #0
 8009b48:	e010      	b.n	8009b6c <GUI_MEMDEV_CreateEx+0x64>
 8009b4a:	6924      	ldr	r4, [r4, #16]
 8009b4c:	68a3      	ldr	r3, [r4, #8]
 8009b4e:	4798      	blx	r3
 8009b50:	3001      	adds	r0, #1
 8009b52:	bf04      	itt	eq
 8009b54:	f045 0501 	orreq.w	r5, r5, #1
 8009b58:	4c08      	ldreq	r4, [pc, #32]	; (8009b7c <GUI_MEMDEV_CreateEx+0x74>)
 8009b5a:	9402      	str	r4, [sp, #8]
 8009b5c:	e88d 0060 	stmia.w	sp, {r5, r6}
 8009b60:	4638      	mov	r0, r7
 8009b62:	4641      	mov	r1, r8
 8009b64:	464a      	mov	r2, r9
 8009b66:	4653      	mov	r3, sl
 8009b68:	f7ff ff14 	bl	8009994 <GUI_MEMDEV__CreateFixed>
 8009b6c:	b004      	add	sp, #16
 8009b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b72:	bf00      	nop
 8009b74:	20000084 	.word	0x20000084
 8009b78:	20004afc 	.word	0x20004afc
 8009b7c:	080138e8 	.word	0x080138e8

08009b80 <GUI_MEMDEV_Select>:
 8009b80:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <GUI_MEMDEV_Select+0x48>)
 8009b82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	4604      	mov	r4, r0
 8009b88:	6e16      	ldr	r6, [r2, #96]	; 0x60
 8009b8a:	461f      	mov	r7, r3
 8009b8c:	b910      	cbnz	r0, 8009b94 <GUI_MEMDEV_Select+0x14>
 8009b8e:	f002 fe99 	bl	800c8c4 <GUI_SelectLCD>
 8009b92:	e016      	b.n	8009bc2 <GUI_MEMDEV_Select+0x42>
 8009b94:	b10e      	cbz	r6, 8009b9a <GUI_MEMDEV_Select+0x1a>
 8009b96:	f002 fe95 	bl	800c8c4 <GUI_SelectLCD>
 8009b9a:	f7fe ff31 	bl	8008a00 <WM_Deactivate>
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f004 f8f0 	bl	800dd84 <GUI_ALLOC_LockH>
 8009ba4:	ad02      	add	r5, sp, #8
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009bac:	661c      	str	r4, [r3, #96]	; 0x60
 8009bae:	6800      	ldr	r0, [r0, #0]
 8009bb0:	f002 fc00 	bl	800c3b4 <GUI_DEVICE_Link>
 8009bb4:	4628      	mov	r0, r5
 8009bb6:	f004 f8f3 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009bba:	f001 f8cf 	bl	800ad5c <LCD_UpdateColorIndices>
 8009bbe:	f001 fcdf 	bl	800b580 <LCD_SetClipRectMax>
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	b003      	add	sp, #12
 8009bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc8:	20000084 	.word	0x20000084

08009bcc <GUI_MEMDEV_CopyToLCDAt>:
 8009bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	4615      	mov	r5, r2
 8009bd6:	4606      	mov	r6, r0
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	d041      	beq.n	8009c60 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	f002 fe7e 	bl	800c8de <GUI_SetDrawMode>
 8009be2:	4b21      	ldr	r3, [pc, #132]	; (8009c68 <GUI_MEMDEV_CopyToLCDAt+0x9c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4607      	mov	r7, r0
 8009be8:	4630      	mov	r0, r6
 8009bea:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 8009bee:	f004 f8c9 	bl	800dd84 <GUI_ALLOC_LockH>
 8009bf2:	6803      	ldr	r3, [r0, #0]
 8009bf4:	9001      	str	r0, [sp, #4]
 8009bf6:	6998      	ldr	r0, [r3, #24]
 8009bf8:	f002 f9d4 	bl	800bfa4 <GUI_SelectLayer>
 8009bfc:	4b1b      	ldr	r3, [pc, #108]	; (8009c6c <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 8009bfe:	429c      	cmp	r4, r3
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	bf04      	itt	eq
 8009c04:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 8009c08:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 8009c0c:	891a      	ldrh	r2, [r3, #8]
 8009c0e:	895b      	ldrh	r3, [r3, #10]
 8009c10:	f8ad 4008 	strh.w	r4, [sp, #8]
 8009c14:	3a01      	subs	r2, #1
 8009c16:	3b01      	subs	r3, #1
 8009c18:	4422      	add	r2, r4
 8009c1a:	442b      	add	r3, r5
 8009c1c:	4681      	mov	r9, r0
 8009c1e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8009c22:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c26:	f8ad 500a 	strh.w	r5, [sp, #10]
 8009c2a:	f7fe fee1 	bl	80089f0 <WM_Activate>
 8009c2e:	a801      	add	r0, sp, #4
 8009c30:	f004 f8b6 	bl	800dda0 <GUI_ALLOC_UnlockH>
 8009c34:	a802      	add	r0, sp, #8
 8009c36:	f7fe fd39 	bl	80086ac <WM__InitIVRSearch>
 8009c3a:	b948      	cbnz	r0, 8009c50 <GUI_MEMDEV_CopyToLCDAt+0x84>
 8009c3c:	4648      	mov	r0, r9
 8009c3e:	f002 f9b1 	bl	800bfa4 <GUI_SelectLayer>
 8009c42:	4640      	mov	r0, r8
 8009c44:	f7ff ff9c 	bl	8009b80 <GUI_MEMDEV_Select>
 8009c48:	4638      	mov	r0, r7
 8009c4a:	f002 fe48 	bl	800c8de <GUI_SetDrawMode>
 8009c4e:	e007      	b.n	8009c60 <GUI_MEMDEV_CopyToLCDAt+0x94>
 8009c50:	4630      	mov	r0, r6
 8009c52:	4621      	mov	r1, r4
 8009c54:	462a      	mov	r2, r5
 8009c56:	f004 fee7 	bl	800ea28 <GUI_MEMDEV__WriteToActiveOpaque>
 8009c5a:	f7fe fc65 	bl	8008528 <WM__GetNextIVR>
 8009c5e:	e7ec      	b.n	8009c3a <GUI_MEMDEV_CopyToLCDAt+0x6e>
 8009c60:	b005      	add	sp, #20
 8009c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c66:	bf00      	nop
 8009c68:	20000084 	.word	0x20000084
 8009c6c:	fffff001 	.word	0xfffff001

08009c70 <GUI_MEMDEV_CopyToLCD>:
 8009c70:	4901      	ldr	r1, [pc, #4]	; (8009c78 <GUI_MEMDEV_CopyToLCD+0x8>)
 8009c72:	460a      	mov	r2, r1
 8009c74:	f7ff bfaa 	b.w	8009bcc <GUI_MEMDEV_CopyToLCDAt>
 8009c78:	fffff001 	.word	0xfffff001

08009c7c <_SetPhysRAMAddr>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	4604      	mov	r4, r0
 8009c80:	460e      	mov	r6, r1
 8009c82:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8009c86:	212a      	movs	r1, #42	; 0x2a
 8009c88:	4615      	mov	r5, r2
 8009c8a:	4798      	blx	r3
 8009c8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009c92:	4431      	add	r1, r6
 8009c94:	4620      	mov	r0, r4
 8009c96:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009c9a:	4798      	blx	r3
 8009c9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c9e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009ca2:	b2b7      	uxth	r7, r6
 8009ca4:	4439      	add	r1, r7
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	b2c9      	uxtb	r1, r1
 8009caa:	4798      	blx	r3
 8009cac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009cae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cb2:	4431      	add	r1, r6
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009cba:	4798      	blx	r3
 8009cbc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009cbe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cc2:	4439      	add	r1, r7
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	b2c9      	uxtb	r1, r1
 8009cc8:	4798      	blx	r3
 8009cca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009cce:	4620      	mov	r0, r4
 8009cd0:	212b      	movs	r1, #43	; 0x2b
 8009cd2:	4798      	blx	r3
 8009cd4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009cd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cda:	4429      	add	r1, r5
 8009cdc:	4620      	mov	r0, r4
 8009cde:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009ce2:	4798      	blx	r3
 8009ce4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009ce6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cea:	b2ae      	uxth	r6, r5
 8009cec:	4431      	add	r1, r6
 8009cee:	4620      	mov	r0, r4
 8009cf0:	b2c9      	uxtb	r1, r1
 8009cf2:	4798      	blx	r3
 8009cf4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009cf6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009cfa:	4429      	add	r1, r5
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009d02:	4798      	blx	r3
 8009d04:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d0a:	4431      	add	r1, r6
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	b2c9      	uxtb	r1, r1
 8009d10:	4798      	blx	r3
 8009d12:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009d16:	4620      	mov	r0, r4
 8009d18:	212c      	movs	r1, #44	; 0x2c
 8009d1a:	4798      	blx	r3
 8009d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d1e <_SetRect>:
 8009d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	4604      	mov	r4, r0
 8009d24:	4688      	mov	r8, r1
 8009d26:	461f      	mov	r7, r3
 8009d28:	212a      	movs	r1, #42	; 0x2a
 8009d2a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8009d2e:	9d06      	ldr	r5, [sp, #24]
 8009d30:	4616      	mov	r6, r2
 8009d32:	4798      	blx	r3
 8009d34:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d36:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d3a:	4441      	add	r1, r8
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009d42:	4798      	blx	r3
 8009d44:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d46:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d4a:	4441      	add	r1, r8
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	b2c9      	uxtb	r1, r1
 8009d50:	4798      	blx	r3
 8009d52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d54:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d58:	4439      	add	r1, r7
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009d60:	4798      	blx	r3
 8009d62:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d64:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d68:	4439      	add	r1, r7
 8009d6a:	4620      	mov	r0, r4
 8009d6c:	b2c9      	uxtb	r1, r1
 8009d6e:	4798      	blx	r3
 8009d70:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009d74:	4620      	mov	r0, r4
 8009d76:	212b      	movs	r1, #43	; 0x2b
 8009d78:	4798      	blx	r3
 8009d7a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d80:	4431      	add	r1, r6
 8009d82:	4620      	mov	r0, r4
 8009d84:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009d88:	4798      	blx	r3
 8009d8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d90:	4431      	add	r1, r6
 8009d92:	4620      	mov	r0, r4
 8009d94:	b2c9      	uxtb	r1, r1
 8009d96:	4798      	blx	r3
 8009d98:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009d9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009d9e:	4429      	add	r1, r5
 8009da0:	4620      	mov	r0, r4
 8009da2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8009da6:	4798      	blx	r3
 8009da8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009daa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009dae:	4429      	add	r1, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	b2c9      	uxtb	r1, r1
 8009db4:	4798      	blx	r3
 8009db6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009dba:	4620      	mov	r0, r4
 8009dbc:	212c      	movs	r1, #44	; 0x2c
 8009dbe:	4798      	blx	r3
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dc4 <_SetOrientation>:
 8009dc4:	b513      	push	{r0, r1, r4, lr}
 8009dc6:	4a0d      	ldr	r2, [pc, #52]	; (8009dfc <_SetOrientation+0x38>)
 8009dc8:	4604      	mov	r4, r0
 8009dca:	6851      	ldr	r1, [r2, #4]
 8009dcc:	6810      	ldr	r0, [r2, #0]
 8009dce:	466b      	mov	r3, sp
 8009dd0:	c303      	stmia	r3!, {r0, r1}
 8009dd2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	2136      	movs	r1, #54	; 0x36
 8009dda:	4798      	blx	r3
 8009ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dde:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 8009de0:	aa02      	add	r2, sp, #8
 8009de2:	4413      	add	r3, r2
 8009de4:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8009de8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009dec:	4319      	orrs	r1, r3
 8009dee:	4620      	mov	r0, r4
 8009df0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009df4:	b289      	uxth	r1, r1
 8009df6:	4798      	blx	r3
 8009df8:	b002      	add	sp, #8
 8009dfa:	bd10      	pop	{r4, pc}
 8009dfc:	080125d0 	.word	0x080125d0

08009e00 <_ReadPixel_16bpp_B8>:
 8009e00:	b513      	push	{r0, r1, r4, lr}
 8009e02:	4604      	mov	r4, r0
 8009e04:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009e08:	202e      	movs	r0, #46	; 0x2e
 8009e0a:	4798      	blx	r3
 8009e0c:	6a21      	ldr	r1, [r4, #32]
 8009e0e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8009e12:	4668      	mov	r0, sp
 8009e14:	3103      	adds	r1, #3
 8009e16:	4798      	blx	r3
 8009e18:	6a22      	ldr	r2, [r4, #32]
 8009e1a:	ab00      	add	r3, sp, #0
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f81d 2002 	ldrb.w	r2, [sp, r2]
 8009e22:	7859      	ldrb	r1, [r3, #1]
 8009e24:	7898      	ldrb	r0, [r3, #2]
 8009e26:	08d2      	lsrs	r2, r2, #3
 8009e28:	0889      	lsrs	r1, r1, #2
 8009e2a:	02d2      	lsls	r2, r2, #11
 8009e2c:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8009e30:	ea42 00d0 	orr.w	r0, r2, r0, lsr #3
 8009e34:	b002      	add	sp, #8
 8009e36:	bd10      	pop	{r4, pc}

08009e38 <_ReadPixel_16bpp_B16_I>:
 8009e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8009e40:	202e      	movs	r0, #46	; 0x2e
 8009e42:	4798      	blx	r3
 8009e44:	6a21      	ldr	r1, [r4, #32]
 8009e46:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009e4a:	4668      	mov	r0, sp
 8009e4c:	3102      	adds	r1, #2
 8009e4e:	4798      	blx	r3
 8009e50:	6a23      	ldr	r3, [r4, #32]
 8009e52:	a900      	add	r1, sp, #0
 8009e54:	eb01 0243 	add.w	r2, r1, r3, lsl #1
 8009e58:	f83d 0013 	ldrh.w	r0, [sp, r3, lsl #1]
 8009e5c:	8852      	ldrh	r2, [r2, #2]
 8009e5e:	f402 417c 	and.w	r1, r2, #64512	; 0xfc00
 8009e62:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8009e66:	ea42 1251 	orr.w	r2, r2, r1, lsr #5
 8009e6a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8009e6e:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8009e72:	b004      	add	sp, #16
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <_SetReg_B8>:
 8009e76:	b538      	push	{r3, r4, r5, lr}
 8009e78:	4604      	mov	r4, r0
 8009e7a:	460d      	mov	r5, r1
 8009e7c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8009e80:	0a08      	lsrs	r0, r1, #8
 8009e82:	4798      	blx	r3
 8009e84:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009e88:	b2e8      	uxtb	r0, r5
 8009e8a:	4798      	blx	r3
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}

08009e8e <_SetReg_B16>:
 8009e8e:	b508      	push	{r3, lr}
 8009e90:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 8009e94:	4608      	mov	r0, r1
 8009e96:	4798      	blx	r3
 8009e98:	bd08      	pop	{r3, pc}

08009e9a <_WritePara_B8>:
 8009e9a:	b508      	push	{r3, lr}
 8009e9c:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8009ea0:	b2c8      	uxtb	r0, r1
 8009ea2:	4798      	blx	r3
 8009ea4:	bd08      	pop	{r3, pc}

08009ea6 <_WritePara_B16>:
 8009ea6:	b508      	push	{r3, lr}
 8009ea8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 8009eac:	4608      	mov	r0, r1
 8009eae:	4798      	blx	r3
 8009eb0:	bd08      	pop	{r3, pc}
	...

08009eb4 <_SetInterface>:
 8009eb4:	2908      	cmp	r1, #8
 8009eb6:	d002      	beq.n	8009ebe <_SetInterface+0xa>
 8009eb8:	2910      	cmp	r1, #16
 8009eba:	d005      	beq.n	8009ec8 <_SetInterface+0x14>
 8009ebc:	4770      	bx	lr
 8009ebe:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <_SetInterface+0x24>)
 8009ec0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8009ec4:	4b05      	ldr	r3, [pc, #20]	; (8009edc <_SetInterface+0x28>)
 8009ec6:	e003      	b.n	8009ed0 <_SetInterface+0x1c>
 8009ec8:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <_SetInterface+0x2c>)
 8009eca:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <_SetInterface+0x30>)
 8009ed0:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	08009e77 	.word	0x08009e77
 8009edc:	08009e9b 	.word	0x08009e9b
 8009ee0:	08009e8f 	.word	0x08009e8f
 8009ee4:	08009ea7 	.word	0x08009ea7

08009ee8 <_ReadRect_16bpp_B8>:
 8009ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009eea:	b085      	sub	sp, #20
 8009eec:	6884      	ldr	r4, [r0, #8]
 8009eee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009ef0:	9700      	str	r7, [sp, #0]
 8009ef2:	1abd      	subs	r5, r7, r2
 8009ef4:	1a58      	subs	r0, r3, r1
 8009ef6:	3501      	adds	r5, #1
 8009ef8:	fb00 5505 	mla	r5, r0, r5, r5
 8009efc:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8009f00:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009f02:	4620      	mov	r0, r4
 8009f04:	47b8      	blx	r7
 8009f06:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8009f0a:	202e      	movs	r0, #46	; 0x2e
 8009f0c:	4798      	blx	r3
 8009f0e:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8009f12:	6a21      	ldr	r1, [r4, #32]
 8009f14:	a802      	add	r0, sp, #8
 8009f16:	4798      	blx	r3
 8009f18:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 8009f1c:	a802      	add	r0, sp, #8
 8009f1e:	2103      	movs	r1, #3
 8009f20:	4798      	blx	r3
 8009f22:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009f26:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8009f2a:	08db      	lsrs	r3, r3, #3
 8009f2c:	0892      	lsrs	r2, r2, #2
 8009f2e:	02db      	lsls	r3, r3, #11
 8009f30:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8009f34:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8009f38:	3d01      	subs	r5, #1
 8009f3a:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8009f3e:	f826 3b02 	strh.w	r3, [r6], #2
 8009f42:	d1e9      	bne.n	8009f18 <_ReadRect_16bpp_B8+0x30>
 8009f44:	b005      	add	sp, #20
 8009f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009f48 <_ReadRect_16bpp_B16_I>:
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	b087      	sub	sp, #28
 8009f4c:	6884      	ldr	r4, [r0, #8]
 8009f4e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009f50:	9700      	str	r7, [sp, #0]
 8009f52:	1abd      	subs	r5, r7, r2
 8009f54:	1a58      	subs	r0, r3, r1
 8009f56:	3501      	adds	r5, #1
 8009f58:	fb00 5505 	mla	r5, r0, r5, r5
 8009f5c:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8009f60:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8009f62:	4620      	mov	r0, r4
 8009f64:	47b8      	blx	r7
 8009f66:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8009f6a:	202e      	movs	r0, #46	; 0x2e
 8009f6c:	4798      	blx	r3
 8009f6e:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f72:	6a21      	ldr	r1, [r4, #32]
 8009f74:	a802      	add	r0, sp, #8
 8009f76:	4798      	blx	r3
 8009f78:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8009f7c:	a802      	add	r0, sp, #8
 8009f7e:	2102      	movs	r1, #2
 8009f80:	4798      	blx	r3
 8009f82:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8009f86:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8009f8a:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8009f8e:	ea43 1352 	orr.w	r3, r3, r2, lsr #5
 8009f92:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8009f96:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8009f9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f9e:	3d01      	subs	r5, #1
 8009fa0:	f826 3b02 	strh.w	r3, [r6], #2
 8009fa4:	d1e8      	bne.n	8009f78 <_ReadRect_16bpp_B16_I+0x30>
 8009fa6:	b007      	add	sp, #28
 8009fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009fac <GUIDRV_FlexColor_SetFunc66709>:
 8009fac:	b510      	push	{r4, lr}
 8009fae:	4604      	mov	r4, r0
 8009fb0:	f000 fde2 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 8009fb4:	68a3      	ldr	r3, [r4, #8]
 8009fb6:	4a12      	ldr	r2, [pc, #72]	; (800a000 <GUIDRV_FlexColor_SetFunc66709+0x54>)
 8009fb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009fbc:	4a11      	ldr	r2, [pc, #68]	; (800a004 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8009fbe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009fc2:	4a11      	ldr	r2, [pc, #68]	; (800a008 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 8009fc4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8009fc8:	4a10      	ldr	r2, [pc, #64]	; (800a00c <GUIDRV_FlexColor_SetFunc66709+0x60>)
 8009fca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8009fd4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8009fd8:	4a0d      	ldr	r2, [pc, #52]	; (800a010 <GUIDRV_FlexColor_SetFunc66709+0x64>)
 8009fda:	490e      	ldr	r1, [pc, #56]	; (800a014 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8009fe2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8009fe4:	6809      	ldr	r1, [r1, #0]
 8009fe6:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8009fea:	f022 0203 	bic.w	r2, r2, #3
 8009fee:	490a      	ldr	r1, [pc, #40]	; (800a018 <GUIDRV_FlexColor_SetFunc66709+0x6c>)
 8009ff0:	84da      	strh	r2, [r3, #38]	; 0x26
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <GUIDRV_FlexColor_SetFunc66709+0x70>)
 8009ff4:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8009ff8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	08009c7d 	.word	0x08009c7d
 800a004:	08009d1f 	.word	0x08009d1f
 800a008:	08009dc5 	.word	0x08009dc5
 800a00c:	08009e01 	.word	0x08009e01
 800a010:	20000068 	.word	0x20000068
 800a014:	20000064 	.word	0x20000064
 800a018:	08009ee9 	.word	0x08009ee9
 800a01c:	08009eb5 	.word	0x08009eb5

0800a020 <_WriteU16_A1>:
 800a020:	b508      	push	{r3, lr}
 800a022:	0a0b      	lsrs	r3, r1, #8
 800a024:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 800a028:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 800a02c:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800a030:	2102      	movs	r1, #2
 800a032:	3071      	adds	r0, #113	; 0x71
 800a034:	4798      	blx	r3
 800a036:	bd08      	pop	{r3, pc}

0800a038 <_WriteDataMP>:
 800a038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03a:	6e86      	ldr	r6, [r0, #104]	; 0x68
 800a03c:	4604      	mov	r4, r0
 800a03e:	460f      	mov	r7, r1
 800a040:	4615      	mov	r5, r2
 800a042:	2300      	movs	r3, #0
 800a044:	b1a5      	cbz	r5, 800a070 <_WriteDataMP+0x38>
 800a046:	f837 2b02 	ldrh.w	r2, [r7], #2
 800a04a:	4630      	mov	r0, r6
 800a04c:	3301      	adds	r3, #1
 800a04e:	0a11      	lsrs	r1, r2, #8
 800a050:	2bfa      	cmp	r3, #250	; 0xfa
 800a052:	f800 1b02 	strb.w	r1, [r0], #2
 800a056:	7072      	strb	r2, [r6, #1]
 800a058:	d107      	bne.n	800a06a <_WriteDataMP+0x32>
 800a05a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800a05e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a064:	4798      	blx	r3
 800a066:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a068:	2300      	movs	r3, #0
 800a06a:	3d01      	subs	r5, #1
 800a06c:	4606      	mov	r6, r0
 800a06e:	e7e9      	b.n	800a044 <_WriteDataMP+0xc>
 800a070:	b123      	cbz	r3, 800a07c <_WriteDataMP+0x44>
 800a072:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a076:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a078:	0059      	lsls	r1, r3, #1
 800a07a:	4790      	blx	r2
 800a07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a07e <_ReadData>:
 800a07e:	b508      	push	{r3, lr}
 800a080:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800a084:	4798      	blx	r3
 800a086:	bd08      	pop	{r3, pc}

0800a088 <_WriteData>:
 800a088:	b289      	uxth	r1, r1
 800a08a:	f7ff bfc9 	b.w	800a020 <_WriteU16_A1>
	...

0800a090 <_FillRect>:
 800a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	4f40      	ldr	r7, [pc, #256]	; (800a198 <_FillRect+0x108>)
 800a096:	6884      	ldr	r4, [r0, #8]
 800a098:	4682      	mov	sl, r0
 800a09a:	6838      	ldr	r0, [r7, #0]
 800a09c:	7c00      	ldrb	r0, [r0, #16]
 800a09e:	f010 0f01 	tst.w	r0, #1
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	460e      	mov	r6, r1
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	4698      	mov	r8, r3
 800a0aa:	ebc1 0903 	rsb	r9, r1, r3
 800a0ae:	d045      	beq.n	800a13c <_FillRect+0xac>
 800a0b0:	ea4f 0b49 	mov.w	fp, r9, lsl #1
 800a0b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a0b6:	4285      	cmp	r5, r0
 800a0b8:	dc6b      	bgt.n	800a192 <_FillRect+0x102>
 800a0ba:	f8d4 c0cc 	ldr.w	ip, [r4, #204]	; 0xcc
 800a0be:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a0c0:	f1bc 0f00 	cmp.w	ip, #0
 800a0c4:	d101      	bne.n	800a0ca <_FillRect+0x3a>
 800a0c6:	46b4      	mov	ip, r6
 800a0c8:	e007      	b.n	800a0da <_FillRect+0x4a>
 800a0ca:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	462a      	mov	r2, r5
 800a0d4:	4643      	mov	r3, r8
 800a0d6:	47e0      	blx	ip
 800a0d8:	e011      	b.n	800a0fe <_FillRect+0x6e>
 800a0da:	45c4      	cmp	ip, r8
 800a0dc:	dc0e      	bgt.n	800a0fc <_FillRect+0x6c>
 800a0de:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a0e2:	f8cd c00c 	str.w	ip, [sp, #12]
 800a0e6:	4661      	mov	r1, ip
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4798      	blx	r3
 800a0ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a0f2:	f827 0b02 	strh.w	r0, [r7], #2
 800a0f6:	f10c 0c01 	add.w	ip, ip, #1
 800a0fa:	e7ee      	b.n	800a0da <_FillRect+0x4a>
 800a0fc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a0fe:	1ebb      	subs	r3, r7, #2
 800a100:	f109 0c01 	add.w	ip, r9, #1
 800a104:	445f      	add	r7, fp
 800a106:	42bb      	cmp	r3, r7
 800a108:	d005      	beq.n	800a116 <_FillRect+0x86>
 800a10a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a10c:	8859      	ldrh	r1, [r3, #2]
 800a10e:	404a      	eors	r2, r1
 800a110:	f823 2f02 	strh.w	r2, [r3, #2]!
 800a114:	e7f7      	b.n	800a106 <_FillRect+0x76>
 800a116:	9500      	str	r5, [sp, #0]
 800a118:	462a      	mov	r2, r5
 800a11a:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a11e:	f8cd c00c 	str.w	ip, [sp, #12]
 800a122:	4620      	mov	r0, r4
 800a124:	4631      	mov	r1, r6
 800a126:	4643      	mov	r3, r8
 800a128:	47b8      	blx	r7
 800a12a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a12e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a130:	4620      	mov	r0, r4
 800a132:	4662      	mov	r2, ip
 800a134:	f7ff ff80 	bl	800a038 <_WriteDataMP>
 800a138:	3501      	adds	r5, #1
 800a13a:	e7bb      	b.n	800a0b4 <_FillRect+0x24>
 800a13c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a13e:	9000      	str	r0, [sp, #0]
 800a140:	1a85      	subs	r5, r0, r2
 800a142:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a146:	4620      	mov	r0, r4
 800a148:	47b0      	blx	r6
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800a14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f109 0901 	add.w	r9, r9, #1
 800a156:	fb05 9509 	mla	r5, r5, r9, r9
 800a15a:	f3c3 2807 	ubfx	r8, r3, #8, #8
 800a15e:	fa5f f983 	uxtb.w	r9, r3
 800a162:	2301      	movs	r3, #1
 800a164:	b1ad      	cbz	r5, 800a192 <_FillRect+0x102>
 800a166:	2df9      	cmp	r5, #249	; 0xf9
 800a168:	bf34      	ite	cc
 800a16a:	462f      	movcc	r7, r5
 800a16c:	27f9      	movcs	r7, #249	; 0xf9
 800a16e:	0079      	lsls	r1, r7, #1
 800a170:	b143      	cbz	r3, 800a184 <_FillRect+0xf4>
 800a172:	4633      	mov	r3, r6
 800a174:	1872      	adds	r2, r6, r1
 800a176:	4293      	cmp	r3, r2
 800a178:	d004      	beq.n	800a184 <_FillRect+0xf4>
 800a17a:	f883 8001 	strb.w	r8, [r3, #1]
 800a17e:	f803 9f02 	strb.w	r9, [r3, #2]!
 800a182:	e7f8      	b.n	800a176 <_FillRect+0xe6>
 800a184:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 800a188:	1c70      	adds	r0, r6, #1
 800a18a:	4790      	blx	r2
 800a18c:	1bed      	subs	r5, r5, r7
 800a18e:	2300      	movs	r3, #0
 800a190:	e7e8      	b.n	800a164 <_FillRect+0xd4>
 800a192:	b005      	add	sp, #20
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	20000084 	.word	0x20000084

0800a19c <_DrawBitmap>:
 800a19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a0:	b08d      	sub	sp, #52	; 0x34
 800a1a2:	6885      	ldr	r5, [r0, #8]
 800a1a4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a1a6:	9305      	str	r3, [sp, #20]
 800a1a8:	1e7b      	subs	r3, r7, #1
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	9009      	str	r0, [sp, #36]	; 0x24
 800a1ae:	9108      	str	r1, [sp, #32]
 800a1b0:	920a      	str	r2, [sp, #40]	; 0x28
 800a1b2:	950b      	str	r5, [sp, #44]	; 0x2c
 800a1b4:	d903      	bls.n	800a1be <_DrawBitmap+0x22>
 800a1b6:	2f04      	cmp	r7, #4
 800a1b8:	d001      	beq.n	800a1be <_DrawBitmap+0x22>
 800a1ba:	2f08      	cmp	r7, #8
 800a1bc:	d106      	bne.n	800a1cc <_DrawBitmap+0x30>
 800a1be:	4b91      	ldr	r3, [pc, #580]	; (800a404 <_DrawBitmap+0x268>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	7c1b      	ldrb	r3, [r3, #16]
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d010      	beq.n	800a1ee <_DrawBitmap+0x52>
 800a1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ce:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a1d0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a1d2:	9908      	ldr	r1, [sp, #32]
 800a1d4:	9b05      	ldr	r3, [sp, #20]
 800a1d6:	443a      	add	r2, r7
 800a1d8:	4429      	add	r1, r5
 800a1da:	3a01      	subs	r2, #1
 800a1dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1de:	9200      	str	r2, [sp, #0]
 800a1e0:	440b      	add	r3, r1
 800a1e2:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 800a1e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1e8:	4628      	mov	r0, r5
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	47a0      	blx	r4
 800a1ee:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800a1f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a1f4:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800a1f6:	ebc5 030b 	rsb	r3, r5, fp
 800a1fa:	42bb      	cmp	r3, r7
 800a1fc:	f280 8253 	bge.w	800a6a6 <_DrawBitmap+0x50a>
 800a200:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a202:	1e7b      	subs	r3, r7, #1
 800a204:	2b0f      	cmp	r3, #15
 800a206:	f200 8247 	bhi.w	800a698 <_DrawBitmap+0x4fc>
 800a20a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a20e:	0010      	.short	0x0010
 800a210:	024500bb 	.word	0x024500bb
 800a214:	02450144 	.word	0x02450144
 800a218:	02450245 	.word	0x02450245
 800a21c:	024501db 	.word	0x024501db
 800a220:	02450245 	.word	0x02450245
 800a224:	02450245 	.word	0x02450245
 800a228:	02450245 	.word	0x02450245
 800a22c:	0240      	.short	0x0240
 800a22e:	4b75      	ldr	r3, [pc, #468]	; (800a404 <_DrawBitmap+0x268>)
 800a230:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a232:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ac      	ldr	r4, [r5, #8]
 800a238:	7c1b      	ldrb	r3, [r3, #16]
 800a23a:	687d      	ldr	r5, [r7, #4]
 800a23c:	683e      	ldr	r6, [r7, #0]
 800a23e:	9507      	str	r5, [sp, #28]
 800a240:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800a242:	9d08      	ldr	r5, [sp, #32]
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	443d      	add	r5, r7
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	9503      	str	r5, [sp, #12]
 800a24e:	d01c      	beq.n	800a28a <_DrawBitmap+0xee>
 800a250:	2b03      	cmp	r3, #3
 800a252:	d071      	beq.n	800a338 <_DrawBitmap+0x19c>
 800a254:	2b01      	cmp	r3, #1
 800a256:	d06f      	beq.n	800a338 <_DrawBitmap+0x19c>
 800a258:	9f05      	ldr	r7, [sp, #20]
 800a25a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a25c:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 800a260:	f898 2000 	ldrb.w	r2, [r8]
 800a264:	2380      	movs	r3, #128	; 0x80
 800a266:	412b      	asrs	r3, r5
 800a268:	421a      	tst	r2, r3
 800a26a:	bf16      	itet	ne
 800a26c:	9807      	ldrne	r0, [sp, #28]
 800a26e:	b2b1      	uxtheq	r1, r6
 800a270:	b281      	uxthne	r1, r0
 800a272:	3501      	adds	r5, #1
 800a274:	4620      	mov	r0, r4
 800a276:	f7ff fed3 	bl	800a020 <_WriteU16_A1>
 800a27a:	2d08      	cmp	r5, #8
 800a27c:	bf04      	itt	eq
 800a27e:	f108 0801 	addeq.w	r8, r8, #1
 800a282:	2500      	moveq	r5, #0
 800a284:	3f01      	subs	r7, #1
 800a286:	d1eb      	bne.n	800a260 <_DrawBitmap+0xc4>
 800a288:	e206      	b.n	800a698 <_DrawBitmap+0x4fc>
 800a28a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a28c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800a290:	9506      	str	r5, [sp, #24]
 800a292:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800a296:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a29a:	2500      	movs	r5, #0
 800a29c:	4656      	mov	r6, sl
 800a29e:	462b      	mov	r3, r5
 800a2a0:	9f06      	ldr	r7, [sp, #24]
 800a2a2:	f04f 0c80 	mov.w	ip, #128	; 0x80
 800a2a6:	783a      	ldrb	r2, [r7, #0]
 800a2a8:	fa4c fc08 	asr.w	ip, ip, r8
 800a2ac:	ea12 0c0c 	ands.w	ip, r2, ip
 800a2b0:	d00b      	beq.n	800a2ca <_DrawBitmap+0x12e>
 800a2b2:	b913      	cbnz	r3, 800a2ba <_DrawBitmap+0x11e>
 800a2b4:	f8d4 906c 	ldr.w	r9, [r4, #108]	; 0x6c
 800a2b8:	46b2      	mov	sl, r6
 800a2ba:	9f07      	ldr	r7, [sp, #28]
 800a2bc:	f8a9 7000 	strh.w	r7, [r9]
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	f109 0902 	add.w	r9, r9, #2
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	e017      	b.n	800a2fa <_DrawBitmap+0x15e>
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d114      	bne.n	800a2f8 <_DrawBitmap+0x15c>
 800a2ce:	f8cd b000 	str.w	fp, [sp]
 800a2d2:	1e73      	subs	r3, r6, #1
 800a2d4:	f8cd c010 	str.w	ip, [sp, #16]
 800a2d8:	4620      	mov	r0, r4
 800a2da:	4651      	mov	r1, sl
 800a2dc:	465a      	mov	r2, fp
 800a2de:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a2e2:	47b8      	blx	r7
 800a2e4:	462a      	mov	r2, r5
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a2ea:	f7ff fea5 	bl	800a038 <_WriteDataMP>
 800a2ee:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a2f2:	4665      	mov	r5, ip
 800a2f4:	4663      	mov	r3, ip
 800a2f6:	e000      	b.n	800a2fa <_DrawBitmap+0x15e>
 800a2f8:	4663      	mov	r3, ip
 800a2fa:	f108 0801 	add.w	r8, r8, #1
 800a2fe:	f1b8 0f08 	cmp.w	r8, #8
 800a302:	f106 0601 	add.w	r6, r6, #1
 800a306:	d104      	bne.n	800a312 <_DrawBitmap+0x176>
 800a308:	9f06      	ldr	r7, [sp, #24]
 800a30a:	3701      	adds	r7, #1
 800a30c:	9706      	str	r7, [sp, #24]
 800a30e:	f04f 0800 	mov.w	r8, #0
 800a312:	9a05      	ldr	r2, [sp, #20]
 800a314:	9f03      	ldr	r7, [sp, #12]
 800a316:	443a      	add	r2, r7
 800a318:	42b2      	cmp	r2, r6
 800a31a:	d1c1      	bne.n	800a2a0 <_DrawBitmap+0x104>
 800a31c:	9f05      	ldr	r7, [sp, #20]
 800a31e:	1e7b      	subs	r3, r7, #1
 800a320:	9f03      	ldr	r7, [sp, #12]
 800a322:	443b      	add	r3, r7
 800a324:	2d00      	cmp	r5, #0
 800a326:	f000 81b7 	beq.w	800a698 <_DrawBitmap+0x4fc>
 800a32a:	f8cd b000 	str.w	fp, [sp]
 800a32e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a332:	4620      	mov	r0, r4
 800a334:	4651      	mov	r1, sl
 800a336:	e13f      	b.n	800a5b8 <_DrawBitmap+0x41c>
 800a338:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a33c:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a33e:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a340:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a344:	9f03      	ldr	r7, [sp, #12]
 800a346:	782a      	ldrb	r2, [r5, #0]
 800a348:	2380      	movs	r3, #128	; 0x80
 800a34a:	4133      	asrs	r3, r6
 800a34c:	44b9      	add	r9, r7
 800a34e:	421a      	tst	r2, r3
 800a350:	ebc8 0909 	rsb	r9, r8, r9
 800a354:	d00d      	beq.n	800a372 <_DrawBitmap+0x1d6>
 800a356:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800a35a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a35c:	4649      	mov	r1, r9
 800a35e:	465a      	mov	r2, fp
 800a360:	4798      	blx	r3
 800a362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a364:	f8d4 70f8 	ldr.w	r7, [r4, #248]	; 0xf8
 800a368:	4043      	eors	r3, r0
 800a36a:	4649      	mov	r1, r9
 800a36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a36e:	465a      	mov	r2, fp
 800a370:	47b8      	blx	r7
 800a372:	3601      	adds	r6, #1
 800a374:	2e08      	cmp	r6, #8
 800a376:	bf04      	itt	eq
 800a378:	3501      	addeq	r5, #1
 800a37a:	2600      	moveq	r6, #0
 800a37c:	f1b8 0801 	subs.w	r8, r8, #1
 800a380:	d1de      	bne.n	800a340 <_DrawBitmap+0x1a4>
 800a382:	e189      	b.n	800a698 <_DrawBitmap+0x4fc>
 800a384:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a386:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a388:	68ac      	ldr	r4, [r5, #8]
 800a38a:	2f00      	cmp	r7, #0
 800a38c:	f000 8184 	beq.w	800a698 <_DrawBitmap+0x4fc>
 800a390:	4b1c      	ldr	r3, [pc, #112]	; (800a404 <_DrawBitmap+0x268>)
 800a392:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f895 a000 	ldrb.w	sl, [r5]
 800a39a:	7c1b      	ldrb	r3, [r3, #16]
 800a39c:	f013 0303 	ands.w	r3, r3, #3
 800a3a0:	d011      	beq.n	800a3c6 <_DrawBitmap+0x22a>
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	f040 8178 	bne.w	800a698 <_DrawBitmap+0x4fc>
 800a3a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a3aa:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3ae:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a3b0:	9703      	str	r7, [sp, #12]
 800a3b2:	44a9      	add	r9, r5
 800a3b4:	46a8      	mov	r8, r5
 800a3b6:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a3b8:	9507      	str	r5, [sp, #28]
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	f8cd 9018 	str.w	r9, [sp, #24]
 800a3c0:	464e      	mov	r6, r9
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	e040      	b.n	800a448 <_DrawBitmap+0x2ac>
 800a3c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a3c8:	9e05      	ldr	r6, [sp, #20]
 800a3ca:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a3cc:	f1c5 0303 	rsb	r3, r5, #3
 800a3d0:	005b      	lsls	r3, r3, #1
 800a3d2:	f1c3 0206 	rsb	r2, r3, #6
 800a3d6:	21c0      	movs	r1, #192	; 0xc0
 800a3d8:	fa41 f202 	asr.w	r2, r1, r2
 800a3dc:	ea02 020a 	and.w	r2, r2, sl
 800a3e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a3e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	f7ff fe17 	bl	800a020 <_WriteU16_A1>
 800a3f2:	2d04      	cmp	r5, #4
 800a3f4:	d103      	bne.n	800a3fe <_DrawBitmap+0x262>
 800a3f6:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a3fa:	2500      	movs	r5, #0
 800a3fc:	3701      	adds	r7, #1
 800a3fe:	3e01      	subs	r6, #1
 800a400:	d1e4      	bne.n	800a3cc <_DrawBitmap+0x230>
 800a402:	e149      	b.n	800a698 <_DrawBitmap+0x4fc>
 800a404:	20000084 	.word	0x20000084
 800a408:	b913      	cbnz	r3, 800a410 <_DrawBitmap+0x274>
 800a40a:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a40c:	9703      	str	r7, [sp, #12]
 800a40e:	9606      	str	r6, [sp, #24]
 800a410:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a412:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800a416:	9f03      	ldr	r7, [sp, #12]
 800a418:	803b      	strh	r3, [r7, #0]
 800a41a:	3702      	adds	r7, #2
 800a41c:	3501      	adds	r5, #1
 800a41e:	9703      	str	r7, [sp, #12]
 800a420:	2301      	movs	r3, #1
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	f1b8 0f04 	cmp.w	r8, #4
 800a42a:	f106 0601 	add.w	r6, r6, #1
 800a42e:	d106      	bne.n	800a43e <_DrawBitmap+0x2a2>
 800a430:	9f07      	ldr	r7, [sp, #28]
 800a432:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a436:	3701      	adds	r7, #1
 800a438:	9707      	str	r7, [sp, #28]
 800a43a:	f04f 0800 	mov.w	r8, #0
 800a43e:	9a05      	ldr	r2, [sp, #20]
 800a440:	444a      	add	r2, r9
 800a442:	42b2      	cmp	r2, r6
 800a444:	f000 80ad 	beq.w	800a5a2 <_DrawBitmap+0x406>
 800a448:	f1c8 0203 	rsb	r2, r8, #3
 800a44c:	0052      	lsls	r2, r2, #1
 800a44e:	f1c2 0106 	rsb	r1, r2, #6
 800a452:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 800a456:	fa4c fc01 	asr.w	ip, ip, r1
 800a45a:	ea0c 0c0a 	and.w	ip, ip, sl
 800a45e:	fa3c fc02 	lsrs.w	ip, ip, r2
 800a462:	d1d1      	bne.n	800a408 <_DrawBitmap+0x26c>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d114      	bne.n	800a492 <_DrawBitmap+0x2f6>
 800a468:	f8cd b000 	str.w	fp, [sp]
 800a46c:	1e73      	subs	r3, r6, #1
 800a46e:	f8cd c010 	str.w	ip, [sp, #16]
 800a472:	4620      	mov	r0, r4
 800a474:	9906      	ldr	r1, [sp, #24]
 800a476:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a47a:	465a      	mov	r2, fp
 800a47c:	47b8      	blx	r7
 800a47e:	462a      	mov	r2, r5
 800a480:	4620      	mov	r0, r4
 800a482:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a484:	f7ff fdd8 	bl	800a038 <_WriteDataMP>
 800a488:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a48c:	4665      	mov	r5, ip
 800a48e:	4663      	mov	r3, ip
 800a490:	e7c7      	b.n	800a422 <_DrawBitmap+0x286>
 800a492:	4663      	mov	r3, ip
 800a494:	e7c5      	b.n	800a422 <_DrawBitmap+0x286>
 800a496:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a498:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a49a:	68ac      	ldr	r4, [r5, #8]
 800a49c:	2f00      	cmp	r7, #0
 800a49e:	f000 80fb 	beq.w	800a698 <_DrawBitmap+0x4fc>
 800a4a2:	4b82      	ldr	r3, [pc, #520]	; (800a6ac <_DrawBitmap+0x510>)
 800a4a4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f895 a000 	ldrb.w	sl, [r5]
 800a4ac:	7c1b      	ldrb	r3, [r3, #16]
 800a4ae:	f013 0303 	ands.w	r3, r3, #3
 800a4b2:	d011      	beq.n	800a4d8 <_DrawBitmap+0x33c>
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	f040 80ef 	bne.w	800a698 <_DrawBitmap+0x4fc>
 800a4ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a4bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4c0:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a4c2:	9703      	str	r7, [sp, #12]
 800a4c4:	44a9      	add	r9, r5
 800a4c6:	46a8      	mov	r8, r5
 800a4c8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a4ca:	9507      	str	r5, [sp, #28]
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	f8cd 9018 	str.w	r9, [sp, #24]
 800a4d2:	464e      	mov	r6, r9
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	e03d      	b.n	800a554 <_DrawBitmap+0x3b8>
 800a4d8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a4da:	9e05      	ldr	r6, [sp, #20]
 800a4dc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a4de:	f1c5 0301 	rsb	r3, r5, #1
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	f1c3 0204 	rsb	r2, r3, #4
 800a4e8:	21f0      	movs	r1, #240	; 0xf0
 800a4ea:	fa41 f202 	asr.w	r2, r1, r2
 800a4ee:	ea02 020a 	and.w	r2, r2, sl
 800a4f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800a4fe:	3501      	adds	r5, #1
 800a500:	f7ff fd8e 	bl	800a020 <_WriteU16_A1>
 800a504:	2d02      	cmp	r5, #2
 800a506:	d103      	bne.n	800a510 <_DrawBitmap+0x374>
 800a508:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a50c:	2500      	movs	r5, #0
 800a50e:	3701      	adds	r7, #1
 800a510:	3e01      	subs	r6, #1
 800a512:	d1e4      	bne.n	800a4de <_DrawBitmap+0x342>
 800a514:	e0c0      	b.n	800a698 <_DrawBitmap+0x4fc>
 800a516:	b913      	cbnz	r3, 800a51e <_DrawBitmap+0x382>
 800a518:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
 800a51a:	9703      	str	r7, [sp, #12]
 800a51c:	9606      	str	r6, [sp, #24]
 800a51e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a520:	f857 302c 	ldr.w	r3, [r7, ip, lsl #2]
 800a524:	9f03      	ldr	r7, [sp, #12]
 800a526:	803b      	strh	r3, [r7, #0]
 800a528:	3702      	adds	r7, #2
 800a52a:	3501      	adds	r5, #1
 800a52c:	9703      	str	r7, [sp, #12]
 800a52e:	2301      	movs	r3, #1
 800a530:	f108 0801 	add.w	r8, r8, #1
 800a534:	f1b8 0f02 	cmp.w	r8, #2
 800a538:	f106 0601 	add.w	r6, r6, #1
 800a53c:	d106      	bne.n	800a54c <_DrawBitmap+0x3b0>
 800a53e:	9f07      	ldr	r7, [sp, #28]
 800a540:	f897 a001 	ldrb.w	sl, [r7, #1]
 800a544:	3701      	adds	r7, #1
 800a546:	9707      	str	r7, [sp, #28]
 800a548:	f04f 0800 	mov.w	r8, #0
 800a54c:	9a05      	ldr	r2, [sp, #20]
 800a54e:	444a      	add	r2, r9
 800a550:	42b2      	cmp	r2, r6
 800a552:	d026      	beq.n	800a5a2 <_DrawBitmap+0x406>
 800a554:	f1c8 0201 	rsb	r2, r8, #1
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	f1c2 0104 	rsb	r1, r2, #4
 800a55e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800a562:	fa4c fc01 	asr.w	ip, ip, r1
 800a566:	ea0c 0c0a 	and.w	ip, ip, sl
 800a56a:	fa3c fc02 	lsrs.w	ip, ip, r2
 800a56e:	d1d2      	bne.n	800a516 <_DrawBitmap+0x37a>
 800a570:	2b01      	cmp	r3, #1
 800a572:	d114      	bne.n	800a59e <_DrawBitmap+0x402>
 800a574:	f8cd b000 	str.w	fp, [sp]
 800a578:	1e73      	subs	r3, r6, #1
 800a57a:	f8cd c010 	str.w	ip, [sp, #16]
 800a57e:	4620      	mov	r0, r4
 800a580:	9906      	ldr	r1, [sp, #24]
 800a582:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800a586:	465a      	mov	r2, fp
 800a588:	47b8      	blx	r7
 800a58a:	462a      	mov	r2, r5
 800a58c:	4620      	mov	r0, r4
 800a58e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a590:	f7ff fd52 	bl	800a038 <_WriteDataMP>
 800a594:	f8dd c010 	ldr.w	ip, [sp, #16]
 800a598:	4665      	mov	r5, ip
 800a59a:	4663      	mov	r3, ip
 800a59c:	e7c8      	b.n	800a530 <_DrawBitmap+0x394>
 800a59e:	4663      	mov	r3, ip
 800a5a0:	e7c6      	b.n	800a530 <_DrawBitmap+0x394>
 800a5a2:	9f05      	ldr	r7, [sp, #20]
 800a5a4:	1e7b      	subs	r3, r7, #1
 800a5a6:	444b      	add	r3, r9
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	d075      	beq.n	800a698 <_DrawBitmap+0x4fc>
 800a5ac:	f8cd b000 	str.w	fp, [sp]
 800a5b0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a5b4:	9906      	ldr	r1, [sp, #24]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	465a      	mov	r2, fp
 800a5ba:	47b0      	blx	r6
 800a5bc:	4620      	mov	r0, r4
 800a5be:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	e067      	b.n	800a694 <_DrawBitmap+0x4f8>
 800a5c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a5c6:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a5c8:	68ac      	ldr	r4, [r5, #8]
 800a5ca:	2f00      	cmp	r7, #0
 800a5cc:	d064      	beq.n	800a698 <_DrawBitmap+0x4fc>
 800a5ce:	4b37      	ldr	r3, [pc, #220]	; (800a6ac <_DrawBitmap+0x510>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	7c1b      	ldrb	r3, [r3, #16]
 800a5d4:	f013 0303 	ands.w	r3, r3, #3
 800a5d8:	d009      	beq.n	800a5ee <_DrawBitmap+0x452>
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d15c      	bne.n	800a698 <_DrawBitmap+0x4fc>
 800a5de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5e2:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	464f      	mov	r7, r9
 800a5ea:	4633      	mov	r3, r6
 800a5ec:	e022      	b.n	800a634 <_DrawBitmap+0x498>
 800a5ee:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a5f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a5f2:	9f05      	ldr	r7, [sp, #20]
 800a5f4:	443b      	add	r3, r7
 800a5f6:	1b5b      	subs	r3, r3, r5
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	dd4d      	ble.n	800a698 <_DrawBitmap+0x4fc>
 800a5fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a600:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a602:	4620      	mov	r0, r4
 800a604:	f837 1023 	ldrh.w	r1, [r7, r3, lsl #2]
 800a608:	f7ff fd0a 	bl	800a020 <_WriteU16_A1>
 800a60c:	e7f0      	b.n	800a5f0 <_DrawBitmap+0x454>
 800a60e:	b913      	cbnz	r3, 800a616 <_DrawBitmap+0x47a>
 800a610:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800a614:	46b9      	mov	r9, r7
 800a616:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a618:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
 800a61c:	f8a8 3000 	strh.w	r3, [r8]
 800a620:	3601      	adds	r6, #1
 800a622:	f108 0802 	add.w	r8, r8, #2
 800a626:	2301      	movs	r3, #1
 800a628:	9a08      	ldr	r2, [sp, #32]
 800a62a:	9d05      	ldr	r5, [sp, #20]
 800a62c:	3701      	adds	r7, #1
 800a62e:	442a      	add	r2, r5
 800a630:	42ba      	cmp	r2, r7
 800a632:	d01c      	beq.n	800a66e <_DrawBitmap+0x4d2>
 800a634:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a636:	9808      	ldr	r0, [sp, #32]
 800a638:	1a2a      	subs	r2, r5, r0
 800a63a:	f812 a007 	ldrb.w	sl, [r2, r7]
 800a63e:	f1ba 0f00 	cmp.w	sl, #0
 800a642:	d1e4      	bne.n	800a60e <_DrawBitmap+0x472>
 800a644:	2b01      	cmp	r3, #1
 800a646:	d110      	bne.n	800a66a <_DrawBitmap+0x4ce>
 800a648:	f8cd b000 	str.w	fp, [sp]
 800a64c:	1e7b      	subs	r3, r7, #1
 800a64e:	4620      	mov	r0, r4
 800a650:	4649      	mov	r1, r9
 800a652:	465a      	mov	r2, fp
 800a654:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800a658:	47a8      	blx	r5
 800a65a:	4632      	mov	r2, r6
 800a65c:	4620      	mov	r0, r4
 800a65e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a660:	f7ff fcea 	bl	800a038 <_WriteDataMP>
 800a664:	4656      	mov	r6, sl
 800a666:	4653      	mov	r3, sl
 800a668:	e7de      	b.n	800a628 <_DrawBitmap+0x48c>
 800a66a:	4653      	mov	r3, sl
 800a66c:	e7dc      	b.n	800a628 <_DrawBitmap+0x48c>
 800a66e:	9f08      	ldr	r7, [sp, #32]
 800a670:	1e6b      	subs	r3, r5, #1
 800a672:	443b      	add	r3, r7
 800a674:	b186      	cbz	r6, 800a698 <_DrawBitmap+0x4fc>
 800a676:	f8cd b000 	str.w	fp, [sp]
 800a67a:	4620      	mov	r0, r4
 800a67c:	4649      	mov	r1, r9
 800a67e:	465a      	mov	r2, fp
 800a680:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800a684:	47a8      	blx	r5
 800a686:	4620      	mov	r0, r4
 800a688:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a68a:	4632      	mov	r2, r6
 800a68c:	e002      	b.n	800a694 <_DrawBitmap+0x4f8>
 800a68e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a690:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a692:	9a05      	ldr	r2, [sp, #20]
 800a694:	f7ff fcd0 	bl	800a038 <_WriteDataMP>
 800a698:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a69a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800a69c:	443d      	add	r5, r7
 800a69e:	9519      	str	r5, [sp, #100]	; 0x64
 800a6a0:	f10b 0b01 	add.w	fp, fp, #1
 800a6a4:	e5a5      	b.n	800a1f2 <_DrawBitmap+0x56>
 800a6a6:	b00d      	add	sp, #52	; 0x34
 800a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ac:	20000084 	.word	0x20000084

0800a6b0 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 800a6b0:	b510      	push	{r4, lr}
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	f000 fa60 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800a6b8:	68a4      	ldr	r4, [r4, #8]
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 800a6bc:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	; (800a700 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800a6c2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 800a6c8:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 800a6cc:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800a6ce:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800a6d2:	4b0e      	ldr	r3, [pc, #56]	; (800a70c <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 800a6d4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 800a6d8:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 800a6da:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800a6de:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800a6e2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800a6ec:	2108      	movs	r1, #8
 800a6ee:	4798      	blx	r3
 800a6f0:	2310      	movs	r3, #16
 800a6f2:	63a3      	str	r3, [r4, #56]	; 0x38
 800a6f4:	4b07      	ldr	r3, [pc, #28]	; (800a714 <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800a6f6:	6463      	str	r3, [r4, #68]	; 0x44
 800a6f8:	bd10      	pop	{r4, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800a19d 	.word	0x0800a19d
 800a700:	0800a091 	.word	0x0800a091
 800a704:	0800aac7 	.word	0x0800aac7
 800a708:	0800aa37 	.word	0x0800aa37
 800a70c:	0800a07f 	.word	0x0800a07f
 800a710:	0800a089 	.word	0x0800a089
 800a714:	08013970 	.word	0x08013970

0800a718 <_Log2PhysX_X0Y0S0>:
 800a718:	4608      	mov	r0, r1
 800a71a:	4770      	bx	lr

0800a71c <_Log2PhysX_X1Y0S0>:
 800a71c:	6800      	ldr	r0, [r0, #0]
 800a71e:	1a40      	subs	r0, r0, r1
 800a720:	3801      	subs	r0, #1
 800a722:	4770      	bx	lr

0800a724 <_Log2PhysX_X0Y1S0>:
 800a724:	4608      	mov	r0, r1
 800a726:	4770      	bx	lr

0800a728 <_Log2PhysX_X1Y1S0>:
 800a728:	6800      	ldr	r0, [r0, #0]
 800a72a:	1a40      	subs	r0, r0, r1
 800a72c:	3801      	subs	r0, #1
 800a72e:	4770      	bx	lr

0800a730 <_Log2PhysX_X0Y0S1>:
 800a730:	4610      	mov	r0, r2
 800a732:	4770      	bx	lr

0800a734 <_Log2PhysX_X1Y0S1>:
 800a734:	6840      	ldr	r0, [r0, #4]
 800a736:	1a80      	subs	r0, r0, r2
 800a738:	3801      	subs	r0, #1
 800a73a:	4770      	bx	lr

0800a73c <_Log2PhysX_X0Y1S1>:
 800a73c:	4610      	mov	r0, r2
 800a73e:	4770      	bx	lr

0800a740 <_Log2PhysX_X1Y1S1>:
 800a740:	6840      	ldr	r0, [r0, #4]
 800a742:	1a80      	subs	r0, r0, r2
 800a744:	3801      	subs	r0, #1
 800a746:	4770      	bx	lr

0800a748 <_Log2PhysY_X0Y0S0>:
 800a748:	4610      	mov	r0, r2
 800a74a:	4770      	bx	lr

0800a74c <_Log2PhysY_X1Y0S0>:
 800a74c:	4610      	mov	r0, r2
 800a74e:	4770      	bx	lr

0800a750 <_Log2PhysY_X0Y1S0>:
 800a750:	6840      	ldr	r0, [r0, #4]
 800a752:	1a80      	subs	r0, r0, r2
 800a754:	3801      	subs	r0, #1
 800a756:	4770      	bx	lr

0800a758 <_Log2PhysY_X1Y1S0>:
 800a758:	6840      	ldr	r0, [r0, #4]
 800a75a:	1a80      	subs	r0, r0, r2
 800a75c:	3801      	subs	r0, #1
 800a75e:	4770      	bx	lr

0800a760 <_Log2PhysY_X0Y0S1>:
 800a760:	4608      	mov	r0, r1
 800a762:	4770      	bx	lr

0800a764 <_Log2PhysY_X1Y0S1>:
 800a764:	4608      	mov	r0, r1
 800a766:	4770      	bx	lr

0800a768 <_Log2PhysY_X0Y1S1>:
 800a768:	6800      	ldr	r0, [r0, #0]
 800a76a:	1a40      	subs	r0, r0, r1
 800a76c:	3801      	subs	r0, #1
 800a76e:	4770      	bx	lr

0800a770 <_Log2PhysY_X1Y1S1>:
 800a770:	6800      	ldr	r0, [r0, #0]
 800a772:	1a40      	subs	r0, r0, r1
 800a774:	3801      	subs	r0, #1
 800a776:	4770      	bx	lr

0800a778 <_SetPixelIndex>:
 800a778:	b510      	push	{r4, lr}
 800a77a:	6884      	ldr	r4, [r0, #8]
 800a77c:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 800a780:	47a0      	blx	r4
 800a782:	bd10      	pop	{r4, pc}

0800a784 <_GetPixelIndex>:
 800a784:	b508      	push	{r3, lr}
 800a786:	6883      	ldr	r3, [r0, #8]
 800a788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a78c:	4798      	blx	r3
 800a78e:	bd08      	pop	{r3, pc}

0800a790 <_XorPixel>:
 800a790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a792:	4604      	mov	r4, r0
 800a794:	460f      	mov	r7, r1
 800a796:	4616      	mov	r6, r2
 800a798:	6885      	ldr	r5, [r0, #8]
 800a79a:	f7ff fff3 	bl	800a784 <_GetPixelIndex>
 800a79e:	9001      	str	r0, [sp, #4]
 800a7a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a7a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4632      	mov	r2, r6
 800a7ac:	ea8e 0303 	eor.w	r3, lr, r3
 800a7b0:	f7ff ffe2 	bl	800a778 <_SetPixelIndex>
 800a7b4:	b003      	add	sp, #12
 800a7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a7b8 <_DrawHLine>:
 800a7b8:	b513      	push	{r0, r1, r4, lr}
 800a7ba:	6884      	ldr	r4, [r0, #8]
 800a7bc:	9200      	str	r2, [sp, #0]
 800a7be:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800a7c2:	47a0      	blx	r4
 800a7c4:	b002      	add	sp, #8
 800a7c6:	bd10      	pop	{r4, pc}

0800a7c8 <_DrawVLine>:
 800a7c8:	b513      	push	{r0, r1, r4, lr}
 800a7ca:	6884      	ldr	r4, [r0, #8]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	47a0      	blx	r4
 800a7d6:	b002      	add	sp, #8
 800a7d8:	bd10      	pop	{r4, pc}

0800a7da <_FillRect>:
 800a7da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7dc:	9c06      	ldr	r4, [sp, #24]
 800a7de:	6885      	ldr	r5, [r0, #8]
 800a7e0:	9400      	str	r4, [sp, #0]
 800a7e2:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
 800a7e6:	47a0      	blx	r4
 800a7e8:	b003      	add	sp, #12
 800a7ea:	bd30      	pop	{r4, r5, pc}

0800a7ec <_DrawBitmap>:
 800a7ec:	b530      	push	{r4, r5, lr}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	6885      	ldr	r5, [r0, #8]
 800a7f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a7f4:	9400      	str	r4, [sp, #0]
 800a7f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a7f8:	9401      	str	r4, [sp, #4]
 800a7fa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a7fc:	9402      	str	r4, [sp, #8]
 800a7fe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a800:	9403      	str	r4, [sp, #12]
 800a802:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800a804:	9404      	str	r4, [sp, #16]
 800a806:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800a808:	9405      	str	r4, [sp, #20]
 800a80a:	f8d5 40ec 	ldr.w	r4, [r5, #236]	; 0xec
 800a80e:	47a0      	blx	r4
 800a810:	b007      	add	sp, #28
 800a812:	bd30      	pop	{r4, r5, pc}

0800a814 <_GetDevFunc_SetRect>:
 800a814:	4770      	bx	lr
	...

0800a818 <_GetDevFunc_SetRectOutside>:
 800a818:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a81a:	9e07      	ldr	r6, [sp, #28]
 800a81c:	6884      	ldr	r4, [r0, #8]
 800a81e:	4d0c      	ldr	r5, [pc, #48]	; (800a850 <_GetDevFunc_SetRectOutside+0x38>)
 800a820:	b176      	cbz	r6, 800a840 <_GetDevFunc_SetRectOutside+0x28>
 800a822:	6828      	ldr	r0, [r5, #0]
 800a824:	b988      	cbnz	r0, 800a84a <_GetDevFunc_SetRectOutside+0x32>
 800a826:	9806      	ldr	r0, [sp, #24]
 800a828:	9000      	str	r0, [sp, #0]
 800a82a:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a82e:	4620      	mov	r0, r4
 800a830:	47b0      	blx	r6
 800a832:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800a836:	602b      	str	r3, [r5, #0]
 800a838:	4b06      	ldr	r3, [pc, #24]	; (800a854 <_GetDevFunc_SetRectOutside+0x3c>)
 800a83a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800a83e:	e004      	b.n	800a84a <_GetDevFunc_SetRectOutside+0x32>
 800a840:	682b      	ldr	r3, [r5, #0]
 800a842:	b113      	cbz	r3, 800a84a <_GetDevFunc_SetRectOutside+0x32>
 800a844:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800a848:	602e      	str	r6, [r5, #0]
 800a84a:	b002      	add	sp, #8
 800a84c:	bd70      	pop	{r4, r5, r6, pc}
 800a84e:	bf00      	nop
 800a850:	20002a1c 	.word	0x20002a1c
 800a854:	0800a815 	.word	0x0800a815

0800a858 <_ReadPixelCust_16bpp>:
 800a858:	b508      	push	{r3, lr}
 800a85a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a85c:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 800a860:	6990      	ldr	r0, [r2, #24]
 800a862:	4798      	blx	r3
 800a864:	bd08      	pop	{r3, pc}

0800a866 <_ReadPixelCust_18bpp>:
 800a866:	b508      	push	{r3, lr}
 800a868:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a86a:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800a86e:	6990      	ldr	r0, [r2, #24]
 800a870:	4798      	blx	r3
 800a872:	bd08      	pop	{r3, pc}

0800a874 <_ReadRectCust_16bpp>:
 800a874:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a878:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a87a:	6884      	ldr	r4, [r0, #8]
 800a87c:	9500      	str	r5, [sp, #0]
 800a87e:	4617      	mov	r7, r2
 800a880:	4620      	mov	r0, r4
 800a882:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a886:	4699      	mov	r9, r3
 800a888:	4688      	mov	r8, r1
 800a88a:	1bed      	subs	r5, r5, r7
 800a88c:	47b0      	blx	r6
 800a88e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a890:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800a894:	6988      	ldr	r0, [r1, #24]
 800a896:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a898:	ebc8 0809 	rsb	r8, r8, r9
 800a89c:	1c6a      	adds	r2, r5, #1
 800a89e:	fb08 2202 	mla	r2, r8, r2, r2
 800a8a2:	4798      	blx	r3
 800a8a4:	b003      	add	sp, #12
 800a8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a8aa <_ReadRectCust_18bpp>:
 800a8aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8ae:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a8b0:	6884      	ldr	r4, [r0, #8]
 800a8b2:	9500      	str	r5, [sp, #0]
 800a8b4:	4617      	mov	r7, r2
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800a8bc:	4699      	mov	r9, r3
 800a8be:	4688      	mov	r8, r1
 800a8c0:	1bed      	subs	r5, r5, r7
 800a8c2:	47b0      	blx	r6
 800a8c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8c6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a8ca:	6988      	ldr	r0, [r1, #24]
 800a8cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ce:	ebc8 0809 	rsb	r8, r8, r9
 800a8d2:	1c6a      	adds	r2, r5, #1
 800a8d4:	fb08 2202 	mla	r2, r8, r2, r2
 800a8d8:	4798      	blx	r3
 800a8da:	b003      	add	sp, #12
 800a8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a8e0 <_GetDevFunc>:
 800a8e0:	3901      	subs	r1, #1
 800a8e2:	2917      	cmp	r1, #23
 800a8e4:	d828      	bhi.n	800a938 <_GetDevFunc+0x58>
 800a8e6:	e8df f001 	tbb	[pc, r1]
 800a8ea:	2714      	.short	0x2714
 800a8ec:	27272727 	.word	0x27272727
 800a8f0:	0e272727 	.word	0x0e272727
 800a8f4:	0c191210 	.word	0x0c191210
 800a8f8:	27272729 	.word	0x27272729
 800a8fc:	23272727 	.word	0x23272727
 800a900:	251e      	.short	0x251e
 800a902:	480f      	ldr	r0, [pc, #60]	; (800a940 <_GetDevFunc+0x60>)
 800a904:	4770      	bx	lr
 800a906:	480f      	ldr	r0, [pc, #60]	; (800a944 <_GetDevFunc+0x64>)
 800a908:	4770      	bx	lr
 800a90a:	480f      	ldr	r0, [pc, #60]	; (800a948 <_GetDevFunc+0x68>)
 800a90c:	4770      	bx	lr
 800a90e:	480f      	ldr	r0, [pc, #60]	; (800a94c <_GetDevFunc+0x6c>)
 800a910:	4770      	bx	lr
 800a912:	6803      	ldr	r3, [r0, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800a91a:	4770      	bx	lr
 800a91c:	6803      	ldr	r3, [r0, #0]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 800a924:	4770      	bx	lr
 800a926:	6803      	ldr	r3, [r0, #0]
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800a92e:	4770      	bx	lr
 800a930:	4807      	ldr	r0, [pc, #28]	; (800a950 <_GetDevFunc+0x70>)
 800a932:	4770      	bx	lr
 800a934:	4807      	ldr	r0, [pc, #28]	; (800a954 <_GetDevFunc+0x74>)
 800a936:	4770      	bx	lr
 800a938:	2000      	movs	r0, #0
 800a93a:	4770      	bx	lr
 800a93c:	4806      	ldr	r0, [pc, #24]	; (800a958 <_GetDevFunc+0x78>)
 800a93e:	4770      	bx	lr
 800a940:	0800acd9 	.word	0x0800acd9
 800a944:	0800acaf 	.word	0x0800acaf
 800a948:	0800ac9b 	.word	0x0800ac9b
 800a94c:	0800ac51 	.word	0x0800ac51
 800a950:	0800abb5 	.word	0x0800abb5
 800a954:	0800a819 	.word	0x0800a819
 800a958:	0800acc3 	.word	0x0800acc3

0800a95c <_GetDevProp>:
 800a95c:	3901      	subs	r1, #1
 800a95e:	6880      	ldr	r0, [r0, #8]
 800a960:	290d      	cmp	r1, #13
 800a962:	d823      	bhi.n	800a9ac <_GetDevProp+0x50>
 800a964:	e8df f001 	tbb	[pc, r1]
 800a968:	0f0d0b09 	.word	0x0f0d0b09
 800a96c:	11222222 	.word	0x11222222
 800a970:	13252507 	.word	0x13252507
 800a974:	1d18      	.short	0x1d18
 800a976:	2000      	movs	r0, #0
 800a978:	4770      	bx	lr
 800a97a:	6800      	ldr	r0, [r0, #0]
 800a97c:	4770      	bx	lr
 800a97e:	6840      	ldr	r0, [r0, #4]
 800a980:	4770      	bx	lr
 800a982:	6880      	ldr	r0, [r0, #8]
 800a984:	4770      	bx	lr
 800a986:	68c0      	ldr	r0, [r0, #12]
 800a988:	4770      	bx	lr
 800a98a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a98c:	4770      	bx	lr
 800a98e:	b188      	cbz	r0, 800a9b4 <_GetDevProp+0x58>
 800a990:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a992:	f000 0001 	and.w	r0, r0, #1
 800a996:	4770      	bx	lr
 800a998:	b160      	cbz	r0, 800a9b4 <_GetDevProp+0x58>
 800a99a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a99c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800a9a0:	4770      	bx	lr
 800a9a2:	b138      	cbz	r0, 800a9b4 <_GetDevProp+0x58>
 800a9a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800a9a6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800a9aa:	4770      	bx	lr
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	4770      	bx	lr
 800a9b2:	2001      	movs	r0, #1
 800a9b4:	4770      	bx	lr

0800a9b6 <_GetDevData>:
 800a9b6:	6883      	ldr	r3, [r0, #8]
 800a9b8:	2901      	cmp	r1, #1
 800a9ba:	bf0c      	ite	eq
 800a9bc:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 800a9be:	2000      	movne	r0, #0
 800a9c0:	4770      	bx	lr

0800a9c2 <_GetRect>:
 800a9c2:	6883      	ldr	r3, [r0, #8]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	800a      	strh	r2, [r1, #0]
 800a9c8:	804a      	strh	r2, [r1, #2]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	3a01      	subs	r2, #1
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	808a      	strh	r2, [r1, #4]
 800a9d4:	80cb      	strh	r3, [r1, #6]
 800a9d6:	4770      	bx	lr

0800a9d8 <GUIDRV_FlexColor__SetLog2Phys>:
 800a9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9da:	4d10      	ldr	r5, [pc, #64]	; (800aa1c <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 800a9dc:	462e      	mov	r6, r5
 800a9de:	4607      	mov	r7, r0
 800a9e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a9e2:	b091      	sub	sp, #68	; 0x44
 800a9e4:	466c      	mov	r4, sp
 800a9e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800a9ec:	3520      	adds	r5, #32
 800a9ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9f4:	ac08      	add	r4, sp, #32
 800a9f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a9f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a9fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa02:	aa10      	add	r2, sp, #64	; 0x40
 800aa04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa08:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800aa0c:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800aa10:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800aa14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800aa18:	b011      	add	sp, #68	; 0x44
 800aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa1c:	080125d8 	.word	0x080125d8

0800aa20 <_SetOrg>:
 800aa20:	b507      	push	{r0, r1, r2, lr}
 800aa22:	6980      	ldr	r0, [r0, #24]
 800aa24:	e88d 0006 	stmia.w	sp, {r1, r2}
 800aa28:	2103      	movs	r1, #3
 800aa2a:	466a      	mov	r2, sp
 800aa2c:	f7f5 ffce 	bl	80009cc <LCD_X_DisplayDriver>
 800aa30:	b003      	add	sp, #12
 800aa32:	f85d fb04 	ldr.w	pc, [sp], #4

0800aa36 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 800aa36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa3a:	6884      	ldr	r4, [r0, #8]
 800aa3c:	4698      	mov	r8, r3
 800aa3e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800aa40:	079b      	lsls	r3, r3, #30
 800aa42:	4689      	mov	r9, r1
 800aa44:	4617      	mov	r7, r2
 800aa46:	d532      	bpl.n	800aaae <GUIDRV_FlexColor__SetPixelIndexNoCache+0x78>
 800aa48:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4798      	blx	r3
 800aa50:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
 800aa54:	4606      	mov	r6, r0
 800aa56:	463a      	mov	r2, r7
 800aa58:	4620      	mov	r0, r4
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	47a8      	blx	r5
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	69a2      	ldr	r2, [r4, #24]
 800aa62:	429e      	cmp	r6, r3
 800aa64:	bfac      	ite	ge
 800aa66:	2300      	movge	r3, #0
 800aa68:	2301      	movlt	r3, #1
 800aa6a:	4296      	cmp	r6, r2
 800aa6c:	bfd4      	ite	le
 800aa6e:	461a      	movle	r2, r3
 800aa70:	f043 0201 	orrgt.w	r2, r3, #1
 800aa74:	6963      	ldr	r3, [r4, #20]
 800aa76:	4298      	cmp	r0, r3
 800aa78:	bfac      	ite	ge
 800aa7a:	4613      	movge	r3, r2
 800aa7c:	f042 0301 	orrlt.w	r3, r2, #1
 800aa80:	4605      	mov	r5, r0
 800aa82:	b913      	cbnz	r3, 800aa8a <GUIDRV_FlexColor__SetPixelIndexNoCache+0x54>
 800aa84:	69e3      	ldr	r3, [r4, #28]
 800aa86:	4298      	cmp	r0, r3
 800aa88:	dd0a      	ble.n	800aaa0 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x6a>
 800aa8a:	6862      	ldr	r2, [r4, #4]
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	3a01      	subs	r2, #1
 800aa90:	9200      	str	r2, [sp, #0]
 800aa92:	2100      	movs	r1, #0
 800aa94:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800aa98:	4620      	mov	r0, r4
 800aa9a:	460a      	mov	r2, r1
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	47b8      	blx	r7
 800aaa0:	f8d4 70ac 	ldr.w	r7, [r4, #172]	; 0xac
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	462a      	mov	r2, r5
 800aaaa:	47b8      	blx	r7
 800aaac:	e003      	b.n	800aab6 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x80>
 800aaae:	f8d4 50ac 	ldr.w	r5, [r4, #172]	; 0xac
 800aab2:	4620      	mov	r0, r4
 800aab4:	47a8      	blx	r5
 800aab6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800aaba:	4620      	mov	r0, r4
 800aabc:	4641      	mov	r1, r8
 800aabe:	4798      	blx	r3
 800aac0:	b003      	add	sp, #12
 800aac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800aac6 <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 800aac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aac8:	6884      	ldr	r4, [r0, #8]
 800aaca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800aacc:	079b      	lsls	r3, r3, #30
 800aace:	460f      	mov	r7, r1
 800aad0:	4616      	mov	r6, r2
 800aad2:	d545      	bpl.n	800ab60 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x9a>
 800aad4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800aad8:	4620      	mov	r0, r4
 800aada:	4798      	blx	r3
 800aadc:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800aae0:	4632      	mov	r2, r6
 800aae2:	4605      	mov	r5, r0
 800aae4:	4639      	mov	r1, r7
 800aae6:	4620      	mov	r0, r4
 800aae8:	4798      	blx	r3
 800aaea:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800aaee:	4606      	mov	r6, r0
 800aaf0:	b11b      	cbz	r3, 800aafa <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4798      	blx	r3
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	69a2      	ldr	r2, [r4, #24]
 800aafe:	429d      	cmp	r5, r3
 800ab00:	bfac      	ite	ge
 800ab02:	2300      	movge	r3, #0
 800ab04:	2301      	movlt	r3, #1
 800ab06:	4295      	cmp	r5, r2
 800ab08:	bfd4      	ite	le
 800ab0a:	461a      	movle	r2, r3
 800ab0c:	f043 0201 	orrgt.w	r2, r3, #1
 800ab10:	6963      	ldr	r3, [r4, #20]
 800ab12:	429e      	cmp	r6, r3
 800ab14:	bfac      	ite	ge
 800ab16:	4613      	movge	r3, r2
 800ab18:	f042 0301 	orrlt.w	r3, r2, #1
 800ab1c:	b913      	cbnz	r3, 800ab24 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5e>
 800ab1e:	69e3      	ldr	r3, [r4, #28]
 800ab20:	429e      	cmp	r6, r3
 800ab22:	dd0a      	ble.n	800ab3a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x74>
 800ab24:	6862      	ldr	r2, [r4, #4]
 800ab26:	6823      	ldr	r3, [r4, #0]
 800ab28:	3a01      	subs	r2, #1
 800ab2a:	9200      	str	r2, [sp, #0]
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 800ab32:	4620      	mov	r0, r4
 800ab34:	460a      	mov	r2, r1
 800ab36:	3b01      	subs	r3, #1
 800ab38:	47b8      	blx	r7
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800ab40:	4620      	mov	r0, r4
 800ab42:	4632      	mov	r2, r6
 800ab44:	4798      	blx	r3
 800ab46:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	4798      	blx	r3
 800ab4e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800ab52:	4605      	mov	r5, r0
 800ab54:	b16b      	cbz	r3, 800ab72 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800ab56:	4620      	mov	r0, r4
 800ab58:	2100      	movs	r1, #0
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	4798      	blx	r3
 800ab5e:	e008      	b.n	800ab72 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 800ab60:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800ab64:	4620      	mov	r0, r4
 800ab66:	4798      	blx	r3
 800ab68:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	4798      	blx	r3
 800ab70:	4605      	mov	r5, r0
 800ab72:	4628      	mov	r0, r5
 800ab74:	b003      	add	sp, #12
 800ab76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ab78 <GUIDRV_FlexColor__InitOnce>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	6885      	ldr	r5, [r0, #8]
 800ab7c:	4604      	mov	r4, r0
 800ab7e:	b99d      	cbnz	r5, 800aba8 <GUIDRV_FlexColor__InitOnce+0x30>
 800ab80:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800ab84:	f003 f9ce 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800ab88:	4b08      	ldr	r3, [pc, #32]	; (800abac <GUIDRV_FlexColor__InitOnce+0x34>)
 800ab8a:	60a0      	str	r0, [r4, #8]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800ab92:	4629      	mov	r1, r5
 800ab94:	4798      	blx	r3
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	2202      	movs	r2, #2
 800ab9a:	84da      	strh	r2, [r3, #38]	; 0x26
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	621a      	str	r2, [r3, #32]
 800aba0:	4a03      	ldr	r2, [pc, #12]	; (800abb0 <GUIDRV_FlexColor__InitOnce+0x38>)
 800aba2:	641c      	str	r4, [r3, #64]	; 0x40
 800aba4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	20000070 	.word	0x20000070
 800abb0:	0800a9d9 	.word	0x0800a9d9

0800abb4 <_SetDevFunc>:
 800abb4:	b570      	push	{r4, r5, r6, lr}
 800abb6:	4606      	mov	r6, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	4614      	mov	r4, r2
 800abbc:	f7ff ffdc 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800abc0:	68b3      	ldr	r3, [r6, #8]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d03b      	beq.n	800ac3e <_SetDevFunc+0x8a>
 800abc6:	2d26      	cmp	r5, #38	; 0x26
 800abc8:	d002      	beq.n	800abd0 <_SetDevFunc+0x1c>
 800abca:	2d27      	cmp	r5, #39	; 0x27
 800abcc:	d016      	beq.n	800abfc <_SetDevFunc+0x48>
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abd2:	2a10      	cmp	r2, #16
 800abd4:	d002      	beq.n	800abdc <_SetDevFunc+0x28>
 800abd6:	2a12      	cmp	r2, #18
 800abd8:	d008      	beq.n	800abec <_SetDevFunc+0x38>
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	4a18      	ldr	r2, [pc, #96]	; (800ac40 <_SetDevFunc+0x8c>)
 800abde:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 800abe2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800abe6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <_SetDevFunc+0x90>)
 800abee:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800abf2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800abf6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800abfa:	bd70      	pop	{r4, r5, r6, pc}
 800abfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abfe:	2a10      	cmp	r2, #16
 800ac00:	d002      	beq.n	800ac08 <_SetDevFunc+0x54>
 800ac02:	2a12      	cmp	r2, #18
 800ac04:	d00e      	beq.n	800ac24 <_SetDevFunc+0x70>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	b13c      	cbz	r4, 800ac1a <_SetDevFunc+0x66>
 800ac0a:	4a0f      	ldr	r2, [pc, #60]	; (800ac48 <_SetDevFunc+0x94>)
 800ac0c:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800ac10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800ac14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800ac1e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800ac22:	bd70      	pop	{r4, r5, r6, pc}
 800ac24:	b13c      	cbz	r4, 800ac36 <_SetDevFunc+0x82>
 800ac26:	4a09      	ldr	r2, [pc, #36]	; (800ac4c <_SetDevFunc+0x98>)
 800ac28:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800ac2c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800ac30:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
 800ac36:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800ac3a:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800ac3e:	bd70      	pop	{r4, r5, r6, pc}
 800ac40:	0800a859 	.word	0x0800a859
 800ac44:	0800a867 	.word	0x0800a867
 800ac48:	0800a875 	.word	0x0800a875
 800ac4c:	0800a8ab 	.word	0x0800a8ab

0800ac50 <_GetDevFunc_Init>:
 800ac50:	b538      	push	{r3, r4, r5, lr}
 800ac52:	4605      	mov	r5, r0
 800ac54:	f7ff ff90 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800ac58:	68ac      	ldr	r4, [r5, #8]
 800ac5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac5e:	f003 f961 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800ac62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ac64:	66a0      	str	r0, [r4, #104]	; 0x68
 800ac66:	3307      	adds	r3, #7
 800ac68:	10d8      	asrs	r0, r3, #3
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	4358      	muls	r0, r3
 800ac6e:	f003 f959 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800ac72:	2101      	movs	r1, #1
 800ac74:	2200      	movs	r2, #0
 800ac76:	66e0      	str	r0, [r4, #108]	; 0x6c
 800ac78:	69a8      	ldr	r0, [r5, #24]
 800ac7a:	f7f5 fea7 	bl	80009cc <LCD_X_DisplayDriver>
 800ac7e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800ac82:	4605      	mov	r5, r0
 800ac84:	4620      	mov	r0, r4
 800ac86:	4798      	blx	r3
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800ac8e:	4798      	blx	r3
 800ac90:	2d00      	cmp	r5, #0
 800ac92:	bfd4      	ite	le
 800ac94:	2000      	movle	r0, #0
 800ac96:	2001      	movgt	r0, #1
 800ac98:	bd38      	pop	{r3, r4, r5, pc}

0800ac9a <_GetDevFunc_SetSize>:
 800ac9a:	b570      	push	{r4, r5, r6, lr}
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	460d      	mov	r5, r1
 800aca0:	4616      	mov	r6, r2
 800aca2:	f7ff ff69 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	e883 0060 	stmia.w	r3, {r5, r6}
 800acac:	bd70      	pop	{r4, r5, r6, pc}

0800acae <_GetDevFunc_SetVSize>:
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	4604      	mov	r4, r0
 800acb2:	460d      	mov	r5, r1
 800acb4:	4616      	mov	r6, r2
 800acb6:	f7ff ff5f 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800acba:	68a3      	ldr	r3, [r4, #8]
 800acbc:	609d      	str	r5, [r3, #8]
 800acbe:	60de      	str	r6, [r3, #12]
 800acc0:	bd70      	pop	{r4, r5, r6, pc}

0800acc2 <_GetDevFunc_Off>:
 800acc2:	b510      	push	{r4, lr}
 800acc4:	4604      	mov	r4, r0
 800acc6:	f7ff ff57 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800acca:	69a0      	ldr	r0, [r4, #24]
 800accc:	2106      	movs	r1, #6
 800acce:	2200      	movs	r2, #0
 800acd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd4:	f7f5 be7a 	b.w	80009cc <LCD_X_DisplayDriver>

0800acd8 <_GetDevFunc_On>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	4604      	mov	r4, r0
 800acdc:	f7ff ff4c 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800ace0:	69a0      	ldr	r0, [r4, #24]
 800ace2:	2105      	movs	r1, #5
 800ace4:	2200      	movs	r2, #0
 800ace6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acea:	f7f5 be6f 	b.w	80009cc <LCD_X_DisplayDriver>

0800acee <GUIDRV_FlexColor_Config>:
 800acee:	b538      	push	{r3, r4, r5, lr}
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	f7ff ff40 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800acf8:	68ab      	ldr	r3, [r5, #8]
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	62da      	str	r2, [r3, #44]	; 0x2c
 800acfe:	6862      	ldr	r2, [r4, #4]
 800ad00:	631a      	str	r2, [r3, #48]	; 0x30
 800ad02:	68a2      	ldr	r2, [r4, #8]
 800ad04:	635a      	str	r2, [r3, #52]	; 0x34
 800ad06:	0752      	lsls	r2, r2, #29
 800ad08:	d507      	bpl.n	800ad1a <GUIDRV_FlexColor_Config+0x2c>
 800ad0a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	6059      	str	r1, [r3, #4]
 800ad12:	68da      	ldr	r2, [r3, #12]
 800ad14:	6899      	ldr	r1, [r3, #8]
 800ad16:	60d9      	str	r1, [r3, #12]
 800ad18:	609a      	str	r2, [r3, #8]
 800ad1a:	89a2      	ldrh	r2, [r4, #12]
 800ad1c:	849a      	strh	r2, [r3, #36]	; 0x24
 800ad1e:	6922      	ldr	r2, [r4, #16]
 800ad20:	b112      	cbz	r2, 800ad28 <GUIDRV_FlexColor_Config+0x3a>
 800ad22:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800ad26:	621a      	str	r2, [r3, #32]
 800ad28:	bd38      	pop	{r3, r4, r5, pc}

0800ad2a <GUIDRV_FlexColor_SetFunc>:
 800ad2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2e:	4604      	mov	r4, r0
 800ad30:	461f      	mov	r7, r3
 800ad32:	4616      	mov	r6, r2
 800ad34:	4688      	mov	r8, r1
 800ad36:	f7ff ff1f 	bl	800ab78 <GUIDRV_FlexColor__InitOnce>
 800ad3a:	68a5      	ldr	r5, [r4, #8]
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	2268      	movs	r2, #104	; 0x68
 800ad40:	f505 708a 	add.w	r0, r5, #276	; 0x114
 800ad44:	f006 f9b8 	bl	80110b8 <memcpy>
 800ad48:	4620      	mov	r0, r4
 800ad4a:	47b0      	blx	r6
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	47b8      	blx	r7
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	689b      	ldr	r3, [r3, #8]
 800ad54:	4798      	blx	r3
 800ad56:	62a8      	str	r0, [r5, #40]	; 0x28
 800ad58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad5c <LCD_UpdateColorIndices>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	4c07      	ldr	r4, [pc, #28]	; (800ad7c <LCD_UpdateColorIndices+0x20>)
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad64:	f000 fc70 	bl	800b648 <LCD_Color2Index>
 800ad68:	f000 fc8e 	bl	800b688 <LCD_SetColorIndex>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ad70:	f000 fc6a 	bl	800b648 <LCD_Color2Index>
 800ad74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad78:	f000 bca2 	b.w	800b6c0 <LCD_SetBkColorIndex>
 800ad7c:	20000084 	.word	0x20000084

0800ad80 <LCD_SetClipRectEx>:
 800ad80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad82:	4c09      	ldr	r4, [pc, #36]	; (800ada8 <LCD_SetClipRectEx+0x28>)
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	7c5a      	ldrb	r2, [r3, #17]
 800ad88:	4b08      	ldr	r3, [pc, #32]	; (800adac <LCD_SetClipRectEx+0x2c>)
 800ad8a:	4605      	mov	r5, r0
 800ad8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad90:	68c2      	ldr	r2, [r0, #12]
 800ad92:	4669      	mov	r1, sp
 800ad94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad96:	4790      	blx	r2
 800ad98:	6820      	ldr	r0, [r4, #0]
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	466a      	mov	r2, sp
 800ad9e:	3008      	adds	r0, #8
 800ada0:	f000 fcec 	bl	800b77c <GUI__IntersectRects>
 800ada4:	b003      	add	sp, #12
 800ada6:	bd30      	pop	{r4, r5, pc}
 800ada8:	20000084 	.word	0x20000084
 800adac:	20004afc 	.word	0x20004afc

0800adb0 <LCD_SetVSizeEx>:
 800adb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adb2:	460d      	mov	r5, r1
 800adb4:	4614      	mov	r4, r2
 800adb6:	f001 faab 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800adba:	9001      	str	r0, [sp, #4]
 800adbc:	b908      	cbnz	r0, 800adc2 <LCD_SetVSizeEx+0x12>
 800adbe:	2001      	movs	r0, #1
 800adc0:	e00c      	b.n	800addc <LCD_SetVSizeEx+0x2c>
 800adc2:	68c3      	ldr	r3, [r0, #12]
 800adc4:	210a      	movs	r1, #10
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	a801      	add	r0, sp, #4
 800adca:	4798      	blx	r3
 800adcc:	4603      	mov	r3, r0
 800adce:	2800      	cmp	r0, #0
 800add0:	d0f5      	beq.n	800adbe <LCD_SetVSizeEx+0xe>
 800add2:	9801      	ldr	r0, [sp, #4]
 800add4:	4629      	mov	r1, r5
 800add6:	4622      	mov	r2, r4
 800add8:	4798      	blx	r3
 800adda:	2000      	movs	r0, #0
 800addc:	b003      	add	sp, #12
 800adde:	bd30      	pop	{r4, r5, pc}

0800ade0 <LCD_SetSizeEx>:
 800ade0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ade2:	460d      	mov	r5, r1
 800ade4:	4614      	mov	r4, r2
 800ade6:	f001 fa93 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800adea:	9001      	str	r0, [sp, #4]
 800adec:	b908      	cbnz	r0, 800adf2 <LCD_SetSizeEx+0x12>
 800adee:	2001      	movs	r0, #1
 800adf0:	e00c      	b.n	800ae0c <LCD_SetSizeEx+0x2c>
 800adf2:	68c3      	ldr	r3, [r0, #12]
 800adf4:	210b      	movs	r1, #11
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	a801      	add	r0, sp, #4
 800adfa:	4798      	blx	r3
 800adfc:	4603      	mov	r3, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d0f5      	beq.n	800adee <LCD_SetSizeEx+0xe>
 800ae02:	9801      	ldr	r0, [sp, #4]
 800ae04:	4629      	mov	r1, r5
 800ae06:	4622      	mov	r2, r4
 800ae08:	4798      	blx	r3
 800ae0a:	2000      	movs	r0, #0
 800ae0c:	b003      	add	sp, #12
 800ae0e:	bd30      	pop	{r4, r5, pc}

0800ae10 <LCD_SetLUTEntryEx>:
 800ae10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae12:	460d      	mov	r5, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	f001 fa7b 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800ae1a:	9001      	str	r0, [sp, #4]
 800ae1c:	b908      	cbnz	r0, 800ae22 <LCD_SetLUTEntryEx+0x12>
 800ae1e:	2001      	movs	r0, #1
 800ae20:	e00c      	b.n	800ae3c <LCD_SetLUTEntryEx+0x2c>
 800ae22:	68c3      	ldr	r3, [r0, #12]
 800ae24:	2110      	movs	r1, #16
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	a801      	add	r0, sp, #4
 800ae2a:	4798      	blx	r3
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d0f5      	beq.n	800ae1e <LCD_SetLUTEntryEx+0xe>
 800ae32:	9801      	ldr	r0, [sp, #4]
 800ae34:	4629      	mov	r1, r5
 800ae36:	4622      	mov	r2, r4
 800ae38:	4798      	blx	r3
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	b003      	add	sp, #12
 800ae3e:	bd30      	pop	{r4, r5, pc}

0800ae40 <_GetDevProp>:
 800ae40:	2801      	cmp	r0, #1
 800ae42:	b510      	push	{r4, lr}
 800ae44:	460c      	mov	r4, r1
 800ae46:	dc08      	bgt.n	800ae5a <_GetDevProp+0x1a>
 800ae48:	f001 fa62 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800ae4c:	b120      	cbz	r0, 800ae58 <_GetDevProp+0x18>
 800ae4e:	68c3      	ldr	r3, [r0, #12]
 800ae50:	4621      	mov	r1, r4
 800ae52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae54:	4798      	blx	r3
 800ae56:	bd10      	pop	{r4, pc}
 800ae58:	bd10      	pop	{r4, pc}
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	bd10      	pop	{r4, pc}

0800ae5e <_GetMaxValue>:
 800ae5e:	b538      	push	{r3, r4, r5, lr}
 800ae60:	4604      	mov	r4, r0
 800ae62:	4621      	mov	r1, r4
 800ae64:	2001      	movs	r0, #1
 800ae66:	f7ff ffeb 	bl	800ae40 <_GetDevProp>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	2000      	movs	r0, #0
 800ae70:	f7ff ffe6 	bl	800ae40 <_GetDevProp>
 800ae74:	42a8      	cmp	r0, r5
 800ae76:	bfb8      	it	lt
 800ae78:	4628      	movlt	r0, r5
 800ae7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ae7e:	bd38      	pop	{r3, r4, r5, pc}

0800ae80 <LCD_GetXSizeEx>:
 800ae80:	2101      	movs	r1, #1
 800ae82:	f7ff bfdd 	b.w	800ae40 <_GetDevProp>

0800ae86 <LCD_GetYSizeEx>:
 800ae86:	2102      	movs	r1, #2
 800ae88:	f7ff bfda 	b.w	800ae40 <_GetDevProp>

0800ae8c <LCD_GetVXSizeEx>:
 800ae8c:	2103      	movs	r1, #3
 800ae8e:	f7ff bfd7 	b.w	800ae40 <_GetDevProp>

0800ae92 <LCD_GetVYSizeEx>:
 800ae92:	2104      	movs	r1, #4
 800ae94:	f7ff bfd4 	b.w	800ae40 <_GetDevProp>

0800ae98 <LCD_GetBitsPerPixelEx>:
 800ae98:	2108      	movs	r1, #8
 800ae9a:	f7ff bfd1 	b.w	800ae40 <_GetDevProp>

0800ae9e <LCD_GetNumColorsEx>:
 800ae9e:	2109      	movs	r1, #9
 800aea0:	f7ff bfce 	b.w	800ae40 <_GetDevProp>

0800aea4 <LCD_GetXSize>:
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <LCD_GetXSize+0xc>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	7c58      	ldrb	r0, [r3, #17]
 800aeaa:	f7ff bfe9 	b.w	800ae80 <LCD_GetXSizeEx>
 800aeae:	bf00      	nop
 800aeb0:	20000084 	.word	0x20000084

0800aeb4 <LCD_GetYSize>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <LCD_GetYSize+0xc>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	7c58      	ldrb	r0, [r3, #17]
 800aeba:	f7ff bfe4 	b.w	800ae86 <LCD_GetYSizeEx>
 800aebe:	bf00      	nop
 800aec0:	20000084 	.word	0x20000084

0800aec4 <LCD_GetNumColors>:
 800aec4:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <LCD_GetNumColors+0xc>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	7c58      	ldrb	r0, [r3, #17]
 800aeca:	f7ff bfe8 	b.w	800ae9e <LCD_GetNumColorsEx>
 800aece:	bf00      	nop
 800aed0:	20000084 	.word	0x20000084

0800aed4 <GUI_GetBitsPerPixelEx>:
 800aed4:	b508      	push	{r3, lr}
 800aed6:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <GUI_GetBitsPerPixelEx+0x14>)
 800aed8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800aedc:	68c3      	ldr	r3, [r0, #12]
 800aede:	2108      	movs	r1, #8
 800aee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee2:	4798      	blx	r3
 800aee4:	bd08      	pop	{r3, pc}
 800aee6:	bf00      	nop
 800aee8:	20004afc 	.word	0x20004afc

0800aeec <LCD_GetPaletteEx>:
 800aeec:	b508      	push	{r3, lr}
 800aeee:	f001 fa0f 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800aef2:	b120      	cbz	r0, 800aefe <LCD_GetPaletteEx+0x12>
 800aef4:	68c3      	ldr	r3, [r0, #12]
 800aef6:	2102      	movs	r1, #2
 800aef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aefa:	4798      	blx	r3
 800aefc:	bd08      	pop	{r3, pc}
 800aefe:	bd08      	pop	{r3, pc}

0800af00 <LCD_GetPalette>:
 800af00:	4b02      	ldr	r3, [pc, #8]	; (800af0c <LCD_GetPalette+0xc>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	7c58      	ldrb	r0, [r3, #17]
 800af06:	f7ff bff1 	b.w	800aeec <LCD_GetPaletteEx>
 800af0a:	bf00      	nop
 800af0c:	20000084 	.word	0x20000084

0800af10 <GUI_GetpfIndex2ColorEx>:
 800af10:	4b02      	ldr	r3, [pc, #8]	; (800af1c <GUI_GetpfIndex2ColorEx+0xc>)
 800af12:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800af16:	691b      	ldr	r3, [r3, #16]
 800af18:	6858      	ldr	r0, [r3, #4]
 800af1a:	4770      	bx	lr
 800af1c:	20004afc 	.word	0x20004afc

0800af20 <LCD_GetpfColor2IndexEx>:
 800af20:	b508      	push	{r3, lr}
 800af22:	f001 f9f5 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800af26:	b108      	cbz	r0, 800af2c <LCD_GetpfColor2IndexEx+0xc>
 800af28:	6903      	ldr	r3, [r0, #16]
 800af2a:	6818      	ldr	r0, [r3, #0]
 800af2c:	bd08      	pop	{r3, pc}
	...

0800af30 <GUI_GetpfColor2IndexEx>:
 800af30:	4b02      	ldr	r3, [pc, #8]	; (800af3c <GUI_GetpfColor2IndexEx+0xc>)
 800af32:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	4770      	bx	lr
 800af3c:	20004afc 	.word	0x20004afc

0800af40 <LCD_GetXSizeMax>:
 800af40:	2001      	movs	r0, #1
 800af42:	f7ff bf8c 	b.w	800ae5e <_GetMaxValue>

0800af46 <LCD_GetYSizeMax>:
 800af46:	2002      	movs	r0, #2
 800af48:	f7ff bf89 	b.w	800ae5e <_GetMaxValue>

0800af4c <LCD_GetVXSizeMax>:
 800af4c:	2003      	movs	r0, #3
 800af4e:	f7ff bf86 	b.w	800ae5e <_GetMaxValue>
	...

0800af54 <LCD_SetDisplaySize>:
 800af54:	4b02      	ldr	r3, [pc, #8]	; (800af60 <LCD_SetDisplaySize+0xc>)
 800af56:	6018      	str	r0, [r3, #0]
 800af58:	4b02      	ldr	r3, [pc, #8]	; (800af64 <LCD_SetDisplaySize+0x10>)
 800af5a:	6019      	str	r1, [r3, #0]
 800af5c:	4770      	bx	lr
 800af5e:	bf00      	nop
 800af60:	20002a24 	.word	0x20002a24
 800af64:	20002a20 	.word	0x20002a20

0800af68 <LCD_GetXSizeDisplay>:
 800af68:	4b01      	ldr	r3, [pc, #4]	; (800af70 <LCD_GetXSizeDisplay+0x8>)
 800af6a:	6818      	ldr	r0, [r3, #0]
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	20002a24 	.word	0x20002a24

0800af74 <LCD_GetYSizeDisplay>:
 800af74:	4b01      	ldr	r3, [pc, #4]	; (800af7c <LCD_GetYSizeDisplay+0x8>)
 800af76:	6818      	ldr	r0, [r3, #0]
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	20002a20 	.word	0x20002a20

0800af80 <LCD__GetBPP>:
 800af80:	2800      	cmp	r0, #0
 800af82:	d03b      	beq.n	800affc <LCD__GetBPP+0x7c>
 800af84:	f030 0301 	bics.w	r3, r0, #1
 800af88:	d029      	beq.n	800afde <LCD__GetBPP+0x5e>
 800af8a:	f030 0303 	bics.w	r3, r0, #3
 800af8e:	d028      	beq.n	800afe2 <LCD__GetBPP+0x62>
 800af90:	f030 0307 	bics.w	r3, r0, #7
 800af94:	d027      	beq.n	800afe6 <LCD__GetBPP+0x66>
 800af96:	f030 030f 	bics.w	r3, r0, #15
 800af9a:	d026      	beq.n	800afea <LCD__GetBPP+0x6a>
 800af9c:	f030 031f 	bics.w	r3, r0, #31
 800afa0:	d025      	beq.n	800afee <LCD__GetBPP+0x6e>
 800afa2:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 800afa6:	d024      	beq.n	800aff2 <LCD__GetBPP+0x72>
 800afa8:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 800afac:	f023 0301 	bic.w	r3, r3, #1
 800afb0:	b30b      	cbz	r3, 800aff6 <LCD__GetBPP+0x76>
 800afb2:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800afb6:	f023 030f 	bic.w	r3, r3, #15
 800afba:	b1e3      	cbz	r3, 800aff6 <LCD__GetBPP+0x76>
 800afbc:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 800afc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800afc4:	b1bb      	cbz	r3, 800aff6 <LCD__GetBPP+0x76>
 800afc6:	0c03      	lsrs	r3, r0, #16
 800afc8:	041b      	lsls	r3, r3, #16
 800afca:	b1a3      	cbz	r3, 800aff6 <LCD__GetBPP+0x76>
 800afcc:	0c83      	lsrs	r3, r0, #18
 800afce:	049b      	lsls	r3, r3, #18
 800afd0:	b19b      	cbz	r3, 800affa <LCD__GetBPP+0x7a>
 800afd2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afd6:	bf0c      	ite	eq
 800afd8:	2018      	moveq	r0, #24
 800afda:	2020      	movne	r0, #32
 800afdc:	4770      	bx	lr
 800afde:	2001      	movs	r0, #1
 800afe0:	4770      	bx	lr
 800afe2:	2002      	movs	r0, #2
 800afe4:	4770      	bx	lr
 800afe6:	2003      	movs	r0, #3
 800afe8:	4770      	bx	lr
 800afea:	2004      	movs	r0, #4
 800afec:	4770      	bx	lr
 800afee:	2005      	movs	r0, #5
 800aff0:	4770      	bx	lr
 800aff2:	2008      	movs	r0, #8
 800aff4:	4770      	bx	lr
 800aff6:	2010      	movs	r0, #16
 800aff8:	4770      	bx	lr
 800affa:	2012      	movs	r0, #18
 800affc:	4770      	bx	lr

0800affe <LCD__GetBPPDevice>:
 800affe:	b508      	push	{r3, lr}
 800b000:	f7ff ffbe 	bl	800af80 <LCD__GetBPP>
 800b004:	2801      	cmp	r0, #1
 800b006:	d00f      	beq.n	800b028 <LCD__GetBPPDevice+0x2a>
 800b008:	1e83      	subs	r3, r0, #2
 800b00a:	2b06      	cmp	r3, #6
 800b00c:	d909      	bls.n	800b022 <LCD__GetBPPDevice+0x24>
 800b00e:	f1a0 0309 	sub.w	r3, r0, #9
 800b012:	2b07      	cmp	r3, #7
 800b014:	d907      	bls.n	800b026 <LCD__GetBPPDevice+0x28>
 800b016:	3811      	subs	r0, #17
 800b018:	2810      	cmp	r0, #16
 800b01a:	bf34      	ite	cc
 800b01c:	2020      	movcc	r0, #32
 800b01e:	2000      	movcs	r0, #0
 800b020:	bd08      	pop	{r3, pc}
 800b022:	2008      	movs	r0, #8
 800b024:	bd08      	pop	{r3, pc}
 800b026:	2010      	movs	r0, #16
 800b028:	bd08      	pop	{r3, pc}
	...

0800b02c <_SetDrawMode>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4b08      	ldr	r3, [pc, #32]	; (800b050 <_SetDrawMode+0x24>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	7c1a      	ldrb	r2, [r3, #16]
 800b034:	ea80 0102 	eor.w	r1, r0, r2
 800b038:	0749      	lsls	r1, r1, #29
 800b03a:	d505      	bpl.n	800b048 <_SetDrawMode+0x1c>
 800b03c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800b03e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b040:	6826      	ldr	r6, [r4, #0]
 800b042:	680d      	ldr	r5, [r1, #0]
 800b044:	6025      	str	r5, [r4, #0]
 800b046:	600e      	str	r6, [r1, #0]
 800b048:	7418      	strb	r0, [r3, #16]
 800b04a:	4610      	mov	r0, r2
 800b04c:	bd70      	pop	{r4, r5, r6, pc}
 800b04e:	bf00      	nop
 800b050:	20000084 	.word	0x20000084

0800b054 <LCD_SetDrawMode>:
 800b054:	b508      	push	{r3, lr}
 800b056:	4b02      	ldr	r3, [pc, #8]	; (800b060 <LCD_SetDrawMode+0xc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	4798      	blx	r3
 800b05e:	bd08      	pop	{r3, pc}
 800b060:	2000006c 	.word	0x2000006c

0800b064 <LCD_DrawPixel>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <LCD_DrawPixel+0x54>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	460a      	mov	r2, r1
 800b06c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800b070:	428a      	cmp	r2, r1
 800b072:	4604      	mov	r4, r0
 800b074:	db1e      	blt.n	800b0b4 <LCD_DrawPixel+0x50>
 800b076:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800b07a:	428a      	cmp	r2, r1
 800b07c:	dc1a      	bgt.n	800b0b4 <LCD_DrawPixel+0x50>
 800b07e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 800b082:	4288      	cmp	r0, r1
 800b084:	db16      	blt.n	800b0b4 <LCD_DrawPixel+0x50>
 800b086:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 800b08a:	4288      	cmp	r0, r1
 800b08c:	dc12      	bgt.n	800b0b4 <LCD_DrawPixel+0x50>
 800b08e:	7c19      	ldrb	r1, [r3, #16]
 800b090:	7c58      	ldrb	r0, [r3, #17]
 800b092:	f011 0f01 	tst.w	r1, #1
 800b096:	4909      	ldr	r1, [pc, #36]	; (800b0bc <LCD_DrawPixel+0x58>)
 800b098:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b09c:	d004      	beq.n	800b0a8 <LCD_DrawPixel+0x44>
 800b09e:	68c3      	ldr	r3, [r0, #12]
 800b0a0:	4621      	mov	r1, r4
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	4798      	blx	r3
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	68c1      	ldr	r1, [r0, #12]
 800b0aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ac:	698d      	ldr	r5, [r1, #24]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	47a8      	blx	r5
 800b0b4:	bd38      	pop	{r3, r4, r5, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000084 	.word	0x20000084
 800b0bc:	20004afc 	.word	0x20004afc

0800b0c0 <LCD_DrawHLine>:
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4b10      	ldr	r3, [pc, #64]	; (800b104 <LCD_DrawHLine+0x44>)
 800b0c4:	681c      	ldr	r4, [r3, #0]
 800b0c6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	460d      	mov	r5, r1
 800b0ce:	db17      	blt.n	800b100 <LCD_DrawHLine+0x40>
 800b0d0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b0d4:	4299      	cmp	r1, r3
 800b0d6:	dc13      	bgt.n	800b100 <LCD_DrawHLine+0x40>
 800b0d8:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0e0:	4288      	cmp	r0, r1
 800b0e2:	bfa8      	it	ge
 800b0e4:	4601      	movge	r1, r0
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	bfb8      	it	lt
 800b0ea:	4613      	movlt	r3, r2
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	db07      	blt.n	800b100 <LCD_DrawHLine+0x40>
 800b0f0:	7c60      	ldrb	r0, [r4, #17]
 800b0f2:	4a05      	ldr	r2, [pc, #20]	; (800b108 <LCD_DrawHLine+0x48>)
 800b0f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800b0f8:	68c2      	ldr	r2, [r0, #12]
 800b0fa:	6894      	ldr	r4, [r2, #8]
 800b0fc:	462a      	mov	r2, r5
 800b0fe:	47a0      	blx	r4
 800b100:	bd38      	pop	{r3, r4, r5, pc}
 800b102:	bf00      	nop
 800b104:	20000084 	.word	0x20000084
 800b108:	20004afc 	.word	0x20004afc

0800b10c <LCD_DrawVLine>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4b10      	ldr	r3, [pc, #64]	; (800b150 <LCD_DrawVLine+0x44>)
 800b110:	681c      	ldr	r4, [r3, #0]
 800b112:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800b116:	4605      	mov	r5, r0
 800b118:	429d      	cmp	r5, r3
 800b11a:	4610      	mov	r0, r2
 800b11c:	db17      	blt.n	800b14e <LCD_DrawVLine+0x42>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	429d      	cmp	r5, r3
 800b124:	dc13      	bgt.n	800b14e <LCD_DrawVLine+0x42>
 800b126:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b12a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800b12e:	4291      	cmp	r1, r2
 800b130:	bfa8      	it	ge
 800b132:	460a      	movge	r2, r1
 800b134:	4298      	cmp	r0, r3
 800b136:	bfb8      	it	lt
 800b138:	4603      	movlt	r3, r0
 800b13a:	4293      	cmp	r3, r2
 800b13c:	db07      	blt.n	800b14e <LCD_DrawVLine+0x42>
 800b13e:	7c60      	ldrb	r0, [r4, #17]
 800b140:	4904      	ldr	r1, [pc, #16]	; (800b154 <LCD_DrawVLine+0x48>)
 800b142:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800b146:	68c1      	ldr	r1, [r0, #12]
 800b148:	68cc      	ldr	r4, [r1, #12]
 800b14a:	4629      	mov	r1, r5
 800b14c:	47a0      	blx	r4
 800b14e:	bd38      	pop	{r3, r4, r5, pc}
 800b150:	20000084 	.word	0x20000084
 800b154:	20004afc 	.word	0x20004afc

0800b158 <LCD_FillRect>:
 800b158:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b15a:	460e      	mov	r6, r1
 800b15c:	4912      	ldr	r1, [pc, #72]	; (800b1a8 <LCD_FillRect+0x50>)
 800b15e:	680c      	ldr	r4, [r1, #0]
 800b160:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800b164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b168:	4288      	cmp	r0, r1
 800b16a:	bfa8      	it	ge
 800b16c:	4601      	movge	r1, r0
 800b16e:	42aa      	cmp	r2, r5
 800b170:	bfb8      	it	lt
 800b172:	4615      	movlt	r5, r2
 800b174:	428d      	cmp	r5, r1
 800b176:	db14      	blt.n	800b1a2 <LCD_FillRect+0x4a>
 800b178:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800b17c:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
 800b180:	4296      	cmp	r6, r2
 800b182:	bfa8      	it	ge
 800b184:	4632      	movge	r2, r6
 800b186:	4283      	cmp	r3, r0
 800b188:	bfa8      	it	ge
 800b18a:	4603      	movge	r3, r0
 800b18c:	4293      	cmp	r3, r2
 800b18e:	db08      	blt.n	800b1a2 <LCD_FillRect+0x4a>
 800b190:	7c64      	ldrb	r4, [r4, #17]
 800b192:	4806      	ldr	r0, [pc, #24]	; (800b1ac <LCD_FillRect+0x54>)
 800b194:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b198:	68c4      	ldr	r4, [r0, #12]
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	6924      	ldr	r4, [r4, #16]
 800b19e:	462b      	mov	r3, r5
 800b1a0:	47a0      	blx	r4
 800b1a2:	b002      	add	sp, #8
 800b1a4:	bd70      	pop	{r4, r5, r6, pc}
 800b1a6:	bf00      	nop
 800b1a8:	20000084 	.word	0x20000084
 800b1ac:	20004afc 	.word	0x20004afc

0800b1b0 <LCD__DrawBitmap_1bpp>:
 800b1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b4:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 800b364 <LCD__DrawBitmap_1bpp+0x1b4>
 800b1b8:	b08f      	sub	sp, #60	; 0x3c
 800b1ba:	f8dc c000 	ldr.w	ip, [ip]
 800b1be:	9009      	str	r0, [sp, #36]	; 0x24
 800b1c0:	460e      	mov	r6, r1
 800b1c2:	4615      	mov	r5, r2
 800b1c4:	469b      	mov	fp, r3
 800b1c6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b1c8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800b1cc:	f1bc 0f00 	cmp.w	ip, #0
 800b1d0:	d00d      	beq.n	800b1ee <LCD__DrawBitmap_1bpp+0x3e>
 800b1d2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800b1d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b1d6:	9500      	str	r5, [sp, #0]
 800b1d8:	9601      	str	r6, [sp, #4]
 800b1da:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b1dc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b1de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b1e0:	9702      	str	r7, [sp, #8]
 800b1e2:	9503      	str	r5, [sp, #12]
 800b1e4:	9404      	str	r4, [sp, #16]
 800b1e6:	9605      	str	r6, [sp, #20]
 800b1e8:	f8dc 4000 	ldr.w	r4, [ip]
 800b1ec:	e053      	b.n	800b296 <LCD__DrawBitmap_1bpp+0xe6>
 800b1ee:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800b1f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b1f2:	ea47 0300 	orr.w	r3, r7, r0
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d14f      	bne.n	800b29a <LCD__DrawBitmap_1bpp+0xea>
 800b1fa:	4b58      	ldr	r3, [pc, #352]	; (800b35c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b202:	1a51      	subs	r1, r2, r1
 800b204:	2900      	cmp	r1, #0
 800b206:	dd08      	ble.n	800b21a <LCD__DrawBitmap_1bpp+0x6a>
 800b208:	ebc1 030b 	rsb	r3, r1, fp
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f340 80a2 	ble.w	800b356 <LCD__DrawBitmap_1bpp+0x1a6>
 800b212:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b214:	fb07 4401 	mla	r4, r7, r1, r4
 800b218:	e001      	b.n	800b21e <LCD__DrawBitmap_1bpp+0x6e>
 800b21a:	465b      	mov	r3, fp
 800b21c:	4632      	mov	r2, r6
 800b21e:	445e      	add	r6, fp
 800b220:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 800b224:	3e01      	subs	r6, #1
 800b226:	1a76      	subs	r6, r6, r1
 800b228:	2e00      	cmp	r6, #0
 800b22a:	dd03      	ble.n	800b234 <LCD__DrawBitmap_1bpp+0x84>
 800b22c:	1b9b      	subs	r3, r3, r6
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f340 8091 	ble.w	800b356 <LCD__DrawBitmap_1bpp+0x1a6>
 800b234:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b236:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800b23a:	4429      	add	r1, r5
 800b23c:	3901      	subs	r1, #1
 800b23e:	1b89      	subs	r1, r1, r6
 800b240:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b242:	2900      	cmp	r1, #0
 800b244:	bfc8      	it	gt
 800b246:	ebc1 0505 	rsbgt	r5, r1, r5
 800b24a:	ebc8 0106 	rsb	r1, r8, r6
 800b24e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 800b252:	42b1      	cmp	r1, r6
 800b254:	da0c      	bge.n	800b270 <LCD__DrawBitmap_1bpp+0xc0>
 800b256:	ebc1 0c06 	rsb	ip, r1, r6
 800b25a:	eb08 070c 	add.w	r7, r8, ip
 800b25e:	1b8e      	subs	r6, r1, r6
 800b260:	f02c 0c07 	bic.w	ip, ip, #7
 800b264:	4435      	add	r5, r6
 800b266:	eb04 04e7 	add.w	r4, r4, r7, asr #3
 800b26a:	4461      	add	r1, ip
 800b26c:	f007 0807 	and.w	r8, r7, #7
 800b270:	2d00      	cmp	r5, #0
 800b272:	dd70      	ble.n	800b356 <LCD__DrawBitmap_1bpp+0x1a6>
 800b274:	7c46      	ldrb	r6, [r0, #17]
 800b276:	483a      	ldr	r0, [pc, #232]	; (800b360 <LCD__DrawBitmap_1bpp+0x1b0>)
 800b278:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b27a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 800b27e:	68c6      	ldr	r6, [r0, #12]
 800b280:	9701      	str	r7, [sp, #4]
 800b282:	9403      	str	r4, [sp, #12]
 800b284:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b286:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800b288:	9300      	str	r3, [sp, #0]
 800b28a:	9702      	str	r7, [sp, #8]
 800b28c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b290:	9405      	str	r4, [sp, #20]
 800b292:	6874      	ldr	r4, [r6, #4]
 800b294:	462b      	mov	r3, r5
 800b296:	47a0      	blx	r4
 800b298:	e05d      	b.n	800b356 <LCD__DrawBitmap_1bpp+0x1a6>
 800b29a:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b29c:	f1c7 0708 	rsb	r7, r7, #8
 800b2a0:	970c      	str	r7, [sp, #48]	; 0x30
 800b2a2:	4667      	mov	r7, ip
 800b2a4:	45dc      	cmp	ip, fp
 800b2a6:	da56      	bge.n	800b356 <LCD__DrawBitmap_1bpp+0x1a6>
 800b2a8:	4b2c      	ldr	r3, [pc, #176]	; (800b35c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b2aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4430      	add	r0, r6
 800b2b0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b2b4:	900a      	str	r0, [sp, #40]	; 0x28
 800b2b6:	1e41      	subs	r1, r0, #1
 800b2b8:	4291      	cmp	r1, r2
 800b2ba:	910b      	str	r1, [sp, #44]	; 0x2c
 800b2bc:	db45      	blt.n	800b34a <LCD__DrawBitmap_1bpp+0x19a>
 800b2be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b2c2:	429e      	cmp	r6, r3
 800b2c4:	dc41      	bgt.n	800b34a <LCD__DrawBitmap_1bpp+0x19a>
 800b2c6:	f04f 0800 	mov.w	r8, #0
 800b2ca:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b2ce:	9408      	str	r4, [sp, #32]
 800b2d0:	46c2      	mov	sl, r8
 800b2d2:	45aa      	cmp	sl, r5
 800b2d4:	da39      	bge.n	800b34a <LCD__DrawBitmap_1bpp+0x19a>
 800b2d6:	f1b8 0f00 	cmp.w	r8, #0
 800b2da:	d105      	bne.n	800b2e8 <LCD__DrawBitmap_1bpp+0x138>
 800b2dc:	9a08      	ldr	r2, [sp, #32]
 800b2de:	7817      	ldrb	r7, [r2, #0]
 800b2e0:	3201      	adds	r2, #1
 800b2e2:	9208      	str	r2, [sp, #32]
 800b2e4:	f04f 0808 	mov.w	r8, #8
 800b2e8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b2ea:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2ec:	4a1b      	ldr	r2, [pc, #108]	; (800b35c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b2ee:	fa47 f300 	asr.w	r3, r7, r0
 800b2f2:	ebc1 0808 	rsb	r8, r1, r8
 800b2f6:	408f      	lsls	r7, r1
 800b2f8:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800b2fc:	b2ff      	uxtb	r7, r7
 800b2fe:	d103      	bne.n	800b308 <LCD__DrawBitmap_1bpp+0x158>
 800b300:	6810      	ldr	r0, [r2, #0]
 800b302:	7c00      	ldrb	r0, [r0, #16]
 800b304:	0780      	lsls	r0, r0, #30
 800b306:	d41b      	bmi.n	800b340 <LCD__DrawBitmap_1bpp+0x190>
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b30c:	6810      	ldr	r0, [r2, #0]
 800b30e:	900d      	str	r0, [sp, #52]	; 0x34
 800b310:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b312:	b110      	cbz	r0, 800b31a <LCD__DrawBitmap_1bpp+0x16a>
 800b314:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b318:	e000      	b.n	800b31c <LCD__DrawBitmap_1bpp+0x16c>
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	1e4a      	subs	r2, r1, #1
 800b322:	444a      	add	r2, r9
 800b324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b326:	f8cd c01c 	str.w	ip, [sp, #28]
 800b32a:	4648      	mov	r0, r9
 800b32c:	4631      	mov	r1, r6
 800b32e:	f7ff ff13 	bl	800b158 <LCD_FillRect>
 800b332:	4b0a      	ldr	r3, [pc, #40]	; (800b35c <LCD__DrawBitmap_1bpp+0x1ac>)
 800b334:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b342:	f10a 0a01 	add.w	sl, sl, #1
 800b346:	4499      	add	r9, r3
 800b348:	e7c3      	b.n	800b2d2 <LCD__DrawBitmap_1bpp+0x122>
 800b34a:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b34c:	f10c 0c01 	add.w	ip, ip, #1
 800b350:	4434      	add	r4, r6
 800b352:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b354:	e7a6      	b.n	800b2a4 <LCD__DrawBitmap_1bpp+0xf4>
 800b356:	b00f      	add	sp, #60	; 0x3c
 800b358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35c:	20000084 	.word	0x20000084
 800b360:	20004afc 	.word	0x20004afc
 800b364:	20004ab4 	.word	0x20004ab4

0800b368 <LCD_DrawBitmap>:
 800b368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36c:	f8df c20c 	ldr.w	ip, [pc, #524]	; 800b57c <LCD_DrawBitmap+0x214>
 800b370:	b091      	sub	sp, #68	; 0x44
 800b372:	f8dc 9000 	ldr.w	r9, [ip]
 800b376:	9207      	str	r2, [sp, #28]
 800b378:	4605      	mov	r5, r0
 800b37a:	4688      	mov	r8, r1
 800b37c:	469b      	mov	fp, r3
 800b37e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b380:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b382:	f1b9 0f00 	cmp.w	r9, #0
 800b386:	d00c      	beq.n	800b3a2 <LCD_DrawBitmap+0x3a>
 800b388:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800b38a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b38c:	9500      	str	r5, [sp, #0]
 800b38e:	9701      	str	r7, [sp, #4]
 800b390:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800b392:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b394:	9602      	str	r6, [sp, #8]
 800b396:	9503      	str	r5, [sp, #12]
 800b398:	9404      	str	r4, [sp, #16]
 800b39a:	9705      	str	r7, [sp, #20]
 800b39c:	f8d9 4000 	ldr.w	r4, [r9]
 800b3a0:	e081      	b.n	800b4a6 <LCD_DrawBitmap+0x13e>
 800b3a2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800b3a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b3a6:	ea47 0300 	orr.w	r3, r7, r0
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d17d      	bne.n	800b4aa <LCD_DrawBitmap+0x142>
 800b3ae:	4b71      	ldr	r3, [pc, #452]	; (800b574 <LCD_DrawBitmap+0x20c>)
 800b3b0:	6818      	ldr	r0, [r3, #0]
 800b3b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800b3b6:	1a53      	subs	r3, r2, r1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	dd08      	ble.n	800b3ce <LCD_DrawBitmap+0x66>
 800b3bc:	ebc3 010b 	rsb	r1, r3, fp
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	f340 80d4 	ble.w	800b56e <LCD_DrawBitmap+0x206>
 800b3c6:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b3c8:	fb07 4403 	mla	r4, r7, r3, r4
 800b3cc:	e001      	b.n	800b3d2 <LCD_DrawBitmap+0x6a>
 800b3ce:	4659      	mov	r1, fp
 800b3d0:	4642      	mov	r2, r8
 800b3d2:	44d8      	add	r8, fp
 800b3d4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800b3d8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3dc:	ebc3 0808 	rsb	r8, r3, r8
 800b3e0:	f1b8 0f00 	cmp.w	r8, #0
 800b3e4:	dd04      	ble.n	800b3f0 <LCD_DrawBitmap+0x88>
 800b3e6:	ebc8 0101 	rsb	r1, r8, r1
 800b3ea:	2900      	cmp	r1, #0
 800b3ec:	f340 80bf 	ble.w	800b56e <LCD_DrawBitmap+0x206>
 800b3f0:	9b07      	ldr	r3, [sp, #28]
 800b3f2:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 800b3f6:	442b      	add	r3, r5
 800b3f8:	3b01      	subs	r3, #1
 800b3fa:	ebcc 0303 	rsb	r3, ip, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	dd02      	ble.n	800b408 <LCD_DrawBitmap+0xa0>
 800b402:	9f07      	ldr	r7, [sp, #28]
 800b404:	1aff      	subs	r7, r7, r3
 800b406:	9707      	str	r7, [sp, #28]
 800b408:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 800b40c:	4565      	cmp	r5, ip
 800b40e:	da33      	bge.n	800b478 <LCD_DrawBitmap+0x110>
 800b410:	9f07      	ldr	r7, [sp, #28]
 800b412:	ebc5 030c 	rsb	r3, r5, ip
 800b416:	1aff      	subs	r7, r7, r3
 800b418:	2e08      	cmp	r6, #8
 800b41a:	9707      	str	r7, [sp, #28]
 800b41c:	d027      	beq.n	800b46e <LCD_DrawBitmap+0x106>
 800b41e:	dc0d      	bgt.n	800b43c <LCD_DrawBitmap+0xd4>
 800b420:	2e02      	cmp	r6, #2
 800b422:	d014      	beq.n	800b44e <LCD_DrawBitmap+0xe6>
 800b424:	2e04      	cmp	r6, #4
 800b426:	d01a      	beq.n	800b45e <LCD_DrawBitmap+0xf6>
 800b428:	2e01      	cmp	r6, #1
 800b42a:	d126      	bne.n	800b47a <LCD_DrawBitmap+0x112>
 800b42c:	f023 0c07 	bic.w	ip, r3, #7
 800b430:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 800b434:	4465      	add	r5, ip
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	e01e      	b.n	800b47a <LCD_DrawBitmap+0x112>
 800b43c:	2e18      	cmp	r6, #24
 800b43e:	d018      	beq.n	800b472 <LCD_DrawBitmap+0x10a>
 800b440:	2e20      	cmp	r6, #32
 800b442:	d016      	beq.n	800b472 <LCD_DrawBitmap+0x10a>
 800b444:	2e10      	cmp	r6, #16
 800b446:	d118      	bne.n	800b47a <LCD_DrawBitmap+0x112>
 800b448:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800b44c:	e013      	b.n	800b476 <LCD_DrawBitmap+0x10e>
 800b44e:	f023 0c03 	bic.w	ip, r3, #3
 800b452:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 800b456:	4465      	add	r5, ip
 800b458:	f003 0303 	and.w	r3, r3, #3
 800b45c:	e00d      	b.n	800b47a <LCD_DrawBitmap+0x112>
 800b45e:	f023 0c01 	bic.w	ip, r3, #1
 800b462:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800b466:	4465      	add	r5, ip
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	e005      	b.n	800b47a <LCD_DrawBitmap+0x112>
 800b46e:	441c      	add	r4, r3
 800b470:	e001      	b.n	800b476 <LCD_DrawBitmap+0x10e>
 800b472:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b476:	4665      	mov	r5, ip
 800b478:	2300      	movs	r3, #0
 800b47a:	9f07      	ldr	r7, [sp, #28]
 800b47c:	2f00      	cmp	r7, #0
 800b47e:	dd76      	ble.n	800b56e <LCD_DrawBitmap+0x206>
 800b480:	f890 e011 	ldrb.w	lr, [r0, #17]
 800b484:	483c      	ldr	r0, [pc, #240]	; (800b578 <LCD_DrawBitmap+0x210>)
 800b486:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b488:	f850 002e 	ldr.w	r0, [r0, lr, lsl #2]
 800b48c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 800b490:	9403      	str	r4, [sp, #12]
 800b492:	e88d 0042 	stmia.w	sp, {r1, r6}
 800b496:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	9702      	str	r7, [sp, #8]
 800b49c:	9405      	str	r4, [sp, #20]
 800b49e:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b4a2:	9b07      	ldr	r3, [sp, #28]
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	47a0      	blx	r4
 800b4a8:	e061      	b.n	800b56e <LCD_DrawBitmap+0x206>
 800b4aa:	f1c6 0708 	rsb	r7, r6, #8
 800b4ae:	970e      	str	r7, [sp, #56]	; 0x38
 800b4b0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b4b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b4b6:	455f      	cmp	r7, fp
 800b4b8:	da59      	bge.n	800b56e <LCD_DrawBitmap+0x206>
 800b4ba:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <LCD_DrawBitmap+0x20c>)
 800b4bc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4447      	add	r7, r8
 800b4c2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800b4c6:	970c      	str	r7, [sp, #48]	; 0x30
 800b4c8:	3f01      	subs	r7, #1
 800b4ca:	4297      	cmp	r7, r2
 800b4cc:	970d      	str	r7, [sp, #52]	; 0x34
 800b4ce:	db46      	blt.n	800b55e <LCD_DrawBitmap+0x1f6>
 800b4d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800b4d4:	4598      	cmp	r8, r3
 800b4d6:	dc42      	bgt.n	800b55e <LCD_DrawBitmap+0x1f6>
 800b4d8:	f04f 0a00 	mov.w	sl, #0
 800b4dc:	940b      	str	r4, [sp, #44]	; 0x2c
 800b4de:	46ac      	mov	ip, r5
 800b4e0:	4657      	mov	r7, sl
 800b4e2:	9807      	ldr	r0, [sp, #28]
 800b4e4:	4287      	cmp	r7, r0
 800b4e6:	da3a      	bge.n	800b55e <LCD_DrawBitmap+0x1f6>
 800b4e8:	f1ba 0f00 	cmp.w	sl, #0
 800b4ec:	d106      	bne.n	800b4fc <LCD_DrawBitmap+0x194>
 800b4ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b4f0:	f890 9000 	ldrb.w	r9, [r0]
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4f8:	f04f 0a08 	mov.w	sl, #8
 800b4fc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b4fe:	4a1d      	ldr	r2, [pc, #116]	; (800b574 <LCD_DrawBitmap+0x20c>)
 800b500:	fa49 f301 	asr.w	r3, r9, r1
 800b504:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 800b508:	fa09 f906 	lsl.w	r9, r9, r6
 800b50c:	fa5f f989 	uxtb.w	r9, r9
 800b510:	ebc6 0a0a 	rsb	sl, r6, sl
 800b514:	d103      	bne.n	800b51e <LCD_DrawBitmap+0x1b6>
 800b516:	6810      	ldr	r0, [r2, #0]
 800b518:	7c00      	ldrb	r0, [r0, #16]
 800b51a:	0780      	lsls	r0, r0, #30
 800b51c:	d41b      	bmi.n	800b556 <LCD_DrawBitmap+0x1ee>
 800b51e:	6812      	ldr	r2, [r2, #0]
 800b520:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b522:	6810      	ldr	r0, [r2, #0]
 800b524:	900f      	str	r0, [sp, #60]	; 0x3c
 800b526:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800b528:	b110      	cbz	r0, 800b530 <LCD_DrawBitmap+0x1c8>
 800b52a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b52e:	e000      	b.n	800b532 <LCD_DrawBitmap+0x1ca>
 800b530:	b2db      	uxtb	r3, r3
 800b532:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	1e4a      	subs	r2, r1, #1
 800b538:	4462      	add	r2, ip
 800b53a:	4660      	mov	r0, ip
 800b53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b53e:	f8cd c020 	str.w	ip, [sp, #32]
 800b542:	4641      	mov	r1, r8
 800b544:	f7ff fe08 	bl	800b158 <LCD_FillRect>
 800b548:	4b0a      	ldr	r3, [pc, #40]	; (800b574 <LCD_DrawBitmap+0x20c>)
 800b54a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b558:	3701      	adds	r7, #1
 800b55a:	449c      	add	ip, r3
 800b55c:	e7c1      	b.n	800b4e2 <LCD_DrawBitmap+0x17a>
 800b55e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b560:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b564:	3701      	adds	r7, #1
 800b566:	970a      	str	r7, [sp, #40]	; 0x28
 800b568:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800b56a:	443c      	add	r4, r7
 800b56c:	e7a2      	b.n	800b4b4 <LCD_DrawBitmap+0x14c>
 800b56e:	b011      	add	sp, #68	; 0x44
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	20000084 	.word	0x20000084
 800b578:	20004afc 	.word	0x20004afc
 800b57c:	20004ab4 	.word	0x20004ab4

0800b580 <LCD_SetClipRectMax>:
 800b580:	b508      	push	{r3, lr}
 800b582:	4b05      	ldr	r3, [pc, #20]	; (800b598 <LCD_SetClipRectMax+0x18>)
 800b584:	6819      	ldr	r1, [r3, #0]
 800b586:	4b05      	ldr	r3, [pc, #20]	; (800b59c <LCD_SetClipRectMax+0x1c>)
 800b588:	7c4a      	ldrb	r2, [r1, #17]
 800b58a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b58e:	68c3      	ldr	r3, [r0, #12]
 800b590:	3108      	adds	r1, #8
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	4798      	blx	r3
 800b596:	bd08      	pop	{r3, pc}
 800b598:	20000084 	.word	0x20000084
 800b59c:	20004afc 	.word	0x20004afc

0800b5a0 <emWin_LCD_Init>:
 800b5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5a2:	f7ff ffed 	bl	800b580 <LCD_SetClipRectMax>
 800b5a6:	f004 fe6f 	bl	8010288 <LCD_InitColors>
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d145      	bne.n	800b63c <emWin_LCD_Init+0x9c>
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f000 feac 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800b5b8:	9001      	str	r0, [sp, #4]
 800b5ba:	b150      	cbz	r0, 800b5d2 <emWin_LCD_Init+0x32>
 800b5bc:	68c3      	ldr	r3, [r0, #12]
 800b5be:	210c      	movs	r1, #12
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c2:	a801      	add	r0, sp, #4
 800b5c4:	4798      	blx	r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	d035      	beq.n	800b638 <emWin_LCD_Init+0x98>
 800b5cc:	9801      	ldr	r0, [sp, #4]
 800b5ce:	4798      	blx	r3
 800b5d0:	4304      	orrs	r4, r0
 800b5d2:	3501      	adds	r5, #1
 800b5d4:	2d02      	cmp	r5, #2
 800b5d6:	d1ec      	bne.n	800b5b2 <emWin_LCD_Init+0x12>
 800b5d8:	bb84      	cbnz	r4, 800b63c <emWin_LCD_Init+0x9c>
 800b5da:	f004 fe71 	bl	80102c0 <LCD_InitLUT>
 800b5de:	4b19      	ldr	r3, [pc, #100]	; (800b644 <emWin_LCD_Init+0xa4>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d101      	bne.n	800b5ee <emWin_LCD_Init+0x4e>
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	e027      	b.n	800b63e <emWin_LCD_Init+0x9e>
 800b5ee:	2401      	movs	r4, #1
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f000 fe8d 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800b5f6:	9001      	str	r0, [sp, #4]
 800b5f8:	b1d0      	cbz	r0, 800b630 <emWin_LCD_Init+0x90>
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f000 fcd2 	bl	800bfa4 <GUI_SelectLayer>
 800b600:	2004      	movs	r0, #4
 800b602:	f7ff fd27 	bl	800b054 <LCD_SetDrawMode>
 800b606:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800b60a:	2000      	movs	r0, #0
 800b60c:	4601      	mov	r1, r0
 800b60e:	4613      	mov	r3, r2
 800b610:	f7ff fda2 	bl	800b158 <LCD_FillRect>
 800b614:	2000      	movs	r0, #0
 800b616:	f7ff fd1d 	bl	800b054 <LCD_SetDrawMode>
 800b61a:	a802      	add	r0, sp, #8
 800b61c:	210e      	movs	r1, #14
 800b61e:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b626:	4798      	blx	r3
 800b628:	4603      	mov	r3, r0
 800b62a:	b108      	cbz	r0, 800b630 <emWin_LCD_Init+0x90>
 800b62c:	9801      	ldr	r0, [sp, #4]
 800b62e:	4798      	blx	r3
 800b630:	f114 34ff 	adds.w	r4, r4, #4294967295
 800b634:	d2dc      	bcs.n	800b5f0 <emWin_LCD_Init+0x50>
 800b636:	e7d8      	b.n	800b5ea <emWin_LCD_Init+0x4a>
 800b638:	2001      	movs	r0, #1
 800b63a:	e000      	b.n	800b63e <emWin_LCD_Init+0x9e>
 800b63c:	4620      	mov	r0, r4
 800b63e:	b003      	add	sp, #12
 800b640:	bd30      	pop	{r4, r5, pc}
 800b642:	bf00      	nop
 800b644:	20002acc 	.word	0x20002acc

0800b648 <LCD_Color2Index>:
 800b648:	b508      	push	{r3, lr}
 800b64a:	4b05      	ldr	r3, [pc, #20]	; (800b660 <LCD_Color2Index+0x18>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	7c5a      	ldrb	r2, [r3, #17]
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <LCD_Color2Index+0x1c>)
 800b652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4798      	blx	r3
 800b65c:	bd08      	pop	{r3, pc}
 800b65e:	bf00      	nop
 800b660:	20000084 	.word	0x20000084
 800b664:	20004afc 	.word	0x20004afc

0800b668 <LCD_Index2Color>:
 800b668:	b508      	push	{r3, lr}
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <LCD_Index2Color+0x18>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	7c5a      	ldrb	r2, [r3, #17]
 800b670:	4b04      	ldr	r3, [pc, #16]	; (800b684 <LCD_Index2Color+0x1c>)
 800b672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	4798      	blx	r3
 800b67c:	bd08      	pop	{r3, pc}
 800b67e:	bf00      	nop
 800b680:	20000084 	.word	0x20000084
 800b684:	20004afc 	.word	0x20004afc

0800b688 <LCD_SetColorIndex>:
 800b688:	4b04      	ldr	r3, [pc, #16]	; (800b69c <LCD_SetColorIndex+0x14>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	7c1a      	ldrb	r2, [r3, #16]
 800b68e:	0752      	lsls	r2, r2, #29
 800b690:	bf4c      	ite	mi
 800b692:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 800b694:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 800b696:	6018      	str	r0, [r3, #0]
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000084 	.word	0x20000084

0800b6a0 <_SetColor>:
 800b6a0:	b508      	push	{r3, lr}
 800b6a2:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <_SetColor+0x1c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800b6a8:	4281      	cmp	r1, r0
 800b6aa:	d006      	beq.n	800b6ba <_SetColor+0x1a>
 800b6ac:	6318      	str	r0, [r3, #48]	; 0x30
 800b6ae:	f7ff ffcb 	bl	800b648 <LCD_Color2Index>
 800b6b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6b6:	f7ff bfe7 	b.w	800b688 <LCD_SetColorIndex>
 800b6ba:	bd08      	pop	{r3, pc}
 800b6bc:	20000084 	.word	0x20000084

0800b6c0 <LCD_SetBkColorIndex>:
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <LCD_SetBkColorIndex+0x14>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	7c1a      	ldrb	r2, [r3, #16]
 800b6c6:	0752      	lsls	r2, r2, #29
 800b6c8:	bf4c      	ite	mi
 800b6ca:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 800b6cc:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 800b6ce:	6018      	str	r0, [r3, #0]
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000084 	.word	0x20000084

0800b6d8 <_SetBkColor>:
 800b6d8:	b508      	push	{r3, lr}
 800b6da:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <_SetBkColor+0x1c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b6e0:	4281      	cmp	r1, r0
 800b6e2:	d006      	beq.n	800b6f2 <_SetBkColor+0x1a>
 800b6e4:	6358      	str	r0, [r3, #52]	; 0x34
 800b6e6:	f7ff ffaf 	bl	800b648 <LCD_Color2Index>
 800b6ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b6ee:	f7ff bfe7 	b.w	800b6c0 <LCD_SetBkColorIndex>
 800b6f2:	bd08      	pop	{r3, pc}
 800b6f4:	20000084 	.word	0x20000084

0800b6f8 <LCD_SetBkColor>:
 800b6f8:	b508      	push	{r3, lr}
 800b6fa:	4b02      	ldr	r3, [pc, #8]	; (800b704 <LCD_SetBkColor+0xc>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	4798      	blx	r3
 800b702:	bd08      	pop	{r3, pc}
 800b704:	2000006c 	.word	0x2000006c

0800b708 <LCD_SetColor>:
 800b708:	b508      	push	{r3, lr}
 800b70a:	4b02      	ldr	r3, [pc, #8]	; (800b714 <LCD_SetColor+0xc>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4798      	blx	r3
 800b712:	bd08      	pop	{r3, pc}
 800b714:	2000006c 	.word	0x2000006c

0800b718 <GUI__HandleEOLine>:
 800b718:	b513      	push	{r0, r1, r4, lr}
 800b71a:	6802      	ldr	r2, [r0, #0]
 800b71c:	4604      	mov	r4, r0
 800b71e:	a802      	add	r0, sp, #8
 800b720:	f840 2d04 	str.w	r2, [r0, #-4]!
 800b724:	f000 fb62 	bl	800bdec <GUI_UC__GetCharCodeInc>
 800b728:	b2c0      	uxtb	r0, r0
 800b72a:	b120      	cbz	r0, 800b736 <GUI__HandleEOLine+0x1e>
 800b72c:	280a      	cmp	r0, #10
 800b72e:	d104      	bne.n	800b73a <GUI__HandleEOLine+0x22>
 800b730:	9b01      	ldr	r3, [sp, #4]
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	e001      	b.n	800b73a <GUI__HandleEOLine+0x22>
 800b736:	2001      	movs	r0, #1
 800b738:	e000      	b.n	800b73c <GUI__HandleEOLine+0x24>
 800b73a:	2000      	movs	r0, #0
 800b73c:	b002      	add	sp, #8
 800b73e:	bd10      	pop	{r4, pc}

0800b740 <GUI__IntersectRect>:
 800b740:	880b      	ldrh	r3, [r1, #0]
 800b742:	b510      	push	{r4, lr}
 800b744:	f9b0 4000 	ldrsh.w	r4, [r0]
 800b748:	b21a      	sxth	r2, r3
 800b74a:	4294      	cmp	r4, r2
 800b74c:	bfb8      	it	lt
 800b74e:	8003      	strhlt	r3, [r0, #0]
 800b750:	884b      	ldrh	r3, [r1, #2]
 800b752:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800b756:	b21a      	sxth	r2, r3
 800b758:	4294      	cmp	r4, r2
 800b75a:	bfb8      	it	lt
 800b75c:	8043      	strhlt	r3, [r0, #2]
 800b75e:	888b      	ldrh	r3, [r1, #4]
 800b760:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b764:	b21a      	sxth	r2, r3
 800b766:	4294      	cmp	r4, r2
 800b768:	bfc8      	it	gt
 800b76a:	8083      	strhgt	r3, [r0, #4]
 800b76c:	88cb      	ldrh	r3, [r1, #6]
 800b76e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800b772:	b21a      	sxth	r2, r3
 800b774:	4291      	cmp	r1, r2
 800b776:	bfc8      	it	gt
 800b778:	80c3      	strhgt	r3, [r0, #6]
 800b77a:	bd10      	pop	{r4, pc}

0800b77c <GUI__IntersectRects>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b782:	f9b1 4000 	ldrsh.w	r4, [r1]
 800b786:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800b78a:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 800b78e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800b792:	429c      	cmp	r4, r3
 800b794:	bfb8      	it	lt
 800b796:	461c      	movlt	r4, r3
 800b798:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800b79c:	429d      	cmp	r5, r3
 800b79e:	bfa8      	it	ge
 800b7a0:	462b      	movge	r3, r5
 800b7a2:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800b7a6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800b7aa:	42ae      	cmp	r6, r5
 800b7ac:	bfb8      	it	lt
 800b7ae:	4635      	movlt	r5, r6
 800b7b0:	b2a4      	uxth	r4, r4
 800b7b2:	b2ad      	uxth	r5, r5
 800b7b4:	4291      	cmp	r1, r2
 800b7b6:	bfb8      	it	lt
 800b7b8:	460a      	movlt	r2, r1
 800b7ba:	8004      	strh	r4, [r0, #0]
 800b7bc:	8085      	strh	r5, [r0, #4]
 800b7be:	b224      	sxth	r4, r4
 800b7c0:	b22d      	sxth	r5, r5
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	b292      	uxth	r2, r2
 800b7c6:	42a5      	cmp	r5, r4
 800b7c8:	8043      	strh	r3, [r0, #2]
 800b7ca:	80c2      	strh	r2, [r0, #6]
 800b7cc:	db06      	blt.n	800b7dc <GUI__IntersectRects+0x60>
 800b7ce:	b210      	sxth	r0, r2
 800b7d0:	b21b      	sxth	r3, r3
 800b7d2:	4298      	cmp	r0, r3
 800b7d4:	bfb4      	ite	lt
 800b7d6:	2000      	movlt	r0, #0
 800b7d8:	2001      	movge	r0, #1
 800b7da:	bd70      	pop	{r4, r5, r6, pc}
 800b7dc:	2000      	movs	r0, #0
 800b7de:	bd70      	pop	{r4, r5, r6, pc}

0800b7e0 <GUI__memset16>:
 800b7e0:	b570      	push	{r4, r5, r6, lr}
 800b7e2:	0784      	lsls	r4, r0, #30
 800b7e4:	d502      	bpl.n	800b7ec <GUI__memset16+0xc>
 800b7e6:	8001      	strh	r1, [r0, #0]
 800b7e8:	3a01      	subs	r2, #1
 800b7ea:	3002      	adds	r0, #2
 800b7ec:	0855      	lsrs	r5, r2, #1
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	b305      	cbz	r5, 800b834 <GUI__memset16+0x54>
 800b7f2:	2d03      	cmp	r5, #3
 800b7f4:	eb01 4401 	add.w	r4, r1, r1, lsl #16
 800b7f8:	dc02      	bgt.n	800b800 <GUI__memset16+0x20>
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	461d      	mov	r5, r3
 800b7fe:	e012      	b.n	800b826 <GUI__memset16+0x46>
 800b800:	4603      	mov	r3, r0
 800b802:	462e      	mov	r6, r5
 800b804:	3e04      	subs	r6, #4
 800b806:	2e03      	cmp	r6, #3
 800b808:	601c      	str	r4, [r3, #0]
 800b80a:	605c      	str	r4, [r3, #4]
 800b80c:	609c      	str	r4, [r3, #8]
 800b80e:	60dc      	str	r4, [r3, #12]
 800b810:	f103 0310 	add.w	r3, r3, #16
 800b814:	dcf6      	bgt.n	800b804 <GUI__memset16+0x24>
 800b816:	3d04      	subs	r5, #4
 800b818:	08ab      	lsrs	r3, r5, #2
 800b81a:	1c5e      	adds	r6, r3, #1
 800b81c:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 800b820:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 800b824:	e7e9      	b.n	800b7fa <GUI__memset16+0x1a>
 800b826:	b11d      	cbz	r5, 800b830 <GUI__memset16+0x50>
 800b828:	f846 4b04 	str.w	r4, [r6], #4
 800b82c:	3d01      	subs	r5, #1
 800b82e:	e7fa      	b.n	800b826 <GUI__memset16+0x46>
 800b830:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800b834:	07d3      	lsls	r3, r2, #31
 800b836:	bf48      	it	mi
 800b838:	8001      	strhmi	r1, [r0, #0]
 800b83a:	bd70      	pop	{r4, r5, r6, pc}

0800b83c <GUI__Read16>:
 800b83c:	6803      	ldr	r3, [r0, #0]
 800b83e:	781a      	ldrb	r2, [r3, #0]
 800b840:	7859      	ldrb	r1, [r3, #1]
 800b842:	3302      	adds	r3, #2
 800b844:	6003      	str	r3, [r0, #0]
 800b846:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
 800b84a:	4770      	bx	lr

0800b84c <GUI__Read32>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	6803      	ldr	r3, [r0, #0]
 800b850:	789a      	ldrb	r2, [r3, #2]
 800b852:	785c      	ldrb	r4, [r3, #1]
 800b854:	7819      	ldrb	r1, [r3, #0]
 800b856:	0412      	lsls	r2, r2, #16
 800b858:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800b85c:	430a      	orrs	r2, r1
 800b85e:	78d9      	ldrb	r1, [r3, #3]
 800b860:	3304      	adds	r3, #4
 800b862:	6003      	str	r3, [r0, #0]
 800b864:	ea42 6001 	orr.w	r0, r2, r1, lsl #24
 800b868:	bd10      	pop	{r4, pc}

0800b86a <GUI__ReduceRect>:
 800b86a:	880b      	ldrh	r3, [r1, #0]
 800b86c:	b292      	uxth	r2, r2
 800b86e:	4413      	add	r3, r2
 800b870:	8003      	strh	r3, [r0, #0]
 800b872:	888b      	ldrh	r3, [r1, #4]
 800b874:	1a9b      	subs	r3, r3, r2
 800b876:	8083      	strh	r3, [r0, #4]
 800b878:	884b      	ldrh	r3, [r1, #2]
 800b87a:	4413      	add	r3, r2
 800b87c:	8043      	strh	r3, [r0, #2]
 800b87e:	88cb      	ldrh	r3, [r1, #6]
 800b880:	1a9a      	subs	r2, r3, r2
 800b882:	80c2      	strh	r2, [r0, #6]
 800b884:	4770      	bx	lr

0800b886 <GUI__sqrt32>:
 800b886:	b510      	push	{r4, lr}
 800b888:	2110      	movs	r1, #16
 800b88a:	2300      	movs	r3, #0
 800b88c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b890:	189c      	adds	r4, r3, r2
 800b892:	4284      	cmp	r4, r0
 800b894:	bf9c      	itt	ls
 800b896:	18a3      	addls	r3, r4, r2
 800b898:	ebc4 0000 	rsbls	r0, r4, r0
 800b89c:	3901      	subs	r1, #1
 800b89e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800b8a2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800b8a6:	d1f3      	bne.n	800b890 <GUI__sqrt32+0xa>
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	bd10      	pop	{r4, pc}

0800b8ac <GUI__strcmp>:
 800b8ac:	b510      	push	{r4, lr}
 800b8ae:	4b09      	ldr	r3, [pc, #36]	; (800b8d4 <GUI__strcmp+0x28>)
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	bf08      	it	eq
 800b8b4:	4618      	moveq	r0, r3
 800b8b6:	2900      	cmp	r1, #0
 800b8b8:	bf08      	it	eq
 800b8ba:	4619      	moveq	r1, r3
 800b8bc:	2300      	movs	r3, #0
 800b8be:	5cc4      	ldrb	r4, [r0, r3]
 800b8c0:	5cca      	ldrb	r2, [r1, r3]
 800b8c2:	42a2      	cmp	r2, r4
 800b8c4:	d104      	bne.n	800b8d0 <GUI__strcmp+0x24>
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	2a00      	cmp	r2, #0
 800b8ca:	d1f8      	bne.n	800b8be <GUI__strcmp+0x12>
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	bd10      	pop	{r4, pc}
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	bd10      	pop	{r4, pc}
 800b8d4:	08014503 	.word	0x08014503

0800b8d8 <GUI__strcmp_hp>:
 800b8d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8da:	460d      	mov	r5, r1
 800b8dc:	b160      	cbz	r0, 800b8f8 <GUI__strcmp_hp+0x20>
 800b8de:	f002 fa51 	bl	800dd84 <GUI_ALLOC_LockH>
 800b8e2:	ac02      	add	r4, sp, #8
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b8ea:	f7ff ffdf 	bl	800b8ac <GUI__strcmp>
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f002 fa55 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800b8f6:	e000      	b.n	800b8fa <GUI__strcmp_hp+0x22>
 800b8f8:	2501      	movs	r5, #1
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	b003      	add	sp, #12
 800b8fe:	bd30      	pop	{r4, r5, pc}

0800b900 <GUI__strlen>:
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	b118      	cbz	r0, 800b90e <GUI__strlen+0xe>
 800b906:	3301      	adds	r3, #1
 800b908:	5cc2      	ldrb	r2, [r0, r3]
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d1fb      	bne.n	800b906 <GUI__strlen+0x6>
 800b90e:	4618      	mov	r0, r3
 800b910:	4770      	bx	lr
	...

0800b914 <GUI__SetText>:
 800b914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b916:	6807      	ldr	r7, [r0, #0]
 800b918:	4605      	mov	r5, r0
 800b91a:	4638      	mov	r0, r7
 800b91c:	460e      	mov	r6, r1
 800b91e:	f7ff ffdb 	bl	800b8d8 <GUI__strcmp_hp>
 800b922:	b908      	cbnz	r0, 800b928 <GUI__SetText+0x14>
 800b924:	2000      	movs	r0, #0
 800b926:	e02f      	b.n	800b988 <GUI__SetText+0x74>
 800b928:	4630      	mov	r0, r6
 800b92a:	f7ff ffe9 	bl	800b900 <GUI__strlen>
 800b92e:	1c44      	adds	r4, r0, #1
 800b930:	4638      	mov	r0, r7
 800b932:	f002 fa55 	bl	800dde0 <GUI_ALLOC_GetSize>
 800b936:	4284      	cmp	r4, r0
 800b938:	d110      	bne.n	800b95c <GUI__SetText+0x48>
 800b93a:	2c00      	cmp	r4, #0
 800b93c:	d0f2      	beq.n	800b924 <GUI__SetText+0x10>
 800b93e:	4638      	mov	r0, r7
 800b940:	f002 fa20 	bl	800dd84 <GUI_ALLOC_LockH>
 800b944:	ad02      	add	r5, sp, #8
 800b946:	4b11      	ldr	r3, [pc, #68]	; (800b98c <GUI__SetText+0x78>)
 800b948:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4631      	mov	r1, r6
 800b950:	4622      	mov	r2, r4
 800b952:	4798      	blx	r3
 800b954:	4628      	mov	r0, r5
 800b956:	f002 fa23 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800b95a:	e014      	b.n	800b986 <GUI__SetText+0x72>
 800b95c:	4620      	mov	r0, r4
 800b95e:	f002 fbdd 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800b962:	4607      	mov	r7, r0
 800b964:	2800      	cmp	r0, #0
 800b966:	d0dd      	beq.n	800b924 <GUI__SetText+0x10>
 800b968:	f002 fa0c 	bl	800dd84 <GUI_ALLOC_LockH>
 800b96c:	ac02      	add	r4, sp, #8
 800b96e:	4631      	mov	r1, r6
 800b970:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b974:	f005 fbfd 	bl	8011172 <strcpy>
 800b978:	4620      	mov	r0, r4
 800b97a:	f002 fa11 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800b97e:	4628      	mov	r0, r5
 800b980:	f002 fbd0 	bl	800e124 <GUI_ALLOC_FreePtr>
 800b984:	602f      	str	r7, [r5, #0]
 800b986:	2001      	movs	r0, #1
 800b988:	b003      	add	sp, #12
 800b98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98c:	20000074 	.word	0x20000074

0800b990 <GUI__ManageCacheEx>:
 800b990:	2801      	cmp	r0, #1
 800b992:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b994:	4604      	mov	r4, r0
 800b996:	460d      	mov	r5, r1
 800b998:	dc65      	bgt.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b99a:	4b34      	ldr	r3, [pc, #208]	; (800ba6c <GUI__ManageCacheEx+0xdc>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	b103      	cbz	r3, 800b9a2 <GUI__ManageCacheEx+0x12>
 800b9a0:	4798      	blx	r3
 800b9a2:	2d01      	cmp	r5, #1
 800b9a4:	d004      	beq.n	800b9b0 <GUI__ManageCacheEx+0x20>
 800b9a6:	2d02      	cmp	r5, #2
 800b9a8:	d021      	beq.n	800b9ee <GUI__ManageCacheEx+0x5e>
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	d15b      	bne.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b9ae:	e035      	b.n	800ba1c <GUI__ManageCacheEx+0x8c>
 800b9b0:	4e2f      	ldr	r6, [pc, #188]	; (800ba70 <GUI__ManageCacheEx+0xe0>)
 800b9b2:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 800b9b6:	b9b7      	cbnz	r7, 800b9e6 <GUI__ManageCacheEx+0x56>
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fca9 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800b9be:	9001      	str	r0, [sp, #4]
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d050      	beq.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b9c4:	68c3      	ldr	r3, [r0, #12]
 800b9c6:	210d      	movs	r1, #13
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	a801      	add	r0, sp, #4
 800b9cc:	4798      	blx	r3
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d048      	beq.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b9d4:	9801      	ldr	r0, [sp, #4]
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	4798      	blx	r3
 800b9da:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800b9de:	3301      	adds	r3, #1
 800b9e0:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
 800b9e4:	e018      	b.n	800ba18 <GUI__ManageCacheEx+0x88>
 800b9e6:	3701      	adds	r7, #1
 800b9e8:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 800b9ec:	e03b      	b.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 fc8e 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800b9f4:	9001      	str	r0, [sp, #4]
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d035      	beq.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800b9fa:	68c3      	ldr	r3, [r0, #12]
 800b9fc:	210d      	movs	r1, #13
 800b9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba00:	a801      	add	r0, sp, #4
 800ba02:	4798      	blx	r3
 800ba04:	4604      	mov	r4, r0
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d02d      	beq.n	800ba66 <GUI__ManageCacheEx+0xd6>
 800ba0a:	4b1a      	ldr	r3, [pc, #104]	; (800ba74 <GUI__ManageCacheEx+0xe4>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <GUI__ManageCacheEx+0x82>
 800ba10:	4798      	blx	r3
 800ba12:	9801      	ldr	r0, [sp, #4]
 800ba14:	2102      	movs	r1, #2
 800ba16:	47a0      	blx	r4
 800ba18:	2000      	movs	r0, #0
 800ba1a:	e025      	b.n	800ba68 <GUI__ManageCacheEx+0xd8>
 800ba1c:	4d14      	ldr	r5, [pc, #80]	; (800ba70 <GUI__ManageCacheEx+0xe0>)
 800ba1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d001      	beq.n	800ba2a <GUI__ManageCacheEx+0x9a>
 800ba26:	2001      	movs	r0, #1
 800ba28:	e015      	b.n	800ba56 <GUI__ManageCacheEx+0xc6>
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fc70 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800ba30:	9001      	str	r0, [sp, #4]
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0f7      	beq.n	800ba26 <GUI__ManageCacheEx+0x96>
 800ba36:	68c3      	ldr	r3, [r0, #12]
 800ba38:	210d      	movs	r1, #13
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	a801      	add	r0, sp, #4
 800ba3e:	4798      	blx	r3
 800ba40:	4606      	mov	r6, r0
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d0ef      	beq.n	800ba26 <GUI__ManageCacheEx+0x96>
 800ba46:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <GUI__ManageCacheEx+0xe4>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <GUI__ManageCacheEx+0xbe>
 800ba4c:	4798      	blx	r3
 800ba4e:	9801      	ldr	r0, [sp, #4]
 800ba50:	2100      	movs	r1, #0
 800ba52:	47b0      	blx	r6
 800ba54:	2000      	movs	r0, #0
 800ba56:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	bf18      	it	ne
 800ba5e:	3b01      	subne	r3, #1
 800ba60:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
 800ba64:	e000      	b.n	800ba68 <GUI__ManageCacheEx+0xd8>
 800ba66:	2001      	movs	r0, #1
 800ba68:	b003      	add	sp, #12
 800ba6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba6c:	20002a34 	.word	0x20002a34
 800ba70:	20002a2c 	.word	0x20002a2c
 800ba74:	20002a28 	.word	0x20002a28

0800ba78 <GUI__ManageCache>:
 800ba78:	4b02      	ldr	r3, [pc, #8]	; (800ba84 <GUI__ManageCache+0xc>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	7c58      	ldrb	r0, [r3, #17]
 800ba80:	f7ff bf86 	b.w	800b990 <GUI__ManageCacheEx>
 800ba84:	20000084 	.word	0x20000084

0800ba88 <GUI__MixColors>:
 800ba88:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800ba8c:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800ba90:	0e0b      	lsrs	r3, r1, #24
 800ba92:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ba96:	b530      	push	{r4, r5, lr}
 800ba98:	fb02 f303 	mul.w	r3, r2, r3
 800ba9c:	f04f 04ff 	mov.w	r4, #255	; 0xff
 800baa0:	fbb3 f3f4 	udiv	r3, r3, r4
 800baa4:	bf08      	it	eq
 800baa6:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800baaa:	1ae2      	subs	r2, r4, r3
 800baac:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800bab0:	f001 25ff 	and.w	r5, r1, #4278255360	; 0xff00ff00
 800bab4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800bab8:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800babc:	0a2d      	lsrs	r5, r5, #8
 800babe:	435c      	muls	r4, r3
 800bac0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800bac4:	4343      	muls	r3, r0
 800bac6:	fb02 4405 	mla	r4, r2, r5, r4
 800baca:	fb02 3201 	mla	r2, r2, r1, r3
 800bace:	0a12      	lsrs	r2, r2, #8
 800bad0:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800bad4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800bad8:	ea44 0002 	orr.w	r0, r4, r2
 800badc:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800bae0:	bd30      	pop	{r4, r5, pc}
	...

0800bae4 <_OnExit>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4c0a      	ldr	r4, [pc, #40]	; (800bb10 <_OnExit+0x2c>)
 800bae8:	4d0a      	ldr	r5, [pc, #40]	; (800bb14 <_OnExit+0x30>)
 800baea:	6820      	ldr	r0, [r4, #0]
 800baec:	4e0a      	ldr	r6, [pc, #40]	; (800bb18 <_OnExit+0x34>)
 800baee:	f002 f935 	bl	800dd5c <GUI_ALLOC_FreeFixedBlock>
 800baf2:	6828      	ldr	r0, [r5, #0]
 800baf4:	f002 f932 	bl	800dd5c <GUI_ALLOC_FreeFixedBlock>
 800baf8:	6830      	ldr	r0, [r6, #0]
 800bafa:	f002 f92f 	bl	800dd5c <GUI_ALLOC_FreeFixedBlock>
 800bafe:	4a07      	ldr	r2, [pc, #28]	; (800bb1c <_OnExit+0x38>)
 800bb00:	2300      	movs	r3, #0
 800bb02:	6013      	str	r3, [r2, #0]
 800bb04:	4a06      	ldr	r2, [pc, #24]	; (800bb20 <_OnExit+0x3c>)
 800bb06:	6033      	str	r3, [r6, #0]
 800bb08:	602b      	str	r3, [r5, #0]
 800bb0a:	6023      	str	r3, [r4, #0]
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	20002a3c 	.word	0x20002a3c
 800bb14:	20002a38 	.word	0x20002a38
 800bb18:	20002a40 	.word	0x20002a40
 800bb1c:	20002a44 	.word	0x20002a44
 800bb20:	20002a54 	.word	0x20002a54

0800bb24 <GUI__GetAlphaBuffer>:
 800bb24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	461c      	mov	r4, r3
 800bb2a:	4b28      	ldr	r3, [pc, #160]	; (800bbcc <GUI__GetAlphaBuffer+0xa8>)
 800bb2c:	4617      	mov	r7, r2
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	4606      	mov	r6, r0
 800bb32:	4688      	mov	r8, r1
 800bb34:	b932      	cbnz	r2, 800bb44 <GUI__GetAlphaBuffer+0x20>
 800bb36:	2201      	movs	r2, #1
 800bb38:	4825      	ldr	r0, [pc, #148]	; (800bbd0 <GUI__GetAlphaBuffer+0xac>)
 800bb3a:	601a      	str	r2, [r3, #0]
 800bb3c:	4b25      	ldr	r3, [pc, #148]	; (800bbd4 <GUI__GetAlphaBuffer+0xb0>)
 800bb3e:	6003      	str	r3, [r0, #0]
 800bb40:	f000 fd40 	bl	800c5c4 <GUI__RegisterExit>
 800bb44:	4d24      	ldr	r5, [pc, #144]	; (800bbd8 <GUI__GetAlphaBuffer+0xb4>)
 800bb46:	682b      	ldr	r3, [r5, #0]
 800bb48:	b933      	cbnz	r3, 800bb58 <GUI__GetAlphaBuffer+0x34>
 800bb4a:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <GUI__GetAlphaBuffer+0xb8>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	602b      	str	r3, [r5, #0]
 800bb50:	b913      	cbnz	r3, 800bb58 <GUI__GetAlphaBuffer+0x34>
 800bb52:	f7ff f9fb 	bl	800af4c <LCD_GetVXSizeMax>
 800bb56:	6028      	str	r0, [r5, #0]
 800bb58:	b10c      	cbz	r4, 800bb5e <GUI__GetAlphaBuffer+0x3a>
 800bb5a:	682b      	ldr	r3, [r5, #0]
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	b196      	cbz	r6, 800bb86 <GUI__GetAlphaBuffer+0x62>
 800bb60:	4b1f      	ldr	r3, [pc, #124]	; (800bbe0 <GUI__GetAlphaBuffer+0xbc>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	4699      	mov	r9, r3
 800bb66:	2400      	movs	r4, #0
 800bb68:	b94a      	cbnz	r2, 800bb7e <GUI__GetAlphaBuffer+0x5a>
 800bb6a:	6828      	ldr	r0, [r5, #0]
 800bb6c:	0080      	lsls	r0, r0, #2
 800bb6e:	f002 f9d9 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800bb72:	f1d0 0401 	rsbs	r4, r0, #1
 800bb76:	f8c9 0000 	str.w	r0, [r9]
 800bb7a:	bf38      	it	cc
 800bb7c:	2400      	movcc	r4, #0
 800bb7e:	f8d9 3000 	ldr.w	r3, [r9]
 800bb82:	6033      	str	r3, [r6, #0]
 800bb84:	e000      	b.n	800bb88 <GUI__GetAlphaBuffer+0x64>
 800bb86:	4634      	mov	r4, r6
 800bb88:	f1b8 0f00 	cmp.w	r8, #0
 800bb8c:	d00d      	beq.n	800bbaa <GUI__GetAlphaBuffer+0x86>
 800bb8e:	4e15      	ldr	r6, [pc, #84]	; (800bbe4 <GUI__GetAlphaBuffer+0xc0>)
 800bb90:	6833      	ldr	r3, [r6, #0]
 800bb92:	b93b      	cbnz	r3, 800bba4 <GUI__GetAlphaBuffer+0x80>
 800bb94:	6828      	ldr	r0, [r5, #0]
 800bb96:	0080      	lsls	r0, r0, #2
 800bb98:	f002 f9c4 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	6030      	str	r0, [r6, #0]
 800bba0:	bf08      	it	eq
 800bba2:	2401      	moveq	r4, #1
 800bba4:	6833      	ldr	r3, [r6, #0]
 800bba6:	f8c8 3000 	str.w	r3, [r8]
 800bbaa:	b167      	cbz	r7, 800bbc6 <GUI__GetAlphaBuffer+0xa2>
 800bbac:	4e0e      	ldr	r6, [pc, #56]	; (800bbe8 <GUI__GetAlphaBuffer+0xc4>)
 800bbae:	6833      	ldr	r3, [r6, #0]
 800bbb0:	b93b      	cbnz	r3, 800bbc2 <GUI__GetAlphaBuffer+0x9e>
 800bbb2:	6828      	ldr	r0, [r5, #0]
 800bbb4:	0080      	lsls	r0, r0, #2
 800bbb6:	f002 f9b5 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	6030      	str	r0, [r6, #0]
 800bbbe:	bf08      	it	eq
 800bbc0:	2401      	moveq	r4, #1
 800bbc2:	6833      	ldr	r3, [r6, #0]
 800bbc4:	603b      	str	r3, [r7, #0]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbcc:	20002a54 	.word	0x20002a54
 800bbd0:	20002a48 	.word	0x20002a48
 800bbd4:	0800bae5 	.word	0x0800bae5
 800bbd8:	20002a44 	.word	0x20002a44
 800bbdc:	20004b04 	.word	0x20004b04
 800bbe0:	20002a3c 	.word	0x20002a3c
 800bbe4:	20002a38 	.word	0x20002a38
 800bbe8:	20002a40 	.word	0x20002a40

0800bbec <GUI__DoAlphaBlending>:
 800bbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf0:	b093      	sub	sp, #76	; 0x4c
 800bbf2:	2400      	movs	r4, #0
 800bbf4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800bbf6:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbf8:	910c      	str	r1, [sp, #48]	; 0x30
 800bbfa:	4690      	mov	r8, r2
 800bbfc:	461f      	mov	r7, r3
 800bbfe:	6034      	str	r4, [r6, #0]
 800bc00:	a80f      	add	r0, sp, #60	; 0x3c
 800bc02:	a910      	add	r1, sp, #64	; 0x40
 800bc04:	4622      	mov	r2, r4
 800bc06:	ab11      	add	r3, sp, #68	; 0x44
 800bc08:	f7ff ff8c 	bl	800bb24 <GUI__GetAlphaBuffer>
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	f040 80c5 	bne.w	800bd9e <GUI__DoAlphaBlending+0x1b2>
 800bc14:	4c64      	ldr	r4, [pc, #400]	; (800bda8 <GUI__DoAlphaBlending+0x1bc>)
 800bc16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	7c58      	ldrb	r0, [r3, #17]
 800bc1c:	4b63      	ldr	r3, [pc, #396]	; (800bdac <GUI__DoAlphaBlending+0x1c0>)
 800bc1e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800bc22:	9307      	str	r3, [sp, #28]
 800bc24:	4297      	cmp	r7, r2
 800bc26:	bfa8      	it	ge
 800bc28:	4617      	movge	r7, r2
 800bc2a:	691a      	ldr	r2, [r3, #16]
 800bc2c:	920d      	str	r2, [sp, #52]	; 0x34
 800bc2e:	970a      	str	r7, [sp, #40]	; 0x28
 800bc30:	f7ff f950 	bl	800aed4 <GUI_GetBitsPerPixelEx>
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	9008      	str	r0, [sp, #32]
 800bc38:	7c58      	ldrb	r0, [r3, #17]
 800bc3a:	f7ff f969 	bl	800af10 <GUI_GetpfIndex2ColorEx>
 800bc3e:	4b5c      	ldr	r3, [pc, #368]	; (800bdb0 <GUI__DoAlphaBlending+0x1c4>)
 800bc40:	9004      	str	r0, [sp, #16]
 800bc42:	4298      	cmp	r0, r3
 800bc44:	d005      	beq.n	800bc52 <GUI__DoAlphaBlending+0x66>
 800bc46:	4b5b      	ldr	r3, [pc, #364]	; (800bdb4 <GUI__DoAlphaBlending+0x1c8>)
 800bc48:	1ac3      	subs	r3, r0, r3
 800bc4a:	bf18      	it	ne
 800bc4c:	2301      	movne	r3, #1
 800bc4e:	9306      	str	r3, [sp, #24]
 800bc50:	e000      	b.n	800bc54 <GUI__DoAlphaBlending+0x68>
 800bc52:	9506      	str	r5, [sp, #24]
 800bc54:	2500      	movs	r5, #0
 800bc56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bc58:	46ab      	mov	fp, r5
 800bc5a:	4643      	mov	r3, r8
 800bc5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bc5e:	f853 0b04 	ldr.w	r0, [r3], #4
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	4790      	blx	r2
 800bc66:	0e03      	lsrs	r3, r0, #24
 800bc68:	4681      	mov	r9, r0
 800bc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6c:	f000 8087 	beq.w	800bd7e <GUI__DoAlphaBlending+0x192>
 800bc70:	f1bb 0f00 	cmp.w	fp, #0
 800bc74:	d13f      	bne.n	800bcf6 <GUI__DoAlphaBlending+0x10a>
 800bc76:	4b4c      	ldr	r3, [pc, #304]	; (800bda8 <GUI__DoAlphaBlending+0x1bc>)
 800bc78:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bc82:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800bc86:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bc88:	442f      	add	r7, r5
 800bc8a:	42bb      	cmp	r3, r7
 800bc8c:	bfc8      	it	gt
 800bc8e:	ebc7 0b03 	rsbgt	fp, r7, r3
 800bc92:	eb0b 0a05 	add.w	sl, fp, r5
 800bc96:	bfc8      	it	gt
 800bc98:	461f      	movgt	r7, r3
 800bc9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc9c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800bca0:	4453      	add	r3, sl
 800bca2:	4494      	add	ip, r2
 800bca4:	9300      	str	r3, [sp, #0]
 800bca6:	9b07      	ldr	r3, [sp, #28]
 800bca8:	9301      	str	r3, [sp, #4]
 800bcaa:	f10c 32ff 	add.w	r2, ip, #4294967295
 800bcae:	4638      	mov	r0, r7
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	f8cd c00c 	str.w	ip, [sp, #12]
 800bcb6:	f004 fa99 	bl	80101ec <GUI_ReadRectEx>
 800bcba:	9a08      	ldr	r2, [sp, #32]
 800bcbc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800bcbe:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800bcc2:	2a17      	cmp	r2, #23
 800bcc4:	dc06      	bgt.n	800bcd4 <GUI__DoAlphaBlending+0xe8>
 800bcc6:	4450      	add	r0, sl
 800bcc8:	ebcb 0104 	rsb	r1, fp, r4
 800bccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcce:	f004 fbf1 	bl	80104b4 <GUI__ExpandPixelIndicesEx>
 800bcd2:	e001      	b.n	800bcd8 <GUI__DoAlphaBlending+0xec>
 800bcd4:	9b06      	ldr	r3, [sp, #24]
 800bcd6:	b913      	cbnz	r3, 800bcde <GUI__DoAlphaBlending+0xf2>
 800bcd8:	f04f 0b01 	mov.w	fp, #1
 800bcdc:	e00b      	b.n	800bcf6 <GUI__DoAlphaBlending+0x10a>
 800bcde:	ebc7 070c 	rsb	r7, r7, ip
 800bce2:	4482      	add	sl, r0
 800bce4:	f8da 0000 	ldr.w	r0, [sl]
 800bce8:	9a04      	ldr	r2, [sp, #16]
 800bcea:	4790      	blx	r2
 800bcec:	3f01      	subs	r7, #1
 800bcee:	f84a 0b04 	str.w	r0, [sl], #4
 800bcf2:	d1f7      	bne.n	800bce4 <GUI__DoAlphaBlending+0xf8>
 800bcf4:	e7f0      	b.n	800bcd8 <GUI__DoAlphaBlending+0xec>
 800bcf6:	4b30      	ldr	r3, [pc, #192]	; (800bdb8 <GUI__DoAlphaBlending+0x1cc>)
 800bcf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcfa:	f8d3 c000 	ldr.w	ip, [r3]
 800bcfe:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800bd00:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800bd04:	f1bc 0f00 	cmp.w	ip, #0
 800bd08:	d024      	beq.n	800bd54 <GUI__DoAlphaBlending+0x168>
 800bd0a:	eb07 020a 	add.w	r2, r7, sl
 800bd0e:	4451      	add	r1, sl
 800bd10:	9210      	str	r2, [sp, #64]	; 0x40
 800bd12:	4623      	mov	r3, r4
 800bd14:	910f      	str	r1, [sp, #60]	; 0x3c
 800bd16:	4640      	mov	r0, r8
 800bd18:	47e0      	blx	ip
 800bd1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f858 1003 	ldr.w	r1, [r8, r3]
 800bd24:	f001 407f 	and.w	r0, r1, #4278190080	; 0xff000000
 800bd28:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800bd2c:	58e8      	ldr	r0, [r5, r3]
 800bd2e:	d101      	bne.n	800bd34 <GUI__DoAlphaBlending+0x148>
 800bd30:	50d0      	str	r0, [r2, r3]
 800bd32:	e005      	b.n	800bd40 <GUI__DoAlphaBlending+0x154>
 800bd34:	f000 407f 	and.w	r0, r0, #4278190080	; 0xff000000
 800bd38:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 800bd3c:	bf08      	it	eq
 800bd3e:	50d1      	streq	r1, [r2, r3]
 800bd40:	3c01      	subs	r4, #1
 800bd42:	f103 0304 	add.w	r3, r3, #4
 800bd46:	d1eb      	bne.n	800bd20 <GUI__DoAlphaBlending+0x134>
 800bd48:	6833      	ldr	r3, [r6, #0]
 800bd4a:	9710      	str	r7, [sp, #64]	; 0x40
 800bd4c:	f043 0301 	orr.w	r3, r3, #1
 800bd50:	6033      	str	r3, [r6, #0]
 800bd52:	e022      	b.n	800bd9a <GUI__DoAlphaBlending+0x1ae>
 800bd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd56:	2bff      	cmp	r3, #255	; 0xff
 800bd58:	d104      	bne.n	800bd64 <GUI__DoAlphaBlending+0x178>
 800bd5a:	f851 300a 	ldr.w	r3, [r1, sl]
 800bd5e:	f847 300a 	str.w	r3, [r7, sl]
 800bd62:	e013      	b.n	800bd8c <GUI__DoAlphaBlending+0x1a0>
 800bd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd66:	f851 100a 	ldr.w	r1, [r1, sl]
 800bd6a:	43da      	mvns	r2, r3
 800bd6c:	4b13      	ldr	r3, [pc, #76]	; (800bdbc <GUI__DoAlphaBlending+0x1d0>)
 800bd6e:	f029 407f 	bic.w	r0, r9, #4278190080	; 0xff000000
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	b2d2      	uxtb	r2, r2
 800bd76:	4798      	blx	r3
 800bd78:	f847 000a 	str.w	r0, [r7, sl]
 800bd7c:	e002      	b.n	800bd84 <GUI__DoAlphaBlending+0x198>
 800bd7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd80:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800bd84:	6833      	ldr	r3, [r6, #0]
 800bd86:	f043 0301 	orr.w	r3, r3, #1
 800bd8a:	6033      	str	r3, [r6, #0]
 800bd8c:	3c01      	subs	r4, #1
 800bd8e:	f105 0501 	add.w	r5, r5, #1
 800bd92:	d002      	beq.n	800bd9a <GUI__DoAlphaBlending+0x1ae>
 800bd94:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bd98:	e75f      	b.n	800bc5a <GUI__DoAlphaBlending+0x6e>
 800bd9a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bd9c:	e000      	b.n	800bda0 <GUI__DoAlphaBlending+0x1b4>
 800bd9e:	4620      	mov	r0, r4
 800bda0:	b013      	add	sp, #76	; 0x4c
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	bf00      	nop
 800bda8:	20000084 	.word	0x20000084
 800bdac:	20004afc 	.word	0x20004afc
 800bdb0:	0800e18b 	.word	0x0800e18b
 800bdb4:	0800e189 	.word	0x0800e189
 800bdb8:	20002a50 	.word	0x20002a50
 800bdbc:	20000078 	.word	0x20000078

0800bdc0 <GUI__AllocAlphaBuffer>:
 800bdc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdc2:	b108      	cbz	r0, 800bdc8 <GUI__AllocAlphaBuffer+0x8>
 800bdc4:	aa03      	add	r2, sp, #12
 800bdc6:	e000      	b.n	800bdca <GUI__AllocAlphaBuffer+0xa>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	a801      	add	r0, sp, #4
 800bdcc:	a902      	add	r1, sp, #8
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f7ff fea8 	bl	800bb24 <GUI__GetAlphaBuffer>
 800bdd4:	b005      	add	sp, #20
 800bdd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bddc <GUI_SignalEvent>:
 800bddc:	b508      	push	{r3, lr}
 800bdde:	4b02      	ldr	r3, [pc, #8]	; (800bde8 <GUI_SignalEvent+0xc>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	b103      	cbz	r3, 800bde6 <GUI_SignalEvent+0xa>
 800bde4:	4798      	blx	r3
 800bde6:	bd08      	pop	{r3, pc}
 800bde8:	20002a58 	.word	0x20002a58

0800bdec <GUI_UC__GetCharCodeInc>:
 800bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdee:	4e08      	ldr	r6, [pc, #32]	; (800be10 <GUI_UC__GetCharCodeInc+0x24>)
 800bdf0:	6804      	ldr	r4, [r0, #0]
 800bdf2:	6833      	ldr	r3, [r6, #0]
 800bdf4:	4605      	mov	r5, r0
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4798      	blx	r3
 800bdfc:	6833      	ldr	r3, [r6, #0]
 800bdfe:	4607      	mov	r7, r0
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	4620      	mov	r0, r4
 800be04:	4798      	blx	r3
 800be06:	4420      	add	r0, r4
 800be08:	6028      	str	r0, [r5, #0]
 800be0a:	4638      	mov	r0, r7
 800be0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be0e:	bf00      	nop
 800be10:	20004af4 	.word	0x20004af4

0800be14 <GUI_UC__NumChars2NumBytes>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4604      	mov	r4, r0
 800be18:	460e      	mov	r6, r1
 800be1a:	2500      	movs	r5, #0
 800be1c:	b146      	cbz	r6, 800be30 <GUI_UC__NumChars2NumBytes+0x1c>
 800be1e:	4b05      	ldr	r3, [pc, #20]	; (800be34 <GUI_UC__NumChars2NumBytes+0x20>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4620      	mov	r0, r4
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	4798      	blx	r3
 800be28:	3e01      	subs	r6, #1
 800be2a:	4404      	add	r4, r0
 800be2c:	4405      	add	r5, r0
 800be2e:	e7f5      	b.n	800be1c <GUI_UC__NumChars2NumBytes+0x8>
 800be30:	4628      	mov	r0, r5
 800be32:	bd70      	pop	{r4, r5, r6, pc}
 800be34:	20004af4 	.word	0x20004af4

0800be38 <_Unlink>:
 800be38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be3a:	4605      	mov	r5, r0
 800be3c:	b1f0      	cbz	r0, 800be7c <_Unlink+0x44>
 800be3e:	f001 ffa1 	bl	800dd84 <GUI_ALLOC_LockH>
 800be42:	4b0f      	ldr	r3, [pc, #60]	; (800be80 <_Unlink+0x48>)
 800be44:	9000      	str	r0, [sp, #0]
 800be46:	681c      	ldr	r4, [r3, #0]
 800be48:	42ac      	cmp	r4, r5
 800be4a:	d104      	bne.n	800be56 <_Unlink+0x1e>
 800be4c:	6842      	ldr	r2, [r0, #4]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	e011      	b.n	800be76 <_Unlink+0x3e>
 800be52:	f001 ffa5 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800be56:	b174      	cbz	r4, 800be76 <_Unlink+0x3e>
 800be58:	4620      	mov	r0, r4
 800be5a:	f001 ff93 	bl	800dd84 <GUI_ALLOC_LockH>
 800be5e:	4603      	mov	r3, r0
 800be60:	a802      	add	r0, sp, #8
 800be62:	685c      	ldr	r4, [r3, #4]
 800be64:	f840 3d04 	str.w	r3, [r0, #-4]!
 800be68:	42ac      	cmp	r4, r5
 800be6a:	d1f2      	bne.n	800be52 <_Unlink+0x1a>
 800be6c:	9a00      	ldr	r2, [sp, #0]
 800be6e:	6852      	ldr	r2, [r2, #4]
 800be70:	605a      	str	r2, [r3, #4]
 800be72:	f001 ff95 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800be76:	4668      	mov	r0, sp
 800be78:	f001 ff92 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800be7c:	b003      	add	sp, #12
 800be7e:	bd30      	pop	{r4, r5, pc}
 800be80:	20002a60 	.word	0x20002a60

0800be84 <GUI_TIMER__GetFirstTimer>:
 800be84:	2300      	movs	r3, #0
 800be86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	4b09      	ldr	r3, [pc, #36]	; (800beb0 <GUI_TIMER__GetFirstTimer+0x2c>)
 800be8c:	681c      	ldr	r4, [r3, #0]
 800be8e:	4605      	mov	r5, r0
 800be90:	b154      	cbz	r4, 800bea8 <GUI_TIMER__GetFirstTimer+0x24>
 800be92:	4620      	mov	r0, r4
 800be94:	f001 ff76 	bl	800dd84 <GUI_ALLOC_LockH>
 800be98:	ab02      	add	r3, sp, #8
 800be9a:	6902      	ldr	r2, [r0, #16]
 800be9c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bea0:	602a      	str	r2, [r5, #0]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 ff7c 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bea8:	4620      	mov	r0, r4
 800beaa:	b003      	add	sp, #12
 800beac:	bd30      	pop	{r4, r5, pc}
 800beae:	bf00      	nop
 800beb0:	20002a5c 	.word	0x20002a5c

0800beb4 <GUI_TIMER__GetNextTimerLin>:
 800beb4:	2300      	movs	r3, #0
 800beb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beb8:	600b      	str	r3, [r1, #0]
 800beba:	460e      	mov	r6, r1
 800bebc:	4604      	mov	r4, r0
 800bebe:	b190      	cbz	r0, 800bee6 <GUI_TIMER__GetNextTimerLin+0x32>
 800bec0:	f001 ff60 	bl	800dd84 <GUI_ALLOC_LockH>
 800bec4:	ad02      	add	r5, sp, #8
 800bec6:	6884      	ldr	r4, [r0, #8]
 800bec8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800becc:	b144      	cbz	r4, 800bee0 <GUI_TIMER__GetNextTimerLin+0x2c>
 800bece:	4628      	mov	r0, r5
 800bed0:	f001 ff66 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bed4:	4620      	mov	r0, r4
 800bed6:	f001 ff55 	bl	800dd84 <GUI_ALLOC_LockH>
 800beda:	6903      	ldr	r3, [r0, #16]
 800bedc:	9001      	str	r0, [sp, #4]
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	4628      	mov	r0, r5
 800bee2:	f001 ff5d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bee6:	4620      	mov	r0, r4
 800bee8:	b002      	add	sp, #8
 800beea:	bd70      	pop	{r4, r5, r6, pc}

0800beec <GUI_TIMER_Delete>:
 800beec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	b360      	cbz	r0, 800bf4c <GUI_TIMER_Delete+0x60>
 800bef2:	4e17      	ldr	r6, [pc, #92]	; (800bf50 <GUI_TIMER_Delete+0x64>)
 800bef4:	6835      	ldr	r5, [r6, #0]
 800bef6:	4285      	cmp	r5, r0
 800bef8:	d10b      	bne.n	800bf12 <GUI_TIMER_Delete+0x26>
 800befa:	f001 ff43 	bl	800dd84 <GUI_ALLOC_LockH>
 800befe:	ab02      	add	r3, sp, #8
 800bf00:	6882      	ldr	r2, [r0, #8]
 800bf02:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bf06:	6032      	str	r2, [r6, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	e017      	b.n	800bf3c <GUI_TIMER_Delete+0x50>
 800bf0c:	4668      	mov	r0, sp
 800bf0e:	f001 ff47 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bf12:	b1ad      	cbz	r5, 800bf40 <GUI_TIMER_Delete+0x54>
 800bf14:	4628      	mov	r0, r5
 800bf16:	f001 ff35 	bl	800dd84 <GUI_ALLOC_LockH>
 800bf1a:	6885      	ldr	r5, [r0, #8]
 800bf1c:	ae02      	add	r6, sp, #8
 800bf1e:	42a5      	cmp	r5, r4
 800bf20:	f846 0d08 	str.w	r0, [r6, #-8]!
 800bf24:	d1f2      	bne.n	800bf0c <GUI_TIMER_Delete+0x20>
 800bf26:	4620      	mov	r0, r4
 800bf28:	f001 ff2c 	bl	800dd84 <GUI_ALLOC_LockH>
 800bf2c:	9b00      	ldr	r3, [sp, #0]
 800bf2e:	6882      	ldr	r2, [r0, #8]
 800bf30:	9001      	str	r0, [sp, #4]
 800bf32:	609a      	str	r2, [r3, #8]
 800bf34:	a801      	add	r0, sp, #4
 800bf36:	f001 ff33 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bf3a:	4668      	mov	r0, sp
 800bf3c:	f001 ff30 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7ff ff79 	bl	800be38 <_Unlink>
 800bf46:	4620      	mov	r0, r4
 800bf48:	f001 ff56 	bl	800ddf8 <GUI_ALLOC_Free>
 800bf4c:	b002      	add	sp, #8
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	20002a5c 	.word	0x20002a5c

0800bf54 <GUI_TIMER_GetFlag>:
 800bf54:	b513      	push	{r0, r1, r4, lr}
 800bf56:	460c      	mov	r4, r1
 800bf58:	b168      	cbz	r0, 800bf76 <GUI_TIMER_GetFlag+0x22>
 800bf5a:	f001 ff13 	bl	800dd84 <GUI_ALLOC_LockH>
 800bf5e:	ab02      	add	r3, sp, #8
 800bf60:	8982      	ldrh	r2, [r0, #12]
 800bf62:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bf66:	4214      	tst	r4, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	bf0c      	ite	eq
 800bf6c:	2400      	moveq	r4, #0
 800bf6e:	2401      	movne	r4, #1
 800bf70:	f001 ff16 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800bf74:	e000      	b.n	800bf78 <GUI_TIMER_GetFlag+0x24>
 800bf76:	2401      	movs	r4, #1
 800bf78:	4620      	mov	r0, r4
 800bf7a:	b002      	add	sp, #8
 800bf7c:	bd10      	pop	{r4, pc}
	...

0800bf80 <GUI__AlphaPreserveTrans>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <GUI__AlphaPreserveTrans+0x20>)
 800bf84:	781c      	ldrb	r4, [r3, #0]
 800bf86:	b120      	cbz	r0, 800bf92 <GUI__AlphaPreserveTrans+0x12>
 800bf88:	2201      	movs	r2, #1
 800bf8a:	701a      	strb	r2, [r3, #0]
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	e002      	b.n	800bf98 <GUI__AlphaPreserveTrans+0x18>
 800bf92:	7018      	strb	r0, [r3, #0]
 800bf94:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800bf98:	f004 f9d0 	bl	801033c <LCD_AA_SetAndMask>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	bd10      	pop	{r4, pc}
 800bfa0:	20004ae4 	.word	0x20004ae4

0800bfa4 <GUI_SelectLayer>:
 800bfa4:	b570      	push	{r4, r5, r6, lr}
 800bfa6:	4d08      	ldr	r5, [pc, #32]	; (800bfc8 <GUI_SelectLayer+0x24>)
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	2801      	cmp	r0, #1
 800bfac:	4604      	mov	r4, r0
 800bfae:	7c5e      	ldrb	r6, [r3, #17]
 800bfb0:	d808      	bhi.n	800bfc4 <GUI_SelectLayer+0x20>
 800bfb2:	f000 f9ad 	bl	800c310 <GUI_DEVICE__GetpDriver>
 800bfb6:	b128      	cbz	r0, 800bfc4 <GUI_SelectLayer+0x20>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	745c      	strb	r4, [r3, #17]
 800bfbc:	f000 fc82 	bl	800c8c4 <GUI_SelectLCD>
 800bfc0:	4b02      	ldr	r3, [pc, #8]	; (800bfcc <GUI_SelectLayer+0x28>)
 800bfc2:	601c      	str	r4, [r3, #0]
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	bd70      	pop	{r4, r5, r6, pc}
 800bfc8:	20000084 	.word	0x20000084
 800bfcc:	20004a74 	.word	0x20004a74

0800bfd0 <GUI_StoreKey>:
 800bfd0:	4b02      	ldr	r3, [pc, #8]	; (800bfdc <GUI_StoreKey+0xc>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	b902      	cbnz	r2, 800bfd8 <GUI_StoreKey+0x8>
 800bfd6:	6018      	str	r0, [r3, #0]
 800bfd8:	f7ff bf00 	b.w	800bddc <GUI_SignalEvent>
 800bfdc:	20002a64 	.word	0x20002a64

0800bfe0 <GUI_PollKeyMsg>:
 800bfe0:	4a0a      	ldr	r2, [pc, #40]	; (800c00c <GUI_PollKeyMsg+0x2c>)
 800bfe2:	490b      	ldr	r1, [pc, #44]	; (800c010 <GUI_PollKeyMsg+0x30>)
 800bfe4:	6813      	ldr	r3, [r2, #0]
 800bfe6:	6809      	ldr	r1, [r1, #0]
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	b510      	push	{r4, lr}
 800bfec:	d00b      	beq.n	800c006 <GUI_PollKeyMsg+0x26>
 800bfee:	4c09      	ldr	r4, [pc, #36]	; (800c014 <GUI_PollKeyMsg+0x34>)
 800bff0:	42a3      	cmp	r3, r4
 800bff2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bff6:	bf14      	ite	ne
 800bff8:	3308      	addne	r3, #8
 800bffa:	3b50      	subeq	r3, #80	; 0x50
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	f7fb fa1d 	bl	800743c <WM_OnKey>
 800c002:	2001      	movs	r0, #1
 800c004:	bd10      	pop	{r4, pc}
 800c006:	2000      	movs	r0, #0
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	bf00      	nop
 800c00c:	20000080 	.word	0x20000080
 800c010:	2000007c 	.word	0x2000007c
 800c014:	20002ab8 	.word	0x20002ab8

0800c018 <GUI__DispStringInRect>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	b087      	sub	sp, #28
 800c01e:	460c      	mov	r4, r1
 800c020:	9001      	str	r0, [sp, #4]
 800c022:	4691      	mov	r9, r2
 800c024:	461d      	mov	r5, r3
 800c026:	f000 ff3f 	bl	800cea8 <GUI_GetFontDistY>
 800c02a:	9f01      	ldr	r7, [sp, #4]
 800c02c:	4680      	mov	r8, r0
 800c02e:	b124      	cbz	r4, 800c03a <GUI__DispStringInRect+0x22>
 800c030:	6820      	ldr	r0, [r4, #0]
 800c032:	6861      	ldr	r1, [r4, #4]
 800c034:	ab04      	add	r3, sp, #16
 800c036:	c303      	stmia	r3!, {r0, r1}
 800c038:	e002      	b.n	800c040 <GUI__DispStringInRect+0x28>
 800c03a:	a804      	add	r0, sp, #16
 800c03c:	f000 fb76 	bl	800c72c <GUI_GetClientRect>
 800c040:	f019 0a0c 	ands.w	sl, r9, #12
 800c044:	d002      	beq.n	800c04c <GUI__DispStringInRect+0x34>
 800c046:	462c      	mov	r4, r5
 800c048:	2600      	movs	r6, #0
 800c04a:	e016      	b.n	800c07a <GUI__DispStringInRect+0x62>
 800c04c:	f9bd 4012 	ldrsh.w	r4, [sp, #18]
 800c050:	e032      	b.n	800c0b8 <GUI__DispStringInRect+0xa0>
 800c052:	4621      	mov	r1, r4
 800c054:	9801      	ldr	r0, [sp, #4]
 800c056:	f000 fe75 	bl	800cd44 <GUI__GetLineNumChars>
 800c05a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800c05e:	4601      	mov	r1, r0
 800c060:	1a24      	subs	r4, r4, r0
 800c062:	4658      	mov	r0, fp
 800c064:	f7ff fed6 	bl	800be14 <GUI_UC__NumChars2NumBytes>
 800c068:	eb0b 0300 	add.w	r3, fp, r0
 800c06c:	a806      	add	r0, sp, #24
 800c06e:	3601      	adds	r6, #1
 800c070:	f840 3d14 	str.w	r3, [r0, #-20]!
 800c074:	f7ff fb50 	bl	800b718 <GUI__HandleEOLine>
 800c078:	b908      	cbnz	r0, 800c07e <GUI__DispStringInRect+0x66>
 800c07a:	2c00      	cmp	r4, #0
 800c07c:	d1e9      	bne.n	800c052 <GUI__DispStringInRect+0x3a>
 800c07e:	f1ba 0f08 	cmp.w	sl, #8
 800c082:	d005      	beq.n	800c090 <GUI__DispStringInRect+0x78>
 800c084:	f1ba 0f0c 	cmp.w	sl, #12
 800c088:	d008      	beq.n	800c09c <GUI__DispStringInRect+0x84>
 800c08a:	f1ba 0f04 	cmp.w	sl, #4
 800c08e:	d112      	bne.n	800c0b6 <GUI__DispStringInRect+0x9e>
 800c090:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800c094:	fb08 4416 	mls	r4, r8, r6, r4
 800c098:	3401      	adds	r4, #1
 800c09a:	e00d      	b.n	800c0b8 <GUI__DispStringInRect+0xa0>
 800c09c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c0a0:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 800c0a4:	1ae4      	subs	r4, r4, r3
 800c0a6:	3401      	adds	r4, #1
 800c0a8:	fb08 4416 	mls	r4, r8, r6, r4
 800c0ac:	2202      	movs	r2, #2
 800c0ae:	fb94 f4f2 	sdiv	r4, r4, r2
 800c0b2:	441c      	add	r4, r3
 800c0b4:	e000      	b.n	800c0b8 <GUI__DispStringInRect+0xa0>
 800c0b6:	2400      	movs	r4, #0
 800c0b8:	9701      	str	r7, [sp, #4]
 800c0ba:	2600      	movs	r6, #0
 800c0bc:	2d00      	cmp	r5, #0
 800c0be:	d04b      	beq.n	800c158 <GUI__DispStringInRect+0x140>
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	9801      	ldr	r0, [sp, #4]
 800c0c4:	f000 fe3e 	bl	800cd44 <GUI__GetLineNumChars>
 800c0c8:	4607      	mov	r7, r0
 800c0ca:	1a2d      	subs	r5, r5, r0
 800c0cc:	4639      	mov	r1, r7
 800c0ce:	9801      	ldr	r0, [sp, #4]
 800c0d0:	f000 fe66 	bl	800cda0 <GUI__GetLineDistX>
 800c0d4:	f009 0303 	and.w	r3, r9, #3
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d00f      	beq.n	800c0fc <GUI__DispStringInRect+0xe4>
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d003      	beq.n	800c0e8 <GUI__DispStringInRect+0xd0>
 800c0e0:	b983      	cbnz	r3, 800c104 <GUI__DispStringInRect+0xec>
 800c0e2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800c0e6:	e00d      	b.n	800c104 <GUI__DispStringInRect+0xec>
 800c0e8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800c0ec:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800c0f0:	1ab6      	subs	r6, r6, r2
 800c0f2:	1a36      	subs	r6, r6, r0
 800c0f4:	fb96 f6f3 	sdiv	r6, r6, r3
 800c0f8:	4416      	add	r6, r2
 800c0fa:	e003      	b.n	800c104 <GUI__DispStringInRect+0xec>
 800c0fc:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
 800c100:	1a36      	subs	r6, r6, r0
 800c102:	3601      	adds	r6, #1
 800c104:	4b16      	ldr	r3, [pc, #88]	; (800c160 <GUI__DispStringInRect+0x148>)
 800c106:	6819      	ldr	r1, [r3, #0]
 800c108:	3801      	subs	r0, #1
 800c10a:	b2a3      	uxth	r3, r4
 800c10c:	b2b2      	uxth	r2, r6
 800c10e:	848b      	strh	r3, [r1, #36]	; 0x24
 800c110:	4430      	add	r0, r6
 800c112:	f8ad 300a 	strh.w	r3, [sp, #10]
 800c116:	f108 33ff 	add.w	r3, r8, #4294967295
 800c11a:	4423      	add	r3, r4
 800c11c:	844a      	strh	r2, [r1, #34]	; 0x22
 800c11e:	f8ad 2008 	strh.w	r2, [sp, #8]
 800c122:	4639      	mov	r1, r7
 800c124:	aa02      	add	r2, sp, #8
 800c126:	f8ad 000c 	strh.w	r0, [sp, #12]
 800c12a:	9801      	ldr	r0, [sp, #4]
 800c12c:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c130:	f000 fe66 	bl	800ce00 <GUI__DispLine>
 800c134:	f8dd a004 	ldr.w	sl, [sp, #4]
 800c138:	4639      	mov	r1, r7
 800c13a:	4650      	mov	r0, sl
 800c13c:	f7ff fe6a 	bl	800be14 <GUI_UC__NumChars2NumBytes>
 800c140:	af06      	add	r7, sp, #24
 800c142:	4450      	add	r0, sl
 800c144:	f847 0d14 	str.w	r0, [r7, #-20]!
 800c148:	f000 feae 	bl	800cea8 <GUI_GetFontDistY>
 800c14c:	4404      	add	r4, r0
 800c14e:	4638      	mov	r0, r7
 800c150:	f7ff fae2 	bl	800b718 <GUI__HandleEOLine>
 800c154:	2800      	cmp	r0, #0
 800c156:	d0b1      	beq.n	800c0bc <GUI__DispStringInRect+0xa4>
 800c158:	b007      	add	sp, #28
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15e:	bf00      	nop
 800c160:	20000084 	.word	0x20000084

0800c164 <GUI_DispStringInRectMax>:
 800c164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	4690      	mov	r8, r2
 800c16c:	461f      	mov	r7, r3
 800c16e:	4606      	mov	r6, r0
 800c170:	b1c0      	cbz	r0, 800c1a4 <GUI_DispStringInRectMax+0x40>
 800c172:	b169      	cbz	r1, 800c190 <GUI_DispStringInRectMax+0x2c>
 800c174:	4608      	mov	r0, r1
 800c176:	f7fb fa83 	bl	8007680 <WM_SetUserClipRect>
 800c17a:	4605      	mov	r5, r0
 800c17c:	b148      	cbz	r0, 800c192 <GUI_DispStringInRectMax+0x2e>
 800c17e:	4668      	mov	r0, sp
 800c180:	4621      	mov	r1, r4
 800c182:	462a      	mov	r2, r5
 800c184:	f7ff fafa 	bl	800b77c <GUI__IntersectRects>
 800c188:	4668      	mov	r0, sp
 800c18a:	f7fb fa79 	bl	8007680 <WM_SetUserClipRect>
 800c18e:	e000      	b.n	800c192 <GUI_DispStringInRectMax+0x2e>
 800c190:	460d      	mov	r5, r1
 800c192:	4630      	mov	r0, r6
 800c194:	4621      	mov	r1, r4
 800c196:	4642      	mov	r2, r8
 800c198:	463b      	mov	r3, r7
 800c19a:	f7ff ff3d 	bl	800c018 <GUI__DispStringInRect>
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f7fb fa6e 	bl	8007680 <WM_SetUserClipRect>
 800c1a4:	b002      	add	sp, #8
 800c1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c1aa <GUI_DispStringInRect>:
 800c1aa:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800c1ae:	f7ff bfd9 	b.w	800c164 <GUI_DispStringInRectMax>

0800c1b2 <GUI_WrapGetNumLines>:
 800c1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b4:	4605      	mov	r5, r0
 800c1b6:	460e      	mov	r6, r1
 800c1b8:	4617      	mov	r7, r2
 800c1ba:	2400      	movs	r4, #0
 800c1bc:	4628      	mov	r0, r5
 800c1be:	4631      	mov	r1, r6
 800c1c0:	463a      	mov	r2, r7
 800c1c2:	f004 f96d 	bl	80104a0 <GUI__WrapGetNumBytesToNextLine>
 800c1c6:	b110      	cbz	r0, 800c1ce <GUI_WrapGetNumLines+0x1c>
 800c1c8:	4405      	add	r5, r0
 800c1ca:	3401      	adds	r4, #1
 800c1cc:	e7f6      	b.n	800c1bc <GUI_WrapGetNumLines+0xa>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c1d2 <GUI_DispStringInRectWrap>:
 800c1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	b089      	sub	sp, #36	; 0x24
 800c1d8:	460c      	mov	r4, r1
 800c1da:	9202      	str	r2, [sp, #8]
 800c1dc:	9303      	str	r3, [sp, #12]
 800c1de:	4605      	mov	r5, r0
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f000 8092 	beq.w	800c30a <GUI_DispStringInRectWrap+0x138>
 800c1e6:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1ea:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 800c1ee:	884e      	ldrh	r6, [r1, #2]
 800c1f0:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 800c1f4:	fa0f f289 	sxth.w	r2, r9
 800c1f8:	fa0f f38a 	sxth.w	r3, sl
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	3301      	adds	r3, #1
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	f000 fe51 	bl	800cea8 <GUI_GetFontDistY>
 800c206:	9902      	ldr	r1, [sp, #8]
 800c208:	f011 070c 	ands.w	r7, r1, #12
 800c20c:	4680      	mov	r8, r0
 800c20e:	d01b      	beq.n	800c248 <GUI_DispStringInRectWrap+0x76>
 800c210:	4628      	mov	r0, r5
 800c212:	9901      	ldr	r1, [sp, #4]
 800c214:	9a03      	ldr	r2, [sp, #12]
 800c216:	f7ff ffcc 	bl	800c1b2 <GUI_WrapGetNumLines>
 800c21a:	2f08      	cmp	r7, #8
 800c21c:	d003      	beq.n	800c226 <GUI_DispStringInRectWrap+0x54>
 800c21e:	2f0c      	cmp	r7, #12
 800c220:	d006      	beq.n	800c230 <GUI_DispStringInRectWrap+0x5e>
 800c222:	2f04      	cmp	r7, #4
 800c224:	d110      	bne.n	800c248 <GUI_DispStringInRectWrap+0x76>
 800c226:	f10b 0601 	add.w	r6, fp, #1
 800c22a:	fb00 6618 	mls	r6, r0, r8, r6
 800c22e:	e00a      	b.n	800c246 <GUI_DispStringInRectWrap+0x74>
 800c230:	b232      	sxth	r2, r6
 800c232:	fa0f f38b 	sxth.w	r3, fp
 800c236:	1a9b      	subs	r3, r3, r2
 800c238:	3301      	adds	r3, #1
 800c23a:	fb08 3010 	mls	r0, r8, r0, r3
 800c23e:	2302      	movs	r3, #2
 800c240:	fb90 f0f3 	sdiv	r0, r0, r3
 800c244:	4406      	add	r6, r0
 800c246:	b2b6      	uxth	r6, r6
 800c248:	4620      	mov	r0, r4
 800c24a:	f7fb fa19 	bl	8007680 <WM_SetUserClipRect>
 800c24e:	4607      	mov	r7, r0
 800c250:	b178      	cbz	r0, 800c272 <GUI_DispStringInRectWrap+0xa0>
 800c252:	a804      	add	r0, sp, #16
 800c254:	4621      	mov	r1, r4
 800c256:	463a      	mov	r2, r7
 800c258:	f8ad a010 	strh.w	sl, [sp, #16]
 800c25c:	f8ad 6012 	strh.w	r6, [sp, #18]
 800c260:	f8ad 9014 	strh.w	r9, [sp, #20]
 800c264:	f8ad b016 	strh.w	fp, [sp, #22]
 800c268:	f7ff fa88 	bl	800b77c <GUI__IntersectRects>
 800c26c:	a804      	add	r0, sp, #16
 800c26e:	f7fb fa07 	bl	8007680 <WM_SetUserClipRect>
 800c272:	9901      	ldr	r1, [sp, #4]
 800c274:	9a03      	ldr	r2, [sp, #12]
 800c276:	4628      	mov	r0, r5
 800c278:	f004 f8e0 	bl	801043c <GUI__WrapGetNumCharsDisp>
 800c27c:	eb06 0b08 	add.w	fp, r6, r8
 800c280:	4602      	mov	r2, r0
 800c282:	fa1f fb8b 	uxth.w	fp, fp
 800c286:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c28a:	4611      	mov	r1, r2
 800c28c:	4628      	mov	r0, r5
 800c28e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c292:	9200      	str	r2, [sp, #0]
 800c294:	f8ad a018 	strh.w	sl, [sp, #24]
 800c298:	f8ad 601a 	strh.w	r6, [sp, #26]
 800c29c:	f8ad 901c 	strh.w	r9, [sp, #28]
 800c2a0:	f000 fd7e 	bl	800cda0 <GUI__GetLineDistX>
 800c2a4:	9902      	ldr	r1, [sp, #8]
 800c2a6:	9a00      	ldr	r2, [sp, #0]
 800c2a8:	f001 0303 	and.w	r3, r1, #3
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d014      	beq.n	800c2da <GUI_DispStringInRectWrap+0x108>
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d004      	beq.n	800c2be <GUI_DispStringInRectWrap+0xec>
 800c2b4:	b9b3      	cbnz	r3, 800c2e4 <GUI_DispStringInRectWrap+0x112>
 800c2b6:	8823      	ldrh	r3, [r4, #0]
 800c2b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800c2bc:	e012      	b.n	800c2e4 <GUI_DispStringInRectWrap+0x112>
 800c2be:	8821      	ldrh	r1, [r4, #0]
 800c2c0:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 800c2c4:	b20e      	sxth	r6, r1
 800c2c6:	ebc6 060e 	rsb	r6, r6, lr
 800c2ca:	1a30      	subs	r0, r6, r0
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	fb90 f3f3 	sdiv	r3, r0, r3
 800c2d2:	4419      	add	r1, r3
 800c2d4:	f8ad 1018 	strh.w	r1, [sp, #24]
 800c2d8:	e004      	b.n	800c2e4 <GUI_DispStringInRectWrap+0x112>
 800c2da:	88a3      	ldrh	r3, [r4, #4]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	1a18      	subs	r0, r3, r0
 800c2e0:	f8ad 0018 	strh.w	r0, [sp, #24]
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	aa06      	add	r2, sp, #24
 800c2ea:	f000 fd89 	bl	800ce00 <GUI__DispLine>
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	9a03      	ldr	r2, [sp, #12]
 800c2f4:	f004 f8d4 	bl	80104a0 <GUI__WrapGetNumBytesToNextLine>
 800c2f8:	4405      	add	r5, r0
 800c2fa:	fa1f f68b 	uxth.w	r6, fp
 800c2fe:	782b      	ldrb	r3, [r5, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1b6      	bne.n	800c272 <GUI_DispStringInRectWrap+0xa0>
 800c304:	4638      	mov	r0, r7
 800c306:	f7fb f9bb 	bl	8007680 <WM_SetUserClipRect>
 800c30a:	b009      	add	sp, #36	; 0x24
 800c30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c310 <GUI_DEVICE__GetpDriver>:
 800c310:	2801      	cmp	r0, #1
 800c312:	dc09      	bgt.n	800c328 <GUI_DEVICE__GetpDriver+0x18>
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <GUI_DEVICE__GetpDriver+0x1c>)
 800c316:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c31a:	b120      	cbz	r0, 800c326 <GUI_DEVICE__GetpDriver+0x16>
 800c31c:	68c3      	ldr	r3, [r0, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	b11b      	cbz	r3, 800c32a <GUI_DEVICE__GetpDriver+0x1a>
 800c322:	6800      	ldr	r0, [r0, #0]
 800c324:	e7f9      	b.n	800c31a <GUI_DEVICE__GetpDriver+0xa>
 800c326:	4770      	bx	lr
 800c328:	2000      	movs	r0, #0
 800c32a:	4770      	bx	lr
 800c32c:	20004afc 	.word	0x20004afc

0800c330 <GUI_DEVICE_Delete>:
 800c330:	f001 bd14 	b.w	800dd5c <GUI_ALLOC_FreeFixedBlock>

0800c334 <GUI_DEVICE_Create>:
 800c334:	2b01      	cmp	r3, #1
 800c336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c338:	4606      	mov	r6, r0
 800c33a:	460d      	mov	r5, r1
 800c33c:	4617      	mov	r7, r2
 800c33e:	461c      	mov	r4, r3
 800c340:	dd01      	ble.n	800c346 <GUI_DEVICE_Create+0x12>
 800c342:	2000      	movs	r0, #0
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c346:	201c      	movs	r0, #28
 800c348:	f001 fdec 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	d0f8      	beq.n	800c342 <GUI_DEVICE_Create+0xe>
 800c350:	b10d      	cbz	r5, 800c356 <GUI_DEVICE_Create+0x22>
 800c352:	6105      	str	r5, [r0, #16]
 800c354:	e009      	b.n	800c36a <GUI_DEVICE_Create+0x36>
 800c356:	4b09      	ldr	r3, [pc, #36]	; (800c37c <GUI_DEVICE_Create+0x48>)
 800c358:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 800c35c:	b129      	cbz	r1, 800c36a <GUI_DEVICE_Create+0x36>
 800c35e:	680b      	ldr	r3, [r1, #0]
 800c360:	b10b      	cbz	r3, 800c366 <GUI_DEVICE_Create+0x32>
 800c362:	4619      	mov	r1, r3
 800c364:	e7fb      	b.n	800c35e <GUI_DEVICE_Create+0x2a>
 800c366:	690b      	ldr	r3, [r1, #16]
 800c368:	6103      	str	r3, [r0, #16]
 800c36a:	2300      	movs	r3, #0
 800c36c:	6083      	str	r3, [r0, #8]
 800c36e:	6184      	str	r4, [r0, #24]
 800c370:	8287      	strh	r7, [r0, #20]
 800c372:	60c6      	str	r6, [r0, #12]
 800c374:	6003      	str	r3, [r0, #0]
 800c376:	6043      	str	r3, [r0, #4]
 800c378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20004afc 	.word	0x20004afc

0800c380 <GUI_DEVICE_Unlink>:
 800c380:	6981      	ldr	r1, [r0, #24]
 800c382:	4a0b      	ldr	r2, [pc, #44]	; (800c3b0 <GUI_DEVICE_Unlink+0x30>)
 800c384:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c388:	4283      	cmp	r3, r0
 800c38a:	d105      	bne.n	800c398 <GUI_DEVICE_Unlink+0x18>
 800c38c:	6803      	ldr	r3, [r0, #0]
 800c38e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c392:	b10b      	cbz	r3, 800c398 <GUI_DEVICE_Unlink+0x18>
 800c394:	2200      	movs	r2, #0
 800c396:	605a      	str	r2, [r3, #4]
 800c398:	6843      	ldr	r3, [r0, #4]
 800c39a:	b10b      	cbz	r3, 800c3a0 <GUI_DEVICE_Unlink+0x20>
 800c39c:	6802      	ldr	r2, [r0, #0]
 800c39e:	601a      	str	r2, [r3, #0]
 800c3a0:	6802      	ldr	r2, [r0, #0]
 800c3a2:	b102      	cbz	r2, 800c3a6 <GUI_DEVICE_Unlink+0x26>
 800c3a4:	6053      	str	r3, [r2, #4]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	6003      	str	r3, [r0, #0]
 800c3aa:	6043      	str	r3, [r0, #4]
 800c3ac:	4770      	bx	lr
 800c3ae:	bf00      	nop
 800c3b0:	20004afc 	.word	0x20004afc

0800c3b4 <GUI_DEVICE_Link>:
 800c3b4:	b570      	push	{r4, r5, r6, lr}
 800c3b6:	b908      	cbnz	r0, 800c3bc <GUI_DEVICE_Link+0x8>
 800c3b8:	2001      	movs	r0, #1
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	6982      	ldr	r2, [r0, #24]
 800c3be:	2a01      	cmp	r2, #1
 800c3c0:	dcfa      	bgt.n	800c3b8 <GUI_DEVICE_Link+0x4>
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <GUI_DEVICE_Link+0x7c>)
 800c3c4:	7819      	ldrb	r1, [r3, #0]
 800c3c6:	428a      	cmp	r2, r1
 800c3c8:	bfa4      	itt	ge
 800c3ca:	1c51      	addge	r1, r2, #1
 800c3cc:	7019      	strbge	r1, [r3, #0]
 800c3ce:	4919      	ldr	r1, [pc, #100]	; (800c434 <GUI_DEVICE_Link+0x80>)
 800c3d0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	b913      	cbnz	r3, 800c3de <GUI_DEVICE_Link+0x2a>
 800c3d8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 800c3dc:	e01a      	b.n	800c414 <GUI_DEVICE_Link+0x60>
 800c3de:	6859      	ldr	r1, [r3, #4]
 800c3e0:	b109      	cbz	r1, 800c3e6 <GUI_DEVICE_Link+0x32>
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	e7fb      	b.n	800c3de <GUI_DEVICE_Link+0x2a>
 800c3e6:	68c1      	ldr	r1, [r0, #12]
 800c3e8:	680e      	ldr	r6, [r1, #0]
 800c3ea:	68d9      	ldr	r1, [r3, #12]
 800c3ec:	680c      	ldr	r4, [r1, #0]
 800c3ee:	42b4      	cmp	r4, r6
 800c3f0:	dd03      	ble.n	800c3fa <GUI_DEVICE_Link+0x46>
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d1f8      	bne.n	800c3ea <GUI_DEVICE_Link+0x36>
 800c3f8:	e7de      	b.n	800c3b8 <GUI_DEVICE_Link+0x4>
 800c3fa:	d102      	bne.n	800c402 <GUI_DEVICE_Link+0x4e>
 800c3fc:	8a81      	ldrh	r1, [r0, #20]
 800c3fe:	2901      	cmp	r1, #1
 800c400:	d00f      	beq.n	800c422 <GUI_DEVICE_Link+0x6e>
 800c402:	6859      	ldr	r1, [r3, #4]
 800c404:	b189      	cbz	r1, 800c42a <GUI_DEVICE_Link+0x76>
 800c406:	6008      	str	r0, [r1, #0]
 800c408:	6041      	str	r1, [r0, #4]
 800c40a:	6058      	str	r0, [r3, #4]
 800c40c:	4298      	cmp	r0, r3
 800c40e:	bf08      	it	eq
 800c410:	2300      	moveq	r3, #0
 800c412:	6003      	str	r3, [r0, #0]
 800c414:	2000      	movs	r0, #0
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	68cb      	ldr	r3, [r1, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	460b      	mov	r3, r1
 800c420:	dbef      	blt.n	800c402 <GUI_DEVICE_Link+0x4e>
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	2900      	cmp	r1, #0
 800c426:	d1f7      	bne.n	800c418 <GUI_DEVICE_Link+0x64>
 800c428:	e7eb      	b.n	800c402 <GUI_DEVICE_Link+0x4e>
 800c42a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 800c42e:	e7ec      	b.n	800c40a <GUI_DEVICE_Link+0x56>
 800c430:	20004aaa 	.word	0x20004aaa
 800c434:	20004afc 	.word	0x20004afc

0800c438 <GUI_DEVICE_CreateAndLink>:
 800c438:	b538      	push	{r3, r4, r5, lr}
 800c43a:	461d      	mov	r5, r3
 800c43c:	f7ff ff7a 	bl	800c334 <GUI_DEVICE_Create>
 800c440:	4604      	mov	r4, r0
 800c442:	b148      	cbz	r0, 800c458 <GUI_DEVICE_CreateAndLink+0x20>
 800c444:	f7ff ffb6 	bl	800c3b4 <GUI_DEVICE_Link>
 800c448:	68e3      	ldr	r3, [r4, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	b923      	cbnz	r3, 800c458 <GUI_DEVICE_CreateAndLink+0x20>
 800c44e:	4b03      	ldr	r3, [pc, #12]	; (800c45c <GUI_DEVICE_CreateAndLink+0x24>)
 800c450:	3516      	adds	r5, #22
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 800c458:	4620      	mov	r0, r4
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	20000084 	.word	0x20000084

0800c460 <_OnExit>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <_OnExit+0x30>)
 800c464:	4e0b      	ldr	r6, [pc, #44]	; (800c494 <_OnExit+0x34>)
 800c466:	4d0c      	ldr	r5, [pc, #48]	; (800c498 <_OnExit+0x38>)
 800c468:	2400      	movs	r4, #0
 800c46a:	601c      	str	r4, [r3, #0]
 800c46c:	4621      	mov	r1, r4
 800c46e:	6833      	ldr	r3, [r6, #0]
 800c470:	2270      	movs	r2, #112	; 0x70
 800c472:	4628      	mov	r0, r5
 800c474:	4798      	blx	r3
 800c476:	6833      	ldr	r3, [r6, #0]
 800c478:	4808      	ldr	r0, [pc, #32]	; (800c49c <_OnExit+0x3c>)
 800c47a:	4621      	mov	r1, r4
 800c47c:	2208      	movs	r2, #8
 800c47e:	4798      	blx	r3
 800c480:	4b07      	ldr	r3, [pc, #28]	; (800c4a0 <_OnExit+0x40>)
 800c482:	601d      	str	r5, [r3, #0]
 800c484:	4b07      	ldr	r3, [pc, #28]	; (800c4a4 <_OnExit+0x44>)
 800c486:	701c      	strb	r4, [r3, #0]
 800c488:	4b07      	ldr	r3, [pc, #28]	; (800c4a8 <_OnExit+0x48>)
 800c48a:	601c      	str	r4, [r3, #0]
 800c48c:	bd70      	pop	{r4, r5, r6, pc}
 800c48e:	bf00      	nop
 800c490:	20002b40 	.word	0x20002b40
 800c494:	20000070 	.word	0x20000070
 800c498:	20002ad0 	.word	0x20002ad0
 800c49c:	20004afc 	.word	0x20004afc
 800c4a0:	20000084 	.word	0x20000084
 800c4a4:	20004ae4 	.word	0x20004ae4
 800c4a8:	20004abc 	.word	0x20004abc

0800c4ac <_InitContext>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	4d19      	ldr	r5, [pc, #100]	; (800c514 <_InitContext+0x68>)
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	1d1a      	adds	r2, r3, #4
 800c4b4:	63da      	str	r2, [r3, #60]	; 0x3c
 800c4b6:	f103 0208 	add.w	r2, r3, #8
 800c4ba:	639b      	str	r3, [r3, #56]	; 0x38
 800c4bc:	641b      	str	r3, [r3, #64]	; 0x40
 800c4be:	6142      	str	r2, [r0, #20]
 800c4c0:	7c5a      	ldrb	r2, [r3, #17]
 800c4c2:	4b15      	ldr	r3, [pc, #84]	; (800c518 <_InitContext+0x6c>)
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c4ca:	68c3      	ldr	r3, [r0, #12]
 800c4cc:	f104 0108 	add.w	r1, r4, #8
 800c4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d2:	4798      	blx	r3
 800c4d4:	4b11      	ldr	r3, [pc, #68]	; (800c51c <_InitContext+0x70>)
 800c4d6:	6663      	str	r3, [r4, #100]	; 0x64
 800c4d8:	4b11      	ldr	r3, [pc, #68]	; (800c520 <_InitContext+0x74>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	61e3      	str	r3, [r4, #28]
 800c4de:	682b      	ldr	r3, [r5, #0]
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	6163      	str	r3, [r4, #20]
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	7623      	strb	r3, [r4, #24]
 800c4e8:	f7fa fe98 	bl	800721c <WM_GetDesktopWindow>
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800c4f2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800c4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c4f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c4fa:	4b0a      	ldr	r3, [pc, #40]	; (800c524 <_InitContext+0x78>)
 800c4fc:	64a0      	str	r0, [r4, #72]	; 0x48
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	f7ff f8fa 	bl	800b6f8 <LCD_SetBkColor>
 800c504:	4b08      	ldr	r3, [pc, #32]	; (800c528 <_InitContext+0x7c>)
 800c506:	6818      	ldr	r0, [r3, #0]
 800c508:	f7ff f8fe 	bl	800b708 <LCD_SetColor>
 800c50c:	4b07      	ldr	r3, [pc, #28]	; (800c52c <_InitContext+0x80>)
 800c50e:	4a08      	ldr	r2, [pc, #32]	; (800c530 <_InitContext+0x84>)
 800c510:	601a      	str	r2, [r3, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	20000084 	.word	0x20000084
 800c518:	20004afc 	.word	0x20004afc
 800c51c:	080138e0 	.word	0x080138e0
 800c520:	20000088 	.word	0x20000088
 800c524:	20002acc 	.word	0x20002acc
 800c528:	2000008c 	.word	0x2000008c
 800c52c:	20004af4 	.word	0x20004af4
 800c530:	08014408 	.word	0x08014408

0800c534 <GUI_SetDefaultFont>:
 800c534:	4b01      	ldr	r3, [pc, #4]	; (800c53c <GUI_SetDefaultFont+0x8>)
 800c536:	6018      	str	r0, [r3, #0]
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000088 	.word	0x20000088

0800c540 <GUI_ClearRect>:
 800c540:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800c544:	4607      	mov	r7, r0
 800c546:	2004      	movs	r0, #4
 800c548:	469a      	mov	sl, r3
 800c54a:	460e      	mov	r6, r1
 800c54c:	4691      	mov	r9, r2
 800c54e:	f7fe fd81 	bl	800b054 <LCD_SetDrawMode>
 800c552:	4b13      	ldr	r3, [pc, #76]	; (800c5a0 <GUI_ClearRect+0x60>)
 800c554:	681c      	ldr	r4, [r3, #0]
 800c556:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800c558:	6d24      	ldr	r4, [r4, #80]	; 0x50
 800c55a:	442f      	add	r7, r5
 800c55c:	4426      	add	r6, r4
 800c55e:	4680      	mov	r8, r0
 800c560:	444d      	add	r5, r9
 800c562:	4454      	add	r4, sl
 800c564:	4668      	mov	r0, sp
 800c566:	f8ad 7000 	strh.w	r7, [sp]
 800c56a:	f8ad 5004 	strh.w	r5, [sp, #4]
 800c56e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800c572:	f8ad 4006 	strh.w	r4, [sp, #6]
 800c576:	f7fc f899 	bl	80086ac <WM__InitIVRSearch>
 800c57a:	b928      	cbnz	r0, 800c588 <GUI_ClearRect+0x48>
 800c57c:	4640      	mov	r0, r8
 800c57e:	f7fe fd69 	bl	800b054 <LCD_SetDrawMode>
 800c582:	b002      	add	sp, #8
 800c584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c588:	4638      	mov	r0, r7
 800c58a:	4631      	mov	r1, r6
 800c58c:	462a      	mov	r2, r5
 800c58e:	4623      	mov	r3, r4
 800c590:	f7fe fde2 	bl	800b158 <LCD_FillRect>
 800c594:	f7fb ffc8 	bl	8008528 <WM__GetNextIVR>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d1f5      	bne.n	800c588 <GUI_ClearRect+0x48>
 800c59c:	e7ee      	b.n	800c57c <GUI_ClearRect+0x3c>
 800c59e:	bf00      	nop
 800c5a0:	20000084 	.word	0x20000084

0800c5a4 <GUI_Clear>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	f000 f949 	bl	800c840 <GUI_GotoXY>
 800c5ae:	4804      	ldr	r0, [pc, #16]	; (800c5c0 <GUI_Clear+0x1c>)
 800c5b0:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5bc:	f7ff bfc0 	b.w	800c540 <GUI_ClearRect>
 800c5c0:	ffffc001 	.word	0xffffc001

0800c5c4 <GUI__RegisterExit>:
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	4b05      	ldr	r3, [pc, #20]	; (800c5e4 <GUI__RegisterExit+0x20>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	4b03      	ldr	r3, [pc, #12]	; (800c5e4 <GUI__RegisterExit+0x20>)
 800c5d6:	687a      	ldr	r2, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr
 800c5e4:	20002ac0 	.word	0x20002ac0

0800c5e8 <GUI__Config>:
 800c5e8:	b508      	push	{r3, lr}
 800c5ea:	4b08      	ldr	r3, [pc, #32]	; (800c60c <GUI__Config+0x24>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	b962      	cbnz	r2, 800c60a <GUI__Config+0x22>
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	601a      	str	r2, [r3, #0]
 800c5f4:	f7f3 ffc0 	bl	8000578 <GUI_X_Config>
 800c5f8:	f7f4 f996 	bl	8000928 <LCD_X_Config>
 800c5fc:	4804      	ldr	r0, [pc, #16]	; (800c610 <GUI__Config+0x28>)
 800c5fe:	4b05      	ldr	r3, [pc, #20]	; (800c614 <GUI__Config+0x2c>)
 800c600:	6003      	str	r3, [r0, #0]
 800c602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c606:	f7ff bfdd 	b.w	800c5c4 <GUI__RegisterExit>
 800c60a:	bd08      	pop	{r3, pc}
 800c60c:	20002b40 	.word	0x20002b40
 800c610:	20002ac4 	.word	0x20002ac4
 800c614:	0800c461 	.word	0x0800c461

0800c618 <GUI_Init>:
 800c618:	b590      	push	{r4, r7, lr}
 800c61a:	b083      	sub	sp, #12
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	4b26      	ldr	r3, [pc, #152]	; (800c6b8 <GUI_Init+0xa0>)
 800c620:	4a25      	ldr	r2, [pc, #148]	; (800c6b8 <GUI_Init+0xa0>)
 800c622:	6812      	ldr	r2, [r2, #0]
 800c624:	f022 0201 	bic.w	r2, r2, #1
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	4b24      	ldr	r3, [pc, #144]	; (800c6bc <GUI_Init+0xa4>)
 800c62c:	2201      	movs	r2, #1
 800c62e:	601a      	str	r2, [r3, #0]
 800c630:	bf00      	nop
 800c632:	4b22      	ldr	r3, [pc, #136]	; (800c6bc <GUI_Init+0xa4>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d1fb      	bne.n	800c632 <GUI_Init+0x1a>
 800c63a:	4b21      	ldr	r3, [pc, #132]	; (800c6c0 <GUI_Init+0xa8>)
 800c63c:	4a21      	ldr	r2, [pc, #132]	; (800c6c4 <GUI_Init+0xac>)
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	4b1f      	ldr	r3, [pc, #124]	; (800c6c0 <GUI_Init+0xa8>)
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	4b20      	ldr	r3, [pc, #128]	; (800c6c8 <GUI_Init+0xb0>)
 800c646:	429a      	cmp	r2, r3
 800c648:	d000      	beq.n	800c64c <GUI_Init+0x34>
 800c64a:	e7fe      	b.n	800c64a <GUI_Init+0x32>
 800c64c:	f7ff ffcc 	bl	800c5e8 <GUI__Config>
 800c650:	4b1e      	ldr	r3, [pc, #120]	; (800c6cc <GUI_Init+0xb4>)
 800c652:	222e      	movs	r2, #46	; 0x2e
 800c654:	701a      	strb	r2, [r3, #0]
 800c656:	f7f3 ff9f 	bl	8000598 <GUI_X_Init>
 800c65a:	481d      	ldr	r0, [pc, #116]	; (800c6d0 <GUI_Init+0xb8>)
 800c65c:	f7ff ff26 	bl	800c4ac <_InitContext>
 800c660:	f7fe ff9e 	bl	800b5a0 <emWin_LCD_Init>
 800c664:	6078      	str	r0, [r7, #4]
 800c666:	f7fe fc7f 	bl	800af68 <LCD_GetXSizeDisplay>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d004      	beq.n	800c67a <GUI_Init+0x62>
 800c670:	f7fe fc80 	bl	800af74 <LCD_GetYSizeDisplay>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d109      	bne.n	800c68e <GUI_Init+0x76>
 800c67a:	f7fe fc61 	bl	800af40 <LCD_GetXSizeMax>
 800c67e:	4604      	mov	r4, r0
 800c680:	f7fe fc61 	bl	800af46 <LCD_GetYSizeMax>
 800c684:	4603      	mov	r3, r0
 800c686:	4620      	mov	r0, r4
 800c688:	4619      	mov	r1, r3
 800c68a:	f7fe fc63 	bl	800af54 <LCD_SetDisplaySize>
 800c68e:	2000      	movs	r0, #0
 800c690:	2100      	movs	r1, #0
 800c692:	f000 f939 	bl	800c908 <GUI_SetOrg>
 800c696:	f7fc fa15 	bl	8008ac4 <WM_Init>
 800c69a:	4b0e      	ldr	r3, [pc, #56]	; (800c6d4 <GUI_Init+0xbc>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <GUI_Init+0x90>
 800c6a2:	4b0c      	ldr	r3, [pc, #48]	; (800c6d4 <GUI_Init+0xbc>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4798      	blx	r3
 800c6a8:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <GUI_Init+0xc0>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	701a      	strb	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd90      	pop	{r4, r7, pc}
 800c6b8:	e0002000 	.word	0xe0002000
 800c6bc:	40023008 	.word	0x40023008
 800c6c0:	40023000 	.word	0x40023000
 800c6c4:	f407a5c2 	.word	0xf407a5c2
 800c6c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800c6cc:	20004ab0 	.word	0x20004ab0
 800c6d0:	20002ad0 	.word	0x20002ad0
 800c6d4:	20004ad4 	.word	0x20004ad4
 800c6d8:	20004adc 	.word	0x20004adc

0800c6dc <GUI_CalcColorDist>:
 800c6dc:	b2cb      	uxtb	r3, r1
 800c6de:	b2c2      	uxtb	r2, r0
 800c6e0:	1ad2      	subs	r2, r2, r3
 800c6e2:	b292      	uxth	r2, r2
 800c6e4:	b293      	uxth	r3, r2
 800c6e6:	b530      	push	{r4, r5, lr}
 800c6e8:	041c      	lsls	r4, r3, #16
 800c6ea:	bf48      	it	mi
 800c6ec:	4253      	negmi	r3, r2
 800c6ee:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800c6f2:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800c6f6:	ebc5 0202 	rsb	r2, r5, r2
 800c6fa:	bf48      	it	mi
 800c6fc:	b29b      	uxthmi	r3, r3
 800c6fe:	b292      	uxth	r2, r2
 800c700:	0c09      	lsrs	r1, r1, #16
 800c702:	fb13 f403 	smulbb	r4, r3, r3
 800c706:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 800c70a:	b293      	uxth	r3, r2
 800c70c:	041d      	lsls	r5, r3, #16
 800c70e:	b289      	uxth	r1, r1
 800c710:	b288      	uxth	r0, r1
 800c712:	bf44      	itt	mi
 800c714:	4253      	negmi	r3, r2
 800c716:	b29b      	uxthmi	r3, r3
 800c718:	0402      	lsls	r2, r0, #16
 800c71a:	bf48      	it	mi
 800c71c:	4248      	negmi	r0, r1
 800c71e:	fb13 4303 	smlabb	r3, r3, r3, r4
 800c722:	bf48      	it	mi
 800c724:	b280      	uxthmi	r0, r0
 800c726:	fb00 3000 	mla	r0, r0, r0, r3
 800c72a:	bd30      	pop	{r4, r5, pc}

0800c72c <GUI_GetClientRect>:
 800c72c:	b108      	cbz	r0, 800c732 <GUI_GetClientRect+0x6>
 800c72e:	f7fa bd59 	b.w	80071e4 <WM_GetClientRect>
 800c732:	4770      	bx	lr

0800c734 <GUI_GetBkColor>:
 800c734:	b508      	push	{r3, lr}
 800c736:	f003 fd89 	bl	801024c <LCD_GetBkColorIndex>
 800c73a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c73e:	f7fe bf93 	b.w	800b668 <LCD_Index2Color>

0800c742 <GUI_GetColor>:
 800c742:	b508      	push	{r3, lr}
 800c744:	f003 fd8a 	bl	801025c <LCD_GetColorIndex>
 800c748:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c74c:	f7fe bf8c 	b.w	800b668 <LCD_Index2Color>

0800c750 <GUI_GetOrg>:
 800c750:	4b04      	ldr	r3, [pc, #16]	; (800c764 <GUI_GetOrg+0x14>)
 800c752:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c756:	6003      	str	r3, [r0, #0]
 800c758:	4b03      	ldr	r3, [pc, #12]	; (800c768 <GUI_GetOrg+0x18>)
 800c75a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c75e:	600b      	str	r3, [r1, #0]
 800c760:	4770      	bx	lr
 800c762:	bf00      	nop
 800c764:	20004ad0 	.word	0x20004ad0
 800c768:	20004ac0 	.word	0x20004ac0

0800c76c <GUI_GetYSizeOfFont>:
 800c76c:	7e02      	ldrb	r2, [r0, #24]
 800c76e:	7ec0      	ldrb	r0, [r0, #27]
 800c770:	4350      	muls	r0, r2
 800c772:	4770      	bx	lr

0800c774 <GUI_MergeRect>:
 800c774:	b510      	push	{r4, lr}
 800c776:	b338      	cbz	r0, 800c7c8 <GUI_MergeRect+0x54>
 800c778:	b309      	cbz	r1, 800c7be <GUI_MergeRect+0x4a>
 800c77a:	b30a      	cbz	r2, 800c7c0 <GUI_MergeRect+0x4c>
 800c77c:	f9b1 4000 	ldrsh.w	r4, [r1]
 800c780:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c784:	429c      	cmp	r4, r3
 800c786:	bfb8      	it	lt
 800c788:	4623      	movlt	r3, r4
 800c78a:	8003      	strh	r3, [r0, #0]
 800c78c:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 800c790:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 800c794:	429c      	cmp	r4, r3
 800c796:	bfb8      	it	lt
 800c798:	4623      	movlt	r3, r4
 800c79a:	8043      	strh	r3, [r0, #2]
 800c79c:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800c7a0:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800c7a4:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	bfa8      	it	ge
 800c7ac:	4623      	movge	r3, r4
 800c7ae:	8083      	strh	r3, [r0, #4]
 800c7b0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 800c7b4:	4299      	cmp	r1, r3
 800c7b6:	bfa8      	it	ge
 800c7b8:	460b      	movge	r3, r1
 800c7ba:	80c3      	strh	r3, [r0, #6]
 800c7bc:	bd10      	pop	{r4, pc}
 800c7be:	4611      	mov	r1, r2
 800c7c0:	680b      	ldr	r3, [r1, #0]
 800c7c2:	6003      	str	r3, [r0, #0]
 800c7c4:	684b      	ldr	r3, [r1, #4]
 800c7c6:	6043      	str	r3, [r0, #4]
 800c7c8:	bd10      	pop	{r4, pc}

0800c7ca <GUI_MoveRect>:
 800c7ca:	b168      	cbz	r0, 800c7e8 <GUI_MoveRect+0x1e>
 800c7cc:	8803      	ldrh	r3, [r0, #0]
 800c7ce:	b289      	uxth	r1, r1
 800c7d0:	440b      	add	r3, r1
 800c7d2:	8003      	strh	r3, [r0, #0]
 800c7d4:	8883      	ldrh	r3, [r0, #4]
 800c7d6:	4419      	add	r1, r3
 800c7d8:	8843      	ldrh	r3, [r0, #2]
 800c7da:	8081      	strh	r1, [r0, #4]
 800c7dc:	b292      	uxth	r2, r2
 800c7de:	4413      	add	r3, r2
 800c7e0:	8043      	strh	r3, [r0, #2]
 800c7e2:	88c3      	ldrh	r3, [r0, #6]
 800c7e4:	441a      	add	r2, r3
 800c7e6:	80c2      	strh	r2, [r0, #6]
 800c7e8:	4770      	bx	lr
	...

0800c7ec <GUI_Exec1>:
 800c7ec:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <GUI_Exec1+0x34>)
 800c7ee:	b510      	push	{r4, lr}
 800c7f0:	681c      	ldr	r4, [r3, #0]
 800c7f2:	b11c      	cbz	r4, 800c7fc <GUI_Exec1+0x10>
 800c7f4:	47a0      	blx	r4
 800c7f6:	1c04      	adds	r4, r0, #0
 800c7f8:	bf18      	it	ne
 800c7fa:	2401      	movne	r4, #1
 800c7fc:	f7fc f8bc 	bl	8008978 <WM_Exec>
 800c800:	4b08      	ldr	r3, [pc, #32]	; (800c824 <GUI_Exec1+0x38>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2800      	cmp	r0, #0
 800c806:	bf18      	it	ne
 800c808:	2401      	movne	r4, #1
 800c80a:	b11b      	cbz	r3, 800c814 <GUI_Exec1+0x28>
 800c80c:	4798      	blx	r3
 800c80e:	2800      	cmp	r0, #0
 800c810:	bf18      	it	ne
 800c812:	2401      	movne	r4, #1
 800c814:	4b04      	ldr	r3, [pc, #16]	; (800c828 <GUI_Exec1+0x3c>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	b103      	cbz	r3, 800c81c <GUI_Exec1+0x30>
 800c81a:	4798      	blx	r3
 800c81c:	4620      	mov	r0, r4
 800c81e:	bd10      	pop	{r4, pc}
 800c820:	20004acc 	.word	0x20004acc
 800c824:	20004af8 	.word	0x20004af8
 800c828:	20004af0 	.word	0x20004af0

0800c82c <GUI_Exec>:
 800c82c:	b510      	push	{r4, lr}
 800c82e:	2400      	movs	r4, #0
 800c830:	f7ff ffdc 	bl	800c7ec <GUI_Exec1>
 800c834:	b108      	cbz	r0, 800c83a <GUI_Exec+0xe>
 800c836:	2401      	movs	r4, #1
 800c838:	e7fa      	b.n	800c830 <GUI_Exec+0x4>
 800c83a:	4620      	mov	r0, r4
 800c83c:	bd10      	pop	{r4, pc}
	...

0800c840 <GUI_GotoXY>:
 800c840:	4b02      	ldr	r3, [pc, #8]	; (800c84c <GUI_GotoXY+0xc>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	8458      	strh	r0, [r3, #34]	; 0x22
 800c846:	8499      	strh	r1, [r3, #36]	; 0x24
 800c848:	2000      	movs	r0, #0
 800c84a:	4770      	bx	lr
 800c84c:	20000084 	.word	0x20000084

0800c850 <GUI_SetPenSize>:
 800c850:	4b02      	ldr	r3, [pc, #8]	; (800c85c <GUI_SetPenSize+0xc>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	7e1a      	ldrb	r2, [r3, #24]
 800c856:	7618      	strb	r0, [r3, #24]
 800c858:	4610      	mov	r0, r2
 800c85a:	4770      	bx	lr
 800c85c:	20000084 	.word	0x20000084

0800c860 <GUI_RectsIntersect>:
 800c860:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c864:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800c868:	429a      	cmp	r2, r3
 800c86a:	dc14      	bgt.n	800c896 <GUI_RectsIntersect+0x36>
 800c86c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 800c870:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c874:	429a      	cmp	r2, r3
 800c876:	dc0e      	bgt.n	800c896 <GUI_RectsIntersect+0x36>
 800c878:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c87c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800c880:	429a      	cmp	r2, r3
 800c882:	dc08      	bgt.n	800c896 <GUI_RectsIntersect+0x36>
 800c884:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c888:	f9b1 2000 	ldrsh.w	r2, [r1]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	bfcc      	ite	gt
 800c890:	2000      	movgt	r0, #0
 800c892:	2001      	movle	r0, #1
 800c894:	4770      	bx	lr
 800c896:	2000      	movs	r0, #0
 800c898:	4770      	bx	lr
	...

0800c89c <GUI_SaveContext_W>:
 800c89c:	b508      	push	{r3, lr}
 800c89e:	4b03      	ldr	r3, [pc, #12]	; (800c8ac <GUI_SaveContext_W+0x10>)
 800c8a0:	2270      	movs	r2, #112	; 0x70
 800c8a2:	6819      	ldr	r1, [r3, #0]
 800c8a4:	f004 fc08 	bl	80110b8 <memcpy>
 800c8a8:	bd08      	pop	{r3, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20000084 	.word	0x20000084

0800c8b0 <GUI_RestoreContext>:
 800c8b0:	b508      	push	{r3, lr}
 800c8b2:	4b03      	ldr	r3, [pc, #12]	; (800c8c0 <GUI_RestoreContext+0x10>)
 800c8b4:	4601      	mov	r1, r0
 800c8b6:	2270      	movs	r2, #112	; 0x70
 800c8b8:	6818      	ldr	r0, [r3, #0]
 800c8ba:	f004 fbfd 	bl	80110b8 <memcpy>
 800c8be:	bd08      	pop	{r3, pc}
 800c8c0:	20000084 	.word	0x20000084

0800c8c4 <GUI_SelectLCD>:
 800c8c4:	b508      	push	{r3, lr}
 800c8c6:	f003 fb7d 	bl	800ffc4 <LCD_SelectLCD>
 800c8ca:	f7fe fa47 	bl	800ad5c <LCD_UpdateColorIndices>
 800c8ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c8d2:	f7fc b88d 	b.w	80089f0 <WM_Activate>

0800c8d6 <GUI_SetBkColor>:
 800c8d6:	f7fe bf0f 	b.w	800b6f8 <LCD_SetBkColor>

0800c8da <GUI_SetColor>:
 800c8da:	f7fe bf15 	b.w	800b708 <LCD_SetColor>

0800c8de <GUI_SetDrawMode>:
 800c8de:	f7fe bbb9 	b.w	800b054 <LCD_SetDrawMode>
	...

0800c8e4 <GUI_SetFont>:
 800c8e4:	4b03      	ldr	r3, [pc, #12]	; (800c8f4 <GUI_SetFont+0x10>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	69d9      	ldr	r1, [r3, #28]
 800c8ea:	b100      	cbz	r0, 800c8ee <GUI_SetFont+0xa>
 800c8ec:	61d8      	str	r0, [r3, #28]
 800c8ee:	4608      	mov	r0, r1
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20000084 	.word	0x20000084

0800c8f8 <GUI_SetLineStyle>:
 800c8f8:	4b02      	ldr	r3, [pc, #8]	; (800c904 <GUI_SetLineStyle+0xc>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	7e9a      	ldrb	r2, [r3, #26]
 800c8fe:	7698      	strb	r0, [r3, #26]
 800c900:	4610      	mov	r0, r2
 800c902:	4770      	bx	lr
 800c904:	20000084 	.word	0x20000084

0800c908 <GUI_SetOrg>:
 800c908:	460a      	mov	r2, r1
 800c90a:	4908      	ldr	r1, [pc, #32]	; (800c92c <GUI_SetOrg+0x24>)
 800c90c:	b510      	push	{r4, lr}
 800c90e:	8008      	strh	r0, [r1, #0]
 800c910:	4907      	ldr	r1, [pc, #28]	; (800c930 <GUI_SetOrg+0x28>)
 800c912:	800a      	strh	r2, [r1, #0]
 800c914:	4907      	ldr	r1, [pc, #28]	; (800c934 <GUI_SetOrg+0x2c>)
 800c916:	6809      	ldr	r1, [r1, #0]
 800c918:	4603      	mov	r3, r0
 800c91a:	7c48      	ldrb	r0, [r1, #17]
 800c91c:	4906      	ldr	r1, [pc, #24]	; (800c938 <GUI_SetOrg+0x30>)
 800c91e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800c922:	68c1      	ldr	r1, [r0, #12]
 800c924:	6a0c      	ldr	r4, [r1, #32]
 800c926:	4619      	mov	r1, r3
 800c928:	47a0      	blx	r4
 800c92a:	bd10      	pop	{r4, pc}
 800c92c:	20004ad0 	.word	0x20004ad0
 800c930:	20004ac0 	.word	0x20004ac0
 800c934:	20000084 	.word	0x20000084
 800c938:	20004afc 	.word	0x20004afc

0800c93c <GUI_SetTextAlign>:
 800c93c:	4b03      	ldr	r3, [pc, #12]	; (800c94c <GUI_SetTextAlign+0x10>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800c944:	8598      	strh	r0, [r3, #44]	; 0x2c
 800c946:	4610      	mov	r0, r2
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000084 	.word	0x20000084

0800c950 <GUI_SetTextMode>:
 800c950:	4b03      	ldr	r3, [pc, #12]	; (800c960 <GUI_SetTextMode+0x10>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800c958:	8558      	strh	r0, [r3, #42]	; 0x2a
 800c95a:	4610      	mov	r0, r2
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000084 	.word	0x20000084

0800c964 <GL_SetDefault>:
 800c964:	b508      	push	{r3, lr}
 800c966:	4b0e      	ldr	r3, [pc, #56]	; (800c9a0 <GL_SetDefault+0x3c>)
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	f7fe fec5 	bl	800b6f8 <LCD_SetBkColor>
 800c96e:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <GL_SetDefault+0x40>)
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	f7fe fec9 	bl	800b708 <LCD_SetColor>
 800c976:	2001      	movs	r0, #1
 800c978:	f7ff ff6a 	bl	800c850 <GUI_SetPenSize>
 800c97c:	2000      	movs	r0, #0
 800c97e:	f7ff ffdd 	bl	800c93c <GUI_SetTextAlign>
 800c982:	2000      	movs	r0, #0
 800c984:	f7ff ffe4 	bl	800c950 <GUI_SetTextMode>
 800c988:	2000      	movs	r0, #0
 800c98a:	f7ff ffa8 	bl	800c8de <GUI_SetDrawMode>
 800c98e:	4b06      	ldr	r3, [pc, #24]	; (800c9a8 <GL_SetDefault+0x44>)
 800c990:	6818      	ldr	r0, [r3, #0]
 800c992:	f7ff ffa7 	bl	800c8e4 <GUI_SetFont>
 800c996:	2000      	movs	r0, #0
 800c998:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c99c:	f7ff bfac 	b.w	800c8f8 <GUI_SetLineStyle>
 800c9a0:	20002acc 	.word	0x20002acc
 800c9a4:	2000008c 	.word	0x2000008c
 800c9a8:	20000088 	.word	0x20000088

0800c9ac <GUIPROP__FindChar>:
 800c9ac:	b138      	cbz	r0, 800c9be <GUIPROP__FindChar+0x12>
 800c9ae:	8803      	ldrh	r3, [r0, #0]
 800c9b0:	428b      	cmp	r3, r1
 800c9b2:	d802      	bhi.n	800c9ba <GUIPROP__FindChar+0xe>
 800c9b4:	8843      	ldrh	r3, [r0, #2]
 800c9b6:	428b      	cmp	r3, r1
 800c9b8:	d201      	bcs.n	800c9be <GUIPROP__FindChar+0x12>
 800c9ba:	6880      	ldr	r0, [r0, #8]
 800c9bc:	e7f6      	b.n	800c9ac <GUIPROP__FindChar>
 800c9be:	4770      	bx	lr

0800c9c0 <GUIPROP_DispChar>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	4c38      	ldr	r4, [pc, #224]	; (800caa8 <GUIPROP_DispChar+0xe8>)
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	f9b3 902a 	ldrsh.w	r9, [r3, #42]	; 0x2a
 800c9cc:	69db      	ldr	r3, [r3, #28]
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	b089      	sub	sp, #36	; 0x24
 800c9d2:	69d8      	ldr	r0, [r3, #28]
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	f7ff ffe9 	bl	800c9ac <GUIPROP__FindChar>
 800c9da:	2800      	cmp	r0, #0
 800c9dc:	d061      	beq.n	800caa2 <GUIPROP_DispChar+0xe2>
 800c9de:	f8b0 8000 	ldrh.w	r8, [r0]
 800c9e2:	6847      	ldr	r7, [r0, #4]
 800c9e4:	ebc8 0805 	rsb	r8, r8, r5
 800c9e8:	eb07 06c8 	add.w	r6, r7, r8, lsl #3
 800c9ec:	4648      	mov	r0, r9
 800c9ee:	f896 b002 	ldrb.w	fp, [r6, #2]
 800c9f2:	f7fe fb2f 	bl	800b054 <LCD_SetDrawMode>
 800c9f6:	6825      	ldr	r5, [r4, #0]
 800c9f8:	f817 2038 	ldrb.w	r2, [r7, r8, lsl #3]
 800c9fc:	f8d5 e01c 	ldr.w	lr, [r5, #28]
 800ca00:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 800ca04:	f89e c01a 	ldrb.w	ip, [lr, #26]
 800ca08:	f89e 3018 	ldrb.w	r3, [lr, #24]
 800ca0c:	9306      	str	r3, [sp, #24]
 800ca0e:	4682      	mov	sl, r0
 800ca10:	f9b5 0022 	ldrsh.w	r0, [r5, #34]	; 0x22
 800ca14:	f8cd c000 	str.w	ip, [sp]
 800ca18:	f89e e01b 	ldrb.w	lr, [lr, #27]
 800ca1c:	f8cd e004 	str.w	lr, [sp, #4]
 800ca20:	f04f 0e01 	mov.w	lr, #1
 800ca24:	f8cd b00c 	str.w	fp, [sp, #12]
 800ca28:	f8cd e008 	str.w	lr, [sp, #8]
 800ca2c:	6873      	ldr	r3, [r6, #4]
 800ca2e:	9304      	str	r3, [sp, #16]
 800ca30:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800ca32:	9b06      	ldr	r3, [sp, #24]
 800ca34:	9505      	str	r5, [sp, #20]
 800ca36:	f7fe fc97 	bl	800b368 <LCD_DrawBitmap>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	69da      	ldr	r2, [r3, #28]
 800ca3e:	f892 b019 	ldrb.w	fp, [r2, #25]
 800ca42:	7e11      	ldrb	r1, [r2, #24]
 800ca44:	458b      	cmp	fp, r1
 800ca46:	d920      	bls.n	800ca8a <GUIPROP_DispChar+0xca>
 800ca48:	f1b9 0f02 	cmp.w	r9, #2
 800ca4c:	7ed5      	ldrb	r5, [r2, #27]
 800ca4e:	d01c      	beq.n	800ca8a <GUIPROP_DispChar+0xca>
 800ca50:	9107      	str	r1, [sp, #28]
 800ca52:	f7ff fe76 	bl	800c742 <GUI_GetColor>
 800ca56:	4681      	mov	r9, r0
 800ca58:	f7ff fe6c 	bl	800c734 <GUI_GetBkColor>
 800ca5c:	f7ff ff3d 	bl	800c8da <GUI_SetColor>
 800ca60:	6824      	ldr	r4, [r4, #0]
 800ca62:	f817 7038 	ldrb.w	r7, [r7, r8, lsl #3]
 800ca66:	69e2      	ldr	r2, [r4, #28]
 800ca68:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800ca6c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 800ca70:	7ed2      	ldrb	r2, [r2, #27]
 800ca72:	9907      	ldr	r1, [sp, #28]
 800ca74:	fb07 0202 	mla	r2, r7, r2, r0
 800ca78:	fb01 3105 	mla	r1, r1, r5, r3
 800ca7c:	fb0b 3305 	mla	r3, fp, r5, r3
 800ca80:	f7fe fb6a 	bl	800b158 <LCD_FillRect>
 800ca84:	4648      	mov	r0, r9
 800ca86:	f7ff ff28 	bl	800c8da <GUI_SetColor>
 800ca8a:	4650      	mov	r0, sl
 800ca8c:	f7fe fae2 	bl	800b054 <LCD_SetDrawMode>
 800ca90:	4b05      	ldr	r3, [pc, #20]	; (800caa8 <GUIPROP_DispChar+0xe8>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	69da      	ldr	r2, [r3, #28]
 800ca96:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ca98:	7e90      	ldrb	r0, [r2, #26]
 800ca9a:	7872      	ldrb	r2, [r6, #1]
 800ca9c:	fb00 1202 	mla	r2, r0, r2, r1
 800caa0:	845a      	strh	r2, [r3, #34]	; 0x22
 800caa2:	b009      	add	sp, #36	; 0x24
 800caa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa8:	20000084 	.word	0x20000084

0800caac <GUIPROP_GetCharDistX>:
 800caac:	4b0d      	ldr	r3, [pc, #52]	; (800cae4 <GUIPROP_GetCharDistX+0x38>)
 800caae:	b570      	push	{r4, r5, r6, lr}
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	69dd      	ldr	r5, [r3, #28]
 800cab4:	4606      	mov	r6, r0
 800cab6:	460c      	mov	r4, r1
 800cab8:	69e8      	ldr	r0, [r5, #28]
 800caba:	4631      	mov	r1, r6
 800cabc:	f7ff ff76 	bl	800c9ac <GUIPROP__FindChar>
 800cac0:	b170      	cbz	r0, 800cae0 <GUIPROP_GetCharDistX+0x34>
 800cac2:	8803      	ldrh	r3, [r0, #0]
 800cac4:	6842      	ldr	r2, [r0, #4]
 800cac6:	1af6      	subs	r6, r6, r3
 800cac8:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 800cacc:	7858      	ldrb	r0, [r3, #1]
 800cace:	7eab      	ldrb	r3, [r5, #26]
 800cad0:	fb10 f003 	smulbb	r0, r0, r3
 800cad4:	b124      	cbz	r4, 800cae0 <GUIPROP_GetCharDistX+0x34>
 800cad6:	f812 2036 	ldrb.w	r2, [r2, r6, lsl #3]
 800cada:	fb12 f303 	smulbb	r3, r2, r3
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	bd70      	pop	{r4, r5, r6, pc}
 800cae2:	bf00      	nop
 800cae4:	20000084 	.word	0x20000084

0800cae8 <GUIPROP_GetFontInfo>:
 800cae8:	2301      	movs	r3, #1
 800caea:	800b      	strh	r3, [r1, #0]
 800caec:	4770      	bx	lr

0800caee <GUIPROP_IsInFont>:
 800caee:	b508      	push	{r3, lr}
 800caf0:	69c0      	ldr	r0, [r0, #28]
 800caf2:	f7ff ff5b 	bl	800c9ac <GUIPROP__FindChar>
 800caf6:	3000      	adds	r0, #0
 800caf8:	bf18      	it	ne
 800cafa:	2001      	movne	r0, #1
 800cafc:	bd08      	pop	{r3, pc}
	...

0800cb00 <GUIMONO_DispChar>:
 800cb00:	4b52      	ldr	r3, [pc, #328]	; (800cc4c <GUIMONO_DispChar+0x14c>)
 800cb02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	69d9      	ldr	r1, [r3, #28]
 800cb0a:	8c5f      	ldrh	r7, [r3, #34]	; 0x22
 800cb0c:	69cc      	ldr	r4, [r1, #28]
 800cb0e:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
 800cb10:	89a2      	ldrh	r2, [r4, #12]
 800cb12:	4290      	cmp	r0, r2
 800cb14:	b08b      	sub	sp, #44	; 0x2c
 800cb16:	d308      	bcc.n	800cb2a <GUIMONO_DispChar+0x2a>
 800cb18:	89e6      	ldrh	r6, [r4, #14]
 800cb1a:	4286      	cmp	r6, r0
 800cb1c:	d305      	bcc.n	800cb2a <GUIMONO_DispChar+0x2a>
 800cb1e:	f8d4 9000 	ldr.w	r9, [r4]
 800cb22:	1a82      	subs	r2, r0, r2
 800cb24:	f04f 3bff 	mov.w	fp, #4294967295
 800cb28:	e015      	b.n	800cb56 <GUIMONO_DispChar+0x56>
 800cb2a:	68a2      	ldr	r2, [r4, #8]
 800cb2c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	f000 8081 	beq.w	800cc38 <GUIMONO_DispChar+0x138>
 800cb36:	8816      	ldrh	r6, [r2, #0]
 800cb38:	42b0      	cmp	r0, r6
 800cb3a:	d37d      	bcc.n	800cc38 <GUIMONO_DispChar+0x138>
 800cb3c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800cb40:	4584      	cmp	ip, r0
 800cb42:	d379      	bcc.n	800cc38 <GUIMONO_DispChar+0x138>
 800cb44:	6852      	ldr	r2, [r2, #4]
 800cb46:	1b80      	subs	r0, r0, r6
 800cb48:	b280      	uxth	r0, r0
 800cb4a:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 800cb4e:	f932 2020 	ldrsh.w	r2, [r2, r0, lsl #2]
 800cb52:	f9b6 b002 	ldrsh.w	fp, [r6, #2]
 800cb56:	1c50      	adds	r0, r2, #1
 800cb58:	d06e      	beq.n	800cc38 <GUIMONO_DispChar+0x138>
 800cb5a:	f891 8018 	ldrb.w	r8, [r1, #24]
 800cb5e:	7ca1      	ldrb	r1, [r4, #18]
 800cb60:	f8b3 a02a 	ldrh.w	sl, [r3, #42]	; 0x2a
 800cb64:	7c26      	ldrb	r6, [r4, #16]
 800cb66:	9206      	str	r2, [sp, #24]
 800cb68:	fb18 f101 	smulbb	r1, r8, r1
 800cb6c:	9107      	str	r1, [sp, #28]
 800cb6e:	fa0f f18a 	sxth.w	r1, sl
 800cb72:	4608      	mov	r0, r1
 800cb74:	9108      	str	r1, [sp, #32]
 800cb76:	f7fe fa6d 	bl	800b054 <LCD_SetDrawMode>
 800cb7a:	4934      	ldr	r1, [pc, #208]	; (800cc4c <GUIMONO_DispChar+0x14c>)
 800cb7c:	9009      	str	r0, [sp, #36]	; 0x24
 800cb7e:	680b      	ldr	r3, [r1, #0]
 800cb80:	9a06      	ldr	r2, [sp, #24]
 800cb82:	69d9      	ldr	r1, [r3, #28]
 800cb84:	7e88      	ldrb	r0, [r1, #26]
 800cb86:	9000      	str	r0, [sp, #0]
 800cb88:	7ec9      	ldrb	r1, [r1, #27]
 800cb8a:	9101      	str	r1, [sp, #4]
 800cb8c:	2101      	movs	r1, #1
 800cb8e:	9102      	str	r1, [sp, #8]
 800cb90:	7ca1      	ldrb	r1, [r4, #18]
 800cb92:	9103      	str	r1, [sp, #12]
 800cb94:	9907      	ldr	r1, [sp, #28]
 800cb96:	fb01 9202 	mla	r2, r1, r2, r9
 800cb9a:	9204      	str	r2, [sp, #16]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	9305      	str	r3, [sp, #20]
 800cba0:	b23f      	sxth	r7, r7
 800cba2:	b22d      	sxth	r5, r5
 800cba4:	4638      	mov	r0, r7
 800cba6:	4629      	mov	r1, r5
 800cba8:	4632      	mov	r2, r6
 800cbaa:	4643      	mov	r3, r8
 800cbac:	f7fe fbdc 	bl	800b368 <LCD_DrawBitmap>
 800cbb0:	f1bb 3fff 	cmp.w	fp, #4294967295
 800cbb4:	d01b      	beq.n	800cbee <GUIMONO_DispChar+0xee>
 800cbb6:	f04a 0002 	orr.w	r0, sl, #2
 800cbba:	b200      	sxth	r0, r0
 800cbbc:	f7fe fa4a 	bl	800b054 <LCD_SetDrawMode>
 800cbc0:	4a22      	ldr	r2, [pc, #136]	; (800cc4c <GUIMONO_DispChar+0x14c>)
 800cbc2:	6813      	ldr	r3, [r2, #0]
 800cbc4:	69da      	ldr	r2, [r3, #28]
 800cbc6:	7e91      	ldrb	r1, [r2, #26]
 800cbc8:	9100      	str	r1, [sp, #0]
 800cbca:	7ed2      	ldrb	r2, [r2, #27]
 800cbcc:	9201      	str	r2, [sp, #4]
 800cbce:	2101      	movs	r1, #1
 800cbd0:	9102      	str	r1, [sp, #8]
 800cbd2:	9907      	ldr	r1, [sp, #28]
 800cbd4:	7ca2      	ldrb	r2, [r4, #18]
 800cbd6:	9203      	str	r2, [sp, #12]
 800cbd8:	fb01 920b 	mla	r2, r1, fp, r9
 800cbdc:	9204      	str	r2, [sp, #16]
 800cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe0:	9305      	str	r3, [sp, #20]
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	4632      	mov	r2, r6
 800cbe8:	4643      	mov	r3, r8
 800cbea:	f7fe fbbd 	bl	800b368 <LCD_DrawBitmap>
 800cbee:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800cc4c <GUIMONO_DispChar+0x14c>
 800cbf2:	f8d8 3000 	ldr.w	r3, [r8]
 800cbf6:	69db      	ldr	r3, [r3, #28]
 800cbf8:	7e5a      	ldrb	r2, [r3, #25]
 800cbfa:	7e1b      	ldrb	r3, [r3, #24]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d917      	bls.n	800cc30 <GUIMONO_DispChar+0x130>
 800cc00:	9a08      	ldr	r2, [sp, #32]
 800cc02:	2a02      	cmp	r2, #2
 800cc04:	d014      	beq.n	800cc30 <GUIMONO_DispChar+0x130>
 800cc06:	f08a 0004 	eor.w	r0, sl, #4
 800cc0a:	b200      	sxth	r0, r0
 800cc0c:	f7fe fa22 	bl	800b054 <LCD_SetDrawMode>
 800cc10:	f8d8 3000 	ldr.w	r3, [r8]
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	f893 e018 	ldrb.w	lr, [r3, #24]
 800cc1a:	7ed9      	ldrb	r1, [r3, #27]
 800cc1c:	7e9a      	ldrb	r2, [r3, #26]
 800cc1e:	7e5b      	ldrb	r3, [r3, #25]
 800cc20:	4638      	mov	r0, r7
 800cc22:	fb0e 5101 	mla	r1, lr, r1, r5
 800cc26:	fb06 7202 	mla	r2, r6, r2, r7
 800cc2a:	442b      	add	r3, r5
 800cc2c:	f7fe fa94 	bl	800b158 <LCD_FillRect>
 800cc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc32:	b2d8      	uxtb	r0, r3
 800cc34:	f7fe fa0e 	bl	800b054 <LCD_SetDrawMode>
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <GUIMONO_DispChar+0x14c>)
 800cc3a:	7c61      	ldrb	r1, [r4, #17]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800cc40:	440a      	add	r2, r1
 800cc42:	845a      	strh	r2, [r3, #34]	; 0x22
 800cc44:	b00b      	add	sp, #44	; 0x2c
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	bf00      	nop
 800cc4c:	20000084 	.word	0x20000084

0800cc50 <GUIMONO_GetCharDistX>:
 800cc50:	4b04      	ldr	r3, [pc, #16]	; (800cc64 <GUIMONO_GetCharDistX+0x14>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	69db      	ldr	r3, [r3, #28]
 800cc56:	69db      	ldr	r3, [r3, #28]
 800cc58:	b109      	cbz	r1, 800cc5e <GUIMONO_GetCharDistX+0xe>
 800cc5a:	7c1a      	ldrb	r2, [r3, #16]
 800cc5c:	600a      	str	r2, [r1, #0]
 800cc5e:	7c58      	ldrb	r0, [r3, #17]
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000084 	.word	0x20000084

0800cc68 <GUIMONO_GetFontInfo>:
 800cc68:	2302      	movs	r3, #2
 800cc6a:	800b      	strh	r3, [r1, #0]
 800cc6c:	4770      	bx	lr

0800cc6e <GUIMONO_IsInFont>:
 800cc6e:	69c3      	ldr	r3, [r0, #28]
 800cc70:	899a      	ldrh	r2, [r3, #12]
 800cc72:	428a      	cmp	r2, r1
 800cc74:	d802      	bhi.n	800cc7c <GUIMONO_IsInFont+0xe>
 800cc76:	89da      	ldrh	r2, [r3, #14]
 800cc78:	428a      	cmp	r2, r1
 800cc7a:	d20f      	bcs.n	800cc9c <GUIMONO_IsInFont+0x2e>
 800cc7c:	6898      	ldr	r0, [r3, #8]
 800cc7e:	b180      	cbz	r0, 800cca2 <GUIMONO_IsInFont+0x34>
 800cc80:	8803      	ldrh	r3, [r0, #0]
 800cc82:	4299      	cmp	r1, r3
 800cc84:	d30c      	bcc.n	800cca0 <GUIMONO_IsInFont+0x32>
 800cc86:	8842      	ldrh	r2, [r0, #2]
 800cc88:	428a      	cmp	r2, r1
 800cc8a:	d309      	bcc.n	800cca0 <GUIMONO_IsInFont+0x32>
 800cc8c:	1ac9      	subs	r1, r1, r3
 800cc8e:	6842      	ldr	r2, [r0, #4]
 800cc90:	f832 0021 	ldrh.w	r0, [r2, r1, lsl #2]
 800cc94:	43c0      	mvns	r0, r0
 800cc96:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800cc9a:	4770      	bx	lr
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	4770      	bx	lr
 800cca0:	2000      	movs	r0, #0
 800cca2:	4770      	bx	lr

0800cca4 <_Log2VisBuffered>:
 800cca4:	4770      	bx	lr
	...

0800cca8 <_DispLine>:
 800cca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccaa:	4615      	mov	r5, r2
 800ccac:	ab02      	add	r3, sp, #8
 800ccae:	4a21      	ldr	r2, [pc, #132]	; (800cd34 <_DispLine+0x8c>)
 800ccb0:	f843 1d08 	str.w	r1, [r3, #-8]!
 800ccb4:	9001      	str	r0, [sp, #4]
 800ccb6:	6812      	ldr	r2, [r2, #0]
 800ccb8:	4c1f      	ldr	r4, [pc, #124]	; (800cd38 <_DispLine+0x90>)
 800ccba:	4669      	mov	r1, sp
 800ccbc:	4790      	blx	r2
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	9001      	str	r0, [sp, #4]
 800ccc2:	6958      	ldr	r0, [r3, #20]
 800ccc4:	b938      	cbnz	r0, 800ccd6 <_DispLine+0x2e>
 800ccc6:	2001      	movs	r0, #1
 800ccc8:	f7fe fed6 	bl	800ba78 <GUI__ManageCache>
 800cccc:	6822      	ldr	r2, [r4, #0]
 800ccce:	69d3      	ldr	r3, [r2, #28]
 800ccd0:	695b      	ldr	r3, [r3, #20]
 800ccd2:	b933      	cbnz	r3, 800cce2 <_DispLine+0x3a>
 800ccd4:	e023      	b.n	800cd1e <_DispLine+0x76>
 800ccd6:	4629      	mov	r1, r5
 800ccd8:	f7ff fdc2 	bl	800c860 <GUI_RectsIntersect>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	d1f2      	bne.n	800ccc6 <_DispLine+0x1e>
 800cce0:	e025      	b.n	800cd2e <_DispLine+0x86>
 800cce2:	4c16      	ldr	r4, [pc, #88]	; (800cd3c <_DispLine+0x94>)
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	6821      	ldr	r1, [r4, #0]
 800cce8:	b141      	cbz	r1, 800ccfc <_DispLine+0x54>
 800ccea:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800ccee:	9801      	ldr	r0, [sp, #4]
 800ccf0:	9900      	ldr	r1, [sp, #0]
 800ccf2:	4798      	blx	r3
 800ccf4:	6823      	ldr	r3, [r4, #0]
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	4798      	blx	r3
 800ccfa:	e015      	b.n	800cd28 <_DispLine+0x80>
 800ccfc:	9801      	ldr	r0, [sp, #4]
 800ccfe:	9900      	ldr	r1, [sp, #0]
 800cd00:	4798      	blx	r3
 800cd02:	e011      	b.n	800cd28 <_DispLine+0x80>
 800cd04:	a801      	add	r0, sp, #4
 800cd06:	f7ff f871 	bl	800bdec <GUI_UC__GetCharCodeInc>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4605      	mov	r5, r0
 800cd12:	4798      	blx	r3
 800cd14:	4b0a      	ldr	r3, [pc, #40]	; (800cd40 <_DispLine+0x98>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	b10b      	cbz	r3, 800cd1e <_DispLine+0x76>
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	4798      	blx	r3
 800cd1e:	9b00      	ldr	r3, [sp, #0]
 800cd20:	3b01      	subs	r3, #1
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	9300      	str	r3, [sp, #0]
 800cd26:	daed      	bge.n	800cd04 <_DispLine+0x5c>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	f7fe fea5 	bl	800ba78 <GUI__ManageCache>
 800cd2e:	b003      	add	sp, #12
 800cd30:	bd30      	pop	{r4, r5, pc}
 800cd32:	bf00      	nop
 800cd34:	20000090 	.word	0x20000090
 800cd38:	20000084 	.word	0x20000084
 800cd3c:	20004ac8 	.word	0x20004ac8
 800cd40:	20004ad8 	.word	0x20004ad8

0800cd44 <GUI__GetLineNumChars>:
 800cd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd46:	460d      	mov	r5, r1
 800cd48:	9001      	str	r0, [sp, #4]
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	b198      	cbz	r0, 800cd76 <GUI__GetLineNumChars+0x32>
 800cd4e:	4b0b      	ldr	r3, [pc, #44]	; (800cd7c <GUI__GetLineNumChars+0x38>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	b10b      	cbz	r3, 800cd5c <GUI__GetLineNumChars+0x18>
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	b90b      	cbnz	r3, 800cd60 <GUI__GetLineNumChars+0x1c>
 800cd5c:	2400      	movs	r4, #0
 800cd5e:	e008      	b.n	800cd72 <GUI__GetLineNumChars+0x2e>
 800cd60:	4798      	blx	r3
 800cd62:	e009      	b.n	800cd78 <GUI__GetLineNumChars+0x34>
 800cd64:	a801      	add	r0, sp, #4
 800cd66:	f7ff f841 	bl	800bdec <GUI_UC__GetCharCodeInc>
 800cd6a:	b120      	cbz	r0, 800cd76 <GUI__GetLineNumChars+0x32>
 800cd6c:	280a      	cmp	r0, #10
 800cd6e:	d002      	beq.n	800cd76 <GUI__GetLineNumChars+0x32>
 800cd70:	3401      	adds	r4, #1
 800cd72:	42ac      	cmp	r4, r5
 800cd74:	dbf6      	blt.n	800cd64 <GUI__GetLineNumChars+0x20>
 800cd76:	4620      	mov	r0, r4
 800cd78:	b003      	add	sp, #12
 800cd7a:	bd30      	pop	{r4, r5, pc}
 800cd7c:	20000084 	.word	0x20000084

0800cd80 <GUI__GetOverlap>:
 800cd80:	b513      	push	{r0, r1, r4, lr}
 800cd82:	a902      	add	r1, sp, #8
 800cd84:	2400      	movs	r4, #0
 800cd86:	f841 4d04 	str.w	r4, [r1, #-4]!
 800cd8a:	f000 f89f 	bl	800cecc <GUI_GetCharDistXEx>
 800cd8e:	9b01      	ldr	r3, [sp, #4]
 800cd90:	4283      	cmp	r3, r0
 800cd92:	bfcc      	ite	gt
 800cd94:	ebc0 0003 	rsbgt	r0, r0, r3
 800cd98:	4620      	movle	r0, r4
 800cd9a:	b002      	add	sp, #8
 800cd9c:	bd10      	pop	{r4, pc}
	...

0800cda0 <GUI__GetLineDistX>:
 800cda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda2:	4a15      	ldr	r2, [pc, #84]	; (800cdf8 <GUI__GetLineDistX+0x58>)
 800cda4:	9001      	str	r0, [sp, #4]
 800cda6:	ab02      	add	r3, sp, #8
 800cda8:	6812      	ldr	r2, [r2, #0]
 800cdaa:	f843 1d08 	str.w	r1, [r3, #-8]!
 800cdae:	4669      	mov	r1, sp
 800cdb0:	4790      	blx	r2
 800cdb2:	9001      	str	r0, [sp, #4]
 800cdb4:	b1f0      	cbz	r0, 800cdf4 <GUI__GetLineDistX+0x54>
 800cdb6:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <GUI__GetLineDistX+0x5c>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	b10b      	cbz	r3, 800cdc4 <GUI__GetLineDistX+0x24>
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	b913      	cbnz	r3, 800cdca <GUI__GetLineDistX+0x2a>
 800cdc4:	2500      	movs	r5, #0
 800cdc6:	462c      	mov	r4, r5
 800cdc8:	e002      	b.n	800cdd0 <GUI__GetLineDistX+0x30>
 800cdca:	9900      	ldr	r1, [sp, #0]
 800cdcc:	4798      	blx	r3
 800cdce:	e011      	b.n	800cdf4 <GUI__GetLineDistX+0x54>
 800cdd0:	9b00      	ldr	r3, [sp, #0]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	db07      	blt.n	800cdea <GUI__GetLineDistX+0x4a>
 800cdda:	a801      	add	r0, sp, #4
 800cddc:	f7ff f806 	bl	800bdec <GUI_UC__GetCharCodeInc>
 800cde0:	4605      	mov	r5, r0
 800cde2:	f000 f869 	bl	800ceb8 <GUI_GetCharDistX>
 800cde6:	4404      	add	r4, r0
 800cde8:	e7f2      	b.n	800cdd0 <GUI__GetLineDistX+0x30>
 800cdea:	4628      	mov	r0, r5
 800cdec:	f7ff ffc8 	bl	800cd80 <GUI__GetOverlap>
 800cdf0:	4420      	add	r0, r4
 800cdf2:	e7ff      	b.n	800cdf4 <GUI__GetLineDistX+0x54>
 800cdf4:	b003      	add	sp, #12
 800cdf6:	bd30      	pop	{r4, r5, pc}
 800cdf8:	20000090 	.word	0x20000090
 800cdfc:	20000084 	.word	0x20000084

0800ce00 <GUI__DispLine>:
 800ce00:	4b27      	ldr	r3, [pc, #156]	; (800cea0 <GUI__DispLine+0xa0>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce06:	4605      	mov	r5, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	b163      	cbz	r3, 800ce26 <GUI__DispLine+0x26>
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	f7fb fc4d 	bl	80086ac <WM__InitIVRSearch>
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d041      	beq.n	800ce9a <GUI__DispLine+0x9a>
 800ce16:	4628      	mov	r0, r5
 800ce18:	4621      	mov	r1, r4
 800ce1a:	466a      	mov	r2, sp
 800ce1c:	f7ff ff44 	bl	800cca8 <_DispLine>
 800ce20:	f7fb fb82 	bl	8008528 <WM__GetNextIVR>
 800ce24:	e7f5      	b.n	800ce12 <GUI__DispLine+0x12>
 800ce26:	6810      	ldr	r0, [r2, #0]
 800ce28:	6851      	ldr	r1, [r2, #4]
 800ce2a:	4e1e      	ldr	r6, [pc, #120]	; (800cea4 <GUI__DispLine+0xa4>)
 800ce2c:	466b      	mov	r3, sp
 800ce2e:	c303      	stmia	r3!, {r0, r1}
 800ce30:	6833      	ldr	r3, [r6, #0]
 800ce32:	f8bd 1000 	ldrh.w	r1, [sp]
 800ce36:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800ce3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce3e:	4411      	add	r1, r2
 800ce40:	f8ad 1000 	strh.w	r1, [sp]
 800ce44:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800ce48:	4419      	add	r1, r3
 800ce4a:	f8ad 1002 	strh.w	r1, [sp, #2]
 800ce4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800ce52:	440a      	add	r2, r1
 800ce54:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ce58:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ce5c:	4668      	mov	r0, sp
 800ce5e:	4413      	add	r3, r2
 800ce60:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ce64:	f7fb fc22 	bl	80086ac <WM__InitIVRSearch>
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	b940      	cbnz	r0, 800ce7e <GUI__DispLine+0x7e>
 800ce6c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800ce6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce70:	1a8a      	subs	r2, r1, r2
 800ce72:	845a      	strh	r2, [r3, #34]	; 0x22
 800ce74:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800ce76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce78:	1a8a      	subs	r2, r1, r2
 800ce7a:	849a      	strh	r2, [r3, #36]	; 0x24
 800ce7c:	e00d      	b.n	800ce9a <GUI__DispLine+0x9a>
 800ce7e:	f8bd 2000 	ldrh.w	r2, [sp]
 800ce82:	845a      	strh	r2, [r3, #34]	; 0x22
 800ce84:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800ce88:	849a      	strh	r2, [r3, #36]	; 0x24
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	4621      	mov	r1, r4
 800ce8e:	466a      	mov	r2, sp
 800ce90:	f7ff ff0a 	bl	800cca8 <_DispLine>
 800ce94:	f7fb fb48 	bl	8008528 <WM__GetNextIVR>
 800ce98:	e7e6      	b.n	800ce68 <GUI__DispLine+0x68>
 800ce9a:	b002      	add	sp, #8
 800ce9c:	bd70      	pop	{r4, r5, r6, pc}
 800ce9e:	bf00      	nop
 800cea0:	20004ab4 	.word	0x20004ab4
 800cea4:	20000084 	.word	0x20000084

0800cea8 <GUI_GetFontDistY>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	; (800ceb4 <GUI_GetFontDistY+0xc>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	7e58      	ldrb	r0, [r3, #25]
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20000084 	.word	0x20000084

0800ceb8 <GUI_GetCharDistX>:
 800ceb8:	b508      	push	{r3, lr}
 800ceba:	4b03      	ldr	r3, [pc, #12]	; (800cec8 <GUI_GetCharDistX+0x10>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	2100      	movs	r1, #0
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	4798      	blx	r3
 800cec6:	bd08      	pop	{r3, pc}
 800cec8:	20000084 	.word	0x20000084

0800cecc <GUI_GetCharDistXEx>:
 800cecc:	b508      	push	{r3, lr}
 800cece:	4b03      	ldr	r3, [pc, #12]	; (800cedc <GUI_GetCharDistXEx+0x10>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	69db      	ldr	r3, [r3, #28]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	4798      	blx	r3
 800ced8:	bd08      	pop	{r3, pc}
 800ceda:	bf00      	nop
 800cedc:	20000084 	.word	0x20000084

0800cee0 <_GetClipParam>:
 800cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cee2:	4f33      	ldr	r7, [pc, #204]	; (800cfb0 <_GetClipParam+0xd0>)
 800cee4:	9c07      	ldr	r4, [sp, #28]
 800cee6:	683f      	ldr	r7, [r7, #0]
 800cee8:	9e05      	ldr	r6, [sp, #20]
 800ceea:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 800ceee:	9d06      	ldr	r5, [sp, #24]
 800cef0:	ebc0 0c0c 	rsb	ip, r0, ip
 800cef4:	f1bc 0f00 	cmp.w	ip, #0
 800cef8:	bfc8      	it	gt
 800cefa:	f8c4 c00c 	strgt.w	ip, [r4, #12]
 800cefe:	f9b7 c00a 	ldrsh.w	ip, [r7, #10]
 800cf02:	ebc1 0c0c 	rsb	ip, r1, ip
 800cf06:	f1bc 0f00 	cmp.w	ip, #0
 800cf0a:	bfc8      	it	gt
 800cf0c:	f8c4 c010 	strgt.w	ip, [r4, #16]
 800cf10:	4410      	add	r0, r2
 800cf12:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 800cf16:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800cf1a:	3801      	subs	r0, #1
 800cf1c:	4419      	add	r1, r3
 800cf1e:	ebcc 0000 	rsb	r0, ip, r0
 800cf22:	3901      	subs	r1, #1
 800cf24:	2800      	cmp	r0, #0
 800cf26:	ebc2 0101 	rsb	r1, r2, r1
 800cf2a:	bfc8      	it	gt
 800cf2c:	60a0      	strgt	r0, [r4, #8]
 800cf2e:	2900      	cmp	r1, #0
 800cf30:	bfc8      	it	gt
 800cf32:	6161      	strgt	r1, [r4, #20]
 800cf34:	2e08      	cmp	r6, #8
 800cf36:	d024      	beq.n	800cf82 <_GetClipParam+0xa2>
 800cf38:	dc04      	bgt.n	800cf44 <_GetClipParam+0x64>
 800cf3a:	2e01      	cmp	r6, #1
 800cf3c:	d00f      	beq.n	800cf5e <_GetClipParam+0x7e>
 800cf3e:	2e04      	cmp	r6, #4
 800cf40:	d016      	beq.n	800cf70 <_GetClipParam+0x90>
 800cf42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf44:	2e18      	cmp	r6, #24
 800cf46:	d021      	beq.n	800cf8c <_GetClipParam+0xac>
 800cf48:	2e20      	cmp	r6, #32
 800cf4a:	d028      	beq.n	800cf9e <_GetClipParam+0xbe>
 800cf4c:	2e10      	cmp	r6, #16
 800cf4e:	d12e      	bne.n	800cfae <_GetClipParam+0xce>
 800cf50:	68e3      	ldr	r3, [r4, #12]
 800cf52:	68a2      	ldr	r2, [r4, #8]
 800cf54:	005b      	lsls	r3, r3, #1
 800cf56:	6023      	str	r3, [r4, #0]
 800cf58:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 800cf5c:	e025      	b.n	800cfaa <_GetClipParam+0xca>
 800cf5e:	68e3      	ldr	r3, [r4, #12]
 800cf60:	10db      	asrs	r3, r3, #3
 800cf62:	00da      	lsls	r2, r3, #3
 800cf64:	60e2      	str	r2, [r4, #12]
 800cf66:	68a2      	ldr	r2, [r4, #8]
 800cf68:	6023      	str	r3, [r4, #0]
 800cf6a:	eba5 05e2 	sub.w	r5, r5, r2, asr #3
 800cf6e:	e01c      	b.n	800cfaa <_GetClipParam+0xca>
 800cf70:	68e3      	ldr	r3, [r4, #12]
 800cf72:	105b      	asrs	r3, r3, #1
 800cf74:	005a      	lsls	r2, r3, #1
 800cf76:	60e2      	str	r2, [r4, #12]
 800cf78:	68a2      	ldr	r2, [r4, #8]
 800cf7a:	6023      	str	r3, [r4, #0]
 800cf7c:	eba5 0562 	sub.w	r5, r5, r2, asr #1
 800cf80:	e013      	b.n	800cfaa <_GetClipParam+0xca>
 800cf82:	68a2      	ldr	r2, [r4, #8]
 800cf84:	68e3      	ldr	r3, [r4, #12]
 800cf86:	6023      	str	r3, [r4, #0]
 800cf88:	1aad      	subs	r5, r5, r2
 800cf8a:	e00e      	b.n	800cfaa <_GetClipParam+0xca>
 800cf8c:	68e3      	ldr	r3, [r4, #12]
 800cf8e:	68a2      	ldr	r2, [r4, #8]
 800cf90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf94:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
 800cf98:	6023      	str	r3, [r4, #0]
 800cf9a:	4415      	add	r5, r2
 800cf9c:	e005      	b.n	800cfaa <_GetClipParam+0xca>
 800cf9e:	68e3      	ldr	r3, [r4, #12]
 800cfa0:	68a2      	ldr	r2, [r4, #8]
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	6023      	str	r3, [r4, #0]
 800cfa6:	eba5 0582 	sub.w	r5, r5, r2, lsl #2
 800cfaa:	1aeb      	subs	r3, r5, r3
 800cfac:	6063      	str	r3, [r4, #4]
 800cfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb0:	20000084 	.word	0x20000084

0800cfb4 <_GetBitfieldsPara>:
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	600b      	str	r3, [r1, #0]
 800cfb8:	07c3      	lsls	r3, r0, #31
 800cfba:	d403      	bmi.n	800cfc4 <_GetBitfieldsPara+0x10>
 800cfbc:	680b      	ldr	r3, [r1, #0]
 800cfbe:	0840      	lsrs	r0, r0, #1
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	e7f8      	b.n	800cfb6 <_GetBitfieldsPara+0x2>
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	07c3      	lsls	r3, r0, #31
 800cfca:	d503      	bpl.n	800cfd4 <_GetBitfieldsPara+0x20>
 800cfcc:	6813      	ldr	r3, [r2, #0]
 800cfce:	0840      	lsrs	r0, r0, #1
 800cfd0:	3301      	adds	r3, #1
 800cfd2:	e7f8      	b.n	800cfc6 <_GetBitfieldsPara+0x12>
 800cfd4:	4770      	bx	lr

0800cfd6 <_DrawLine_RGB>:
 800cfd6:	6983      	ldr	r3, [r0, #24]
 800cfd8:	b513      	push	{r0, r1, r4, lr}
 800cfda:	4604      	mov	r4, r0
 800cfdc:	b1c3      	cbz	r3, 800d010 <_DrawLine_RGB+0x3a>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	6063      	str	r3, [r4, #4]
 800cfe2:	6863      	ldr	r3, [r4, #4]
 800cfe4:	68e2      	ldr	r2, [r4, #12]
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	da2b      	bge.n	800d042 <_DrawLine_RGB+0x6c>
 800cfea:	6921      	ldr	r1, [r4, #16]
 800cfec:	6822      	ldr	r2, [r4, #0]
 800cfee:	a802      	add	r0, sp, #8
 800cff0:	fb01 2303 	mla	r3, r1, r3, r2
 800cff4:	f840 3d04 	str.w	r3, [r0, #-4]!
 800cff8:	f7fe fc28 	bl	800b84c <GUI__Read32>
 800cffc:	69a3      	ldr	r3, [r4, #24]
 800cffe:	4798      	blx	r3
 800d000:	6963      	ldr	r3, [r4, #20]
 800d002:	4798      	blx	r3
 800d004:	69e3      	ldr	r3, [r4, #28]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	4798      	blx	r3
 800d00a:	6863      	ldr	r3, [r4, #4]
 800d00c:	3301      	adds	r3, #1
 800d00e:	e7e7      	b.n	800cfe0 <_DrawLine_RGB+0xa>
 800d010:	6063      	str	r3, [r4, #4]
 800d012:	6863      	ldr	r3, [r4, #4]
 800d014:	68e2      	ldr	r2, [r4, #12]
 800d016:	4293      	cmp	r3, r2
 800d018:	da13      	bge.n	800d042 <_DrawLine_RGB+0x6c>
 800d01a:	6922      	ldr	r2, [r4, #16]
 800d01c:	6821      	ldr	r1, [r4, #0]
 800d01e:	435a      	muls	r2, r3
 800d020:	188b      	adds	r3, r1, r2
 800d022:	9301      	str	r3, [sp, #4]
 800d024:	7858      	ldrb	r0, [r3, #1]
 800d026:	5c8a      	ldrb	r2, [r1, r2]
 800d028:	0200      	lsls	r0, r0, #8
 800d02a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d02e:	789a      	ldrb	r2, [r3, #2]
 800d030:	6963      	ldr	r3, [r4, #20]
 800d032:	4310      	orrs	r0, r2
 800d034:	4798      	blx	r3
 800d036:	69e3      	ldr	r3, [r4, #28]
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	4798      	blx	r3
 800d03c:	6863      	ldr	r3, [r4, #4]
 800d03e:	3301      	adds	r3, #1
 800d040:	e7e6      	b.n	800d010 <_DrawLine_RGB+0x3a>
 800d042:	68a3      	ldr	r3, [r4, #8]
 800d044:	b113      	cbz	r3, 800d04c <_DrawLine_RGB+0x76>
 800d046:	69e3      	ldr	r3, [r4, #28]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	4798      	blx	r3
 800d04c:	b002      	add	sp, #8
 800d04e:	bd10      	pop	{r4, pc}

0800d050 <_NextPixel_FlushBuffer>:
 800d050:	b530      	push	{r4, r5, lr}
 800d052:	4c10      	ldr	r4, [pc, #64]	; (800d094 <_NextPixel_FlushBuffer+0x44>)
 800d054:	6a22      	ldr	r2, [r4, #32]
 800d056:	b089      	sub	sp, #36	; 0x24
 800d058:	2101      	movs	r1, #1
 800d05a:	428a      	cmp	r2, r1
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	9306      	str	r3, [sp, #24]
 800d062:	9202      	str	r2, [sp, #8]
 800d064:	bf08      	it	eq
 800d066:	ab06      	addeq	r3, sp, #24
 800d068:	6962      	ldr	r2, [r4, #20]
 800d06a:	9305      	str	r3, [sp, #20]
 800d06c:	2500      	movs	r5, #0
 800d06e:	9100      	str	r1, [sp, #0]
 800d070:	9101      	str	r1, [sp, #4]
 800d072:	9503      	str	r5, [sp, #12]
 800d074:	9204      	str	r2, [sp, #16]
 800d076:	1d20      	adds	r0, r4, #4
 800d078:	9107      	str	r1, [sp, #28]
 800d07a:	2301      	movs	r3, #1
 800d07c:	c807      	ldmia	r0, {r0, r1, r2}
 800d07e:	f7fe f973 	bl	800b368 <LCD_DrawBitmap>
 800d082:	6862      	ldr	r2, [r4, #4]
 800d084:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d086:	62a5      	str	r5, [r4, #40]	; 0x28
 800d088:	4413      	add	r3, r2
 800d08a:	6063      	str	r3, [r4, #4]
 800d08c:	6963      	ldr	r3, [r4, #20]
 800d08e:	61a3      	str	r3, [r4, #24]
 800d090:	b009      	add	sp, #36	; 0x24
 800d092:	bd30      	pop	{r4, r5, pc}
 800d094:	20002b44 	.word	0x20002b44

0800d098 <_NextPixel_NextLine>:
 800d098:	b510      	push	{r4, lr}
 800d09a:	4c06      	ldr	r4, [pc, #24]	; (800d0b4 <_NextPixel_NextLine+0x1c>)
 800d09c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d09e:	b10b      	cbz	r3, 800d0a4 <_NextPixel_NextLine+0xc>
 800d0a0:	f7ff ffd6 	bl	800d050 <_NextPixel_FlushBuffer>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	6063      	str	r3, [r4, #4]
 800d0a8:	68a3      	ldr	r3, [r4, #8]
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	60a3      	str	r3, [r4, #8]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0b2:	bd10      	pop	{r4, pc}
 800d0b4:	20002b44 	.word	0x20002b44

0800d0b8 <_NextPixel_SetPixel>:
 800d0b8:	4b33      	ldr	r3, [pc, #204]	; (800d188 <_NextPixel_SetPixel+0xd0>)
 800d0ba:	69da      	ldr	r2, [r3, #28]
 800d0bc:	2a02      	cmp	r2, #2
 800d0be:	b570      	push	{r4, r5, r6, lr}
 800d0c0:	d04e      	beq.n	800d160 <_NextPixel_SetPixel+0xa8>
 800d0c2:	2a04      	cmp	r2, #4
 800d0c4:	d050      	beq.n	800d168 <_NextPixel_SetPixel+0xb0>
 800d0c6:	2a01      	cmp	r2, #1
 800d0c8:	d152      	bne.n	800d170 <_NextPixel_SetPixel+0xb8>
 800d0ca:	6a19      	ldr	r1, [r3, #32]
 800d0cc:	699a      	ldr	r2, [r3, #24]
 800d0ce:	3901      	subs	r1, #1
 800d0d0:	2907      	cmp	r1, #7
 800d0d2:	d84d      	bhi.n	800d170 <_NextPixel_SetPixel+0xb8>
 800d0d4:	e8df f001 	tbb	[pc, r1]
 800d0d8:	264c1504 	.word	0x264c1504
 800d0dc:	404c4c4c 	.word	0x404c4c4c
 800d0e0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d0e2:	7816      	ldrb	r6, [r2, #0]
 800d0e4:	4928      	ldr	r1, [pc, #160]	; (800d188 <_NextPixel_SetPixel+0xd0>)
 800d0e6:	f1c4 0407 	rsb	r4, r4, #7
 800d0ea:	2501      	movs	r5, #1
 800d0ec:	40a5      	lsls	r5, r4
 800d0ee:	ea26 0505 	bic.w	r5, r6, r5
 800d0f2:	fa00 f404 	lsl.w	r4, r0, r4
 800d0f6:	ea45 0004 	orr.w	r0, r5, r4
 800d0fa:	7010      	strb	r0, [r2, #0]
 800d0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fe:	3201      	adds	r2, #1
 800d100:	e020      	b.n	800d144 <_NextPixel_SetPixel+0x8c>
 800d102:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d104:	7816      	ldrb	r6, [r2, #0]
 800d106:	4920      	ldr	r1, [pc, #128]	; (800d188 <_NextPixel_SetPixel+0xd0>)
 800d108:	f1c4 0406 	rsb	r4, r4, #6
 800d10c:	2503      	movs	r5, #3
 800d10e:	40a5      	lsls	r5, r4
 800d110:	ea26 0505 	bic.w	r5, r6, r5
 800d114:	fa00 f404 	lsl.w	r4, r0, r4
 800d118:	ea45 0004 	orr.w	r0, r5, r4
 800d11c:	7010      	strb	r0, [r2, #0]
 800d11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d120:	3202      	adds	r2, #2
 800d122:	e00f      	b.n	800d144 <_NextPixel_SetPixel+0x8c>
 800d124:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800d126:	7816      	ldrb	r6, [r2, #0]
 800d128:	4917      	ldr	r1, [pc, #92]	; (800d188 <_NextPixel_SetPixel+0xd0>)
 800d12a:	f1c4 0404 	rsb	r4, r4, #4
 800d12e:	250f      	movs	r5, #15
 800d130:	40a5      	lsls	r5, r4
 800d132:	ea26 0505 	bic.w	r5, r6, r5
 800d136:	fa00 f404 	lsl.w	r4, r0, r4
 800d13a:	ea45 0004 	orr.w	r0, r5, r4
 800d13e:	7010      	strb	r0, [r2, #0]
 800d140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d142:	3204      	adds	r2, #4
 800d144:	2a08      	cmp	r2, #8
 800d146:	d001      	beq.n	800d14c <_NextPixel_SetPixel+0x94>
 800d148:	62ca      	str	r2, [r1, #44]	; 0x2c
 800d14a:	e011      	b.n	800d170 <_NextPixel_SetPixel+0xb8>
 800d14c:	2200      	movs	r2, #0
 800d14e:	62ca      	str	r2, [r1, #44]	; 0x2c
 800d150:	698a      	ldr	r2, [r1, #24]
 800d152:	3201      	adds	r2, #1
 800d154:	618a      	str	r2, [r1, #24]
 800d156:	e00b      	b.n	800d170 <_NextPixel_SetPixel+0xb8>
 800d158:	7010      	strb	r0, [r2, #0]
 800d15a:	699a      	ldr	r2, [r3, #24]
 800d15c:	3201      	adds	r2, #1
 800d15e:	e006      	b.n	800d16e <_NextPixel_SetPixel+0xb6>
 800d160:	699a      	ldr	r2, [r3, #24]
 800d162:	f822 0b02 	strh.w	r0, [r2], #2
 800d166:	e002      	b.n	800d16e <_NextPixel_SetPixel+0xb6>
 800d168:	699a      	ldr	r2, [r3, #24]
 800d16a:	f842 0b04 	str.w	r0, [r2], #4
 800d16e:	619a      	str	r2, [r3, #24]
 800d170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d172:	3201      	adds	r2, #1
 800d174:	629a      	str	r2, [r3, #40]	; 0x28
 800d176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d178:	429a      	cmp	r2, r3
 800d17a:	d103      	bne.n	800d184 <_NextPixel_SetPixel+0xcc>
 800d17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d180:	f7ff bf66 	b.w	800d050 <_NextPixel_FlushBuffer>
 800d184:	bd70      	pop	{r4, r5, r6, pc}
 800d186:	bf00      	nop
 800d188:	20002b44 	.word	0x20002b44

0800d18c <_NextPixel_End>:
 800d18c:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <_NextPixel_End+0x20>)
 800d18e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d190:	b510      	push	{r4, lr}
 800d192:	461c      	mov	r4, r3
 800d194:	b10a      	cbz	r2, 800d19a <_NextPixel_End+0xe>
 800d196:	f7ff ff5b 	bl	800d050 <_NextPixel_FlushBuffer>
 800d19a:	4805      	ldr	r0, [pc, #20]	; (800d1b0 <_NextPixel_End+0x24>)
 800d19c:	f000 fe00 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800d1a0:	6920      	ldr	r0, [r4, #16]
 800d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a6:	f000 be27 	b.w	800ddf8 <GUI_ALLOC_Free>
 800d1aa:	bf00      	nop
 800d1ac:	20002b44 	.word	0x20002b44
 800d1b0:	20002b58 	.word	0x20002b58

0800d1b4 <_NextPixel_Start>:
 800d1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b8:	469a      	mov	sl, r3
 800d1ba:	4b1f      	ldr	r3, [pc, #124]	; (800d238 <_NextPixel_Start+0x84>)
 800d1bc:	4c1f      	ldr	r4, [pc, #124]	; (800d23c <_NextPixel_Start+0x88>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	1a12      	subs	r2, r2, r0
 800d1c2:	3201      	adds	r2, #1
 800d1c4:	4606      	mov	r6, r0
 800d1c6:	7c58      	ldrb	r0, [r3, #17]
 800d1c8:	60e2      	str	r2, [r4, #12]
 800d1ca:	f7fd fe83 	bl	800aed4 <GUI_GetBitsPerPixelEx>
 800d1ce:	2817      	cmp	r0, #23
 800d1d0:	bfc8      	it	gt
 800d1d2:	2020      	movgt	r0, #32
 800d1d4:	2808      	cmp	r0, #8
 800d1d6:	6220      	str	r0, [r4, #32]
 800d1d8:	dd04      	ble.n	800d1e4 <_NextPixel_Start+0x30>
 800d1da:	2810      	cmp	r0, #16
 800d1dc:	bfcc      	ite	gt
 800d1de:	2504      	movgt	r5, #4
 800d1e0:	2502      	movle	r5, #2
 800d1e2:	e000      	b.n	800d1e6 <_NextPixel_Start+0x32>
 800d1e4:	2501      	movs	r5, #1
 800d1e6:	68e3      	ldr	r3, [r4, #12]
 800d1e8:	f8df 9050 	ldr.w	r9, [pc, #80]	; 800d23c <_NextPixel_Start+0x88>
 800d1ec:	fb03 f805 	mul.w	r8, r3, r5
 800d1f0:	f000 feea 	bl	800dfc8 <GUI_ALLOC_GetMaxSize>
 800d1f4:	4540      	cmp	r0, r8
 800d1f6:	bf3a      	itte	cc
 800d1f8:	fbb0 f0f5 	udivcc	r0, r0, r5
 800d1fc:	4368      	mulcc	r0, r5
 800d1fe:	4640      	movcs	r0, r8
 800d200:	fb90 f0f5 	sdiv	r0, r0, r5
 800d204:	6260      	str	r0, [r4, #36]	; 0x24
 800d206:	2700      	movs	r7, #0
 800d208:	4640      	mov	r0, r8
 800d20a:	62a7      	str	r7, [r4, #40]	; 0x28
 800d20c:	6066      	str	r6, [r4, #4]
 800d20e:	6026      	str	r6, [r4, #0]
 800d210:	f8c4 a008 	str.w	sl, [r4, #8]
 800d214:	61e5      	str	r5, [r4, #28]
 800d216:	62e7      	str	r7, [r4, #44]	; 0x2c
 800d218:	f000 ff80 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800d21c:	6120      	str	r0, [r4, #16]
 800d21e:	b140      	cbz	r0, 800d232 <_NextPixel_Start+0x7e>
 800d220:	f000 fdb0 	bl	800dd84 <GUI_ALLOC_LockH>
 800d224:	f8c9 0014 	str.w	r0, [r9, #20]
 800d228:	f8c9 0018 	str.w	r0, [r9, #24]
 800d22c:	4638      	mov	r0, r7
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	2001      	movs	r0, #1
 800d234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d238:	20000084 	.word	0x20000084
 800d23c:	20002b44 	.word	0x20002b44

0800d240 <_GetEarlyOut.isra.0>:
 800d240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d244:	6807      	ldr	r7, [r0, #0]
 800d246:	680e      	ldr	r6, [r1, #0]
 800d248:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d24c:	9c08      	ldr	r4, [sp, #32]
 800d24e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800d252:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d254:	eb07 0906 	add.w	r9, r7, r6
 800d258:	681f      	ldr	r7, [r3, #0]
 800d25a:	f8c0 9000 	str.w	r9, [r0]
 800d25e:	2f00      	cmp	r7, #0
 800d260:	dd04      	ble.n	800d26c <_GetEarlyOut.isra.0+0x2c>
 800d262:	3f01      	subs	r7, #1
 800d264:	6027      	str	r7, [r4, #0]
 800d266:	f04f 37ff 	mov.w	r7, #4294967295
 800d26a:	e005      	b.n	800d278 <_GetEarlyOut.isra.0+0x38>
 800d26c:	d004      	beq.n	800d278 <_GetEarlyOut.isra.0+0x38>
 800d26e:	427f      	negs	r7, r7
 800d270:	2600      	movs	r6, #0
 800d272:	601f      	str	r7, [r3, #0]
 800d274:	6026      	str	r6, [r4, #0]
 800d276:	2701      	movs	r7, #1
 800d278:	f8c8 7000 	str.w	r7, [r8]
 800d27c:	2f00      	cmp	r7, #0
 800d27e:	d032      	beq.n	800d2e6 <_GetEarlyOut.isra.0+0xa6>
 800d280:	690f      	ldr	r7, [r1, #16]
 800d282:	694e      	ldr	r6, [r1, #20]
 800d284:	443e      	add	r6, r7
 800d286:	681f      	ldr	r7, [r3, #0]
 800d288:	1bbe      	subs	r6, r7, r6
 800d28a:	2e00      	cmp	r6, #0
 800d28c:	601e      	str	r6, [r3, #0]
 800d28e:	dd2a      	ble.n	800d2e6 <_GetEarlyOut.isra.0+0xa6>
 800d290:	f8d8 3000 	ldr.w	r3, [r8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	da08      	bge.n	800d2aa <_GetEarlyOut.isra.0+0x6a>
 800d298:	694b      	ldr	r3, [r1, #20]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	dd0e      	ble.n	800d2bc <_GetEarlyOut.isra.0+0x7c>
 800d29e:	fb03 9605 	mla	r6, r3, r5, r9
 800d2a2:	6006      	str	r6, [r0, #0]
 800d2a4:	6820      	ldr	r0, [r4, #0]
 800d2a6:	1ac3      	subs	r3, r0, r3
 800d2a8:	e007      	b.n	800d2ba <_GetEarlyOut.isra.0+0x7a>
 800d2aa:	690b      	ldr	r3, [r1, #16]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	dd05      	ble.n	800d2bc <_GetEarlyOut.isra.0+0x7c>
 800d2b0:	fb03 9605 	mla	r6, r3, r5, r9
 800d2b4:	6006      	str	r6, [r0, #0]
 800d2b6:	6820      	ldr	r0, [r4, #0]
 800d2b8:	4403      	add	r3, r0
 800d2ba:	6023      	str	r3, [r4, #0]
 800d2bc:	6888      	ldr	r0, [r1, #8]
 800d2be:	68cb      	ldr	r3, [r1, #12]
 800d2c0:	4403      	add	r3, r0
 800d2c2:	6810      	ldr	r0, [r2, #0]
 800d2c4:	1ac3      	subs	r3, r0, r3
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	dd0c      	ble.n	800d2e6 <_GetEarlyOut.isra.0+0xa6>
 800d2cc:	f8dc 2000 	ldr.w	r2, [ip]
 800d2d0:	68cb      	ldr	r3, [r1, #12]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	f8cc 3000 	str.w	r3, [ip]
 800d2d8:	684b      	ldr	r3, [r1, #4]
 800d2da:	1aed      	subs	r5, r5, r3
 800d2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2de:	2000      	movs	r0, #0
 800d2e0:	601d      	str	r5, [r3, #0]
 800d2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d2ec <GUI_BMP__ReadData>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	b10b      	cbz	r3, 800d2f8 <GUI_BMP__ReadData+0xc>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	6043      	str	r3, [r0, #4]
 800d2f8:	4611      	mov	r1, r2
 800d2fa:	6826      	ldr	r6, [r4, #0]
 800d2fc:	68a0      	ldr	r0, [r4, #8]
 800d2fe:	6863      	ldr	r3, [r4, #4]
 800d300:	462a      	mov	r2, r5
 800d302:	47b0      	blx	r6
 800d304:	42a8      	cmp	r0, r5
 800d306:	d104      	bne.n	800d312 <GUI_BMP__ReadData+0x26>
 800d308:	6863      	ldr	r3, [r4, #4]
 800d30a:	441d      	add	r5, r3
 800d30c:	6065      	str	r5, [r4, #4]
 800d30e:	2000      	movs	r0, #0
 800d310:	bd70      	pop	{r4, r5, r6, pc}
 800d312:	2001      	movs	r0, #1
 800d314:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d318 <GUI_BMP__ReadPalette>:
 800d318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d31a:	4606      	mov	r6, r0
 800d31c:	460d      	mov	r5, r1
 800d31e:	2400      	movs	r4, #0
 800d320:	42ac      	cmp	r4, r5
 800d322:	da17      	bge.n	800d354 <GUI_BMP__ReadPalette+0x3c>
 800d324:	2104      	movs	r1, #4
 800d326:	4630      	mov	r0, r6
 800d328:	eb0d 0201 	add.w	r2, sp, r1
 800d32c:	2300      	movs	r3, #0
 800d32e:	f7ff ffdd 	bl	800d2ec <GUI_BMP__ReadData>
 800d332:	b988      	cbnz	r0, 800d358 <GUI_BMP__ReadPalette+0x40>
 800d334:	9b01      	ldr	r3, [sp, #4]
 800d336:	4a0a      	ldr	r2, [pc, #40]	; (800d360 <GUI_BMP__ReadPalette+0x48>)
 800d338:	7858      	ldrb	r0, [r3, #1]
 800d33a:	6817      	ldr	r7, [r2, #0]
 800d33c:	781a      	ldrb	r2, [r3, #0]
 800d33e:	789b      	ldrb	r3, [r3, #2]
 800d340:	0200      	lsls	r0, r0, #8
 800d342:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d346:	4318      	orrs	r0, r3
 800d348:	f7fe f97e 	bl	800b648 <LCD_Color2Index>
 800d34c:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 800d350:	3401      	adds	r4, #1
 800d352:	e7e5      	b.n	800d320 <GUI_BMP__ReadPalette+0x8>
 800d354:	2000      	movs	r0, #0
 800d356:	e000      	b.n	800d35a <GUI_BMP__ReadPalette+0x42>
 800d358:	2001      	movs	r0, #1
 800d35a:	b003      	add	sp, #12
 800d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35e:	bf00      	nop
 800d360:	20004bfc 	.word	0x20004bfc

0800d364 <_ManageBitfields.part.2>:
 800d364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d366:	2300      	movs	r3, #0
 800d368:	2110      	movs	r1, #16
 800d36a:	aa01      	add	r2, sp, #4
 800d36c:	f7ff ffbe 	bl	800d2ec <GUI_BMP__ReadData>
 800d370:	4605      	mov	r5, r0
 800d372:	bb10      	cbnz	r0, 800d3ba <_ManageBitfields.part.2+0x56>
 800d374:	a801      	add	r0, sp, #4
 800d376:	f7fe fa69 	bl	800b84c <GUI__Read32>
 800d37a:	4c12      	ldr	r4, [pc, #72]	; (800d3c4 <_ManageBitfields.part.2+0x60>)
 800d37c:	6020      	str	r0, [r4, #0]
 800d37e:	a801      	add	r0, sp, #4
 800d380:	f7fe fa64 	bl	800b84c <GUI__Read32>
 800d384:	6060      	str	r0, [r4, #4]
 800d386:	a801      	add	r0, sp, #4
 800d388:	f7fe fa60 	bl	800b84c <GUI__Read32>
 800d38c:	4621      	mov	r1, r4
 800d38e:	60a0      	str	r0, [r4, #8]
 800d390:	f104 0218 	add.w	r2, r4, #24
 800d394:	f851 0b0c 	ldr.w	r0, [r1], #12
 800d398:	f7ff fe0c 	bl	800cfb4 <_GetBitfieldsPara>
 800d39c:	6860      	ldr	r0, [r4, #4]
 800d39e:	f104 0110 	add.w	r1, r4, #16
 800d3a2:	f104 021c 	add.w	r2, r4, #28
 800d3a6:	f7ff fe05 	bl	800cfb4 <_GetBitfieldsPara>
 800d3aa:	68a0      	ldr	r0, [r4, #8]
 800d3ac:	f104 0114 	add.w	r1, r4, #20
 800d3b0:	f104 0220 	add.w	r2, r4, #32
 800d3b4:	f7ff fdfe 	bl	800cfb4 <_GetBitfieldsPara>
 800d3b8:	e000      	b.n	800d3bc <_ManageBitfields.part.2+0x58>
 800d3ba:	2501      	movs	r5, #1
 800d3bc:	4628      	mov	r0, r5
 800d3be:	b003      	add	sp, #12
 800d3c0:	bd30      	pop	{r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20002b74 	.word	0x20002b74

0800d3c8 <_Index2ColorBitfields>:
 800d3c8:	4b15      	ldr	r3, [pc, #84]	; (800d420 <_Index2ColorBitfields+0x58>)
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	6919      	ldr	r1, [r3, #16]
 800d3ce:	4002      	ands	r2, r0
 800d3d0:	40ca      	lsrs	r2, r1
 800d3d2:	69d9      	ldr	r1, [r3, #28]
 800d3d4:	b530      	push	{r4, r5, lr}
 800d3d6:	ebc2 2502 	rsb	r5, r2, r2, lsl #8
 800d3da:	2201      	movs	r2, #1
 800d3dc:	fa02 f101 	lsl.w	r1, r2, r1
 800d3e0:	3901      	subs	r1, #1
 800d3e2:	fbb5 f5f1 	udiv	r5, r5, r1
 800d3e6:	6899      	ldr	r1, [r3, #8]
 800d3e8:	695c      	ldr	r4, [r3, #20]
 800d3ea:	4001      	ands	r1, r0
 800d3ec:	40e1      	lsrs	r1, r4
 800d3ee:	6a1c      	ldr	r4, [r3, #32]
 800d3f0:	fa02 f404 	lsl.w	r4, r2, r4
 800d3f4:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800d3f8:	3c01      	subs	r4, #1
 800d3fa:	fbb1 f4f4 	udiv	r4, r1, r4
 800d3fe:	0424      	lsls	r4, r4, #16
 800d400:	6819      	ldr	r1, [r3, #0]
 800d402:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800d406:	68dc      	ldr	r4, [r3, #12]
 800d408:	699b      	ldr	r3, [r3, #24]
 800d40a:	4001      	ands	r1, r0
 800d40c:	40e1      	lsrs	r1, r4
 800d40e:	409a      	lsls	r2, r3
 800d410:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800d414:	3a01      	subs	r2, #1
 800d416:	fbb1 f0f2 	udiv	r0, r1, r2
 800d41a:	4328      	orrs	r0, r5
 800d41c:	bd30      	pop	{r4, r5, pc}
 800d41e:	bf00      	nop
 800d420:	20002b74 	.word	0x20002b74

0800d424 <_DrawBitmap_RGB>:
 800d424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d428:	b09d      	sub	sp, #116	; 0x74
 800d42a:	af0a      	add	r7, sp, #40	; 0x28
 800d42c:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
 800d430:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800d434:	9107      	str	r1, [sp, #28]
 800d436:	4606      	mov	r6, r0
 800d438:	468a      	mov	sl, r1
 800d43a:	4614      	mov	r4, r2
 800d43c:	2100      	movs	r1, #0
 800d43e:	2218      	movs	r2, #24
 800d440:	4638      	mov	r0, r7
 800d442:	469b      	mov	fp, r3
 800d444:	9306      	str	r3, [sp, #24]
 800d446:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d448:	f003 fe5e 	bl	8011108 <memset>
 800d44c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800d450:	e88d 0208 	stmia.w	sp, {r3, r9}
 800d454:	4650      	mov	r0, sl
 800d456:	4621      	mov	r1, r4
 800d458:	465a      	mov	r2, fp
 800d45a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d45c:	9702      	str	r7, [sp, #8]
 800d45e:	f7ff fd3f 	bl	800cee0 <_GetClipParam>
 800d462:	ab07      	add	r3, sp, #28
 800d464:	9300      	str	r3, [sp, #0]
 800d466:	ab12      	add	r3, sp, #72	; 0x48
 800d468:	9301      	str	r3, [sp, #4]
 800d46a:	ab08      	add	r3, sp, #32
 800d46c:	9302      	str	r3, [sp, #8]
 800d46e:	ab09      	add	r3, sp, #36	; 0x24
 800d470:	9303      	str	r3, [sp, #12]
 800d472:	f8cd 9010 	str.w	r9, [sp, #16]
 800d476:	1d30      	adds	r0, r6, #4
 800d478:	4639      	mov	r1, r7
 800d47a:	aa06      	add	r2, sp, #24
 800d47c:	ab26      	add	r3, sp, #152	; 0x98
 800d47e:	f7ff fedf 	bl	800d240 <_GetEarlyOut.isra.0>
 800d482:	b108      	cbz	r0, 800d488 <_DrawBitmap_RGB+0x64>
 800d484:	2400      	movs	r4, #0
 800d486:	e04e      	b.n	800d526 <_DrawBitmap_RGB+0x102>
 800d488:	4b29      	ldr	r3, [pc, #164]	; (800d530 <_DrawBitmap_RGB+0x10c>)
 800d48a:	4f2a      	ldr	r7, [pc, #168]	; (800d534 <_DrawBitmap_RGB+0x110>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	7c58      	ldrb	r0, [r3, #17]
 800d490:	f7fd fd4e 	bl	800af30 <GUI_GetpfColor2IndexEx>
 800d494:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d496:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 800d538 <_DrawBitmap_RGB+0x114>
 800d49a:	9015      	str	r0, [sp, #84]	; 0x54
 800d49c:	42bd      	cmp	r5, r7
 800d49e:	9316      	str	r3, [sp, #88]	; 0x58
 800d4a0:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 800d4a4:	9807      	ldr	r0, [sp, #28]
 800d4a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d4a8:	9a06      	ldr	r2, [sp, #24]
 800d4aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d4ac:	d109      	bne.n	800d4c2 <_DrawBitmap_RGB+0x9e>
 800d4ae:	4421      	add	r1, r4
 800d4b0:	4402      	add	r2, r0
 800d4b2:	440b      	add	r3, r1
 800d4b4:	f8de 4000 	ldr.w	r4, [lr]
 800d4b8:	3a01      	subs	r2, #1
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	47a0      	blx	r4
 800d4be:	b148      	cbz	r0, 800d4d4 <_DrawBitmap_RGB+0xb0>
 800d4c0:	e01b      	b.n	800d4fa <_DrawBitmap_RGB+0xd6>
 800d4c2:	440c      	add	r4, r1
 800d4c4:	9419      	str	r4, [sp, #100]	; 0x64
 800d4c6:	4402      	add	r2, r0
 800d4c8:	441c      	add	r4, r3
 800d4ca:	3a01      	subs	r2, #1
 800d4cc:	3c01      	subs	r4, #1
 800d4ce:	9018      	str	r0, [sp, #96]	; 0x60
 800d4d0:	921a      	str	r2, [sp, #104]	; 0x68
 800d4d2:	941b      	str	r4, [sp, #108]	; 0x6c
 800d4d4:	9b06      	ldr	r3, [sp, #24]
 800d4d6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d4d8:	2300      	movs	r3, #0
 800d4da:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d4de:	9311      	str	r3, [sp, #68]	; 0x44
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d4e4:	aa10      	add	r2, sp, #64	; 0x40
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f7ff ff00 	bl	800d2ec <GUI_BMP__ReadData>
 800d4ec:	4604      	mov	r4, r0
 800d4ee:	b130      	cbz	r0, 800d4fe <_DrawBitmap_RGB+0xda>
 800d4f0:	42bd      	cmp	r5, r7
 800d4f2:	d102      	bne.n	800d4fa <_DrawBitmap_RGB+0xd6>
 800d4f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	4798      	blx	r3
 800d4fa:	2401      	movs	r4, #1
 800d4fc:	e013      	b.n	800d526 <_DrawBitmap_RGB+0x102>
 800d4fe:	a810      	add	r0, sp, #64	; 0x40
 800d500:	47a8      	blx	r5
 800d502:	6872      	ldr	r2, [r6, #4]
 800d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d506:	4413      	add	r3, r2
 800d508:	6073      	str	r3, [r6, #4]
 800d50a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d50c:	9b08      	ldr	r3, [sp, #32]
 800d50e:	4413      	add	r3, r2
 800d510:	9312      	str	r3, [sp, #72]	; 0x48
 800d512:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d514:	3b01      	subs	r3, #1
 800d516:	9326      	str	r3, [sp, #152]	; 0x98
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e1      	bne.n	800d4e0 <_DrawBitmap_RGB+0xbc>
 800d51c:	42bd      	cmp	r5, r7
 800d51e:	d1b1      	bne.n	800d484 <_DrawBitmap_RGB+0x60>
 800d520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	4798      	blx	r3
 800d526:	4620      	mov	r0, r4
 800d528:	b01d      	add	sp, #116	; 0x74
 800d52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d52e:	bf00      	nop
 800d530:	20000084 	.word	0x20000084
 800d534:	0800cfd7 	.word	0x0800cfd7
 800d538:	20000098 	.word	0x20000098

0800d53c <_DrawBitmap_16bpp>:
 800d53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d540:	461f      	mov	r7, r3
 800d542:	b093      	sub	sp, #76	; 0x4c
 800d544:	ea4f 1807 	mov.w	r8, r7, lsl #4
 800d548:	ac0c      	add	r4, sp, #48	; 0x30
 800d54a:	f108 081f 	add.w	r8, r8, #31
 800d54e:	4605      	mov	r5, r0
 800d550:	4689      	mov	r9, r1
 800d552:	9107      	str	r1, [sp, #28]
 800d554:	4616      	mov	r6, r2
 800d556:	2100      	movs	r1, #0
 800d558:	2218      	movs	r2, #24
 800d55a:	4620      	mov	r0, r4
 800d55c:	ea4f 1868 	mov.w	r8, r8, asr #5
 800d560:	9306      	str	r3, [sp, #24]
 800d562:	f003 fdd1 	bl	8011108 <memset>
 800d566:	463a      	mov	r2, r7
 800d568:	2310      	movs	r3, #16
 800d56a:	ea4f 0788 	mov.w	r7, r8, lsl #2
 800d56e:	e88d 0088 	stmia.w	sp, {r3, r7}
 800d572:	4648      	mov	r0, r9
 800d574:	4631      	mov	r1, r6
 800d576:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d578:	9402      	str	r4, [sp, #8]
 800d57a:	f7ff fcb1 	bl	800cee0 <_GetClipParam>
 800d57e:	ab07      	add	r3, sp, #28
 800d580:	9300      	str	r3, [sp, #0]
 800d582:	ab09      	add	r3, sp, #36	; 0x24
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	ab0a      	add	r3, sp, #40	; 0x28
 800d588:	9302      	str	r3, [sp, #8]
 800d58a:	ab0b      	add	r3, sp, #44	; 0x2c
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	9704      	str	r7, [sp, #16]
 800d590:	1d28      	adds	r0, r5, #4
 800d592:	4621      	mov	r1, r4
 800d594:	aa06      	add	r2, sp, #24
 800d596:	ab1a      	add	r3, sp, #104	; 0x68
 800d598:	f7ff fe52 	bl	800d240 <_GetEarlyOut.isra.0>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d142      	bne.n	800d626 <_DrawBitmap_16bpp+0xea>
 800d5a0:	4b23      	ldr	r3, [pc, #140]	; (800d630 <_DrawBitmap_16bpp+0xf4>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	7c58      	ldrb	r0, [r3, #17]
 800d5a6:	f7fd fcbb 	bl	800af20 <LCD_GetpfColor2IndexEx>
 800d5aa:	4607      	mov	r7, r0
 800d5ac:	b908      	cbnz	r0, 800d5b2 <_DrawBitmap_16bpp+0x76>
 800d5ae:	2401      	movs	r4, #1
 800d5b0:	e03a      	b.n	800d628 <_DrawBitmap_16bpp+0xec>
 800d5b2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d5b4:	9807      	ldr	r0, [sp, #28]
 800d5b6:	9a06      	ldr	r2, [sp, #24]
 800d5b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d5ba:	4431      	add	r1, r6
 800d5bc:	4e1d      	ldr	r6, [pc, #116]	; (800d634 <_DrawBitmap_16bpp+0xf8>)
 800d5be:	4402      	add	r2, r0
 800d5c0:	440b      	add	r3, r1
 800d5c2:	6834      	ldr	r4, [r6, #0]
 800d5c4:	3a01      	subs	r2, #1
 800d5c6:	3b01      	subs	r3, #1
 800d5c8:	47a0      	blx	r4
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d1ef      	bne.n	800d5ae <_DrawBitmap_16bpp+0x72>
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d5d2:	aa08      	add	r2, sp, #32
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f7ff fe89 	bl	800d2ec <GUI_BMP__ReadData>
 800d5da:	4604      	mov	r4, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d1e6      	bne.n	800d5ae <_DrawBitmap_16bpp+0x72>
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	9b06      	ldr	r3, [sp, #24]
 800d5e4:	4598      	cmp	r8, r3
 800d5e6:	da0a      	bge.n	800d5fe <_DrawBitmap_16bpp+0xc2>
 800d5e8:	a808      	add	r0, sp, #32
 800d5ea:	f7fe f927 	bl	800b83c <GUI__Read16>
 800d5ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d5f0:	4798      	blx	r3
 800d5f2:	47b8      	blx	r7
 800d5f4:	6873      	ldr	r3, [r6, #4]
 800d5f6:	4798      	blx	r3
 800d5f8:	f108 0801 	add.w	r8, r8, #1
 800d5fc:	e7f1      	b.n	800d5e2 <_DrawBitmap_16bpp+0xa6>
 800d5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d600:	b10b      	cbz	r3, 800d606 <_DrawBitmap_16bpp+0xca>
 800d602:	68b3      	ldr	r3, [r6, #8]
 800d604:	4798      	blx	r3
 800d606:	686a      	ldr	r2, [r5, #4]
 800d608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d60a:	4413      	add	r3, r2
 800d60c:	606b      	str	r3, [r5, #4]
 800d60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d612:	4413      	add	r3, r2
 800d614:	9309      	str	r3, [sp, #36]	; 0x24
 800d616:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d618:	3b01      	subs	r3, #1
 800d61a:	931a      	str	r3, [sp, #104]	; 0x68
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d1d6      	bne.n	800d5ce <_DrawBitmap_16bpp+0x92>
 800d620:	68f3      	ldr	r3, [r6, #12]
 800d622:	4798      	blx	r3
 800d624:	e000      	b.n	800d628 <_DrawBitmap_16bpp+0xec>
 800d626:	2400      	movs	r4, #0
 800d628:	4620      	mov	r0, r4
 800d62a:	b013      	add	sp, #76	; 0x4c
 800d62c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d630:	20000084 	.word	0x20000084
 800d634:	20000098 	.word	0x20000098

0800d638 <GUI_BMP__Init>:
 800d638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d63c:	468b      	mov	fp, r1
 800d63e:	4692      	mov	sl, r2
 800d640:	4698      	mov	r8, r3
 800d642:	2136      	movs	r1, #54	; 0x36
 800d644:	aa01      	add	r2, sp, #4
 800d646:	2301      	movs	r3, #1
 800d648:	4605      	mov	r5, r0
 800d64a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d64c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d64e:	f7ff fe4d 	bl	800d2ec <GUI_BMP__ReadData>
 800d652:	2800      	cmp	r0, #0
 800d654:	d15e      	bne.n	800d714 <GUI_BMP__Init+0xdc>
 800d656:	a801      	add	r0, sp, #4
 800d658:	f7fe f8f0 	bl	800b83c <GUI__Read16>
 800d65c:	9b01      	ldr	r3, [sp, #4]
 800d65e:	4681      	mov	r9, r0
 800d660:	330c      	adds	r3, #12
 800d662:	a801      	add	r0, sp, #4
 800d664:	9301      	str	r3, [sp, #4]
 800d666:	f7fe f8f1 	bl	800b84c <GUI__Read32>
 800d66a:	4607      	mov	r7, r0
 800d66c:	a801      	add	r0, sp, #4
 800d66e:	f7fe f8ed 	bl	800b84c <GUI__Read32>
 800d672:	f8cb 0000 	str.w	r0, [fp]
 800d676:	a801      	add	r0, sp, #4
 800d678:	f7fe f8e8 	bl	800b84c <GUI__Read32>
 800d67c:	9b01      	ldr	r3, [sp, #4]
 800d67e:	f8ca 0000 	str.w	r0, [sl]
 800d682:	3302      	adds	r3, #2
 800d684:	a801      	add	r0, sp, #4
 800d686:	9301      	str	r3, [sp, #4]
 800d688:	f7fe f8d8 	bl	800b83c <GUI__Read16>
 800d68c:	f8a8 0000 	strh.w	r0, [r8]
 800d690:	a801      	add	r0, sp, #4
 800d692:	f7fe f8db 	bl	800b84c <GUI__Read32>
 800d696:	9b01      	ldr	r3, [sp, #4]
 800d698:	6030      	str	r0, [r6, #0]
 800d69a:	330c      	adds	r3, #12
 800d69c:	a801      	add	r0, sp, #4
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	f7fe f8d4 	bl	800b84c <GUI__Read32>
 800d6a4:	f8b8 3000 	ldrh.w	r3, [r8]
 800d6a8:	2b08      	cmp	r3, #8
 800d6aa:	d00f      	beq.n	800d6cc <GUI_BMP__Init+0x94>
 800d6ac:	d805      	bhi.n	800d6ba <GUI_BMP__Init+0x82>
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d00a      	beq.n	800d6c8 <GUI_BMP__Init+0x90>
 800d6b2:	2b04      	cmp	r3, #4
 800d6b4:	d12e      	bne.n	800d714 <GUI_BMP__Init+0xdc>
 800d6b6:	2310      	movs	r3, #16
 800d6b8:	e00c      	b.n	800d6d4 <GUI_BMP__Init+0x9c>
 800d6ba:	2b18      	cmp	r3, #24
 800d6bc:	d009      	beq.n	800d6d2 <GUI_BMP__Init+0x9a>
 800d6be:	2b20      	cmp	r3, #32
 800d6c0:	d007      	beq.n	800d6d2 <GUI_BMP__Init+0x9a>
 800d6c2:	2b10      	cmp	r3, #16
 800d6c4:	d126      	bne.n	800d714 <GUI_BMP__Init+0xdc>
 800d6c6:	e004      	b.n	800d6d2 <GUI_BMP__Init+0x9a>
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	e003      	b.n	800d6d4 <GUI_BMP__Init+0x9c>
 800d6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6d0:	e000      	b.n	800d6d4 <GUI_BMP__Init+0x9c>
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	6823      	ldr	r3, [r4, #0]
 800d6d8:	b10b      	cbz	r3, 800d6de <GUI_BMP__Init+0xa6>
 800d6da:	b100      	cbz	r0, 800d6de <GUI_BMP__Init+0xa6>
 800d6dc:	6020      	str	r0, [r4, #0]
 800d6de:	6833      	ldr	r3, [r6, #0]
 800d6e0:	2b03      	cmp	r3, #3
 800d6e2:	d105      	bne.n	800d6f0 <GUI_BMP__Init+0xb8>
 800d6e4:	4628      	mov	r0, r5
 800d6e6:	f7ff fe3d 	bl	800d364 <_ManageBitfields.part.2>
 800d6ea:	686b      	ldr	r3, [r5, #4]
 800d6ec:	3b38      	subs	r3, #56	; 0x38
 800d6ee:	e001      	b.n	800d6f4 <GUI_BMP__Init+0xbc>
 800d6f0:	686b      	ldr	r3, [r5, #4]
 800d6f2:	3b28      	subs	r3, #40	; 0x28
 800d6f4:	441f      	add	r7, r3
 800d6f6:	6823      	ldr	r3, [r4, #0]
 800d6f8:	606f      	str	r7, [r5, #4]
 800d6fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6fe:	dc09      	bgt.n	800d714 <GUI_BMP__Init+0xdc>
 800d700:	f644 5342 	movw	r3, #19778	; 0x4d42
 800d704:	4599      	cmp	r9, r3
 800d706:	d105      	bne.n	800d714 <GUI_BMP__Init+0xdc>
 800d708:	6830      	ldr	r0, [r6, #0]
 800d70a:	2803      	cmp	r0, #3
 800d70c:	bf94      	ite	ls
 800d70e:	2000      	movls	r0, #0
 800d710:	2001      	movhi	r0, #1
 800d712:	e000      	b.n	800d716 <GUI_BMP__Init+0xde>
 800d714:	2001      	movs	r0, #1
 800d716:	b003      	add	sp, #12
 800d718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d71c <GUI_BMP_DrawEx>:
 800d71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d720:	b0a5      	sub	sp, #148	; 0x94
 800d722:	461d      	mov	r5, r3
 800d724:	ab10      	add	r3, sp, #64	; 0x40
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	ab11      	add	r3, sp, #68	; 0x44
 800d72a:	901b      	str	r0, [sp, #108]	; 0x6c
 800d72c:	911d      	str	r1, [sp, #116]	; 0x74
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	4617      	mov	r7, r2
 800d732:	a81b      	add	r0, sp, #108	; 0x6c
 800d734:	a90e      	add	r1, sp, #56	; 0x38
 800d736:	aa0f      	add	r2, sp, #60	; 0x3c
 800d738:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800d73c:	f7ff ff7c 	bl	800d638 <GUI_BMP__Init>
 800d740:	4604      	mov	r4, r0
 800d742:	2800      	cmp	r0, #0
 800d744:	f040 8229 	bne.w	800db9a <GUI_BMP_DrawEx+0x47e>
 800d748:	4b9e      	ldr	r3, [pc, #632]	; (800d9c4 <GUI_BMP_DrawEx+0x2a8>)
 800d74a:	6819      	ldr	r1, [r3, #0]
 800d74c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800d74e:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800d750:	eb05 0803 	add.w	r8, r5, r3
 800d754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d756:	f8ad 8066 	strh.w	r8, [sp, #102]	; 0x66
 800d75a:	4407      	add	r7, r0
 800d75c:	3b01      	subs	r3, #1
 800d75e:	443b      	add	r3, r7
 800d760:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
 800d764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d766:	f8ad 7064 	strh.w	r7, [sp, #100]	; 0x64
 800d76a:	3b01      	subs	r3, #1
 800d76c:	4443      	add	r3, r8
 800d76e:	a819      	add	r0, sp, #100	; 0x64
 800d770:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
 800d774:	f7fa ff9a 	bl	80086ac <WM__InitIVRSearch>
 800d778:	2800      	cmp	r0, #0
 800d77a:	f000 8215 	beq.w	800dba8 <GUI_BMP_DrawEx+0x48c>
 800d77e:	9408      	str	r4, [sp, #32]
 800d780:	46a1      	mov	r9, r4
 800d782:	9a08      	ldr	r2, [sp, #32]
 800d784:	b15a      	cbz	r2, 800d79e <GUI_BMP_DrawEx+0x82>
 800d786:	ab10      	add	r3, sp, #64	; 0x40
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	ab11      	add	r3, sp, #68	; 0x44
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	a81b      	add	r0, sp, #108	; 0x6c
 800d790:	a90e      	add	r1, sp, #56	; 0x38
 800d792:	aa0f      	add	r2, sp, #60	; 0x3c
 800d794:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800d798:	f7ff ff4e 	bl	800d638 <GUI_BMP__Init>
 800d79c:	4681      	mov	r9, r0
 800d79e:	f1b9 0f00 	cmp.w	r9, #0
 800d7a2:	f040 81f0 	bne.w	800db86 <GUI_BMP_DrawEx+0x46a>
 800d7a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d7a8:	9307      	str	r3, [sp, #28]
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	f200 81eb 	bhi.w	800db86 <GUI_BMP_DrawEx+0x46a>
 800d7b0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d7b4:	00a40004 	.word	0x00a40004
 800d7b8:	01cd00a4 	.word	0x01cd00a4
 800d7bc:	f8bd 4036 	ldrh.w	r4, [sp, #54]	; 0x36
 800d7c0:	2c08      	cmp	r4, #8
 800d7c2:	d012      	beq.n	800d7ea <GUI_BMP_DrawEx+0xce>
 800d7c4:	d805      	bhi.n	800d7d2 <GUI_BMP_DrawEx+0xb6>
 800d7c6:	2c01      	cmp	r4, #1
 800d7c8:	d00f      	beq.n	800d7ea <GUI_BMP_DrawEx+0xce>
 800d7ca:	2c04      	cmp	r4, #4
 800d7cc:	f040 81d9 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d7d0:	e00b      	b.n	800d7ea <GUI_BMP_DrawEx+0xce>
 800d7d2:	2c18      	cmp	r4, #24
 800d7d4:	d071      	beq.n	800d8ba <GUI_BMP_DrawEx+0x19e>
 800d7d6:	2c20      	cmp	r4, #32
 800d7d8:	f000 8084 	beq.w	800d8e4 <GUI_BMP_DrawEx+0x1c8>
 800d7dc:	2c10      	cmp	r4, #16
 800d7de:	f040 81d0 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d7e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	4b78      	ldr	r3, [pc, #480]	; (800d9c8 <GUI_BMP_DrawEx+0x2ac>)
 800d7e8:	e1c3      	b.n	800db72 <GUI_BMP_DrawEx+0x456>
 800d7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d7ee:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7f0:	ae1e      	add	r6, sp, #120	; 0x78
 800d7f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d7f4:	9712      	str	r7, [sp, #72]	; 0x48
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	2218      	movs	r2, #24
 800d7fc:	9314      	str	r3, [sp, #80]	; 0x50
 800d7fe:	f003 fc83 	bl	8011108 <memset>
 800d802:	a81b      	add	r0, sp, #108	; 0x6c
 800d804:	4629      	mov	r1, r5
 800d806:	f7ff fd87 	bl	800d318 <GUI_BMP__ReadPalette>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	f040 81b9 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d810:	2c04      	cmp	r4, #4
 800d812:	d005      	beq.n	800d820 <GUI_BMP_DrawEx+0x104>
 800d814:	2c08      	cmp	r4, #8
 800d816:	d009      	beq.n	800d82c <GUI_BMP_DrawEx+0x110>
 800d818:	2c01      	cmp	r4, #1
 800d81a:	d10c      	bne.n	800d836 <GUI_BMP_DrawEx+0x11a>
 800d81c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d81e:	e001      	b.n	800d824 <GUI_BMP_DrawEx+0x108>
 800d820:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d822:	00ad      	lsls	r5, r5, #2
 800d824:	351f      	adds	r5, #31
 800d826:	116d      	asrs	r5, r5, #5
 800d828:	00ad      	lsls	r5, r5, #2
 800d82a:	e005      	b.n	800d838 <GUI_BMP_DrawEx+0x11c>
 800d82c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800d82e:	3503      	adds	r5, #3
 800d830:	f025 0503 	bic.w	r5, r5, #3
 800d834:	e000      	b.n	800d838 <GUI_BMP_DrawEx+0x11c>
 800d836:	4605      	mov	r5, r0
 800d838:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d83a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d83c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d83e:	4641      	mov	r1, r8
 800d840:	e88d 0070 	stmia.w	sp, {r4, r5, r6}
 800d844:	f7ff fb4c 	bl	800cee0 <_GetClipParam>
 800d848:	ab12      	add	r3, sp, #72	; 0x48
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	ab16      	add	r3, sp, #88	; 0x58
 800d84e:	9301      	str	r3, [sp, #4]
 800d850:	ab17      	add	r3, sp, #92	; 0x5c
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	ab18      	add	r3, sp, #96	; 0x60
 800d856:	9303      	str	r3, [sp, #12]
 800d858:	9504      	str	r5, [sp, #16]
 800d85a:	a81c      	add	r0, sp, #112	; 0x70
 800d85c:	4631      	mov	r1, r6
 800d85e:	aa13      	add	r2, sp, #76	; 0x4c
 800d860:	ab14      	add	r3, sp, #80	; 0x50
 800d862:	f7ff fced 	bl	800d240 <_GetEarlyOut.isra.0>
 800d866:	2800      	cmp	r0, #0
 800d868:	f040 818d 	bne.w	800db86 <GUI_BMP_DrawEx+0x46a>
 800d86c:	a81b      	add	r0, sp, #108	; 0x6c
 800d86e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800d870:	aa15      	add	r2, sp, #84	; 0x54
 800d872:	2300      	movs	r3, #0
 800d874:	f7ff fd3a 	bl	800d2ec <GUI_BMP__ReadData>
 800d878:	2800      	cmp	r0, #0
 800d87a:	f040 8182 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d87e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d880:	9204      	str	r2, [sp, #16]
 800d882:	2301      	movs	r3, #1
 800d884:	4a51      	ldr	r2, [pc, #324]	; (800d9cc <GUI_BMP_DrawEx+0x2b0>)
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	9303      	str	r3, [sp, #12]
 800d88c:	9402      	str	r4, [sp, #8]
 800d88e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d890:	6812      	ldr	r2, [r2, #0]
 800d892:	9205      	str	r2, [sp, #20]
 800d894:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d898:	4441      	add	r1, r8
 800d89a:	f7fd fd65 	bl	800b368 <LCD_DrawBitmap>
 800d89e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d8a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d8a2:	4413      	add	r3, r2
 800d8a4:	931c      	str	r3, [sp, #112]	; 0x70
 800d8a6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d8a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8aa:	4413      	add	r3, r2
 800d8ac:	9316      	str	r3, [sp, #88]	; 0x58
 800d8ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	9314      	str	r3, [sp, #80]	; 0x50
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d1d9      	bne.n	800d86c <GUI_BMP_DrawEx+0x150>
 800d8b8:	e165      	b.n	800db86 <GUI_BMP_DrawEx+0x46a>
 800d8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8be:	9200      	str	r2, [sp, #0]
 800d8c0:	435c      	muls	r4, r3
 800d8c2:	341f      	adds	r4, #31
 800d8c4:	1164      	asrs	r4, r4, #5
 800d8c6:	2203      	movs	r2, #3
 800d8c8:	00a4      	lsls	r4, r4, #2
 800d8ca:	9202      	str	r2, [sp, #8]
 800d8cc:	9401      	str	r4, [sp, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	9203      	str	r2, [sp, #12]
 800d8d2:	4a3f      	ldr	r2, [pc, #252]	; (800d9d0 <GUI_BMP_DrawEx+0x2b4>)
 800d8d4:	9204      	str	r2, [sp, #16]
 800d8d6:	a81b      	add	r0, sp, #108	; 0x6c
 800d8d8:	4639      	mov	r1, r7
 800d8da:	4642      	mov	r2, r8
 800d8dc:	f7ff fda2 	bl	800d424 <_DrawBitmap_RGB>
 800d8e0:	4681      	mov	r9, r0
 800d8e2:	e150      	b.n	800db86 <GUI_BMP_DrawEx+0x46a>
 800d8e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d8e8:	9200      	str	r2, [sp, #0]
 800d8ea:	009a      	lsls	r2, r3, #2
 800d8ec:	9201      	str	r2, [sp, #4]
 800d8ee:	2204      	movs	r2, #4
 800d8f0:	9202      	str	r2, [sp, #8]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	9203      	str	r2, [sp, #12]
 800d8f6:	4a37      	ldr	r2, [pc, #220]	; (800d9d4 <GUI_BMP_DrawEx+0x2b8>)
 800d8f8:	6812      	ldr	r2, [r2, #0]
 800d8fa:	e7eb      	b.n	800d8d4 <GUI_BMP_DrawEx+0x1b8>
 800d8fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d900:	4b30      	ldr	r3, [pc, #192]	; (800d9c4 <GUI_BMP_DrawEx+0x2a8>)
 800d902:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d90a:	a81b      	add	r0, sp, #108	; 0x6c
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d910:	f7ff fd02 	bl	800d318 <GUI_BMP__ReadPalette>
 800d914:	2800      	cmp	r0, #0
 800d916:	f040 8134 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d91a:	4445      	add	r5, r8
 800d91c:	3d01      	subs	r5, #1
 800d91e:	463c      	mov	r4, r7
 800d920:	a81b      	add	r0, sp, #108	; 0x6c
 800d922:	2102      	movs	r1, #2
 800d924:	aa1e      	add	r2, sp, #120	; 0x78
 800d926:	2300      	movs	r3, #0
 800d928:	f7ff fce0 	bl	800d2ec <GUI_BMP__ReadData>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	f040 8128 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d932:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	921e      	str	r2, [sp, #120]	; 0x78
 800d938:	f893 b000 	ldrb.w	fp, [r3]
 800d93c:	785e      	ldrb	r6, [r3, #1]
 800d93e:	f1bb 0f00 	cmp.w	fp, #0
 800d942:	f040 80c6 	bne.w	800dad2 <GUI_BMP_DrawEx+0x3b6>
 800d946:	2e01      	cmp	r6, #1
 800d948:	d019      	beq.n	800d97e <GUI_BMP_DrawEx+0x262>
 800d94a:	d302      	bcc.n	800d952 <GUI_BMP_DrawEx+0x236>
 800d94c:	2e02      	cmp	r6, #2
 800d94e:	d043      	beq.n	800d9d8 <GUI_BMP_DrawEx+0x2bc>
 800d950:	e062      	b.n	800da18 <GUI_BMP_DrawEx+0x2fc>
 800d952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d954:	443a      	add	r2, r7
 800d956:	3a01      	subs	r2, #1
 800d958:	4294      	cmp	r4, r2
 800d95a:	da0a      	bge.n	800d972 <GUI_BMP_DrawEx+0x256>
 800d95c:	4b1b      	ldr	r3, [pc, #108]	; (800d9cc <GUI_BMP_DrawEx+0x2b0>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	6819      	ldr	r1, [r3, #0]
 800d962:	4b18      	ldr	r3, [pc, #96]	; (800d9c4 <GUI_BMP_DrawEx+0x2a8>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d968:	4620      	mov	r0, r4
 800d96a:	6019      	str	r1, [r3, #0]
 800d96c:	4629      	mov	r1, r5
 800d96e:	f7fd fba7 	bl	800b0c0 <LCD_DrawHLine>
 800d972:	3d01      	subs	r5, #1
 800d974:	4545      	cmp	r5, r8
 800d976:	f2c0 8104 	blt.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d97a:	46ba      	mov	sl, r7
 800d97c:	e0e5      	b.n	800db4a <GUI_BMP_DrawEx+0x42e>
 800d97e:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d982:	4e10      	ldr	r6, [pc, #64]	; (800d9c4 <GUI_BMP_DrawEx+0x2a8>)
 800d984:	44ba      	add	sl, r7
 800d986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d98a:	4554      	cmp	r4, sl
 800d98c:	da0a      	bge.n	800d9a4 <GUI_BMP_DrawEx+0x288>
 800d98e:	4b0f      	ldr	r3, [pc, #60]	; (800d9cc <GUI_BMP_DrawEx+0x2b0>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	6833      	ldr	r3, [r6, #0]
 800d996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d998:	4620      	mov	r0, r4
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	4629      	mov	r1, r5
 800d99e:	4652      	mov	r2, sl
 800d9a0:	f7fd fb8e 	bl	800b0c0 <LCD_DrawHLine>
 800d9a4:	4545      	cmp	r5, r8
 800d9a6:	f340 80fa 	ble.w	800db9e <GUI_BMP_DrawEx+0x482>
 800d9aa:	4b08      	ldr	r3, [pc, #32]	; (800d9cc <GUI_BMP_DrawEx+0x2b0>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	6833      	ldr	r3, [r6, #0]
 800d9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	4641      	mov	r1, r8
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	1e6b      	subs	r3, r5, #1
 800d9be:	f7fd fbcb 	bl	800b158 <LCD_FillRect>
 800d9c2:	e0ec      	b.n	800db9e <GUI_BMP_DrawEx+0x482>
 800d9c4:	20000084 	.word	0x20000084
 800d9c8:	0800e165 	.word	0x0800e165
 800d9cc:	20004bfc 	.word	0x20004bfc
 800d9d0:	0800cfd7 	.word	0x0800cfd7
 800d9d4:	20000094 	.word	0x20000094
 800d9d8:	a81b      	add	r0, sp, #108	; 0x6c
 800d9da:	4631      	mov	r1, r6
 800d9dc:	aa1e      	add	r2, sp, #120	; 0x78
 800d9de:	465b      	mov	r3, fp
 800d9e0:	f7ff fc84 	bl	800d2ec <GUI_BMP__ReadData>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	f040 80cc 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800d9ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	921e      	str	r2, [sp, #120]	; 0x78
 800d9f0:	f893 a000 	ldrb.w	sl, [r3]
 800d9f4:	785e      	ldrb	r6, [r3, #1]
 800d9f6:	4b6e      	ldr	r3, [pc, #440]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	4b6d      	ldr	r3, [pc, #436]	; (800dbb4 <GUI_BMP_DrawEx+0x498>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da02:	1bae      	subs	r6, r5, r6
 800da04:	44a2      	add	sl, r4
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	4620      	mov	r0, r4
 800da0a:	462b      	mov	r3, r5
 800da0c:	4631      	mov	r1, r6
 800da0e:	4652      	mov	r2, sl
 800da10:	f7fd fba2 	bl	800b158 <LCD_FillRect>
 800da14:	4635      	mov	r5, r6
 800da16:	e098      	b.n	800db4a <GUI_BMP_DrawEx+0x42e>
 800da18:	9a07      	ldr	r2, [sp, #28]
 800da1a:	2a02      	cmp	r2, #2
 800da1c:	d12a      	bne.n	800da74 <GUI_BMP_DrawEx+0x358>
 800da1e:	1c73      	adds	r3, r6, #1
 800da20:	ea4f 0a63 	mov.w	sl, r3, asr #1
 800da24:	930a      	str	r3, [sp, #40]	; 0x28
 800da26:	a81b      	add	r0, sp, #108	; 0x6c
 800da28:	4651      	mov	r1, sl
 800da2a:	aa1e      	add	r2, sp, #120	; 0x78
 800da2c:	465b      	mov	r3, fp
 800da2e:	f7ff fc5d 	bl	800d2ec <GUI_BMP__ReadData>
 800da32:	4684      	mov	ip, r0
 800da34:	2800      	cmp	r0, #0
 800da36:	f040 80a4 	bne.w	800db82 <GUI_BMP_DrawEx+0x466>
 800da3a:	2304      	movs	r3, #4
 800da3c:	9302      	str	r3, [sp, #8]
 800da3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800da40:	9304      	str	r3, [sp, #16]
 800da42:	f04f 0b01 	mov.w	fp, #1
 800da46:	4b5a      	ldr	r3, [pc, #360]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800da48:	f8cd a00c 	str.w	sl, [sp, #12]
 800da4c:	f8cd b000 	str.w	fp, [sp]
 800da50:	f8cd b004 	str.w	fp, [sp, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	9305      	str	r3, [sp, #20]
 800da58:	4632      	mov	r2, r6
 800da5a:	4620      	mov	r0, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	465b      	mov	r3, fp
 800da60:	f8cd c018 	str.w	ip, [sp, #24]
 800da64:	f7fd fc80 	bl	800b368 <LCD_DrawBitmap>
 800da68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da6a:	eb04 0a06 	add.w	sl, r4, r6
 800da6e:	f012 0f02 	tst.w	r2, #2
 800da72:	e022      	b.n	800daba <GUI_BMP_DrawEx+0x39e>
 800da74:	a81b      	add	r0, sp, #108	; 0x6c
 800da76:	4631      	mov	r1, r6
 800da78:	aa1e      	add	r2, sp, #120	; 0x78
 800da7a:	465b      	mov	r3, fp
 800da7c:	f7ff fc36 	bl	800d2ec <GUI_BMP__ReadData>
 800da80:	4684      	mov	ip, r0
 800da82:	2800      	cmp	r0, #0
 800da84:	d17d      	bne.n	800db82 <GUI_BMP_DrawEx+0x466>
 800da86:	2308      	movs	r3, #8
 800da88:	9302      	str	r3, [sp, #8]
 800da8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800da8c:	9304      	str	r3, [sp, #16]
 800da8e:	f04f 0b01 	mov.w	fp, #1
 800da92:	4b47      	ldr	r3, [pc, #284]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800da94:	f8cd b000 	str.w	fp, [sp]
 800da98:	f8cd b004 	str.w	fp, [sp, #4]
 800da9c:	9603      	str	r6, [sp, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	9305      	str	r3, [sp, #20]
 800daa2:	4620      	mov	r0, r4
 800daa4:	4629      	mov	r1, r5
 800daa6:	4632      	mov	r2, r6
 800daa8:	465b      	mov	r3, fp
 800daaa:	f8cd c018 	str.w	ip, [sp, #24]
 800daae:	eb04 0a06 	add.w	sl, r4, r6
 800dab2:	f7fd fc59 	bl	800b368 <LCD_DrawBitmap>
 800dab6:	f016 0f01 	tst.w	r6, #1
 800daba:	f8dd c018 	ldr.w	ip, [sp, #24]
 800dabe:	d044      	beq.n	800db4a <GUI_BMP_DrawEx+0x42e>
 800dac0:	a81b      	add	r0, sp, #108	; 0x6c
 800dac2:	4659      	mov	r1, fp
 800dac4:	aa1e      	add	r2, sp, #120	; 0x78
 800dac6:	4663      	mov	r3, ip
 800dac8:	f7ff fc10 	bl	800d2ec <GUI_BMP__ReadData>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d03c      	beq.n	800db4a <GUI_BMP_DrawEx+0x42e>
 800dad0:	e057      	b.n	800db82 <GUI_BMP_DrawEx+0x466>
 800dad2:	9b07      	ldr	r3, [sp, #28]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d128      	bne.n	800db2a <GUI_BMP_DrawEx+0x40e>
 800dad8:	f006 030f 	and.w	r3, r6, #15
 800dadc:	0936      	lsrs	r6, r6, #4
 800dade:	42b3      	cmp	r3, r6
 800dae0:	b21b      	sxth	r3, r3
 800dae2:	d003      	beq.n	800daec <GUI_BMP_DrawEx+0x3d0>
 800dae4:	00b6      	lsls	r6, r6, #2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	4682      	mov	sl, r0
 800daea:	e004      	b.n	800daf6 <GUI_BMP_DrawEx+0x3da>
 800daec:	4a30      	ldr	r2, [pc, #192]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800daee:	6812      	ldr	r2, [r2, #0]
 800daf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800daf4:	e01d      	b.n	800db32 <GUI_BMP_DrawEx+0x416>
 800daf6:	45da      	cmp	sl, fp
 800daf8:	eb0a 0004 	add.w	r0, sl, r4
 800dafc:	da12      	bge.n	800db24 <GUI_BMP_DrawEx+0x408>
 800dafe:	4a2d      	ldr	r2, [pc, #180]	; (800dbb4 <GUI_BMP_DrawEx+0x498>)
 800db00:	492b      	ldr	r1, [pc, #172]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800db02:	6812      	ldr	r2, [r2, #0]
 800db04:	6809      	ldr	r1, [r1, #0]
 800db06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800db08:	f01a 0f01 	tst.w	sl, #1
 800db0c:	bf14      	ite	ne
 800db0e:	58c9      	ldrne	r1, [r1, r3]
 800db10:	5989      	ldreq	r1, [r1, r6]
 800db12:	6011      	str	r1, [r2, #0]
 800db14:	4629      	mov	r1, r5
 800db16:	9306      	str	r3, [sp, #24]
 800db18:	f10a 0a01 	add.w	sl, sl, #1
 800db1c:	f7fd faa2 	bl	800b064 <LCD_DrawPixel>
 800db20:	9b06      	ldr	r3, [sp, #24]
 800db22:	e7e8      	b.n	800daf6 <GUI_BMP_DrawEx+0x3da>
 800db24:	eb04 0a0b 	add.w	sl, r4, fp
 800db28:	e00f      	b.n	800db4a <GUI_BMP_DrawEx+0x42e>
 800db2a:	4b21      	ldr	r3, [pc, #132]	; (800dbb0 <GUI_BMP_DrawEx+0x494>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 800db32:	4b20      	ldr	r3, [pc, #128]	; (800dbb4 <GUI_BMP_DrawEx+0x498>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db38:	eb04 0a0b 	add.w	sl, r4, fp
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	4620      	mov	r0, r4
 800db40:	4629      	mov	r1, r5
 800db42:	f10a 32ff 	add.w	r2, sl, #4294967295
 800db46:	f7fd fabb 	bl	800b0c0 <LCD_DrawHLine>
 800db4a:	4654      	mov	r4, sl
 800db4c:	e6e8      	b.n	800d920 <GUI_BMP_DrawEx+0x204>
 800db4e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800db52:	2b10      	cmp	r3, #16
 800db54:	d00a      	beq.n	800db6c <GUI_BMP_DrawEx+0x450>
 800db56:	2b20      	cmp	r3, #32
 800db58:	d113      	bne.n	800db82 <GUI_BMP_DrawEx+0x466>
 800db5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db5e:	9200      	str	r2, [sp, #0]
 800db60:	009a      	lsls	r2, r3, #2
 800db62:	9201      	str	r2, [sp, #4]
 800db64:	2204      	movs	r2, #4
 800db66:	9202      	str	r2, [sp, #8]
 800db68:	4a13      	ldr	r2, [pc, #76]	; (800dbb8 <GUI_BMP_DrawEx+0x49c>)
 800db6a:	e6b1      	b.n	800d8d0 <GUI_BMP_DrawEx+0x1b4>
 800db6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db6e:	9300      	str	r3, [sp, #0]
 800db70:	4b11      	ldr	r3, [pc, #68]	; (800dbb8 <GUI_BMP_DrawEx+0x49c>)
 800db72:	9301      	str	r3, [sp, #4]
 800db74:	a81b      	add	r0, sp, #108	; 0x6c
 800db76:	4639      	mov	r1, r7
 800db78:	4642      	mov	r2, r8
 800db7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db7c:	f7ff fcde 	bl	800d53c <_DrawBitmap_16bpp>
 800db80:	e6ae      	b.n	800d8e0 <GUI_BMP_DrawEx+0x1c4>
 800db82:	f04f 0901 	mov.w	r9, #1
 800db86:	f7fa fccf 	bl	8008528 <WM__GetNextIVR>
 800db8a:	9a08      	ldr	r2, [sp, #32]
 800db8c:	3201      	adds	r2, #1
 800db8e:	9208      	str	r2, [sp, #32]
 800db90:	2800      	cmp	r0, #0
 800db92:	f47f adf6 	bne.w	800d782 <GUI_BMP_DrawEx+0x66>
 800db96:	4648      	mov	r0, r9
 800db98:	e006      	b.n	800dba8 <GUI_BMP_DrawEx+0x48c>
 800db9a:	2001      	movs	r0, #1
 800db9c:	e004      	b.n	800dba8 <GUI_BMP_DrawEx+0x48c>
 800db9e:	6833      	ldr	r3, [r6, #0]
 800dba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba4:	601a      	str	r2, [r3, #0]
 800dba6:	e7ee      	b.n	800db86 <GUI_BMP_DrawEx+0x46a>
 800dba8:	b025      	add	sp, #148	; 0x94
 800dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbae:	bf00      	nop
 800dbb0:	20004bfc 	.word	0x20004bfc
 800dbb4:	20000084 	.word	0x20000084
 800dbb8:	0800d3c9 	.word	0x0800d3c9

0800dbbc <_PushFreeBlock>:
 800dbbc:	4b07      	ldr	r3, [pc, #28]	; (800dbdc <_PushFreeBlock+0x20>)
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	605a      	str	r2, [r3, #4]
 800dbc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbca:	eb02 04c0 	add.w	r4, r2, r0, lsl #3
 800dbce:	6061      	str	r1, [r4, #4]
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 800dbd6:	6258      	str	r0, [r3, #36]	; 0x24
 800dbd8:	bd10      	pop	{r4, pc}
 800dbda:	bf00      	nop
 800dbdc:	20004b0c 	.word	0x20004b0c

0800dbe0 <_RemoveFreeBlock>:
 800dbe0:	b510      	push	{r4, lr}
 800dbe2:	6842      	ldr	r2, [r0, #4]
 800dbe4:	230f      	movs	r3, #15
 800dbe6:	490d      	ldr	r1, [pc, #52]	; (800dc1c <_RemoveFreeBlock+0x3c>)
 800dbe8:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 800dbec:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800dbee:	42a2      	cmp	r2, r4
 800dbf0:	d203      	bcs.n	800dbfa <_RemoveFreeBlock+0x1a>
 800dbf2:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dbf6:	d2f6      	bcs.n	800dbe6 <_RemoveFreeBlock+0x6>
 800dbf8:	bd10      	pop	{r4, pc}
 800dbfa:	2b0f      	cmp	r3, #15
 800dbfc:	d80c      	bhi.n	800dc18 <_RemoveFreeBlock+0x38>
 800dbfe:	680c      	ldr	r4, [r1, #0]
 800dc00:	1aa2      	subs	r2, r4, r2
 800dc02:	600a      	str	r2, [r1, #0]
 800dc04:	6882      	ldr	r2, [r0, #8]
 800dc06:	68c0      	ldr	r0, [r0, #12]
 800dc08:	b102      	cbz	r2, 800dc0c <_RemoveFreeBlock+0x2c>
 800dc0a:	6050      	str	r0, [r2, #4]
 800dc0c:	b108      	cbz	r0, 800dc12 <_RemoveFreeBlock+0x32>
 800dc0e:	6002      	str	r2, [r0, #0]
 800dc10:	bd10      	pop	{r4, pc}
 800dc12:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800dc16:	645a      	str	r2, [r3, #68]	; 0x44
 800dc18:	bd10      	pop	{r4, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20004b0c 	.word	0x20004b0c

0800dc20 <_AddFreeMemory>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	4e26      	ldr	r6, [pc, #152]	; (800dcbc <_AddFreeMemory+0x9c>)
 800dc24:	68f3      	ldr	r3, [r6, #12]
 800dc26:	1e5a      	subs	r2, r3, #1
 800dc28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	4413      	add	r3, r2
 800dc2e:	1808      	adds	r0, r1, r0
 800dc30:	4298      	cmp	r0, r3
 800dc32:	460c      	mov	r4, r1
 800dc34:	d805      	bhi.n	800dc42 <_AddFreeMemory+0x22>
 800dc36:	594b      	ldr	r3, [r1, r5]
 800dc38:	b91b      	cbnz	r3, 800dc42 <_AddFreeMemory+0x22>
 800dc3a:	6843      	ldr	r3, [r0, #4]
 800dc3c:	441d      	add	r5, r3
 800dc3e:	f7ff ffcf 	bl	800dbe0 <_RemoveFreeBlock>
 800dc42:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800dc44:	429c      	cmp	r4, r3
 800dc46:	d90a      	bls.n	800dc5e <_AddFreeMemory+0x3e>
 800dc48:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800dc4c:	1be7      	subs	r7, r4, r7
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	b92b      	cbnz	r3, 800dc5e <_AddFreeMemory+0x3e>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	4638      	mov	r0, r7
 800dc56:	441d      	add	r5, r3
 800dc58:	f7ff ffc2 	bl	800dbe0 <_RemoveFreeBlock>
 800dc5c:	463c      	mov	r4, r7
 800dc5e:	230f      	movs	r3, #15
 800dc60:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800dc64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dc66:	4295      	cmp	r5, r2
 800dc68:	d203      	bcs.n	800dc72 <_AddFreeMemory+0x52>
 800dc6a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dc6e:	d2f7      	bcs.n	800dc60 <_AddFreeMemory+0x40>
 800dc70:	e022      	b.n	800dcb8 <_AddFreeMemory+0x98>
 800dc72:	2b0f      	cmp	r3, #15
 800dc74:	d820      	bhi.n	800dcb8 <_AddFreeMemory+0x98>
 800dc76:	3308      	adds	r3, #8
 800dc78:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 800dc7c:	1961      	adds	r1, r4, r5
 800dc7e:	6852      	ldr	r2, [r2, #4]
 800dc80:	60a2      	str	r2, [r4, #8]
 800dc82:	2000      	movs	r0, #0
 800dc84:	e884 0021 	stmia.w	r4, {r0, r5}
 800dc88:	6124      	str	r4, [r4, #16]
 800dc8a:	f841 5c04 	str.w	r5, [r1, #-4]
 800dc8e:	f104 0108 	add.w	r1, r4, #8
 800dc92:	b102      	cbz	r2, 800dc96 <_AddFreeMemory+0x76>
 800dc94:	6051      	str	r1, [r2, #4]
 800dc96:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800dc9a:	60e0      	str	r0, [r4, #12]
 800dc9c:	6059      	str	r1, [r3, #4]
 800dc9e:	6833      	ldr	r3, [r6, #0]
 800dca0:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 800dca4:	4a05      	ldr	r2, [pc, #20]	; (800dcbc <_AddFreeMemory+0x9c>)
 800dca6:	442b      	add	r3, r5
 800dca8:	6033      	str	r3, [r6, #0]
 800dcaa:	b929      	cbnz	r1, 800dcb8 <_AddFreeMemory+0x98>
 800dcac:	68d1      	ldr	r1, [r2, #12]
 800dcae:	1acb      	subs	r3, r1, r3
 800dcb0:	6891      	ldr	r1, [r2, #8]
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	bf38      	it	cc
 800dcb6:	6093      	strcc	r3, [r2, #8]
 800dcb8:	4628      	mov	r0, r5
 800dcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcbc:	20004b0c 	.word	0x20004b0c

0800dcc0 <_RemoveHoles>:
 800dcc0:	4b25      	ldr	r3, [pc, #148]	; (800dd58 <_RemoveHoles+0x98>)
 800dcc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcc6:	68da      	ldr	r2, [r3, #12]
 800dcc8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800dcca:	3a01      	subs	r2, #1
 800dccc:	4682      	mov	sl, r0
 800dcce:	eb02 0904 	add.w	r9, r2, r4
 800dcd2:	469b      	mov	fp, r3
 800dcd4:	e894 0028 	ldmia.w	r4, {r3, r5}
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d133      	bne.n	800dd44 <_RemoveHoles+0x84>
 800dcdc:	eb04 0805 	add.w	r8, r4, r5
 800dce0:	45c8      	cmp	r8, r9
 800dce2:	d22f      	bcs.n	800dd44 <_RemoveHoles+0x84>
 800dce4:	f854 c005 	ldr.w	ip, [r4, r5]
 800dce8:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800dcec:	f1bc 0f00 	cmp.w	ip, #0
 800dcf0:	d028      	beq.n	800dd44 <_RemoveHoles+0x84>
 800dcf2:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
 800dcf6:	4f18      	ldr	r7, [pc, #96]	; (800dd58 <_RemoveHoles+0x98>)
 800dcf8:	f813 303c 	ldrb.w	r3, [r3, ip, lsl #3]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d121      	bne.n	800dd44 <_RemoveHoles+0x84>
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	4620      	mov	r0, r4
 800dd04:	e88d 1008 	stmia.w	sp, {r3, ip}
 800dd08:	f7ff ff6a 	bl	800dbe0 <_RemoveFreeBlock>
 800dd0c:	f8d8 1000 	ldr.w	r1, [r8]
 800dd10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd12:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800dd16:	4620      	mov	r0, r4
 800dd18:	6054      	str	r4, [r2, #4]
 800dd1a:	4641      	mov	r1, r8
 800dd1c:	4632      	mov	r2, r6
 800dd1e:	f003 f9d9 	bl	80110d4 <memmove>
 800dd22:	e89d 1008 	ldmia.w	sp, {r3, ip}
 800dd26:	459c      	cmp	ip, r3
 800dd28:	d102      	bne.n	800dd30 <_RemoveHoles+0x70>
 800dd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2c:	1b5b      	subs	r3, r3, r5
 800dd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd30:	4628      	mov	r0, r5
 800dd32:	19a1      	adds	r1, r4, r6
 800dd34:	f7ff ff74 	bl	800dc20 <_AddFreeMemory>
 800dd38:	f1ba 0f00 	cmp.w	sl, #0
 800dd3c:	d001      	beq.n	800dd42 <_RemoveHoles+0x82>
 800dd3e:	4582      	cmp	sl, r0
 800dd40:	d905      	bls.n	800dd4e <_RemoveHoles+0x8e>
 800dd42:	4635      	mov	r5, r6
 800dd44:	442c      	add	r4, r5
 800dd46:	454c      	cmp	r4, r9
 800dd48:	d3c4      	bcc.n	800dcd4 <_RemoveHoles+0x14>
 800dd4a:	2001      	movs	r0, #1
 800dd4c:	e000      	b.n	800dd50 <_RemoveHoles+0x90>
 800dd4e:	2000      	movs	r0, #0
 800dd50:	b003      	add	sp, #12
 800dd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd56:	bf00      	nop
 800dd58:	20004b0c 	.word	0x20004b0c

0800dd5c <GUI_ALLOC_FreeFixedBlock>:
 800dd5c:	b128      	cbz	r0, 800dd6a <GUI_ALLOC_FreeFixedBlock+0xe>
 800dd5e:	4a03      	ldr	r2, [pc, #12]	; (800dd6c <GUI_ALLOC_FreeFixedBlock+0x10>)
 800dd60:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800dd62:	6003      	str	r3, [r0, #0]
 800dd64:	b103      	cbz	r3, 800dd68 <GUI_ALLOC_FreeFixedBlock+0xc>
 800dd66:	6058      	str	r0, [r3, #4]
 800dd68:	63d0      	str	r0, [r2, #60]	; 0x3c
 800dd6a:	4770      	bx	lr
 800dd6c:	20004b0c 	.word	0x20004b0c

0800dd70 <GUI_ALLOC_h2p>:
 800dd70:	4b03      	ldr	r3, [pc, #12]	; (800dd80 <GUI_ALLOC_h2p+0x10>)
 800dd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800dd78:	6840      	ldr	r0, [r0, #4]
 800dd7a:	3008      	adds	r0, #8
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	20004b0c 	.word	0x20004b0c

0800dd84 <GUI_ALLOC_LockH>:
 800dd84:	4b05      	ldr	r3, [pc, #20]	; (800dd9c <GUI_ALLOC_LockH+0x18>)
 800dd86:	69d9      	ldr	r1, [r3, #28]
 800dd88:	3101      	adds	r1, #1
 800dd8a:	61d9      	str	r1, [r3, #28]
 800dd8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd8e:	f813 1030 	ldrb.w	r1, [r3, r0, lsl #3]
 800dd92:	3101      	adds	r1, #1
 800dd94:	f803 1030 	strb.w	r1, [r3, r0, lsl #3]
 800dd98:	f7ff bfea 	b.w	800dd70 <GUI_ALLOC_h2p>
 800dd9c:	20004b0c 	.word	0x20004b0c

0800dda0 <GUI_ALLOC_UnlockH>:
 800dda0:	b530      	push	{r4, r5, lr}
 800dda2:	6802      	ldr	r2, [r0, #0]
 800dda4:	4b09      	ldr	r3, [pc, #36]	; (800ddcc <GUI_ALLOC_UnlockH+0x2c>)
 800dda6:	f852 1c08 	ldr.w	r1, [r2, #-8]
 800ddaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddac:	f812 4031 	ldrb.w	r4, [r2, r1, lsl #3]
 800ddb0:	2c01      	cmp	r4, #1
 800ddb2:	d903      	bls.n	800ddbc <GUI_ALLOC_UnlockH+0x1c>
 800ddb4:	69dd      	ldr	r5, [r3, #28]
 800ddb6:	b10d      	cbz	r5, 800ddbc <GUI_ALLOC_UnlockH+0x1c>
 800ddb8:	3d01      	subs	r5, #1
 800ddba:	61dd      	str	r5, [r3, #28]
 800ddbc:	3c01      	subs	r4, #1
 800ddbe:	f802 4031 	strb.w	r4, [r2, r1, lsl #3]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6003      	str	r3, [r0, #0]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	bd30      	pop	{r4, r5, pc}
 800ddca:	bf00      	nop
 800ddcc:	20004b0c 	.word	0x20004b0c

0800ddd0 <GUI_ALLOC_AssignMemory>:
 800ddd0:	4b02      	ldr	r3, [pc, #8]	; (800dddc <GUI_ALLOC_AssignMemory+0xc>)
 800ddd2:	f021 0103 	bic.w	r1, r1, #3
 800ddd6:	6018      	str	r0, [r3, #0]
 800ddd8:	6059      	str	r1, [r3, #4]
 800ddda:	4770      	bx	lr
 800dddc:	20002b98 	.word	0x20002b98

0800dde0 <GUI_ALLOC_GetSize>:
 800dde0:	b130      	cbz	r0, 800ddf0 <GUI_ALLOC_GetSize+0x10>
 800dde2:	4b04      	ldr	r3, [pc, #16]	; (800ddf4 <GUI_ALLOC_GetSize+0x14>)
 800dde4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ddea:	6843      	ldr	r3, [r0, #4]
 800ddec:	6858      	ldr	r0, [r3, #4]
 800ddee:	380c      	subs	r0, #12
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	20004b0c 	.word	0x20004b0c

0800ddf8 <GUI_ALLOC_Free>:
 800ddf8:	b510      	push	{r4, lr}
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	b160      	cbz	r0, 800de18 <GUI_ALLOC_Free+0x20>
 800ddfe:	4b07      	ldr	r3, [pc, #28]	; (800de1c <GUI_ALLOC_Free+0x24>)
 800de00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de02:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800de06:	6859      	ldr	r1, [r3, #4]
 800de08:	6848      	ldr	r0, [r1, #4]
 800de0a:	f7ff ff09 	bl	800dc20 <_AddFreeMemory>
 800de0e:	4620      	mov	r0, r4
 800de10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de14:	f7ff bed2 	b.w	800dbbc <_PushFreeBlock>
 800de18:	bd10      	pop	{r4, pc}
 800de1a:	bf00      	nop
 800de1c:	20004b0c 	.word	0x20004b0c

0800de20 <_EnlargeBlocks>:
 800de20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de24:	4c23      	ldr	r4, [pc, #140]	; (800deb4 <_EnlargeBlocks+0x94>)
 800de26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800de28:	b93b      	cbnz	r3, 800de3a <_EnlargeBlocks+0x1a>
 800de2a:	4b23      	ldr	r3, [pc, #140]	; (800deb8 <_EnlargeBlocks+0x98>)
 800de2c:	689d      	ldr	r5, [r3, #8]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	3508      	adds	r5, #8
 800de32:	fbb3 f5f5 	udiv	r5, r3, r5
 800de36:	3502      	adds	r5, #2
 800de38:	e003      	b.n	800de42 <_EnlargeBlocks+0x22>
 800de3a:	6923      	ldr	r3, [r4, #16]
 800de3c:	1d1d      	adds	r5, r3, #4
 800de3e:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800de42:	00e8      	lsls	r0, r5, #3
 800de44:	f000 f8f4 	bl	800e030 <_Alloc>
 800de48:	4680      	mov	r8, r0
 800de4a:	b368      	cbz	r0, 800dea8 <_EnlargeBlocks+0x88>
 800de4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de4e:	6922      	ldr	r2, [r4, #16]
 800de50:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800de52:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 800de56:	00d2      	lsls	r2, r2, #3
 800de58:	685e      	ldr	r6, [r3, #4]
 800de5a:	4b18      	ldr	r3, [pc, #96]	; (800debc <_EnlargeBlocks+0x9c>)
 800de5c:	3608      	adds	r6, #8
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4630      	mov	r0, r6
 800de62:	4798      	blx	r3
 800de64:	6922      	ldr	r2, [r4, #16]
 800de66:	6366      	str	r6, [r4, #52]	; 0x34
 800de68:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
 800de6c:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800de70:	3104      	adds	r1, #4
 800de72:	4613      	mov	r3, r2
 800de74:	1e68      	subs	r0, r5, #1
 800de76:	4283      	cmp	r3, r0
 800de78:	f101 0108 	add.w	r1, r1, #8
 800de7c:	d203      	bcs.n	800de86 <_EnlargeBlocks+0x66>
 800de7e:	3301      	adds	r3, #1
 800de80:	f841 3c08 	str.w	r3, [r1, #-8]
 800de84:	e7f6      	b.n	800de74 <_EnlargeBlocks+0x54>
 800de86:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800de8a:	2600      	movs	r6, #0
 800de8c:	605e      	str	r6, [r3, #4]
 800de8e:	6863      	ldr	r3, [r4, #4]
 800de90:	6262      	str	r2, [r4, #36]	; 0x24
 800de92:	1a9b      	subs	r3, r3, r2
 800de94:	442b      	add	r3, r5
 800de96:	6063      	str	r3, [r4, #4]
 800de98:	6125      	str	r5, [r4, #16]
 800de9a:	4638      	mov	r0, r7
 800de9c:	b13f      	cbz	r7, 800deae <_EnlargeBlocks+0x8e>
 800de9e:	f7ff ffab 	bl	800ddf8 <GUI_ALLOC_Free>
 800dea2:	4630      	mov	r0, r6
 800dea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea8:	2001      	movs	r0, #1
 800deaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb2:	bf00      	nop
 800deb4:	20004b0c 	.word	0x20004b0c
 800deb8:	20002b98 	.word	0x20002b98
 800debc:	20000074 	.word	0x20000074

0800dec0 <_InitOnce>:
 800dec0:	b538      	push	{r3, r4, r5, lr}
 800dec2:	4916      	ldr	r1, [pc, #88]	; (800df1c <_InitOnce+0x5c>)
 800dec4:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800dec8:	bb3b      	cbnz	r3, 800df1a <_InitOnce+0x5a>
 800deca:	4a15      	ldr	r2, [pc, #84]	; (800df20 <_InitOnce+0x60>)
 800decc:	2301      	movs	r3, #1
 800dece:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
 800ded2:	6893      	ldr	r3, [r2, #8]
 800ded4:	b913      	cbnz	r3, 800dedc <_InitOnce+0x1c>
 800ded6:	6853      	ldr	r3, [r2, #4]
 800ded8:	089b      	lsrs	r3, r3, #2
 800deda:	6093      	str	r3, [r2, #8]
 800dedc:	235a      	movs	r3, #90	; 0x5a
 800dede:	620b      	str	r3, [r1, #32]
 800dee0:	2300      	movs	r3, #0
 800dee2:	2510      	movs	r5, #16
 800dee4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
 800dee8:	409d      	lsls	r5, r3
 800deea:	3301      	adds	r3, #1
 800deec:	2b10      	cmp	r3, #16
 800deee:	4c0b      	ldr	r4, [pc, #44]	; (800df1c <_InitOnce+0x5c>)
 800def0:	6405      	str	r5, [r0, #64]	; 0x40
 800def2:	d1f6      	bne.n	800dee2 <_InitOnce+0x22>
 800def4:	6850      	ldr	r0, [r2, #4]
 800def6:	6811      	ldr	r1, [r2, #0]
 800def8:	63a1      	str	r1, [r4, #56]	; 0x38
 800defa:	2302      	movs	r3, #2
 800defc:	6123      	str	r3, [r4, #16]
 800defe:	f1a0 0314 	sub.w	r3, r0, #20
 800df02:	440b      	add	r3, r1
 800df04:	2501      	movs	r5, #1
 800df06:	6363      	str	r3, [r4, #52]	; 0x34
 800df08:	60e0      	str	r0, [r4, #12]
 800df0a:	605d      	str	r5, [r3, #4]
 800df0c:	6265      	str	r5, [r4, #36]	; 0x24
 800df0e:	6065      	str	r5, [r4, #4]
 800df10:	f7ff fe86 	bl	800dc20 <_AddFreeMemory>
 800df14:	f7ff ff84 	bl	800de20 <_EnlargeBlocks>
 800df18:	6325      	str	r5, [r4, #48]	; 0x30
 800df1a:	bd38      	pop	{r3, r4, r5, pc}
 800df1c:	20004b0c 	.word	0x20004b0c
 800df20:	20002b98 	.word	0x20002b98

0800df24 <GUI_ALLOC_GetFixedBlock>:
 800df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df28:	4605      	mov	r5, r0
 800df2a:	4e26      	ldr	r6, [pc, #152]	; (800dfc4 <GUI_ALLOC_GetFixedBlock+0xa0>)
 800df2c:	3503      	adds	r5, #3
 800df2e:	f7ff ffc7 	bl	800dec0 <_InitOnce>
 800df32:	f025 0503 	bic.w	r5, r5, #3
 800df36:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800df38:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800df3a:	3504      	adds	r5, #4
 800df3c:	429d      	cmp	r5, r3
 800df3e:	bf38      	it	cc
 800df40:	461d      	movcc	r5, r3
 800df42:	4614      	mov	r4, r2
 800df44:	b12c      	cbz	r4, 800df52 <GUI_ALLOC_GetFixedBlock+0x2e>
 800df46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800df4a:	42ab      	cmp	r3, r5
 800df4c:	d02c      	beq.n	800dfa8 <GUI_ALLOC_GetFixedBlock+0x84>
 800df4e:	6824      	ldr	r4, [r4, #0]
 800df50:	e7f8      	b.n	800df44 <GUI_ALLOC_GetFixedBlock+0x20>
 800df52:	68f3      	ldr	r3, [r6, #12]
 800df54:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 800df56:	eb02 0803 	add.w	r8, r2, r3
 800df5a:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800df5e:	ebc7 0708 	rsb	r7, r7, r8
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	b133      	cbz	r3, 800df74 <GUI_ALLOC_GetFixedBlock+0x50>
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff feaa 	bl	800dcc0 <_RemoveHoles>
 800df6c:	f858 7c04 	ldr.w	r7, [r8, #-4]
 800df70:	ebc7 0708 	rsb	r7, r7, r8
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	bb13      	cbnz	r3, 800dfbe <GUI_ALLOC_GetFixedBlock+0x9a>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	42ab      	cmp	r3, r5
 800df7c:	db1f      	blt.n	800dfbe <GUI_ALLOC_GetFixedBlock+0x9a>
 800df7e:	4638      	mov	r0, r7
 800df80:	1d1c      	adds	r4, r3, #4
 800df82:	f7ff fe2d 	bl	800dbe0 <_RemoveFreeBlock>
 800df86:	68f3      	ldr	r3, [r6, #12]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	1b5b      	subs	r3, r3, r5
 800df8c:	60f3      	str	r3, [r6, #12]
 800df8e:	6973      	ldr	r3, [r6, #20]
 800df90:	1b64      	subs	r4, r4, r5
 800df92:	442b      	add	r3, r5
 800df94:	1b40      	subs	r0, r0, r5
 800df96:	443c      	add	r4, r7
 800df98:	6173      	str	r3, [r6, #20]
 800df9a:	d002      	beq.n	800dfa2 <GUI_ALLOC_GetFixedBlock+0x7e>
 800df9c:	4639      	mov	r1, r7
 800df9e:	f7ff fe3f 	bl	800dc20 <_AddFreeMemory>
 800dfa2:	f844 5c04 	str.w	r5, [r4, #-4]
 800dfa6:	e00a      	b.n	800dfbe <GUI_ALLOC_GetFixedBlock+0x9a>
 800dfa8:	6823      	ldr	r3, [r4, #0]
 800dfaa:	b10b      	cbz	r3, 800dfb0 <GUI_ALLOC_GetFixedBlock+0x8c>
 800dfac:	6861      	ldr	r1, [r4, #4]
 800dfae:	6059      	str	r1, [r3, #4]
 800dfb0:	6861      	ldr	r1, [r4, #4]
 800dfb2:	b101      	cbz	r1, 800dfb6 <GUI_ALLOC_GetFixedBlock+0x92>
 800dfb4:	600b      	str	r3, [r1, #0]
 800dfb6:	42a2      	cmp	r2, r4
 800dfb8:	d101      	bne.n	800dfbe <GUI_ALLOC_GetFixedBlock+0x9a>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	63f3      	str	r3, [r6, #60]	; 0x3c
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfc4:	20004b0c 	.word	0x20004b0c

0800dfc8 <GUI_ALLOC_GetMaxSize>:
 800dfc8:	b508      	push	{r3, lr}
 800dfca:	f7ff ff79 	bl	800dec0 <_InitOnce>
 800dfce:	2200      	movs	r2, #0
 800dfd0:	4b0b      	ldr	r3, [pc, #44]	; (800e000 <GUI_ALLOC_GetMaxSize+0x38>)
 800dfd2:	4413      	add	r3, r2
 800dfd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dfd8:	b113      	cbz	r3, 800dfe0 <GUI_ALLOC_GetMaxSize+0x18>
 800dfda:	689b      	ldr	r3, [r3, #8]
 800dfdc:	2000      	movs	r0, #0
 800dfde:	e00b      	b.n	800dff8 <GUI_ALLOC_GetMaxSize+0x30>
 800dfe0:	3a08      	subs	r2, #8
 800dfe2:	f112 0f80 	cmn.w	r2, #128	; 0x80
 800dfe6:	d1f3      	bne.n	800dfd0 <GUI_ALLOC_GetMaxSize+0x8>
 800dfe8:	e7f8      	b.n	800dfdc <GUI_ALLOC_GetMaxSize+0x14>
 800dfea:	685a      	ldr	r2, [r3, #4]
 800dfec:	689b      	ldr	r3, [r3, #8]
 800dfee:	4290      	cmp	r0, r2
 800dff0:	bf38      	it	cc
 800dff2:	4610      	movcc	r0, r2
 800dff4:	b113      	cbz	r3, 800dffc <GUI_ALLOC_GetMaxSize+0x34>
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d1f6      	bne.n	800dfea <GUI_ALLOC_GetMaxSize+0x22>
 800dffc:	380c      	subs	r0, #12
 800dffe:	bd08      	pop	{r3, pc}
 800e000:	20004b0c 	.word	0x20004b0c

0800e004 <GUI_ALLOC_RequestSize>:
 800e004:	b508      	push	{r3, lr}
 800e006:	f7ff ffdf 	bl	800dfc8 <GUI_ALLOC_GetMaxSize>
 800e00a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800e00e:	f04f 0364 	mov.w	r3, #100	; 0x64
 800e012:	4a06      	ldr	r2, [pc, #24]	; (800e02c <GUI_ALLOC_RequestSize+0x28>)
 800e014:	d904      	bls.n	800e020 <GUI_ALLOC_RequestSize+0x1c>
 800e016:	fb90 f0f3 	sdiv	r0, r0, r3
 800e01a:	6a13      	ldr	r3, [r2, #32]
 800e01c:	4358      	muls	r0, r3
 800e01e:	bd08      	pop	{r3, pc}
 800e020:	6a12      	ldr	r2, [r2, #32]
 800e022:	4350      	muls	r0, r2
 800e024:	fbb0 f0f3 	udiv	r0, r0, r3
 800e028:	bd08      	pop	{r3, pc}
 800e02a:	bf00      	nop
 800e02c:	20004b0c 	.word	0x20004b0c

0800e030 <_Alloc>:
 800e030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e034:	4d38      	ldr	r5, [pc, #224]	; (800e118 <_Alloc+0xe8>)
 800e036:	4604      	mov	r4, r0
 800e038:	f7ff ff42 	bl	800dec0 <_InitOnce>
 800e03c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
 800e03e:	682b      	ldr	r3, [r5, #0]
 800e040:	42bc      	cmp	r4, r7
 800e042:	bf24      	itt	cs
 800e044:	1ce7      	addcs	r7, r4, #3
 800e046:	f027 0703 	biccs.w	r7, r7, #3
 800e04a:	370c      	adds	r7, #12
 800e04c:	429f      	cmp	r7, r3
 800e04e:	4c32      	ldr	r4, [pc, #200]	; (800e118 <_Alloc+0xe8>)
 800e050:	d83e      	bhi.n	800e0d0 <_Alloc+0xa0>
 800e052:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e054:	6862      	ldr	r2, [r4, #4]
 800e056:	429a      	cmp	r2, r3
 800e058:	d90f      	bls.n	800e07a <_Alloc+0x4a>
 800e05a:	686b      	ldr	r3, [r5, #4]
 800e05c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e05e:	3b01      	subs	r3, #1
 800e060:	606b      	str	r3, [r5, #4]
 800e062:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e064:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800e068:	eb03 0209 	add.w	r2, r3, r9
 800e06c:	6852      	ldr	r2, [r2, #4]
 800e06e:	626a      	str	r2, [r5, #36]	; 0x24
 800e070:	2201      	movs	r2, #1
 800e072:	f803 2036 	strb.w	r2, [r3, r6, lsl #3]
 800e076:	b956      	cbnz	r6, 800e08e <_Alloc+0x5e>
 800e078:	e02a      	b.n	800e0d0 <_Alloc+0xa0>
 800e07a:	3b01      	subs	r3, #1
 800e07c:	6323      	str	r3, [r4, #48]	; 0x30
 800e07e:	f7ff fecf 	bl	800de20 <_EnlargeBlocks>
 800e082:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e084:	3301      	adds	r3, #1
 800e086:	6323      	str	r3, [r4, #48]	; 0x30
 800e088:	2800      	cmp	r0, #0
 800e08a:	d0e6      	beq.n	800e05a <_Alloc+0x2a>
 800e08c:	e020      	b.n	800e0d0 <_Alloc+0xa0>
 800e08e:	230f      	movs	r3, #15
 800e090:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e094:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e096:	4297      	cmp	r7, r2
 800e098:	d20c      	bcs.n	800e0b4 <_Alloc+0x84>
 800e09a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e09e:	d2f7      	bcs.n	800e090 <_Alloc+0x60>
 800e0a0:	e008      	b.n	800e0b4 <_Alloc+0x84>
 800e0a2:	6894      	ldr	r4, [r2, #8]
 800e0a4:	b12c      	cbz	r4, 800e0b2 <_Alloc+0x82>
 800e0a6:	6862      	ldr	r2, [r4, #4]
 800e0a8:	4297      	cmp	r7, r2
 800e0aa:	d914      	bls.n	800e0d6 <_Alloc+0xa6>
 800e0ac:	68a2      	ldr	r2, [r4, #8]
 800e0ae:	2a00      	cmp	r2, #0
 800e0b0:	d1f7      	bne.n	800e0a2 <_Alloc+0x72>
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	2b0f      	cmp	r3, #15
 800e0b6:	d803      	bhi.n	800e0c0 <_Alloc+0x90>
 800e0b8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800e0bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800e0be:	e7f6      	b.n	800e0ae <_Alloc+0x7e>
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7ff fdfd 	bl	800dcc0 <_RemoveHoles>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d0e1      	beq.n	800e08e <_Alloc+0x5e>
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f7ff fd76 	bl	800dbbc <_PushFreeBlock>
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0d6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e0da:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e0dc:	ebc7 0208 	rsb	r2, r7, r8
 800e0e0:	330c      	adds	r3, #12
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	bf38      	it	cc
 800e0e8:	4647      	movcc	r7, r8
 800e0ea:	f7ff fd79 	bl	800dbe0 <_RemoveFreeBlock>
 800e0ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800e0f0:	444b      	add	r3, r9
 800e0f2:	19e1      	adds	r1, r4, r7
 800e0f4:	605c      	str	r4, [r3, #4]
 800e0f6:	45b8      	cmp	r8, r7
 800e0f8:	f04f 0300 	mov.w	r3, #0
 800e0fc:	e884 00c0 	stmia.w	r4, {r6, r7}
 800e100:	60a3      	str	r3, [r4, #8]
 800e102:	6124      	str	r4, [r4, #16]
 800e104:	f841 7c04 	str.w	r7, [r1, #-4]
 800e108:	dd03      	ble.n	800e112 <_Alloc+0xe2>
 800e10a:	ebc7 0008 	rsb	r0, r7, r8
 800e10e:	f7ff fd87 	bl	800dc20 <_AddFreeMemory>
 800e112:	4630      	mov	r0, r6
 800e114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e118:	20004b0c 	.word	0x20004b0c

0800e11c <GUI_ALLOC_AllocNoInit>:
 800e11c:	b108      	cbz	r0, 800e122 <GUI_ALLOC_AllocNoInit+0x6>
 800e11e:	f7ff bf87 	b.w	800e030 <_Alloc>
 800e122:	4770      	bx	lr

0800e124 <GUI_ALLOC_FreePtr>:
 800e124:	b510      	push	{r4, lr}
 800e126:	4604      	mov	r4, r0
 800e128:	6800      	ldr	r0, [r0, #0]
 800e12a:	f7ff fe65 	bl	800ddf8 <GUI_ALLOC_Free>
 800e12e:	2300      	movs	r3, #0
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	bd10      	pop	{r4, pc}

0800e134 <GUI_ALLOC_AllocZero>:
 800e134:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e136:	4605      	mov	r5, r0
 800e138:	f7ff fff0 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800e13c:	4606      	mov	r6, r0
 800e13e:	b160      	cbz	r0, 800e15a <GUI_ALLOC_AllocZero+0x26>
 800e140:	f7ff fe20 	bl	800dd84 <GUI_ALLOC_LockH>
 800e144:	ac02      	add	r4, sp, #8
 800e146:	4b06      	ldr	r3, [pc, #24]	; (800e160 <GUI_ALLOC_AllocZero+0x2c>)
 800e148:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2100      	movs	r1, #0
 800e150:	462a      	mov	r2, r5
 800e152:	4798      	blx	r3
 800e154:	4620      	mov	r0, r4
 800e156:	f7ff fe23 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e15a:	4630      	mov	r0, r6
 800e15c:	b002      	add	sp, #8
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	20000070 	.word	0x20000070

0800e164 <LCD_Index2Color_M555>:
 800e164:	4b07      	ldr	r3, [pc, #28]	; (800e184 <LCD_Index2Color_M555+0x20>)
 800e166:	f000 021f 	and.w	r2, r0, #31
 800e16a:	5c99      	ldrb	r1, [r3, r2]
 800e16c:	f3c0 2284 	ubfx	r2, r0, #10, #5
 800e170:	f3c0 1044 	ubfx	r0, r0, #5, #5
 800e174:	5c9a      	ldrb	r2, [r3, r2]
 800e176:	5c18      	ldrb	r0, [r3, r0]
 800e178:	eb02 4201 	add.w	r2, r2, r1, lsl #16
 800e17c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800e180:	4770      	bx	lr
 800e182:	bf00      	nop
 800e184:	080142a6 	.word	0x080142a6

0800e188 <LCD_Index2Color_888>:
 800e188:	4770      	bx	lr

0800e18a <LCD_Index2Color_8888>:
 800e18a:	4770      	bx	lr

0800e18c <_Color2Index_8888>:
 800e18c:	4770      	bx	lr

0800e18e <_GetIndexMask_8888>:
 800e18e:	f04f 30ff 	mov.w	r0, #4294967295
 800e192:	4770      	bx	lr

0800e194 <_Color2IndexBulk>:
 800e194:	b510      	push	{r4, lr}
 800e196:	f850 4b04 	ldr.w	r4, [r0], #4
 800e19a:	600c      	str	r4, [r1, #0]
 800e19c:	3a01      	subs	r2, #1
 800e19e:	4419      	add	r1, r3
 800e1a0:	d1f9      	bne.n	800e196 <_Color2IndexBulk+0x2>
 800e1a2:	bd10      	pop	{r4, pc}

0800e1a4 <_Index2ColorBulk>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	6804      	ldr	r4, [r0, #0]
 800e1a8:	f841 4b04 	str.w	r4, [r1], #4
 800e1ac:	3a01      	subs	r2, #1
 800e1ae:	4418      	add	r0, r3
 800e1b0:	d1f9      	bne.n	800e1a6 <_Index2ColorBulk+0x2>
 800e1b2:	bd10      	pop	{r4, pc}

0800e1b4 <LCD_Index2Color_565>:
 800e1b4:	f3c0 1345 	ubfx	r3, r0, #5, #6
 800e1b8:	4a06      	ldr	r2, [pc, #24]	; (800e1d4 <LCD_Index2Color_565+0x20>)
 800e1ba:	5cd1      	ldrb	r1, [r2, r3]
 800e1bc:	4b06      	ldr	r3, [pc, #24]	; (800e1d8 <LCD_Index2Color_565+0x24>)
 800e1be:	f3c0 22c4 	ubfx	r2, r0, #11, #5
 800e1c2:	f000 001f 	and.w	r0, r0, #31
 800e1c6:	5c9a      	ldrb	r2, [r3, r2]
 800e1c8:	5c18      	ldrb	r0, [r3, r0]
 800e1ca:	0412      	lsls	r2, r2, #16
 800e1cc:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800e1d0:	4410      	add	r0, r2
 800e1d2:	4770      	bx	lr
 800e1d4:	080142c6 	.word	0x080142c6
 800e1d8:	080142a6 	.word	0x080142a6

0800e1dc <_Color2Index_565>:
 800e1dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800e1e0:	4a06      	ldr	r2, [pc, #24]	; (800e1fc <_Color2Index_565+0x20>)
 800e1e2:	5cd1      	ldrb	r1, [r2, r3]
 800e1e4:	4b06      	ldr	r3, [pc, #24]	; (800e200 <_Color2Index_565+0x24>)
 800e1e6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800e1ea:	b2c0      	uxtb	r0, r0
 800e1ec:	5c9a      	ldrb	r2, [r3, r2]
 800e1ee:	5c18      	ldrb	r0, [r3, r0]
 800e1f0:	02d2      	lsls	r2, r2, #11
 800e1f2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800e1f6:	4410      	add	r0, r2
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop
 800e1fc:	08014306 	.word	0x08014306
 800e200:	080141a6 	.word	0x080141a6

0800e204 <_GetIndexMask_565>:
 800e204:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e208:	4770      	bx	lr
	...

0800e20c <_Color2IndexBulk>:
 800e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20e:	f850 4b04 	ldr.w	r4, [r0], #4
 800e212:	4e0a      	ldr	r6, [pc, #40]	; (800e23c <_Color2IndexBulk+0x30>)
 800e214:	f3c4 2507 	ubfx	r5, r4, #8, #8
 800e218:	3a01      	subs	r2, #1
 800e21a:	5d77      	ldrb	r7, [r6, r5]
 800e21c:	4d08      	ldr	r5, [pc, #32]	; (800e240 <_Color2IndexBulk+0x34>)
 800e21e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 800e222:	b2e4      	uxtb	r4, r4
 800e224:	5dae      	ldrb	r6, [r5, r6]
 800e226:	5d2c      	ldrb	r4, [r5, r4]
 800e228:	ea4f 26c6 	mov.w	r6, r6, lsl #11
 800e22c:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 800e230:	4434      	add	r4, r6
 800e232:	800c      	strh	r4, [r1, #0]
 800e234:	4419      	add	r1, r3
 800e236:	d1ea      	bne.n	800e20e <_Color2IndexBulk+0x2>
 800e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e23a:	bf00      	nop
 800e23c:	08014306 	.word	0x08014306
 800e240:	080141a6 	.word	0x080141a6

0800e244 <_Index2ColorBulk>:
 800e244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e246:	1e54      	subs	r4, r2, #1
 800e248:	fb03 0004 	mla	r0, r3, r4, r0
 800e24c:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 800e250:	3c01      	subs	r4, #1
 800e252:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e256:	8805      	ldrh	r5, [r0, #0]
 800e258:	4c0a      	ldr	r4, [pc, #40]	; (800e284 <_Index2ColorBulk+0x40>)
 800e25a:	0aee      	lsrs	r6, r5, #11
 800e25c:	f005 071f 	and.w	r7, r5, #31
 800e260:	5da6      	ldrb	r6, [r4, r6]
 800e262:	5de4      	ldrb	r4, [r4, r7]
 800e264:	f3c5 1545 	ubfx	r5, r5, #5, #6
 800e268:	eb04 4406 	add.w	r4, r4, r6, lsl #16
 800e26c:	4e06      	ldr	r6, [pc, #24]	; (800e288 <_Index2ColorBulk+0x44>)
 800e26e:	5d75      	ldrb	r5, [r6, r5]
 800e270:	3a01      	subs	r2, #1
 800e272:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800e276:	f841 4904 	str.w	r4, [r1], #-4
 800e27a:	ebc3 0000 	rsb	r0, r3, r0
 800e27e:	d1ea      	bne.n	800e256 <_Index2ColorBulk+0x12>
 800e280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e282:	bf00      	nop
 800e284:	080142a6 	.word	0x080142a6
 800e288:	080142c6 	.word	0x080142c6

0800e28c <WIDGET__GetInsideRect>:
 800e28c:	b538      	push	{r3, r4, r5, lr}
 800e28e:	4604      	mov	r4, r0
 800e290:	460d      	mov	r5, r1
 800e292:	f7f9 fe55 	bl	8007f40 <WM__GetClientRectWin>
 800e296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e298:	4628      	mov	r0, r5
 800e29a:	4629      	mov	r1, r5
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2a2:	f7fd bae2 	b.w	800b86a <GUI__ReduceRect>
	...

0800e2a8 <WIDGET__Init>:
 800e2a8:	4b02      	ldr	r3, [pc, #8]	; (800e2b4 <WIDGET__Init+0xc>)
 800e2aa:	8642      	strh	r2, [r0, #50]	; 0x32
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	62c3      	str	r3, [r0, #44]	; 0x2c
 800e2b0:	8601      	strh	r1, [r0, #48]	; 0x30
 800e2b2:	4770      	bx	lr
 800e2b4:	200000a8 	.word	0x200000a8

0800e2b8 <WIDGET_SetState>:
 800e2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	4605      	mov	r5, r0
 800e2be:	f7ff fd61 	bl	800dd84 <GUI_ALLOC_LockH>
 800e2c2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800e2c4:	9001      	str	r0, [sp, #4]
 800e2c6:	4294      	cmp	r4, r2
 800e2c8:	d003      	beq.n	800e2d2 <WIDGET_SetState+0x1a>
 800e2ca:	8644      	strh	r4, [r0, #50]	; 0x32
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f7f9 ff81 	bl	80081d4 <WM_InvalidateWindow>
 800e2d2:	a801      	add	r0, sp, #4
 800e2d4:	f7ff fd64 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e2d8:	b003      	add	sp, #12
 800e2da:	bd30      	pop	{r4, r5, pc}

0800e2dc <WIDGET_OrState>:
 800e2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2de:	460c      	mov	r4, r1
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	b178      	cbz	r0, 800e304 <WIDGET_OrState+0x28>
 800e2e4:	f7ff fd4e 	bl	800dd84 <GUI_ALLOC_LockH>
 800e2e8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800e2ea:	9001      	str	r0, [sp, #4]
 800e2ec:	ea04 0102 	and.w	r1, r4, r2
 800e2f0:	428c      	cmp	r4, r1
 800e2f2:	d004      	beq.n	800e2fe <WIDGET_OrState+0x22>
 800e2f4:	4314      	orrs	r4, r2
 800e2f6:	8644      	strh	r4, [r0, #50]	; 0x32
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7f9 ff6b 	bl	80081d4 <WM_InvalidateWindow>
 800e2fe:	a801      	add	r0, sp, #4
 800e300:	f7ff fd4e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e304:	b003      	add	sp, #12
 800e306:	bd30      	pop	{r4, r5, pc}

0800e308 <WIDGET_HandleActive>:
 800e308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e30a:	460d      	mov	r5, r1
 800e30c:	b085      	sub	sp, #20
 800e30e:	4606      	mov	r6, r0
 800e310:	2800      	cmp	r0, #0
 800e312:	f000 8095 	beq.w	800e440 <WIDGET_HandleActive+0x138>
 800e316:	f7ff fd35 	bl	800dd84 <GUI_ALLOC_LockH>
 800e31a:	682b      	ldr	r3, [r5, #0]
 800e31c:	9002      	str	r0, [sp, #8]
 800e31e:	2b16      	cmp	r3, #22
 800e320:	d054      	beq.n	800e3cc <WIDGET_HandleActive+0xc4>
 800e322:	dc0c      	bgt.n	800e33e <WIDGET_HandleActive+0x36>
 800e324:	2b11      	cmp	r3, #17
 800e326:	d033      	beq.n	800e390 <WIDGET_HandleActive+0x88>
 800e328:	dc02      	bgt.n	800e330 <WIDGET_HandleActive+0x28>
 800e32a:	2b0d      	cmp	r3, #13
 800e32c:	d040      	beq.n	800e3b0 <WIDGET_HandleActive+0xa8>
 800e32e:	e080      	b.n	800e432 <WIDGET_HandleActive+0x12a>
 800e330:	2b14      	cmp	r3, #20
 800e332:	d079      	beq.n	800e428 <WIDGET_HandleActive+0x120>
 800e334:	2b15      	cmp	r3, #21
 800e336:	d17c      	bne.n	800e432 <WIDGET_HandleActive+0x12a>
 800e338:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800e33c:	e072      	b.n	800e424 <WIDGET_HandleActive+0x11c>
 800e33e:	2b1f      	cmp	r3, #31
 800e340:	d06d      	beq.n	800e41e <WIDGET_HandleActive+0x116>
 800e342:	dc02      	bgt.n	800e34a <WIDGET_HandleActive+0x42>
 800e344:	2b1e      	cmp	r3, #30
 800e346:	d044      	beq.n	800e3d2 <WIDGET_HandleActive+0xca>
 800e348:	e073      	b.n	800e432 <WIDGET_HandleActive+0x12a>
 800e34a:	2b31      	cmp	r3, #49	; 0x31
 800e34c:	d01e      	beq.n	800e38c <WIDGET_HandleActive+0x84>
 800e34e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e352:	d16e      	bne.n	800e432 <WIDGET_HandleActive+0x12a>
 800e354:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800e356:	6819      	ldr	r1, [r3, #0]
 800e358:	68eb      	ldr	r3, [r5, #12]
 800e35a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	a802      	add	r0, sp, #8
 800e360:	1acd      	subs	r5, r1, r3
 800e362:	f7ff fd1d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e366:	4630      	mov	r0, r6
 800e368:	f7ff fd0c 	bl	800dd84 <GUI_ALLOC_LockH>
 800e36c:	ac04      	add	r4, sp, #16
 800e36e:	4269      	negs	r1, r5
 800e370:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e374:	460a      	mov	r2, r1
 800e376:	462b      	mov	r3, r5
 800e378:	9500      	str	r5, [sp, #0]
 800e37a:	f7f8 fced 	bl	8006d58 <WM__UpdateChildPositions>
 800e37e:	4620      	mov	r0, r4
 800e380:	f7ff fd0e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e384:	4630      	mov	r0, r6
 800e386:	f7f9 ff25 	bl	80081d4 <WM_InvalidateWindow>
 800e38a:	e050      	b.n	800e42e <WIDGET_HandleActive+0x126>
 800e38c:	2400      	movs	r4, #0
 800e38e:	e041      	b.n	800e414 <WIDGET_HandleActive+0x10c>
 800e390:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800e392:	06d9      	lsls	r1, r3, #27
 800e394:	d54d      	bpl.n	800e432 <WIDGET_HandleActive+0x12a>
 800e396:	68eb      	ldr	r3, [r5, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d04a      	beq.n	800e432 <WIDGET_HandleActive+0x12a>
 800e39c:	7a1b      	ldrb	r3, [r3, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d047      	beq.n	800e432 <WIDGET_HandleActive+0x12a>
 800e3a2:	a802      	add	r0, sp, #8
 800e3a4:	f7ff fcfc 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e3a8:	4630      	mov	r0, r6
 800e3aa:	f7f9 f8f7 	bl	800759c <WM_SetFocus>
 800e3ae:	e040      	b.n	800e432 <WIDGET_HandleActive+0x12a>
 800e3b0:	68eb      	ldr	r3, [r5, #12]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d03c      	beq.n	800e432 <WIDGET_HandleActive+0x12a>
 800e3b8:	7a1b      	ldrb	r3, [r3, #8]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d039      	beq.n	800e432 <WIDGET_HandleActive+0x12a>
 800e3be:	a802      	add	r0, sp, #8
 800e3c0:	f7ff fcee 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f7f9 f9e1 	bl	800778c <WM_BringToTop>
 800e3ca:	e030      	b.n	800e42e <WIDGET_HandleActive+0x126>
 800e3cc:	68eb      	ldr	r3, [r5, #12]
 800e3ce:	8603      	strh	r3, [r0, #48]	; 0x30
 800e3d0:	e02d      	b.n	800e42e <WIDGET_HandleActive+0x126>
 800e3d2:	68eb      	ldr	r3, [r5, #12]
 800e3d4:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d108      	bne.n	800e3ec <WIDGET_HandleActive+0xe4>
 800e3da:	06ca      	lsls	r2, r1, #27
 800e3dc:	d50d      	bpl.n	800e3fa <WIDGET_HandleActive+0xf2>
 800e3de:	4630      	mov	r0, r6
 800e3e0:	f041 0101 	orr.w	r1, r1, #1
 800e3e4:	f7ff ff68 	bl	800e2b8 <WIDGET_SetState>
 800e3e8:	2708      	movs	r7, #8
 800e3ea:	e008      	b.n	800e3fe <WIDGET_HandleActive+0xf6>
 800e3ec:	f021 0101 	bic.w	r1, r1, #1
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ff61 	bl	800e2b8 <WIDGET_SetState>
 800e3f6:	2709      	movs	r7, #9
 800e3f8:	e001      	b.n	800e3fe <WIDGET_HandleActive+0xf6>
 800e3fa:	f04f 37ff 	mov.w	r7, #4294967295
 800e3fe:	a802      	add	r0, sp, #8
 800e400:	f7ff fcce 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e404:	1c7b      	adds	r3, r7, #1
 800e406:	f04f 0400 	mov.w	r4, #0
 800e40a:	d005      	beq.n	800e418 <WIDGET_HandleActive+0x110>
 800e40c:	4630      	mov	r0, r6
 800e40e:	4639      	mov	r1, r7
 800e410:	f7f9 f8b9 	bl	8007586 <WM_NotifyParent>
 800e414:	60ec      	str	r4, [r5, #12]
 800e416:	e00d      	b.n	800e434 <WIDGET_HandleActive+0x12c>
 800e418:	2301      	movs	r3, #1
 800e41a:	60eb      	str	r3, [r5, #12]
 800e41c:	e00a      	b.n	800e434 <WIDGET_HandleActive+0x12c>
 800e41e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800e420:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e424:	60eb      	str	r3, [r5, #12]
 800e426:	e002      	b.n	800e42e <WIDGET_HandleActive+0x126>
 800e428:	68e9      	ldr	r1, [r5, #12]
 800e42a:	f7ff ff2f 	bl	800e28c <WIDGET__GetInsideRect>
 800e42e:	2400      	movs	r4, #0
 800e430:	e000      	b.n	800e434 <WIDGET_HandleActive+0x12c>
 800e432:	2401      	movs	r4, #1
 800e434:	9b02      	ldr	r3, [sp, #8]
 800e436:	b123      	cbz	r3, 800e442 <WIDGET_HandleActive+0x13a>
 800e438:	a802      	add	r0, sp, #8
 800e43a:	f7ff fcb1 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e43e:	e000      	b.n	800e442 <WIDGET_HandleActive+0x13a>
 800e440:	2401      	movs	r4, #1
 800e442:	4620      	mov	r0, r4
 800e444:	b005      	add	sp, #20
 800e446:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e448 <FRAMEWIN_DrawSkinFlex>:
 800e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	b090      	sub	sp, #64	; 0x40
 800e450:	6800      	ldr	r0, [r0, #0]
 800e452:	4d9b      	ldr	r5, [pc, #620]	; (800e6c0 <FRAMEWIN_DrawSkinFlex+0x278>)
 800e454:	f7f8 fb70 	bl	8006b38 <FRAMEWIN_GetActive>
 800e458:	4b9a      	ldr	r3, [pc, #616]	; (800e6c4 <FRAMEWIN_DrawSkinFlex+0x27c>)
 800e45a:	6866      	ldr	r6, [r4, #4]
 800e45c:	2800      	cmp	r0, #0
 800e45e:	bf18      	it	ne
 800e460:	461d      	movne	r5, r3
 800e462:	2e1c      	cmp	r6, #28
 800e464:	f200 81a6 	bhi.w	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e468:	e8df f016 	tbh	[pc, r6, lsl #1]
 800e46c:	01a40191 	.word	0x01a40191
 800e470:	01a401a4 	.word	0x01a401a4
 800e474:	012e01a4 	.word	0x012e01a4
 800e478:	01a401a4 	.word	0x01a401a4
 800e47c:	01a401a4 	.word	0x01a401a4
 800e480:	002701a4 	.word	0x002701a4
 800e484:	01a401a4 	.word	0x01a401a4
 800e488:	01a4017e 	.word	0x01a4017e
 800e48c:	01a401a4 	.word	0x01a401a4
 800e490:	01a40145 	.word	0x01a40145
 800e494:	002301a4 	.word	0x002301a4
 800e498:	001f001d 	.word	0x001f001d
 800e49c:	01a40021 	.word	0x01a40021
 800e4a0:	01a401a4 	.word	0x01a401a4
 800e4a4:	0025      	.short	0x0025
 800e4a6:	69ee      	ldr	r6, [r5, #28]
 800e4a8:	e189      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e4aa:	6a2e      	ldr	r6, [r5, #32]
 800e4ac:	e187      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e4ae:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800e4b0:	e185      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e4b2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800e4b4:	e183      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e4b6:	696e      	ldr	r6, [r5, #20]
 800e4b8:	e181      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e4ba:	231c      	movs	r3, #28
 800e4bc:	6820      	ldr	r0, [r4, #0]
 800e4be:	9308      	str	r3, [sp, #32]
 800e4c0:	9007      	str	r0, [sp, #28]
 800e4c2:	f7ff fc5f 	bl	800dd84 <GUI_ALLOC_LockH>
 800e4c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800e4c8:	9005      	str	r0, [sp, #20]
 800e4ca:	a807      	add	r0, sp, #28
 800e4cc:	4798      	blx	r3
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	a805      	add	r0, sp, #20
 800e4d2:	f7ff fc65 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e4d6:	2e01      	cmp	r6, #1
 800e4d8:	dd11      	ble.n	800e4fe <FRAMEWIN_DrawSkinFlex+0xb6>
 800e4da:	682b      	ldr	r3, [r5, #0]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	686b      	ldr	r3, [r5, #4]
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	68ab      	ldr	r3, [r5, #8]
 800e4e4:	9302      	str	r3, [sp, #8]
 800e4e6:	6920      	ldr	r0, [r4, #16]
 800e4e8:	69a1      	ldr	r1, [r4, #24]
 800e4ea:	6962      	ldr	r2, [r4, #20]
 800e4ec:	4633      	mov	r3, r6
 800e4ee:	f002 f8c7 	bl	8010680 <GUI__DrawTwinArc2>
 800e4f2:	6923      	ldr	r3, [r4, #16]
 800e4f4:	69a7      	ldr	r7, [r4, #24]
 800e4f6:	eb06 0803 	add.w	r8, r6, r3
 800e4fa:	1bbf      	subs	r7, r7, r6
 800e4fc:	e02c      	b.n	800e558 <FRAMEWIN_DrawSkinFlex+0x110>
 800e4fe:	6828      	ldr	r0, [r5, #0]
 800e500:	f7fe f9eb 	bl	800c8da <GUI_SetColor>
 800e504:	6921      	ldr	r1, [r4, #16]
 800e506:	69ea      	ldr	r2, [r5, #28]
 800e508:	6960      	ldr	r0, [r4, #20]
 800e50a:	440a      	add	r2, r1
 800e50c:	3a01      	subs	r2, #1
 800e50e:	f002 fb05 	bl	8010b1c <GUI_DrawHLine>
 800e512:	69a2      	ldr	r2, [r4, #24]
 800e514:	69e9      	ldr	r1, [r5, #28]
 800e516:	6960      	ldr	r0, [r4, #20]
 800e518:	1a51      	subs	r1, r2, r1
 800e51a:	3101      	adds	r1, #1
 800e51c:	f002 fafe 	bl	8010b1c <GUI_DrawHLine>
 800e520:	6967      	ldr	r7, [r4, #20]
 800e522:	6920      	ldr	r0, [r4, #16]
 800e524:	3701      	adds	r7, #1
 800e526:	4639      	mov	r1, r7
 800e528:	f002 fb1c 	bl	8010b64 <GUI_DrawPixel>
 800e52c:	4639      	mov	r1, r7
 800e52e:	69a0      	ldr	r0, [r4, #24]
 800e530:	f002 fb18 	bl	8010b64 <GUI_DrawPixel>
 800e534:	6868      	ldr	r0, [r5, #4]
 800e536:	f7fe f9d0 	bl	800c8da <GUI_SetColor>
 800e53a:	6920      	ldr	r0, [r4, #16]
 800e53c:	4639      	mov	r1, r7
 800e53e:	3001      	adds	r0, #1
 800e540:	f002 fb10 	bl	8010b64 <GUI_DrawPixel>
 800e544:	69a0      	ldr	r0, [r4, #24]
 800e546:	4639      	mov	r1, r7
 800e548:	3801      	subs	r0, #1
 800e54a:	f002 fb0b 	bl	8010b64 <GUI_DrawPixel>
 800e54e:	6923      	ldr	r3, [r4, #16]
 800e550:	69a7      	ldr	r7, [r4, #24]
 800e552:	f103 0802 	add.w	r8, r3, #2
 800e556:	3f02      	subs	r7, #2
 800e558:	6828      	ldr	r0, [r5, #0]
 800e55a:	f7fe f9be 	bl	800c8da <GUI_SetColor>
 800e55e:	4641      	mov	r1, r8
 800e560:	463a      	mov	r2, r7
 800e562:	6960      	ldr	r0, [r4, #20]
 800e564:	f002 fada 	bl	8010b1c <GUI_DrawHLine>
 800e568:	6868      	ldr	r0, [r5, #4]
 800e56a:	f7fe f9b6 	bl	800c8da <GUI_SetColor>
 800e56e:	6960      	ldr	r0, [r4, #20]
 800e570:	4641      	mov	r1, r8
 800e572:	3001      	adds	r0, #1
 800e574:	463a      	mov	r2, r7
 800e576:	f002 fad1 	bl	8010b1c <GUI_DrawHLine>
 800e57a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	dd0a      	ble.n	800e596 <FRAMEWIN_DrawSkinFlex+0x14e>
 800e580:	68a8      	ldr	r0, [r5, #8]
 800e582:	f7fe f9aa 	bl	800c8da <GUI_SetColor>
 800e586:	6961      	ldr	r1, [r4, #20]
 800e588:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e58a:	440b      	add	r3, r1
 800e58c:	4640      	mov	r0, r8
 800e58e:	3102      	adds	r1, #2
 800e590:	463a      	mov	r2, r7
 800e592:	3b01      	subs	r3, #1
 800e594:	e01d      	b.n	800e5d2 <FRAMEWIN_DrawSkinFlex+0x18a>
 800e596:	6a2a      	ldr	r2, [r5, #32]
 800e598:	42b2      	cmp	r2, r6
 800e59a:	dd1c      	ble.n	800e5d6 <FRAMEWIN_DrawSkinFlex+0x18e>
 800e59c:	6967      	ldr	r7, [r4, #20]
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	2e01      	cmp	r6, #1
 800e5a2:	f107 0802 	add.w	r8, r7, #2
 800e5a6:	f340 8107 	ble.w	800e7b8 <FRAMEWIN_DrawSkinFlex+0x370>
 800e5aa:	4437      	add	r7, r6
 800e5ac:	18f0      	adds	r0, r6, r3
 800e5ae:	441a      	add	r2, r3
 800e5b0:	3a01      	subs	r2, #1
 800e5b2:	4641      	mov	r1, r8
 800e5b4:	463b      	mov	r3, r7
 800e5b6:	f002 fb19 	bl	8010bec <GUI_FillRect>
 800e5ba:	69a3      	ldr	r3, [r4, #24]
 800e5bc:	69e8      	ldr	r0, [r5, #28]
 800e5be:	2e01      	cmp	r6, #1
 800e5c0:	ebc0 0003 	rsb	r0, r0, r3
 800e5c4:	bfcc      	ite	gt
 800e5c6:	ebc6 0203 	rsbgt	r2, r6, r3
 800e5ca:	1e9a      	suble	r2, r3, #2
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	4641      	mov	r1, r8
 800e5d0:	463b      	mov	r3, r7
 800e5d2:	f002 fb0b 	bl	8010bec <GUI_FillRect>
 800e5d6:	6963      	ldr	r3, [r4, #20]
 800e5d8:	69e7      	ldr	r7, [r4, #28]
 800e5da:	6828      	ldr	r0, [r5, #0]
 800e5dc:	2e01      	cmp	r6, #1
 800e5de:	bfcc      	ite	gt
 800e5e0:	18f6      	addgt	r6, r6, r3
 800e5e2:	1c9e      	addle	r6, r3, #2
 800e5e4:	3f01      	subs	r7, #1
 800e5e6:	f7fe f978 	bl	800c8da <GUI_SetColor>
 800e5ea:	463a      	mov	r2, r7
 800e5ec:	6920      	ldr	r0, [r4, #16]
 800e5ee:	4631      	mov	r1, r6
 800e5f0:	f002 fada 	bl	8010ba8 <GUI_DrawVLine>
 800e5f4:	463a      	mov	r2, r7
 800e5f6:	4631      	mov	r1, r6
 800e5f8:	69a0      	ldr	r0, [r4, #24]
 800e5fa:	f002 fad5 	bl	8010ba8 <GUI_DrawVLine>
 800e5fe:	69e7      	ldr	r7, [r4, #28]
 800e600:	6868      	ldr	r0, [r5, #4]
 800e602:	f7fe f96a 	bl	800c8da <GUI_SetColor>
 800e606:	6920      	ldr	r0, [r4, #16]
 800e608:	3f02      	subs	r7, #2
 800e60a:	3001      	adds	r0, #1
 800e60c:	4631      	mov	r1, r6
 800e60e:	463a      	mov	r2, r7
 800e610:	f002 faca 	bl	8010ba8 <GUI_DrawVLine>
 800e614:	69a0      	ldr	r0, [r4, #24]
 800e616:	4631      	mov	r1, r6
 800e618:	3801      	subs	r0, #1
 800e61a:	463a      	mov	r2, r7
 800e61c:	f002 fac4 	bl	8010ba8 <GUI_DrawVLine>
 800e620:	69eb      	ldr	r3, [r5, #28]
 800e622:	2b02      	cmp	r3, #2
 800e624:	dc02      	bgt.n	800e62c <FRAMEWIN_DrawSkinFlex+0x1e4>
 800e626:	6a2b      	ldr	r3, [r5, #32]
 800e628:	2b02      	cmp	r3, #2
 800e62a:	dd20      	ble.n	800e66e <FRAMEWIN_DrawSkinFlex+0x226>
 800e62c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e62e:	69e7      	ldr	r7, [r4, #28]
 800e630:	68a8      	ldr	r0, [r5, #8]
 800e632:	2b02      	cmp	r3, #2
 800e634:	bfcc      	ite	gt
 800e636:	ebc3 0707 	rsbgt	r7, r3, r7
 800e63a:	3f02      	suble	r7, #2
 800e63c:	f7fe f94d 	bl	800c8da <GUI_SetColor>
 800e640:	69ea      	ldr	r2, [r5, #28]
 800e642:	2a02      	cmp	r2, #2
 800e644:	dd07      	ble.n	800e656 <FRAMEWIN_DrawSkinFlex+0x20e>
 800e646:	6920      	ldr	r0, [r4, #16]
 800e648:	4402      	add	r2, r0
 800e64a:	4631      	mov	r1, r6
 800e64c:	3002      	adds	r0, #2
 800e64e:	3a01      	subs	r2, #1
 800e650:	463b      	mov	r3, r7
 800e652:	f002 facb 	bl	8010bec <GUI_FillRect>
 800e656:	6a2b      	ldr	r3, [r5, #32]
 800e658:	2b02      	cmp	r3, #2
 800e65a:	dd08      	ble.n	800e66e <FRAMEWIN_DrawSkinFlex+0x226>
 800e65c:	69a2      	ldr	r2, [r4, #24]
 800e65e:	69e8      	ldr	r0, [r5, #28]
 800e660:	1a10      	subs	r0, r2, r0
 800e662:	3001      	adds	r0, #1
 800e664:	4631      	mov	r1, r6
 800e666:	3a02      	subs	r2, #2
 800e668:	463b      	mov	r3, r7
 800e66a:	f002 fabf 	bl	8010bec <GUI_FillRect>
 800e66e:	6828      	ldr	r0, [r5, #0]
 800e670:	f7fe f933 	bl	800c8da <GUI_SetColor>
 800e674:	6921      	ldr	r1, [r4, #16]
 800e676:	69a2      	ldr	r2, [r4, #24]
 800e678:	69e0      	ldr	r0, [r4, #28]
 800e67a:	f002 fa4f 	bl	8010b1c <GUI_DrawHLine>
 800e67e:	6868      	ldr	r0, [r5, #4]
 800e680:	f7fe f92b 	bl	800c8da <GUI_SetColor>
 800e684:	69e0      	ldr	r0, [r4, #28]
 800e686:	6921      	ldr	r1, [r4, #16]
 800e688:	69a2      	ldr	r2, [r4, #24]
 800e68a:	3801      	subs	r0, #1
 800e68c:	3101      	adds	r1, #1
 800e68e:	3a01      	subs	r2, #1
 800e690:	f002 fa44 	bl	8010b1c <GUI_DrawHLine>
 800e694:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800e696:	2e02      	cmp	r6, #2
 800e698:	f340 808c 	ble.w	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e69c:	6920      	ldr	r0, [r4, #16]
 800e69e:	69a2      	ldr	r2, [r4, #24]
 800e6a0:	69e4      	ldr	r4, [r4, #28]
 800e6a2:	f100 0802 	add.w	r8, r0, #2
 800e6a6:	68a8      	ldr	r0, [r5, #8]
 800e6a8:	1e97      	subs	r7, r2, #2
 800e6aa:	f7fe f916 	bl	800c8da <GUI_SetColor>
 800e6ae:	1ba1      	subs	r1, r4, r6
 800e6b0:	4640      	mov	r0, r8
 800e6b2:	3101      	adds	r1, #1
 800e6b4:	463a      	mov	r2, r7
 800e6b6:	1ea3      	subs	r3, r4, #2
 800e6b8:	f002 fa98 	bl	8010bec <GUI_FillRect>
 800e6bc:	e07a      	b.n	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e6be:	bf00      	nop
 800e6c0:	200000d8 	.word	0x200000d8
 800e6c4:	200000ac 	.word	0x200000ac
 800e6c8:	8a20      	ldrh	r0, [r4, #16]
 800e6ca:	8aa1      	ldrh	r1, [r4, #20]
 800e6cc:	8b22      	ldrh	r2, [r4, #24]
 800e6ce:	8ba3      	ldrh	r3, [r4, #28]
 800e6d0:	68ec      	ldr	r4, [r5, #12]
 800e6d2:	9400      	str	r4, [sp, #0]
 800e6d4:	692c      	ldr	r4, [r5, #16]
 800e6d6:	f8ad 001c 	strh.w	r0, [sp, #28]
 800e6da:	f8ad 101e 	strh.w	r1, [sp, #30]
 800e6de:	f8ad 2020 	strh.w	r2, [sp, #32]
 800e6e2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e6e6:	9401      	str	r4, [sp, #4]
 800e6e8:	b200      	sxth	r0, r0
 800e6ea:	b209      	sxth	r1, r1
 800e6ec:	b212      	sxth	r2, r2
 800e6ee:	b21b      	sxth	r3, r3
 800e6f0:	f002 fb80 	bl	8010df4 <GUI_DrawGradientV>
 800e6f4:	e05e      	b.n	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e6f6:	8b2b      	ldrh	r3, [r5, #24]
 800e6f8:	6922      	ldr	r2, [r4, #16]
 800e6fa:	6820      	ldr	r0, [r4, #0]
 800e6fc:	441a      	add	r2, r3
 800e6fe:	f8ad 201c 	strh.w	r2, [sp, #28]
 800e702:	6962      	ldr	r2, [r4, #20]
 800e704:	f8ad 201e 	strh.w	r2, [sp, #30]
 800e708:	69a2      	ldr	r2, [r4, #24]
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e710:	69e3      	ldr	r3, [r4, #28]
 800e712:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e716:	f7ff fb35 	bl	800dd84 <GUI_ALLOC_LockH>
 800e71a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800e71c:	9005      	str	r0, [sp, #20]
 800e71e:	b1fb      	cbz	r3, 800e760 <FRAMEWIN_DrawSkinFlex+0x318>
 800e720:	2002      	movs	r0, #2
 800e722:	f7fe f915 	bl	800c950 <GUI_SetTextMode>
 800e726:	9b05      	ldr	r3, [sp, #20]
 800e728:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800e72c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800e730:	320e      	adds	r2, #14
 800e732:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e736:	6898      	ldr	r0, [r3, #8]
 800e738:	f7fe f8cf 	bl	800c8da <GUI_SetColor>
 800e73c:	9b05      	ldr	r3, [sp, #20]
 800e73e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e740:	f7fe f8d0 	bl	800c8e4 <GUI_SetFont>
 800e744:	9b05      	ldr	r3, [sp, #20]
 800e746:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e748:	f7ff fb1c 	bl	800dd84 <GUI_ALLOC_LockH>
 800e74c:	9b05      	ldr	r3, [sp, #20]
 800e74e:	9006      	str	r0, [sp, #24]
 800e750:	a907      	add	r1, sp, #28
 800e752:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 800e756:	f7fd fd28 	bl	800c1aa <GUI_DispStringInRect>
 800e75a:	a806      	add	r0, sp, #24
 800e75c:	f7ff fb20 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e760:	a805      	add	r0, sp, #20
 800e762:	f7ff fb1d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e766:	e025      	b.n	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e768:	6923      	ldr	r3, [r4, #16]
 800e76a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e76e:	6963      	ldr	r3, [r4, #20]
 800e770:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e774:	69a3      	ldr	r3, [r4, #24]
 800e776:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e77a:	68a8      	ldr	r0, [r5, #8]
 800e77c:	69e3      	ldr	r3, [r4, #28]
 800e77e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e782:	f7fe f8aa 	bl	800c8da <GUI_SetColor>
 800e786:	a807      	add	r0, sp, #28
 800e788:	f002 fa52 	bl	8010c30 <GUI_FillRectEx>
 800e78c:	e012      	b.n	800e7b4 <FRAMEWIN_DrawSkinFlex+0x36c>
 800e78e:	6820      	ldr	r0, [r4, #0]
 800e790:	f7ff faf8 	bl	800dd84 <GUI_ALLOC_LockH>
 800e794:	ab10      	add	r3, sp, #64	; 0x40
 800e796:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 800e79a:	f843 0d2c 	str.w	r0, [r3, #-44]!
 800e79e:	f042 020c 	orr.w	r2, r2, #12
 800e7a2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff fafa 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e7ac:	6820      	ldr	r0, [r4, #0]
 800e7ae:	f7f8 fb67 	bl	8006e80 <WM_SetHasTrans>
 800e7b2:	e004      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e7b4:	2600      	movs	r6, #0
 800e7b6:	e002      	b.n	800e7be <FRAMEWIN_DrawSkinFlex+0x376>
 800e7b8:	1c98      	adds	r0, r3, #2
 800e7ba:	4647      	mov	r7, r8
 800e7bc:	e6f7      	b.n	800e5ae <FRAMEWIN_DrawSkinFlex+0x166>
 800e7be:	4630      	mov	r0, r6
 800e7c0:	b010      	add	sp, #64	; 0x40
 800e7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c6:	bf00      	nop

0800e7c8 <_GetBorderSize>:
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	b08a      	sub	sp, #40	; 0x28
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	460c      	mov	r4, r1
 800e7d0:	f7ff fad8 	bl	800dd84 <GUI_ALLOC_LockH>
 800e7d4:	ab0a      	add	r3, sp, #40	; 0x28
 800e7d6:	6d06      	ldr	r6, [r0, #80]	; 0x50
 800e7d8:	f843 0d28 	str.w	r0, [r3, #-40]!
 800e7dc:	4668      	mov	r0, sp
 800e7de:	f7ff fadf 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e7e2:	9501      	str	r5, [sp, #4]
 800e7e4:	2c03      	cmp	r4, #3
 800e7e6:	d80b      	bhi.n	800e800 <_GetBorderSize+0x38>
 800e7e8:	e8df f004 	tbb	[pc, r4]
 800e7ec:	08060402 	.word	0x08060402
 800e7f0:	2318      	movs	r3, #24
 800e7f2:	e004      	b.n	800e7fe <_GetBorderSize+0x36>
 800e7f4:	2316      	movs	r3, #22
 800e7f6:	e002      	b.n	800e7fe <_GetBorderSize+0x36>
 800e7f8:	2315      	movs	r3, #21
 800e7fa:	e000      	b.n	800e7fe <_GetBorderSize+0x36>
 800e7fc:	2317      	movs	r3, #23
 800e7fe:	9302      	str	r3, [sp, #8]
 800e800:	a801      	add	r0, sp, #4
 800e802:	47b0      	blx	r6
 800e804:	b00a      	add	sp, #40	; 0x28
 800e806:	bd70      	pop	{r4, r5, r6, pc}

0800e808 <_Create>:
 800e808:	b530      	push	{r4, r5, lr}
 800e80a:	b08b      	sub	sp, #44	; 0x2c
 800e80c:	4605      	mov	r5, r0
 800e80e:	f7ff fab9 	bl	800dd84 <GUI_ALLOC_LockH>
 800e812:	ab0a      	add	r3, sp, #40	; 0x28
 800e814:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e816:	f843 0d28 	str.w	r0, [r3, #-40]!
 800e81a:	4668      	mov	r0, sp
 800e81c:	6894      	ldr	r4, [r2, #8]
 800e81e:	f7ff fabf 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e822:	a80a      	add	r0, sp, #40	; 0x28
 800e824:	2300      	movs	r3, #0
 800e826:	9302      	str	r3, [sp, #8]
 800e828:	f840 5d24 	str.w	r5, [r0, #-36]!
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	4798      	blx	r3
 800e830:	b00b      	add	sp, #44	; 0x2c
 800e832:	bd30      	pop	{r4, r5, pc}

0800e834 <_Paint>:
 800e834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e838:	b091      	sub	sp, #68	; 0x44
 800e83a:	4604      	mov	r4, r0
 800e83c:	f7ff faa2 	bl	800dd84 <GUI_ALLOC_LockH>
 800e840:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800e842:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800e844:	9603      	str	r6, [sp, #12]
 800e846:	9006      	str	r0, [sp, #24]
 800e848:	689e      	ldr	r6, [r3, #8]
 800e84a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800e84c:	f7f7 feaa 	bl	80065a4 <FRAMEWIN__CalcTitleHeight>
 800e850:	4683      	mov	fp, r0
 800e852:	a810      	add	r0, sp, #64	; 0x40
 800e854:	f850 2d28 	ldr.w	r2, [r0, #-40]!
 800e858:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 800e85c:	9204      	str	r2, [sp, #16]
 800e85e:	f7ff fa9f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e862:	4620      	mov	r0, r4
 800e864:	f7f8 ff66 	bl	8007734 <WM_GetWindowSizeX>
 800e868:	4681      	mov	r9, r0
 800e86a:	4620      	mov	r0, r4
 800e86c:	f7f8 ff77 	bl	800775e <WM_GetWindowSizeY>
 800e870:	6832      	ldr	r2, [r6, #0]
 800e872:	2101      	movs	r1, #1
 800e874:	4680      	mov	r8, r0
 800e876:	4620      	mov	r0, r4
 800e878:	4790      	blx	r2
 800e87a:	6832      	ldr	r2, [r6, #0]
 800e87c:	2103      	movs	r1, #3
 800e87e:	4607      	mov	r7, r0
 800e880:	4620      	mov	r0, r4
 800e882:	4790      	blx	r2
 800e884:	6832      	ldr	r2, [r6, #0]
 800e886:	2100      	movs	r1, #0
 800e888:	4682      	mov	sl, r0
 800e88a:	4620      	mov	r0, r4
 800e88c:	4790      	blx	r2
 800e88e:	6833      	ldr	r3, [r6, #0]
 800e890:	9002      	str	r0, [sp, #8]
 800e892:	2102      	movs	r1, #2
 800e894:	4620      	mov	r0, r4
 800e896:	4798      	blx	r3
 800e898:	9005      	str	r0, [sp, #20]
 800e89a:	2000      	movs	r0, #0
 800e89c:	9407      	str	r4, [sp, #28]
 800e89e:	f7f9 ff05 	bl	80086ac <WM__InitIVRSearch>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d044      	beq.n	800e930 <_Paint+0xfc>
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	930c      	str	r3, [sp, #48]	; 0x30
 800e8aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8ac:	f109 33ff 	add.w	r3, r9, #4294967295
 800e8b0:	930d      	str	r3, [sp, #52]	; 0x34
 800e8b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800e8b6:	930e      	str	r3, [sp, #56]	; 0x38
 800e8b8:	230b      	movs	r3, #11
 800e8ba:	9308      	str	r3, [sp, #32]
 800e8bc:	a807      	add	r0, sp, #28
 800e8be:	47a8      	blx	r5
 800e8c0:	9b02      	ldr	r3, [sp, #8]
 800e8c2:	9e04      	ldr	r6, [sp, #16]
 800e8c4:	970b      	str	r7, [sp, #44]	; 0x2c
 800e8c6:	445b      	add	r3, fp
 800e8c8:	fa03 f086 	sxtah	r0, r3, r6
 800e8cc:	9e05      	ldr	r6, [sp, #20]
 800e8ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e8d0:	ebc6 0108 	rsb	r1, r6, r8
 800e8d4:	ebca 0209 	rsb	r2, sl, r9
 800e8d8:	3801      	subs	r0, #1
 800e8da:	3901      	subs	r1, #1
 800e8dc:	3a01      	subs	r2, #1
 800e8de:	4288      	cmp	r0, r1
 800e8e0:	bfd4      	ite	le
 800e8e2:	900e      	strle	r0, [sp, #56]	; 0x38
 800e8e4:	910e      	strgt	r1, [sp, #56]	; 0x38
 800e8e6:	210e      	movs	r1, #14
 800e8e8:	9108      	str	r1, [sp, #32]
 800e8ea:	e88d 000c 	stmia.w	sp, {r2, r3}
 800e8ee:	920d      	str	r2, [sp, #52]	; 0x34
 800e8f0:	a807      	add	r0, sp, #28
 800e8f2:	47a8      	blx	r5
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	9a00      	ldr	r2, [sp, #0]
 800e8f8:	9e02      	ldr	r6, [sp, #8]
 800e8fa:	920d      	str	r2, [sp, #52]	; 0x34
 800e8fc:	3b01      	subs	r3, #1
 800e8fe:	930e      	str	r3, [sp, #56]	; 0x38
 800e900:	2305      	movs	r3, #5
 800e902:	9308      	str	r3, [sp, #32]
 800e904:	970b      	str	r7, [sp, #44]	; 0x2c
 800e906:	960c      	str	r6, [sp, #48]	; 0x30
 800e908:	a807      	add	r0, sp, #28
 800e90a:	47a8      	blx	r5
 800e90c:	a90b      	add	r1, sp, #44	; 0x2c
 800e90e:	aa0d      	add	r2, sp, #52	; 0x34
 800e910:	4620      	mov	r0, r4
 800e912:	f7f7 fe56 	bl	80065c2 <FRAMEWIN__GetTitleLimits>
 800e916:	2002      	movs	r0, #2
 800e918:	f7fe f81a 	bl	800c950 <GUI_SetTextMode>
 800e91c:	9803      	ldr	r0, [sp, #12]
 800e91e:	f7fd ffe1 	bl	800c8e4 <GUI_SetFont>
 800e922:	2312      	movs	r3, #18
 800e924:	9308      	str	r3, [sp, #32]
 800e926:	a807      	add	r0, sp, #28
 800e928:	47a8      	blx	r5
 800e92a:	f7f9 fdfd 	bl	8008528 <WM__GetNextIVR>
 800e92e:	e7b8      	b.n	800e8a2 <_Paint+0x6e>
 800e930:	b011      	add	sp, #68	; 0x44
 800e932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e936 <WM_DeleteTimer>:
 800e936:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e938:	4605      	mov	r5, r0
 800e93a:	b168      	cbz	r0, 800e958 <WM_DeleteTimer+0x22>
 800e93c:	f7ff fa22 	bl	800dd84 <GUI_ALLOC_LockH>
 800e940:	ac02      	add	r4, sp, #8
 800e942:	f844 0d04 	str.w	r0, [r4, #-4]!
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	f7fd fad0 	bl	800beec <GUI_TIMER_Delete>
 800e94c:	4620      	mov	r0, r4
 800e94e:	f7ff fa27 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800e952:	4628      	mov	r0, r5
 800e954:	f7ff fa50 	bl	800ddf8 <GUI_ALLOC_Free>
 800e958:	b003      	add	sp, #12
 800e95a:	bd30      	pop	{r4, r5, pc}

0800e95c <WM__DeleteAssocTimer>:
 800e95c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e95e:	4605      	mov	r5, r0
 800e960:	a801      	add	r0, sp, #4
 800e962:	f7fd fa8f 	bl	800be84 <GUI_TIMER__GetFirstTimer>
 800e966:	4604      	mov	r4, r0
 800e968:	b1dc      	cbz	r4, 800e9a2 <WM__DeleteAssocTimer+0x46>
 800e96a:	4620      	mov	r0, r4
 800e96c:	2101      	movs	r1, #1
 800e96e:	f7fd faf1 	bl	800bf54 <GUI_TIMER_GetFlag>
 800e972:	9b01      	ldr	r3, [sp, #4]
 800e974:	b183      	cbz	r3, 800e998 <WM__DeleteAssocTimer+0x3c>
 800e976:	b178      	cbz	r0, 800e998 <WM__DeleteAssocTimer+0x3c>
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff f9f9 	bl	800dd70 <GUI_ALLOC_h2p>
 800e97e:	6843      	ldr	r3, [r0, #4]
 800e980:	42ab      	cmp	r3, r5
 800e982:	d109      	bne.n	800e998 <WM__DeleteAssocTimer+0x3c>
 800e984:	4620      	mov	r0, r4
 800e986:	a901      	add	r1, sp, #4
 800e988:	9e01      	ldr	r6, [sp, #4]
 800e98a:	f7fd fa93 	bl	800beb4 <GUI_TIMER__GetNextTimerLin>
 800e98e:	4604      	mov	r4, r0
 800e990:	4630      	mov	r0, r6
 800e992:	f7ff ffd0 	bl	800e936 <WM_DeleteTimer>
 800e996:	e7e7      	b.n	800e968 <WM__DeleteAssocTimer+0xc>
 800e998:	4620      	mov	r0, r4
 800e99a:	a901      	add	r1, sp, #4
 800e99c:	f7fd fa8a 	bl	800beb4 <GUI_TIMER__GetNextTimerLin>
 800e9a0:	e7e1      	b.n	800e966 <WM__DeleteAssocTimer+0xa>
 800e9a2:	b002      	add	sp, #8
 800e9a4:	bd70      	pop	{r4, r5, r6, pc}

0800e9a6 <_Convert16>:
 800e9a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9aa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e9ae:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e9b2:	4605      	mov	r5, r0
 800e9b4:	460e      	mov	r6, r1
 800e9b6:	4690      	mov	r8, r2
 800e9b8:	461f      	mov	r7, r3
 800e9ba:	4614      	mov	r4, r2
 800e9bc:	4689      	mov	r9, r1
 800e9be:	f835 0b02 	ldrh.w	r0, [r5], #2
 800e9c2:	47d8      	blx	fp
 800e9c4:	47d0      	blx	sl
 800e9c6:	3c01      	subs	r4, #1
 800e9c8:	f849 0b04 	str.w	r0, [r9], #4
 800e9cc:	d1f7      	bne.n	800e9be <_Convert16+0x18>
 800e9ce:	2f1f      	cmp	r7, #31
 800e9d0:	d806      	bhi.n	800e9e0 <_Convert16+0x3a>
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	4641      	mov	r1, r8
 800e9d6:	463a      	mov	r2, r7
 800e9d8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	f001 bf04 	b.w	80107e8 <GUI__CompactPixelIndices>
 800e9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9e4 <_Convert8>:
 800e9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800e9ec:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	460e      	mov	r6, r1
 800e9f4:	4690      	mov	r8, r2
 800e9f6:	461f      	mov	r7, r3
 800e9f8:	4689      	mov	r9, r1
 800e9fa:	4604      	mov	r4, r0
 800e9fc:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ea00:	47d8      	blx	fp
 800ea02:	47d0      	blx	sl
 800ea04:	1b2b      	subs	r3, r5, r4
 800ea06:	4443      	add	r3, r8
 800ea08:	f849 0b04 	str.w	r0, [r9], #4
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1f5      	bne.n	800e9fc <_Convert8+0x18>
 800ea10:	2f1f      	cmp	r7, #31
 800ea12:	d806      	bhi.n	800ea22 <_Convert8+0x3e>
 800ea14:	4630      	mov	r0, r6
 800ea16:	4641      	mov	r1, r8
 800ea18:	463a      	mov	r2, r7
 800ea1a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1e:	f001 bee3 	b.w	80107e8 <GUI__CompactPixelIndices>
 800ea22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ea28 <GUI_MEMDEV__WriteToActiveOpaque>:
 800ea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	b09d      	sub	sp, #116	; 0x74
 800ea2e:	4606      	mov	r6, r0
 800ea30:	910f      	str	r1, [sp, #60]	; 0x3c
 800ea32:	920d      	str	r2, [sp, #52]	; 0x34
 800ea34:	2800      	cmp	r0, #0
 800ea36:	f000 8386 	beq.w	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ea3a:	f7ff f9a3 	bl	800dd84 <GUI_ALLOC_LockH>
 800ea3e:	ab1c      	add	r3, sp, #112	; 0x70
 800ea40:	6944      	ldr	r4, [r0, #20]
 800ea42:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7ff f9aa 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	f7fb f823 	bl	8009a98 <GUI_MEMDEV_GetBitsPerPixel>
 800ea52:	2808      	cmp	r0, #8
 800ea54:	4601      	mov	r1, r0
 800ea56:	dd02      	ble.n	800ea5e <GUI_MEMDEV__WriteToActiveOpaque+0x36>
 800ea58:	2c00      	cmp	r4, #0
 800ea5a:	f000 81c3 	beq.w	800ede4 <GUI_MEMDEV__WriteToActiveOpaque+0x3bc>
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f04f 0800 	mov.w	r8, #0
 800ea64:	4630      	mov	r0, r6
 800ea66:	921b      	str	r2, [sp, #108]	; 0x6c
 800ea68:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ea6e:	f7ff f989 	bl	800dd84 <GUI_ALLOC_LockH>
 800ea72:	6803      	ldr	r3, [r0, #0]
 800ea74:	f8df a60c 	ldr.w	sl, [pc, #1548]	; 800f084 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	930e      	str	r3, [sp, #56]	; 0x38
 800ea82:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800ea86:	f8da 3000 	ldr.w	r3, [sl]
 800ea8a:	f84b 0d14 	str.w	r0, [fp, #-20]!
 800ea8e:	6904      	ldr	r4, [r0, #16]
 800ea90:	6945      	ldr	r5, [r0, #20]
 800ea92:	f8d0 900c 	ldr.w	r9, [r0, #12]
 800ea96:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800ea9a:	7c58      	ldrb	r0, [r3, #17]
 800ea9c:	9112      	str	r1, [sp, #72]	; 0x48
 800ea9e:	f7fc fa19 	bl	800aed4 <GUI_GetBitsPerPixelEx>
 800eaa2:	f8da 3000 	ldr.w	r3, [sl]
 800eaa6:	9010      	str	r0, [sp, #64]	; 0x40
 800eaa8:	7c58      	ldrb	r0, [r3, #17]
 800eaaa:	f7fc fa31 	bl	800af10 <GUI_GetpfIndex2ColorEx>
 800eaae:	4603      	mov	r3, r0
 800eab0:	4658      	mov	r0, fp
 800eab2:	9309      	str	r3, [sp, #36]	; 0x24
 800eab4:	f7ff f974 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800eab8:	2c08      	cmp	r4, #8
 800eaba:	4651      	mov	r1, sl
 800eabc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eac0:	d904      	bls.n	800eacc <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 800eac2:	2c10      	cmp	r4, #16
 800eac4:	bf8c      	ite	hi
 800eac6:	2204      	movhi	r2, #4
 800eac8:	2202      	movls	r2, #2
 800eaca:	e005      	b.n	800ead8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800eacc:	2c01      	cmp	r4, #1
 800eace:	d103      	bne.n	800ead8 <GUI_MEMDEV__WriteToActiveOpaque+0xb0>
 800ead0:	9411      	str	r4, [sp, #68]	; 0x44
 800ead2:	f10d 0868 	add.w	r8, sp, #104	; 0x68
 800ead6:	e000      	b.n	800eada <GUI_MEMDEV__WriteToActiveOpaque+0xb2>
 800ead8:	9211      	str	r2, [sp, #68]	; 0x44
 800eada:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eadc:	4298      	cmp	r0, r3
 800eade:	f000 80e2 	beq.w	800eca6 <GUI_MEMDEV__WriteToActiveOpaque+0x27e>
 800eae2:	680b      	ldr	r3, [r1, #0]
 800eae4:	7c58      	ldrb	r0, [r3, #17]
 800eae6:	f7fc fa23 	bl	800af30 <GUI_GetpfColor2IndexEx>
 800eaea:	9013      	str	r0, [sp, #76]	; 0x4c
 800eaec:	00b8      	lsls	r0, r7, #2
 800eaee:	f7ff fb15 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800eaf2:	900c      	str	r0, [sp, #48]	; 0x30
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	f000 8326 	beq.w	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800eafa:	4630      	mov	r0, r6
 800eafc:	f7fa f964 	bl	8008dc8 <GUI_MEMDEV_GetDataPtr>
 800eb00:	4606      	mov	r6, r0
 800eb02:	2d00      	cmp	r5, #0
 800eb04:	f000 80be 	beq.w	800ec84 <GUI_MEMDEV__WriteToActiveOpaque+0x25c>
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f7ff f93b 	bl	800dd84 <GUI_ALLOC_LockH>
 800eb0e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800eb12:	9018      	str	r0, [sp, #96]	; 0x60
 800eb14:	f04f 0a00 	mov.w	sl, #0
 800eb18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb1a:	4592      	cmp	sl, r2
 800eb1c:	f280 80ae 	bge.w	800ec7c <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800eb20:	9818      	ldr	r0, [sp, #96]	; 0x60
 800eb22:	2300      	movs	r3, #0
 800eb24:	9319      	str	r3, [sp, #100]	; 0x64
 800eb26:	6883      	ldr	r3, [r0, #8]
 800eb28:	a919      	add	r1, sp, #100	; 0x64
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	4652      	mov	r2, sl
 800eb2e:	4798      	blx	r3
 800eb30:	42b8      	cmp	r0, r7
 800eb32:	4605      	mov	r5, r0
 800eb34:	d12f      	bne.n	800eb96 <GUI_MEMDEV__WriteToActiveOpaque+0x16e>
 800eb36:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eb38:	f7ff f924 	bl	800dd84 <GUI_ALLOC_LockH>
 800eb3c:	2c08      	cmp	r4, #8
 800eb3e:	4601      	mov	r1, r0
 800eb40:	9016      	str	r0, [sp, #88]	; 0x58
 800eb42:	d909      	bls.n	800eb58 <GUI_MEMDEV__WriteToActiveOpaque+0x130>
 800eb44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eb46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb48:	9200      	str	r2, [sp, #0]
 800eb4a:	9301      	str	r3, [sp, #4]
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	463a      	mov	r2, r7
 800eb50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb52:	f7ff ff28 	bl	800e9a6 <_Convert16>
 800eb56:	e008      	b.n	800eb6a <GUI_MEMDEV__WriteToActiveOpaque+0x142>
 800eb58:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eb5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eb5c:	9000      	str	r0, [sp, #0]
 800eb5e:	9201      	str	r2, [sp, #4]
 800eb60:	4630      	mov	r0, r6
 800eb62:	463a      	mov	r2, r7
 800eb64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb66:	f7ff ff3d 	bl	800e9e4 <_Convert8>
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800eb6e:	9002      	str	r0, [sp, #8]
 800eb70:	ad1c      	add	r5, sp, #112	; 0x70
 800eb72:	2200      	movs	r2, #0
 800eb74:	9300      	str	r3, [sp, #0]
 800eb76:	9301      	str	r3, [sp, #4]
 800eb78:	9203      	str	r2, [sp, #12]
 800eb7a:	f855 2d18 	ldr.w	r2, [r5, #-24]!
 800eb7e:	9204      	str	r2, [sp, #16]
 800eb80:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eb82:	f8cd 8014 	str.w	r8, [sp, #20]
 800eb86:	4659      	mov	r1, fp
 800eb88:	463a      	mov	r2, r7
 800eb8a:	f7fc fbed 	bl	800b368 <LCD_DrawBitmap>
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f7ff f906 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800eb94:	e060      	b.n	800ec58 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800eb96:	2c01      	cmp	r4, #1
 800eb98:	d15c      	bne.n	800ec54 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 800eb9a:	2d00      	cmp	r5, #0
 800eb9c:	d05c      	beq.n	800ec58 <GUI_MEMDEV__WriteToActiveOpaque+0x230>
 800eb9e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800eba0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800eba2:	f8cd 900c 	str.w	r9, [sp, #12]
 800eba6:	2208      	movs	r2, #8
 800eba8:	fb90 f2f2 	sdiv	r2, r0, r2
 800ebac:	4432      	add	r2, r6
 800ebae:	2301      	movs	r3, #1
 800ebb0:	9204      	str	r2, [sp, #16]
 800ebb2:	f000 0207 	and.w	r2, r0, #7
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	4408      	add	r0, r1
 800ebba:	9301      	str	r3, [sp, #4]
 800ebbc:	9302      	str	r3, [sp, #8]
 800ebbe:	9206      	str	r2, [sp, #24]
 800ebc0:	4659      	mov	r1, fp
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	f8cd 8014 	str.w	r8, [sp, #20]
 800ebc8:	f7fc faf2 	bl	800b1b0 <LCD__DrawBitmap_1bpp>
 800ebcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ebce:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ebd0:	441d      	add	r5, r3
 800ebd2:	6883      	ldr	r3, [r0, #8]
 800ebd4:	9519      	str	r5, [sp, #100]	; 0x64
 800ebd6:	695b      	ldr	r3, [r3, #20]
 800ebd8:	a919      	add	r1, sp, #100	; 0x64
 800ebda:	4652      	mov	r2, sl
 800ebdc:	4798      	blx	r3
 800ebde:	4605      	mov	r5, r0
 800ebe0:	e7db      	b.n	800eb9a <GUI_MEMDEV__WriteToActiveOpaque+0x172>
 800ebe2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ebe4:	f7ff f8ce 	bl	800dd84 <GUI_ALLOC_LockH>
 800ebe8:	2c08      	cmp	r4, #8
 800ebea:	4601      	mov	r1, r0
 800ebec:	9016      	str	r0, [sp, #88]	; 0x58
 800ebee:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ebf0:	d938      	bls.n	800ec64 <GUI_MEMDEV__WriteToActiveOpaque+0x23c>
 800ebf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ebf4:	9200      	str	r2, [sp, #0]
 800ebf6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ebf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ebfa:	9301      	str	r3, [sp, #4]
 800ebfc:	fb00 6002 	mla	r0, r0, r2, r6
 800ec00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec02:	462a      	mov	r2, r5
 800ec04:	f7ff fecf 	bl	800e9a6 <_Convert16>
 800ec08:	2301      	movs	r3, #1
 800ec0a:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
 800ec0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	2200      	movs	r2, #0
 800ec14:	9301      	str	r3, [sp, #4]
 800ec16:	9002      	str	r0, [sp, #8]
 800ec18:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ec1a:	9203      	str	r2, [sp, #12]
 800ec1c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ec1e:	f85c 2d18 	ldr.w	r2, [ip, #-24]!
 800ec22:	9204      	str	r2, [sp, #16]
 800ec24:	4408      	add	r0, r1
 800ec26:	462a      	mov	r2, r5
 800ec28:	4659      	mov	r1, fp
 800ec2a:	f8cd 8014 	str.w	r8, [sp, #20]
 800ec2e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800ec32:	f7fc fb99 	bl	800b368 <LCD_DrawBitmap>
 800ec36:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800ec3a:	4660      	mov	r0, ip
 800ec3c:	f7ff f8b0 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800ec40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ec42:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ec44:	441d      	add	r5, r3
 800ec46:	6883      	ldr	r3, [r0, #8]
 800ec48:	9519      	str	r5, [sp, #100]	; 0x64
 800ec4a:	695b      	ldr	r3, [r3, #20]
 800ec4c:	a919      	add	r1, sp, #100	; 0x64
 800ec4e:	4652      	mov	r2, sl
 800ec50:	4798      	blx	r3
 800ec52:	4605      	mov	r5, r0
 800ec54:	2d00      	cmp	r5, #0
 800ec56:	d1c4      	bne.n	800ebe2 <GUI_MEMDEV__WriteToActiveOpaque+0x1ba>
 800ec58:	444e      	add	r6, r9
 800ec5a:	f10a 0a01 	add.w	sl, sl, #1
 800ec5e:	f10b 0b01 	add.w	fp, fp, #1
 800ec62:	e759      	b.n	800eb18 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800ec64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ec6c:	9201      	str	r2, [sp, #4]
 800ec6e:	fb00 6003 	mla	r0, r0, r3, r6
 800ec72:	462a      	mov	r2, r5
 800ec74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec76:	f7ff feb5 	bl	800e9e4 <_Convert8>
 800ec7a:	e7c5      	b.n	800ec08 <GUI_MEMDEV__WriteToActiveOpaque+0x1e0>
 800ec7c:	a818      	add	r0, sp, #96	; 0x60
 800ec7e:	f7ff f88f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800ec82:	e00e      	b.n	800eca2 <GUI_MEMDEV__WriteToActiveOpaque+0x27a>
 800ec84:	2301      	movs	r3, #1
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	9004      	str	r0, [sp, #16]
 800ec8c:	9402      	str	r4, [sp, #8]
 800ec8e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ec92:	f8cd 8014 	str.w	r8, [sp, #20]
 800ec96:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ec98:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ec9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec9c:	463a      	mov	r2, r7
 800ec9e:	f7fc fb63 	bl	800b368 <LCD_DrawBitmap>
 800eca2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800eca4:	e24d      	b.n	800f142 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800eca6:	4630      	mov	r0, r6
 800eca8:	f7fa f88e 	bl	8008dc8 <GUI_MEMDEV_GetDataPtr>
 800ecac:	4606      	mov	r6, r0
 800ecae:	2d00      	cmp	r5, #0
 800ecb0:	f000 808a 	beq.w	800edc8 <GUI_MEMDEV__WriteToActiveOpaque+0x3a0>
 800ecb4:	4628      	mov	r0, r5
 800ecb6:	f7ff f865 	bl	800dd84 <GUI_ALLOC_LockH>
 800ecba:	2500      	movs	r5, #0
 800ecbc:	9018      	str	r0, [sp, #96]	; 0x60
 800ecbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ecc0:	429d      	cmp	r5, r3
 800ecc2:	da7d      	bge.n	800edc0 <GUI_MEMDEV__WriteToActiveOpaque+0x398>
 800ecc4:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	9319      	str	r3, [sp, #100]	; 0x64
 800ecca:	6883      	ldr	r3, [r0, #8]
 800eccc:	a919      	add	r1, sp, #100	; 0x64
 800ecce:	695b      	ldr	r3, [r3, #20]
 800ecd0:	462a      	mov	r2, r5
 800ecd2:	4798      	blx	r3
 800ecd4:	42b8      	cmp	r0, r7
 800ecd6:	4682      	mov	sl, r0
 800ecd8:	d124      	bne.n	800ed24 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 800ecda:	46aa      	mov	sl, r5
 800ecdc:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ecde:	6883      	ldr	r3, [r0, #8]
 800ece0:	f10a 0b01 	add.w	fp, sl, #1
 800ece4:	695b      	ldr	r3, [r3, #20]
 800ece6:	a919      	add	r1, sp, #100	; 0x64
 800ece8:	465a      	mov	r2, fp
 800ecea:	4798      	blx	r3
 800ecec:	42b8      	cmp	r0, r7
 800ecee:	d101      	bne.n	800ecf4 <GUI_MEMDEV__WriteToActiveOpaque+0x2cc>
 800ecf0:	46da      	mov	sl, fp
 800ecf2:	e7f3      	b.n	800ecdc <GUI_MEMDEV__WriteToActiveOpaque+0x2b4>
 800ecf4:	ebc5 0b0a 	rsb	fp, r5, sl
 800ecf8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ecfa:	9604      	str	r6, [sp, #16]
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	f10b 0b01 	add.w	fp, fp, #1
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	9301      	str	r3, [sp, #4]
 800ed06:	4429      	add	r1, r5
 800ed08:	9402      	str	r4, [sp, #8]
 800ed0a:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed0e:	f8cd 8014 	str.w	r8, [sp, #20]
 800ed12:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ed14:	463a      	mov	r2, r7
 800ed16:	465b      	mov	r3, fp
 800ed18:	f7fc fb26 	bl	800b368 <LCD_DrawBitmap>
 800ed1c:	fb09 660b 	mla	r6, r9, fp, r6
 800ed20:	4655      	mov	r5, sl
 800ed22:	e04b      	b.n	800edbc <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800ed24:	2c01      	cmp	r4, #1
 800ed26:	d127      	bne.n	800ed78 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800ed28:	f1ba 0f00 	cmp.w	sl, #0
 800ed2c:	d022      	beq.n	800ed74 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800ed2e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ed30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ed32:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed36:	2208      	movs	r2, #8
 800ed38:	fb90 f2f2 	sdiv	r2, r0, r2
 800ed3c:	4432      	add	r2, r6
 800ed3e:	9204      	str	r2, [sp, #16]
 800ed40:	f000 0207 	and.w	r2, r0, #7
 800ed44:	4408      	add	r0, r1
 800ed46:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ed48:	9206      	str	r2, [sp, #24]
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	4652      	mov	r2, sl
 800ed4e:	9300      	str	r3, [sp, #0]
 800ed50:	9301      	str	r3, [sp, #4]
 800ed52:	9302      	str	r3, [sp, #8]
 800ed54:	4429      	add	r1, r5
 800ed56:	f8cd 8014 	str.w	r8, [sp, #20]
 800ed5a:	f7fc fa29 	bl	800b1b0 <LCD__DrawBitmap_1bpp>
 800ed5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ed60:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ed62:	4453      	add	r3, sl
 800ed64:	9319      	str	r3, [sp, #100]	; 0x64
 800ed66:	6883      	ldr	r3, [r0, #8]
 800ed68:	a919      	add	r1, sp, #100	; 0x64
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	462a      	mov	r2, r5
 800ed6e:	4798      	blx	r3
 800ed70:	4682      	mov	sl, r0
 800ed72:	e7d9      	b.n	800ed28 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800ed74:	444e      	add	r6, r9
 800ed76:	e021      	b.n	800edbc <GUI_MEMDEV__WriteToActiveOpaque+0x394>
 800ed78:	f1ba 0f00 	cmp.w	sl, #0
 800ed7c:	d0fa      	beq.n	800ed74 <GUI_MEMDEV__WriteToActiveOpaque+0x34c>
 800ed7e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ed80:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ed82:	9402      	str	r4, [sp, #8]
 800ed84:	fb00 6201 	mla	r2, r0, r1, r6
 800ed88:	9204      	str	r2, [sp, #16]
 800ed8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ed8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed8e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ed92:	2301      	movs	r3, #1
 800ed94:	4410      	add	r0, r2
 800ed96:	9300      	str	r3, [sp, #0]
 800ed98:	4652      	mov	r2, sl
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	4429      	add	r1, r5
 800ed9e:	f8cd 8014 	str.w	r8, [sp, #20]
 800eda2:	f7fc fae1 	bl	800b368 <LCD_DrawBitmap>
 800eda6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eda8:	9818      	ldr	r0, [sp, #96]	; 0x60
 800edaa:	4453      	add	r3, sl
 800edac:	9319      	str	r3, [sp, #100]	; 0x64
 800edae:	6883      	ldr	r3, [r0, #8]
 800edb0:	a919      	add	r1, sp, #100	; 0x64
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	462a      	mov	r2, r5
 800edb6:	4798      	blx	r3
 800edb8:	4682      	mov	sl, r0
 800edba:	e7dd      	b.n	800ed78 <GUI_MEMDEV__WriteToActiveOpaque+0x350>
 800edbc:	3501      	adds	r5, #1
 800edbe:	e77e      	b.n	800ecbe <GUI_MEMDEV__WriteToActiveOpaque+0x296>
 800edc0:	a818      	add	r0, sp, #96	; 0x60
 800edc2:	f7fe ffed 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800edc6:	e1be      	b.n	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800edc8:	2301      	movs	r3, #1
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	9301      	str	r3, [sp, #4]
 800edce:	9004      	str	r0, [sp, #16]
 800edd0:	9402      	str	r4, [sp, #8]
 800edd2:	f8cd 900c 	str.w	r9, [sp, #12]
 800edd6:	f8cd 8014 	str.w	r8, [sp, #20]
 800edda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eddc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800edde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ede0:	463a      	mov	r2, r7
 800ede2:	e041      	b.n	800ee68 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 800ede4:	4630      	mov	r0, r6
 800ede6:	910a      	str	r1, [sp, #40]	; 0x28
 800ede8:	f7fe ffcc 	bl	800dd84 <GUI_ALLOC_LockH>
 800edec:	4682      	mov	sl, r0
 800edee:	a81c      	add	r0, sp, #112	; 0x70
 800edf0:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800edf4:	f840 ad10 	str.w	sl, [r0, #-16]!
 800edf8:	f8da 4000 	ldr.w	r4, [sl]
 800edfc:	9210      	str	r2, [sp, #64]	; 0x40
 800edfe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ee02:	f8ba 7008 	ldrh.w	r7, [sl, #8]
 800ee06:	4c9e      	ldr	r4, [pc, #632]	; (800f080 <GUI_MEMDEV__WriteToActiveOpaque+0x658>)
 800ee08:	b213      	sxth	r3, r2
 800ee0a:	f8da 200c 	ldr.w	r2, [sl, #12]
 800ee0e:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee10:	9309      	str	r3, [sp, #36]	; 0x24
 800ee12:	f7fe ffc5 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800ee16:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800ee1a:	900e      	str	r0, [sp, #56]	; 0x38
 800ee1c:	4899      	ldr	r0, [pc, #612]	; (800f084 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800ee1e:	6800      	ldr	r0, [r0, #0]
 800ee20:	7c40      	ldrb	r0, [r0, #17]
 800ee22:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800ee26:	6925      	ldr	r5, [r4, #16]
 800ee28:	f8d5 8000 	ldr.w	r8, [r5]
 800ee2c:	f7fc f852 	bl	800aed4 <GUI_GetBitsPerPixelEx>
 800ee30:	2808      	cmp	r0, #8
 800ee32:	fa0f fb87 	sxth.w	fp, r7
 800ee36:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ee38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ee3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee3c:	d904      	bls.n	800ee48 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800ee3e:	2810      	cmp	r0, #16
 800ee40:	bf8c      	ite	hi
 800ee42:	2404      	movhi	r4, #4
 800ee44:	2402      	movls	r4, #2
 800ee46:	e000      	b.n	800ee4a <GUI_MEMDEV__WriteToActiveOpaque+0x422>
 800ee48:	2401      	movs	r4, #1
 800ee4a:	45a9      	cmp	r9, r5
 800ee4c:	d10f      	bne.n	800ee6e <GUI_MEMDEV__WriteToActiveOpaque+0x446>
 800ee4e:	2001      	movs	r0, #1
 800ee50:	9203      	str	r2, [sp, #12]
 800ee52:	f10a 0218 	add.w	r2, sl, #24
 800ee56:	9000      	str	r0, [sp, #0]
 800ee58:	9001      	str	r0, [sp, #4]
 800ee5a:	9102      	str	r1, [sp, #8]
 800ee5c:	9204      	str	r2, [sp, #16]
 800ee5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ee60:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ee62:	2200      	movs	r2, #0
 800ee64:	9205      	str	r2, [sp, #20]
 800ee66:	465a      	mov	r2, fp
 800ee68:	f7fc fa7e 	bl	800b368 <LCD_DrawBitmap>
 800ee6c:	e16b      	b.n	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ee6e:	2920      	cmp	r1, #32
 800ee70:	f040 808e 	bne.w	800ef90 <GUI_MEMDEV__WriteToActiveOpaque+0x568>
 800ee74:	fb0b f004 	mul.w	r0, fp, r4
 800ee78:	f7ff f950 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800ee7c:	900e      	str	r0, [sp, #56]	; 0x38
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f000 8161 	beq.w	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ee84:	f7fe ff7e 	bl	800dd84 <GUI_ALLOC_LockH>
 800ee88:	901a      	str	r0, [sp, #104]	; 0x68
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7fe ff7a 	bl	800dd84 <GUI_ALLOC_LockH>
 800ee90:	9018      	str	r0, [sp, #96]	; 0x60
 800ee92:	692b      	ldr	r3, [r5, #16]
 800ee94:	f100 0a18 	add.w	sl, r0, #24
 800ee98:	ea4f 068b 	mov.w	r6, fp, lsl #2
 800ee9c:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d02f      	beq.n	800ef04 <GUI_MEMDEV__WriteToActiveOpaque+0x4dc>
 800eea4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800eea8:	2c02      	cmp	r4, #2
 800eeaa:	d003      	beq.n	800eeb4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800eeac:	2c04      	cmp	r4, #4
 800eeae:	d001      	beq.n	800eeb4 <GUI_MEMDEV__WriteToActiveOpaque+0x48c>
 800eeb0:	2c01      	cmp	r4, #1
 800eeb2:	d106      	bne.n	800eec2 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 800eeb4:	4650      	mov	r0, sl
 800eeb6:	692f      	ldr	r7, [r5, #16]
 800eeb8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eeba:	465a      	mov	r2, fp
 800eebc:	4623      	mov	r3, r4
 800eebe:	47b8      	blx	r7
 800eec0:	44b2      	add	sl, r6
 800eec2:	2301      	movs	r3, #1
 800eec4:	2200      	movs	r2, #0
 800eec6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800eec8:	9300      	str	r3, [sp, #0]
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	9203      	str	r2, [sp, #12]
 800eece:	9104      	str	r1, [sp, #16]
 800eed0:	9205      	str	r2, [sp, #20]
 800eed2:	4641      	mov	r1, r8
 800eed4:	465a      	mov	r2, fp
 800eed6:	f8cd 9008 	str.w	r9, [sp, #8]
 800eeda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800eedc:	f7fc fa44 	bl	800b368 <LCD_DrawBitmap>
 800eee0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800eee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800eee4:	f108 0701 	add.w	r7, r8, #1
 800eee8:	fa02 f381 	sxtah	r3, r2, r1
 800eeec:	42bb      	cmp	r3, r7
 800eeee:	d107      	bne.n	800ef00 <GUI_MEMDEV__WriteToActiveOpaque+0x4d8>
 800eef0:	a818      	add	r0, sp, #96	; 0x60
 800eef2:	f7fe ff55 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800eef6:	a81a      	add	r0, sp, #104	; 0x68
 800eef8:	f7fe ff52 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800eefc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800eefe:	e120      	b.n	800f142 <GUI_MEMDEV__WriteToActiveOpaque+0x71a>
 800ef00:	46b8      	mov	r8, r7
 800ef02:	e7d1      	b.n	800eea8 <GUI_MEMDEV__WriteToActiveOpaque+0x480>
 800ef04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ef06:	2c02      	cmp	r4, #2
 800ef08:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ef0a:	d00e      	beq.n	800ef2a <GUI_MEMDEV__WriteToActiveOpaque+0x502>
 800ef0c:	2c04      	cmp	r4, #4
 800ef0e:	d018      	beq.n	800ef42 <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800ef10:	2c01      	cmp	r4, #1
 800ef12:	d125      	bne.n	800ef60 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800ef14:	2300      	movs	r3, #0
 800ef16:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ef1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1c:	47c0      	blx	r8
 800ef1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef20:	54f8      	strb	r0, [r7, r3]
 800ef22:	3301      	adds	r3, #1
 800ef24:	459b      	cmp	fp, r3
 800ef26:	d1f6      	bne.n	800ef16 <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800ef28:	e019      	b.n	800ef5e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ef30:	9309      	str	r3, [sp, #36]	; 0x24
 800ef32:	47c0      	blx	r8
 800ef34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef36:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	459b      	cmp	fp, r3
 800ef3e:	d1f5      	bne.n	800ef2c <GUI_MEMDEV__WriteToActiveOpaque+0x504>
 800ef40:	e00d      	b.n	800ef5e <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800ef42:	465a      	mov	r2, fp
 800ef44:	2300      	movs	r3, #0
 800ef46:	f85a 0003 	ldr.w	r0, [sl, r3]
 800ef4a:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef4e:	47c0      	blx	r8
 800ef50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef54:	3a01      	subs	r2, #1
 800ef56:	50f8      	str	r0, [r7, r3]
 800ef58:	f103 0304 	add.w	r3, r3, #4
 800ef5c:	d1f3      	bne.n	800ef46 <GUI_MEMDEV__WriteToActiveOpaque+0x51e>
 800ef5e:	44b2      	add	sl, r6
 800ef60:	2301      	movs	r3, #1
 800ef62:	2200      	movs	r2, #0
 800ef64:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	9301      	str	r3, [sp, #4]
 800ef6a:	9203      	str	r2, [sp, #12]
 800ef6c:	9104      	str	r1, [sp, #16]
 800ef6e:	9205      	str	r2, [sp, #20]
 800ef70:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ef72:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef76:	4629      	mov	r1, r5
 800ef78:	465a      	mov	r2, fp
 800ef7a:	f7fc f9f5 	bl	800b368 <LCD_DrawBitmap>
 800ef7e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ef80:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ef82:	1c6f      	adds	r7, r5, #1
 800ef84:	fa01 f380 	sxtah	r3, r1, r0
 800ef88:	42bb      	cmp	r3, r7
 800ef8a:	d0b1      	beq.n	800eef0 <GUI_MEMDEV__WriteToActiveOpaque+0x4c8>
 800ef8c:	463d      	mov	r5, r7
 800ef8e:	e7ba      	b.n	800ef06 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800ef90:	2910      	cmp	r1, #16
 800ef92:	f040 80d8 	bne.w	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800ef96:	fa0f fa87 	sxth.w	sl, r7
 800ef9a:	fb0a f004 	mul.w	r0, sl, r4
 800ef9e:	f7ff f8bd 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800efa2:	9012      	str	r0, [sp, #72]	; 0x48
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f000 80ce 	beq.w	800f146 <GUI_MEMDEV__WriteToActiveOpaque+0x71e>
 800efaa:	f7fe feeb 	bl	800dd84 <GUI_ALLOC_LockH>
 800efae:	901a      	str	r0, [sp, #104]	; 0x68
 800efb0:	4630      	mov	r0, r6
 800efb2:	f7fe fee7 	bl	800dd84 <GUI_ALLOC_LockH>
 800efb6:	9018      	str	r0, [sp, #96]	; 0x60
 800efb8:	692b      	ldr	r3, [r5, #16]
 800efba:	f100 0618 	add.w	r6, r0, #24
 800efbe:	b113      	cbz	r3, 800efc6 <GUI_MEMDEV__WriteToActiveOpaque+0x59e>
 800efc0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800efc4:	b92b      	cbnz	r3, 800efd2 <GUI_MEMDEV__WriteToActiveOpaque+0x5aa>
 800efc6:	00e2      	lsls	r2, r4, #3
 800efc8:	b23f      	sxth	r7, r7
 800efca:	9211      	str	r2, [sp, #68]	; 0x44
 800efcc:	007f      	lsls	r7, r7, #1
 800efce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800efd0:	e088      	b.n	800f0e4 <GUI_MEMDEV__WriteToActiveOpaque+0x6bc>
 800efd2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800efd6:	0080      	lsls	r0, r0, #2
 800efd8:	f7ff f8a0 	bl	800e11c <GUI_ALLOC_AllocNoInit>
 800efdc:	9011      	str	r0, [sp, #68]	; 0x44
 800efde:	b118      	cbz	r0, 800efe8 <GUI_MEMDEV__WriteToActiveOpaque+0x5c0>
 800efe0:	f7fe fed0 	bl	800dd84 <GUI_ALLOC_LockH>
 800efe4:	9019      	str	r0, [sp, #100]	; 0x64
 800efe6:	e001      	b.n	800efec <GUI_MEMDEV__WriteToActiveOpaque+0x5c4>
 800efe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800efea:	9319      	str	r3, [sp, #100]	; 0x64
 800efec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800efee:	2b00      	cmp	r3, #0
 800eff0:	f000 80a0 	beq.w	800f134 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800eff4:	b23f      	sxth	r7, r7
 800eff6:	007f      	lsls	r7, r7, #1
 800eff8:	970e      	str	r7, [sp, #56]	; 0x38
 800effa:	00e7      	lsls	r7, r4, #3
 800effc:	9713      	str	r7, [sp, #76]	; 0x4c
 800effe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f000:	970c      	str	r7, [sp, #48]	; 0x30
 800f002:	2c02      	cmp	r4, #2
 800f004:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800f008:	d004      	beq.n	800f014 <GUI_MEMDEV__WriteToActiveOpaque+0x5ec>
 800f00a:	2c04      	cmp	r4, #4
 800f00c:	d007      	beq.n	800f01e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800f00e:	2c01      	cmp	r4, #1
 800f010:	d114      	bne.n	800f03c <GUI_MEMDEV__WriteToActiveOpaque+0x614>
 800f012:	e004      	b.n	800f01e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800f014:	4630      	mov	r0, r6
 800f016:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f018:	4652      	mov	r2, sl
 800f01a:	4623      	mov	r3, r4
 800f01c:	e003      	b.n	800f026 <GUI_MEMDEV__WriteToActiveOpaque+0x5fe>
 800f01e:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f020:	4630      	mov	r0, r6
 800f022:	4652      	mov	r2, sl
 800f024:	2302      	movs	r3, #2
 800f026:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800f02a:	47b8      	blx	r7
 800f02c:	692f      	ldr	r7, [r5, #16]
 800f02e:	9819      	ldr	r0, [sp, #100]	; 0x64
 800f030:	4641      	mov	r1, r8
 800f032:	4652      	mov	r2, sl
 800f034:	4623      	mov	r3, r4
 800f036:	47b8      	blx	r7
 800f038:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800f03a:	443e      	add	r6, r7
 800f03c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800f03e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f040:	9104      	str	r1, [sp, #16]
 800f042:	2301      	movs	r3, #1
 800f044:	2200      	movs	r2, #0
 800f046:	f107 0801 	add.w	r8, r7, #1
 800f04a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800f04c:	9300      	str	r3, [sp, #0]
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	9702      	str	r7, [sp, #8]
 800f052:	9203      	str	r2, [sp, #12]
 800f054:	9205      	str	r2, [sp, #20]
 800f056:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f058:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f05a:	465a      	mov	r2, fp
 800f05c:	f7fc f984 	bl	800b368 <LCD_DrawBitmap>
 800f060:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f062:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f064:	fa00 f387 	sxtah	r3, r0, r7
 800f068:	4543      	cmp	r3, r8
 800f06a:	d002      	beq.n	800f072 <GUI_MEMDEV__WriteToActiveOpaque+0x64a>
 800f06c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800f070:	e7c7      	b.n	800f002 <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800f072:	a819      	add	r0, sp, #100	; 0x64
 800f074:	f7fe fe94 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f078:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f07a:	f7fe febd 	bl	800ddf8 <GUI_ALLOC_Free>
 800f07e:	e059      	b.n	800f134 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800f080:	20004afc 	.word	0x20004afc
 800f084:	20000084 	.word	0x20000084
 800f088:	2c04      	cmp	r4, #4
 800f08a:	d041      	beq.n	800f110 <GUI_MEMDEV__WriteToActiveOpaque+0x6e8>
 800f08c:	2c01      	cmp	r4, #1
 800f08e:	d111      	bne.n	800f0b4 <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800f090:	464a      	mov	r2, r9
 800f092:	4631      	mov	r1, r6
 800f094:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f098:	910a      	str	r1, [sp, #40]	; 0x28
 800f09a:	920b      	str	r2, [sp, #44]	; 0x2c
 800f09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f09e:	4798      	blx	r3
 800f0a0:	47c0      	blx	r8
 800f0a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0a4:	f802 0b01 	strb.w	r0, [r2], #1
 800f0a8:	eb09 000a 	add.w	r0, r9, sl
 800f0ac:	4282      	cmp	r2, r0
 800f0ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f0b0:	d1f0      	bne.n	800f094 <GUI_MEMDEV__WriteToActiveOpaque+0x66c>
 800f0b2:	443e      	add	r6, r7
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f0b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800f0ba:	9300      	str	r3, [sp, #0]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	9301      	str	r3, [sp, #4]
 800f0c0:	9002      	str	r0, [sp, #8]
 800f0c2:	9203      	str	r2, [sp, #12]
 800f0c4:	9104      	str	r1, [sp, #16]
 800f0c6:	9205      	str	r2, [sp, #20]
 800f0c8:	4629      	mov	r1, r5
 800f0ca:	465a      	mov	r2, fp
 800f0cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800f0ce:	f7fc f94b 	bl	800b368 <LCD_DrawBitmap>
 800f0d2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f0d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f0d6:	f105 0901 	add.w	r9, r5, #1
 800f0da:	fa02 f381 	sxtah	r3, r2, r1
 800f0de:	454b      	cmp	r3, r9
 800f0e0:	d028      	beq.n	800f134 <GUI_MEMDEV__WriteToActiveOpaque+0x70c>
 800f0e2:	464d      	mov	r5, r9
 800f0e4:	2c02      	cmp	r4, #2
 800f0e6:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
 800f0ea:	d1cd      	bne.n	800f088 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800f0ec:	464b      	mov	r3, r9
 800f0ee:	4631      	mov	r1, r6
 800f0f0:	46d9      	mov	r9, fp
 800f0f2:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f0f6:	910a      	str	r1, [sp, #40]	; 0x28
 800f0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800f0fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f0fc:	4790      	blx	r2
 800f0fe:	47c0      	blx	r8
 800f100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f102:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f104:	f823 0b02 	strh.w	r0, [r3], #2
 800f108:	f1b9 0901 	subs.w	r9, r9, #1
 800f10c:	d1f1      	bne.n	800f0f2 <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 800f10e:	e7d0      	b.n	800f0b2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800f110:	464b      	mov	r3, r9
 800f112:	4631      	mov	r1, r6
 800f114:	46d9      	mov	r9, fp
 800f116:	f831 0b02 	ldrh.w	r0, [r1], #2
 800f11a:	910a      	str	r1, [sp, #40]	; 0x28
 800f11c:	9309      	str	r3, [sp, #36]	; 0x24
 800f11e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f120:	4790      	blx	r2
 800f122:	47c0      	blx	r8
 800f124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f126:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f128:	f843 0b04 	str.w	r0, [r3], #4
 800f12c:	f1b9 0901 	subs.w	r9, r9, #1
 800f130:	d1f1      	bne.n	800f116 <GUI_MEMDEV__WriteToActiveOpaque+0x6ee>
 800f132:	e7be      	b.n	800f0b2 <GUI_MEMDEV__WriteToActiveOpaque+0x68a>
 800f134:	a818      	add	r0, sp, #96	; 0x60
 800f136:	f7fe fe33 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f13a:	a81a      	add	r0, sp, #104	; 0x68
 800f13c:	f7fe fe30 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f140:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f142:	f7fe fe59 	bl	800ddf8 <GUI_ALLOC_Free>
 800f146:	b01d      	add	sp, #116	; 0x74
 800f148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f14c <GUI_MEMDEV__WriteToActiveAlpha>:
 800f14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f150:	4d5f      	ldr	r5, [pc, #380]	; (800f2d0 <GUI_MEMDEV__WriteToActiveAlpha+0x184>)
 800f152:	4f60      	ldr	r7, [pc, #384]	; (800f2d4 <GUI_MEMDEV__WriteToActiveAlpha+0x188>)
 800f154:	682b      	ldr	r3, [r5, #0]
 800f156:	7c5b      	ldrb	r3, [r3, #17]
 800f158:	b091      	sub	sp, #68	; 0x44
 800f15a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800f15e:	900d      	str	r0, [sp, #52]	; 0x34
 800f160:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800f164:	460e      	mov	r6, r1
 800f166:	4614      	mov	r4, r2
 800f168:	f7fe fe0c 	bl	800dd84 <GUI_ALLOC_LockH>
 800f16c:	4602      	mov	r2, r0
 800f16e:	a810      	add	r0, sp, #64	; 0x40
 800f170:	6813      	ldr	r3, [r2, #0]
 800f172:	f840 2d08 	str.w	r2, [r0, #-8]!
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	f8b2 a008 	ldrh.w	sl, [r2, #8]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	f8b2 900a 	ldrh.w	r9, [r2, #10]
 800f182:	9309      	str	r3, [sp, #36]	; 0x24
 800f184:	f7fe fe0c 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f188:	682b      	ldr	r3, [r5, #0]
 800f18a:	7c5b      	ldrb	r3, [r3, #17]
 800f18c:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800f190:	68c3      	ldr	r3, [r0, #12]
 800f192:	2108      	movs	r1, #8
 800f194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f196:	4798      	blx	r3
 800f198:	2817      	cmp	r0, #23
 800f19a:	bf88      	it	hi
 800f19c:	2020      	movhi	r0, #32
 800f19e:	9008      	str	r0, [sp, #32]
 800f1a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f1a4:	f8d8 2000 	ldr.w	r2, [r8]
 800f1a8:	910a      	str	r1, [sp, #40]	; 0x28
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800f1ae:	f7fc fe07 	bl	800bdc0 <GUI__AllocAlphaBuffer>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	f040 8089 	bne.w	800f2ca <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f1b8:	682a      	ldr	r2, [r5, #0]
 800f1ba:	fa0f f78a 	sxth.w	r7, sl
 800f1be:	19f5      	adds	r5, r6, r7
 800f1c0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800f1c4:	3d01      	subs	r5, #1
 800f1c6:	1aed      	subs	r5, r5, r3
 800f1c8:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	bfcc      	ite	gt
 800f1d0:	ebc5 0507 	rsbgt	r5, r5, r7
 800f1d4:	463d      	movle	r5, r7
 800f1d6:	42b3      	cmp	r3, r6
 800f1d8:	bfc3      	ittte	gt
 800f1da:	ebc6 0103 	rsbgt	r1, r6, r3
 800f1de:	ebc1 0505 	rsbgt	r5, r1, r5
 800f1e2:	461e      	movgt	r6, r3
 800f1e4:	2100      	movle	r1, #0
 800f1e6:	2d00      	cmp	r5, #0
 800f1e8:	dd6f      	ble.n	800f2ca <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f1ea:	fa0f f389 	sxth.w	r3, r9
 800f1ee:	18e0      	adds	r0, r4, r3
 800f1f0:	f9b2 c00e 	ldrsh.w	ip, [r2, #14]
 800f1f4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800f1f8:	3801      	subs	r0, #1
 800f1fa:	ebcc 0000 	rsb	r0, ip, r0
 800f1fe:	2800      	cmp	r0, #0
 800f200:	bfc8      	it	gt
 800f202:	ebc0 0303 	rsbgt	r3, r0, r3
 800f206:	4294      	cmp	r4, r2
 800f208:	bfbd      	ittte	lt
 800f20a:	ebc4 0b02 	rsblt	fp, r4, r2
 800f20e:	ebcb 0303 	rsblt	r3, fp, r3
 800f212:	4614      	movlt	r4, r2
 800f214:	f04f 0b00 	movge.w	fp, #0
 800f218:	2b00      	cmp	r3, #0
 800f21a:	dd56      	ble.n	800f2ca <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f21c:	fb07 1b0b 	mla	fp, r7, fp, r1
 800f220:	18e3      	adds	r3, r4, r3
 800f222:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800f226:	930c      	str	r3, [sp, #48]	; 0x30
 800f228:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f22a:	f7f9 fdcd 	bl	8008dc8 <GUI_MEMDEV_GetDataPtr>
 800f22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f230:	9300      	str	r3, [sp, #0]
 800f232:	ab0f      	add	r3, sp, #60	; 0x3c
 800f234:	eb00 020b 	add.w	r2, r0, fp
 800f238:	9301      	str	r3, [sp, #4]
 800f23a:	4630      	mov	r0, r6
 800f23c:	4621      	mov	r1, r4
 800f23e:	462b      	mov	r3, r5
 800f240:	f7fc fcd4 	bl	800bbec <GUI__DoAlphaBlending>
 800f244:	4681      	mov	r9, r0
 800f246:	2800      	cmp	r0, #0
 800f248:	d03f      	beq.n	800f2ca <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f24a:	4b23      	ldr	r3, [pc, #140]	; (800f2d8 <GUI_MEMDEV__WriteToActiveAlpha+0x18c>)
 800f24c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f24e:	4299      	cmp	r1, r3
 800f250:	d01e      	beq.n	800f290 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f252:	4629      	mov	r1, r5
 800f254:	9a08      	ldr	r2, [sp, #32]
 800f256:	4643      	mov	r3, r8
 800f258:	f001 fc50 	bl	8010afc <GUI__CompactPixelIndicesEx>
 800f25c:	b9c0      	cbnz	r0, 800f290 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f25e:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800f262:	f1bc 0f00 	cmp.w	ip, #0
 800f266:	d006      	beq.n	800f276 <GUI_MEMDEV__WriteToActiveAlpha+0x12a>
 800f268:	4648      	mov	r0, r9
 800f26a:	4649      	mov	r1, r9
 800f26c:	fa0f f28a 	sxth.w	r2, sl
 800f270:	2304      	movs	r3, #4
 800f272:	47e0      	blx	ip
 800f274:	e00c      	b.n	800f290 <GUI_MEMDEV__WriteToActiveAlpha+0x144>
 800f276:	464a      	mov	r2, r9
 800f278:	463b      	mov	r3, r7
 800f27a:	6810      	ldr	r0, [r2, #0]
 800f27c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f27e:	9206      	str	r2, [sp, #24]
 800f280:	9307      	str	r3, [sp, #28]
 800f282:	4788      	blx	r1
 800f284:	9b07      	ldr	r3, [sp, #28]
 800f286:	9a06      	ldr	r2, [sp, #24]
 800f288:	3b01      	subs	r3, #1
 800f28a:	f842 0b04 	str.w	r0, [r2], #4
 800f28e:	d1f4      	bne.n	800f27a <GUI_MEMDEV__WriteToActiveAlpha+0x12e>
 800f290:	9a08      	ldr	r2, [sp, #32]
 800f292:	9202      	str	r2, [sp, #8]
 800f294:	2301      	movs	r3, #1
 800f296:	2200      	movs	r2, #0
 800f298:	f104 0c01 	add.w	ip, r4, #1
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	9203      	str	r2, [sp, #12]
 800f2a2:	9205      	str	r2, [sp, #20]
 800f2a4:	f8cd 9010 	str.w	r9, [sp, #16]
 800f2a8:	4630      	mov	r0, r6
 800f2aa:	4621      	mov	r1, r4
 800f2ac:	462a      	mov	r2, r5
 800f2ae:	f8cd c01c 	str.w	ip, [sp, #28]
 800f2b2:	f7fc f859 	bl	800b368 <LCD_DrawBitmap>
 800f2b6:	2304      	movs	r3, #4
 800f2b8:	fb1a bb03 	smlabb	fp, sl, r3, fp
 800f2bc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800f2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2c2:	459c      	cmp	ip, r3
 800f2c4:	d001      	beq.n	800f2ca <GUI_MEMDEV__WriteToActiveAlpha+0x17e>
 800f2c6:	4664      	mov	r4, ip
 800f2c8:	e7ae      	b.n	800f228 <GUI_MEMDEV__WriteToActiveAlpha+0xdc>
 800f2ca:	b011      	add	sp, #68	; 0x44
 800f2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d0:	20000084 	.word	0x20000084
 800f2d4:	20004afc 	.word	0x20004afc
 800f2d8:	0800e18b 	.word	0x0800e18b

0800f2dc <GUI_MEMDEV_WriteAt>:
 800f2dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f2de:	460c      	mov	r4, r1
 800f2e0:	4615      	mov	r5, r2
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	b330      	cbz	r0, 800f334 <GUI_MEMDEV_WriteAt+0x58>
 800f2e6:	f7fe fd4d 	bl	800dd84 <GUI_ALLOC_LockH>
 800f2ea:	4a13      	ldr	r2, [pc, #76]	; (800f338 <GUI_MEMDEV_WriteAt+0x5c>)
 800f2ec:	8943      	ldrh	r3, [r0, #10]
 800f2ee:	9001      	str	r0, [sp, #4]
 800f2f0:	4294      	cmp	r4, r2
 800f2f2:	8902      	ldrh	r2, [r0, #8]
 800f2f4:	bf04      	itt	eq
 800f2f6:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800f2fa:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800f2fe:	f8ad 4008 	strh.w	r4, [sp, #8]
 800f302:	3a01      	subs	r2, #1
 800f304:	3b01      	subs	r3, #1
 800f306:	4422      	add	r2, r4
 800f308:	442b      	add	r3, r5
 800f30a:	a801      	add	r0, sp, #4
 800f30c:	f8ad 200c 	strh.w	r2, [sp, #12]
 800f310:	f8ad 500a 	strh.w	r5, [sp, #10]
 800f314:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f318:	f7fe fd42 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f31c:	a802      	add	r0, sp, #8
 800f31e:	f7f9 f9c5 	bl	80086ac <WM__InitIVRSearch>
 800f322:	b138      	cbz	r0, 800f334 <GUI_MEMDEV_WriteAt+0x58>
 800f324:	4630      	mov	r0, r6
 800f326:	4621      	mov	r1, r4
 800f328:	462a      	mov	r2, r5
 800f32a:	f7fa fb17 	bl	800995c <GUI_MEMDEV__WriteToActiveAt>
 800f32e:	f7f9 f8fb 	bl	8008528 <WM__GetNextIVR>
 800f332:	e7f6      	b.n	800f322 <GUI_MEMDEV_WriteAt+0x46>
 800f334:	b004      	add	sp, #16
 800f336:	bd70      	pop	{r4, r5, r6, pc}
 800f338:	fffff001 	.word	0xfffff001

0800f33c <GUI_MEMDEV_Write>:
 800f33c:	4901      	ldr	r1, [pc, #4]	; (800f344 <GUI_MEMDEV_Write+0x8>)
 800f33e:	460a      	mov	r2, r1
 800f340:	f7ff bfcc 	b.w	800f2dc <GUI_MEMDEV_WriteAt>
 800f344:	fffff001 	.word	0xfffff001

0800f348 <GUI_USAGE_BM_AddPixel>:
 800f348:	4603      	mov	r3, r0
 800f34a:	b510      	push	{r4, lr}
 800f34c:	f933 4b14 	ldrsh.w	r4, [r3], #20
 800f350:	1b09      	subs	r1, r1, r4
 800f352:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800f356:	6900      	ldr	r0, [r0, #16]
 800f358:	1b12      	subs	r2, r2, r4
 800f35a:	fb00 3302 	mla	r3, r0, r2, r3
 800f35e:	10c8      	asrs	r0, r1, #3
 800f360:	2280      	movs	r2, #128	; 0x80
 800f362:	f001 0107 	and.w	r1, r1, #7
 800f366:	fa42 f101 	asr.w	r1, r2, r1
 800f36a:	5c1a      	ldrb	r2, [r3, r0]
 800f36c:	4311      	orrs	r1, r2
 800f36e:	5419      	strb	r1, [r3, r0]
 800f370:	bd10      	pop	{r4, pc}

0800f372 <GUI_USAGE_BM_GetNextDirty>:
 800f372:	b570      	push	{r4, r5, r6, lr}
 800f374:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800f378:	680b      	ldr	r3, [r1, #0]
 800f37a:	8886      	ldrh	r6, [r0, #4]
 800f37c:	42a2      	cmp	r2, r4
 800f37e:	da41      	bge.n	800f404 <GUI_USAGE_BM_GetNextDirty+0x92>
 800f380:	b236      	sxth	r6, r6
 800f382:	42b3      	cmp	r3, r6
 800f384:	6904      	ldr	r4, [r0, #16]
 800f386:	da3d      	bge.n	800f404 <GUI_USAGE_BM_GetNextDirty+0x92>
 800f388:	3014      	adds	r0, #20
 800f38a:	fb04 0202 	mla	r2, r4, r2, r0
 800f38e:	10dd      	asrs	r5, r3, #3
 800f390:	1e70      	subs	r0, r6, #1
 800f392:	1954      	adds	r4, r2, r5
 800f394:	ebc5 00e0 	rsb	r0, r5, r0, asr #3
 800f398:	5d55      	ldrb	r5, [r2, r5]
 800f39a:	f003 0207 	and.w	r2, r3, #7
 800f39e:	fa05 f202 	lsl.w	r2, r5, r2
 800f3a2:	3401      	adds	r4, #1
 800f3a4:	b2d2      	uxtb	r2, r2
 800f3a6:	b93a      	cbnz	r2, 800f3b8 <GUI_USAGE_BM_GetNextDirty+0x46>
 800f3a8:	b368      	cbz	r0, 800f406 <GUI_USAGE_BM_GetNextDirty+0x94>
 800f3aa:	3308      	adds	r3, #8
 800f3ac:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f3b0:	3801      	subs	r0, #1
 800f3b2:	f023 0307 	bic.w	r3, r3, #7
 800f3b6:	e7f6      	b.n	800f3a6 <GUI_USAGE_BM_GetNextDirty+0x34>
 800f3b8:	0615      	lsls	r5, r2, #24
 800f3ba:	d403      	bmi.n	800f3c4 <GUI_USAGE_BM_GetNextDirty+0x52>
 800f3bc:	0052      	lsls	r2, r2, #1
 800f3be:	b2d2      	uxtb	r2, r2
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	e7f9      	b.n	800f3b8 <GUI_USAGE_BM_GetNextDirty+0x46>
 800f3c4:	2aff      	cmp	r2, #255	; 0xff
 800f3c6:	461d      	mov	r5, r3
 800f3c8:	d005      	beq.n	800f3d6 <GUI_USAGE_BM_GetNextDirty+0x64>
 800f3ca:	0656      	lsls	r6, r2, #25
 800f3cc:	d504      	bpl.n	800f3d8 <GUI_USAGE_BM_GetNextDirty+0x66>
 800f3ce:	0052      	lsls	r2, r2, #1
 800f3d0:	b2d2      	uxtb	r2, r2
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	e7f9      	b.n	800f3ca <GUI_USAGE_BM_GetNextDirty+0x58>
 800f3d6:	3307      	adds	r3, #7
 800f3d8:	f003 0207 	and.w	r2, r3, #7
 800f3dc:	2a07      	cmp	r2, #7
 800f3de:	d10d      	bne.n	800f3fc <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f3e0:	3801      	subs	r0, #1
 800f3e2:	d40b      	bmi.n	800f3fc <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f3e4:	f814 2b01 	ldrb.w	r2, [r4], #1
 800f3e8:	2aff      	cmp	r2, #255	; 0xff
 800f3ea:	d101      	bne.n	800f3f0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800f3ec:	3308      	adds	r3, #8
 800f3ee:	e7f7      	b.n	800f3e0 <GUI_USAGE_BM_GetNextDirty+0x6e>
 800f3f0:	0610      	lsls	r0, r2, #24
 800f3f2:	d503      	bpl.n	800f3fc <GUI_USAGE_BM_GetNextDirty+0x8a>
 800f3f4:	0052      	lsls	r2, r2, #1
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	e7f9      	b.n	800f3f0 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800f3fc:	1b58      	subs	r0, r3, r5
 800f3fe:	600d      	str	r5, [r1, #0]
 800f400:	3001      	adds	r0, #1
 800f402:	bd70      	pop	{r4, r5, r6, pc}
 800f404:	2000      	movs	r0, #0
 800f406:	bd70      	pop	{r4, r5, r6, pc}

0800f408 <_GUI_USAGE_BM_Delete>:
 800f408:	f7fe bcf6 	b.w	800ddf8 <GUI_ALLOC_Free>

0800f40c <GUI_USAGE_BM_Clear>:
 800f40c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800f410:	6902      	ldr	r2, [r0, #16]
 800f412:	2100      	movs	r1, #0
 800f414:	3014      	adds	r0, #20
 800f416:	435a      	muls	r2, r3
 800f418:	f001 be76 	b.w	8011108 <memset>

0800f41c <GUI_USAGE_BM_AddHLine>:
 800f41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f41e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800f422:	1b09      	subs	r1, r1, r4
 800f424:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800f428:	42a1      	cmp	r1, r4
 800f42a:	da2f      	bge.n	800f48c <GUI_USAGE_BM_AddHLine+0x70>
 800f42c:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800f430:	440b      	add	r3, r1
 800f432:	f100 0414 	add.w	r4, r0, #20
 800f436:	3b01      	subs	r3, #1
 800f438:	6900      	ldr	r0, [r0, #16]
 800f43a:	1b52      	subs	r2, r2, r5
 800f43c:	43de      	mvns	r6, r3
 800f43e:	fb00 4202 	mla	r2, r0, r2, r4
 800f442:	f001 0707 	and.w	r7, r1, #7
 800f446:	10cc      	asrs	r4, r1, #3
 800f448:	f006 0607 	and.w	r6, r6, #7
 800f44c:	21ff      	movs	r1, #255	; 0xff
 800f44e:	fa41 f707 	asr.w	r7, r1, r7
 800f452:	fa01 f606 	lsl.w	r6, r1, r6
 800f456:	ebd4 03e3 	rsbs	r3, r4, r3, asr #3
 800f45a:	eb02 0504 	add.w	r5, r2, r4
 800f45e:	b2ff      	uxtb	r7, r7
 800f460:	b2f6      	uxtb	r6, r6
 800f462:	5d10      	ldrb	r0, [r2, r4]
 800f464:	d103      	bne.n	800f46e <GUI_USAGE_BM_AddHLine+0x52>
 800f466:	403e      	ands	r6, r7
 800f468:	4330      	orrs	r0, r6
 800f46a:	5510      	strb	r0, [r2, r4]
 800f46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f46e:	4338      	orrs	r0, r7
 800f470:	5510      	strb	r0, [r2, r4]
 800f472:	1e5c      	subs	r4, r3, #1
 800f474:	2c00      	cmp	r4, #0
 800f476:	f105 0501 	add.w	r5, r5, #1
 800f47a:	dd04      	ble.n	800f486 <GUI_USAGE_BM_AddHLine+0x6a>
 800f47c:	4628      	mov	r0, r5
 800f47e:	4622      	mov	r2, r4
 800f480:	f001 fe42 	bl	8011108 <memset>
 800f484:	4425      	add	r5, r4
 800f486:	782b      	ldrb	r3, [r5, #0]
 800f488:	431e      	orrs	r6, r3
 800f48a:	702e      	strb	r6, [r5, #0]
 800f48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f490 <GUI_USAGE_BM_Create>:
 800f490:	e92d 4fd3 	stmdb	sp!, {r0, r1, r4, r6, r7, r8, r9, sl, fp, lr}
 800f494:	f102 060f 	add.w	r6, r2, #15
 800f498:	1136      	asrs	r6, r6, #4
 800f49a:	0076      	lsls	r6, r6, #1
 800f49c:	4682      	mov	sl, r0
 800f49e:	fb06 f003 	mul.w	r0, r6, r3
 800f4a2:	3014      	adds	r0, #20
 800f4a4:	4689      	mov	r9, r1
 800f4a6:	4690      	mov	r8, r2
 800f4a8:	461f      	mov	r7, r3
 800f4aa:	f7fe fe43 	bl	800e134 <GUI_ALLOC_AllocZero>
 800f4ae:	4683      	mov	fp, r0
 800f4b0:	b198      	cbz	r0, 800f4da <GUI_USAGE_BM_Create+0x4a>
 800f4b2:	f7fe fc67 	bl	800dd84 <GUI_ALLOC_LockH>
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	4b0a      	ldr	r3, [pc, #40]	; (800f4e4 <GUI_USAGE_BM_Create+0x54>)
 800f4ba:	60a3      	str	r3, [r4, #8]
 800f4bc:	a802      	add	r0, sp, #8
 800f4be:	2301      	movs	r3, #1
 800f4c0:	f840 4d04 	str.w	r4, [r0, #-4]!
 800f4c4:	f8a4 8004 	strh.w	r8, [r4, #4]
 800f4c8:	f8a4 a000 	strh.w	sl, [r4]
 800f4cc:	f8a4 9002 	strh.w	r9, [r4, #2]
 800f4d0:	80e7      	strh	r7, [r4, #6]
 800f4d2:	81a3      	strh	r3, [r4, #12]
 800f4d4:	6126      	str	r6, [r4, #16]
 800f4d6:	f7fe fc63 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f4da:	4658      	mov	r0, fp
 800f4dc:	b002      	add	sp, #8
 800f4de:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
 800f4e2:	bf00      	nop
 800f4e4:	08013918 	.word	0x08013918

0800f4e8 <GUI_USAGE_DecUseCnt>:
 800f4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	f7fe fc4a 	bl	800dd84 <GUI_ALLOC_LockH>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	a802      	add	r0, sp, #8
 800f4f4:	8994      	ldrh	r4, [r2, #12]
 800f4f6:	f840 2d04 	str.w	r2, [r0, #-4]!
 800f4fa:	3c01      	subs	r4, #1
 800f4fc:	b2a4      	uxth	r4, r4
 800f4fe:	8194      	strh	r4, [r2, #12]
 800f500:	f7fe fc4e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f504:	b914      	cbnz	r4, 800f50c <GUI_USAGE_DecUseCnt+0x24>
 800f506:	4628      	mov	r0, r5
 800f508:	f7fe fc76 	bl	800ddf8 <GUI_ALLOC_Free>
 800f50c:	b003      	add	sp, #12
 800f50e:	bd30      	pop	{r4, r5, pc}

0800f510 <GUI_USAGE_AddRect>:
 800f510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f514:	4605      	mov	r5, r0
 800f516:	4688      	mov	r8, r1
 800f518:	4617      	mov	r7, r2
 800f51a:	4699      	mov	r9, r3
 800f51c:	68a8      	ldr	r0, [r5, #8]
 800f51e:	464b      	mov	r3, r9
 800f520:	6846      	ldr	r6, [r0, #4]
 800f522:	4641      	mov	r1, r8
 800f524:	4628      	mov	r0, r5
 800f526:	1c54      	adds	r4, r2, #1
 800f528:	47b0      	blx	r6
 800f52a:	9b08      	ldr	r3, [sp, #32]
 800f52c:	443b      	add	r3, r7
 800f52e:	42a3      	cmp	r3, r4
 800f530:	d001      	beq.n	800f536 <GUI_USAGE_AddRect+0x26>
 800f532:	4622      	mov	r2, r4
 800f534:	e7f2      	b.n	800f51c <GUI_USAGE_AddRect+0xc>
 800f536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800f53c <GUI_MEMDEV_ReduceYSize>:
 800f53c:	b513      	push	{r0, r1, r4, lr}
 800f53e:	460c      	mov	r4, r1
 800f540:	b918      	cbnz	r0, 800f54a <GUI_MEMDEV_ReduceYSize+0xe>
 800f542:	4b08      	ldr	r3, [pc, #32]	; (800f564 <GUI_MEMDEV_ReduceYSize+0x28>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f548:	b150      	cbz	r0, 800f560 <GUI_MEMDEV_ReduceYSize+0x24>
 800f54a:	f7fe fc1b 	bl	800dd84 <GUI_ALLOC_LockH>
 800f54e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f552:	9001      	str	r0, [sp, #4]
 800f554:	429c      	cmp	r4, r3
 800f556:	bfb8      	it	lt
 800f558:	8144      	strhlt	r4, [r0, #10]
 800f55a:	a801      	add	r0, sp, #4
 800f55c:	f7fe fc20 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f560:	b002      	add	sp, #8
 800f562:	bd10      	pop	{r4, pc}
 800f564:	20000084 	.word	0x20000084

0800f568 <GUI_MEMDEV_Clear>:
 800f568:	b513      	push	{r0, r1, r4, lr}
 800f56a:	b918      	cbnz	r0, 800f574 <GUI_MEMDEV_Clear+0xc>
 800f56c:	4b0d      	ldr	r3, [pc, #52]	; (800f5a4 <GUI_MEMDEV_Clear+0x3c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f572:	b1a8      	cbz	r0, 800f5a0 <GUI_MEMDEV_Clear+0x38>
 800f574:	f7fe fc06 	bl	800dd84 <GUI_ALLOC_LockH>
 800f578:	ab02      	add	r3, sp, #8
 800f57a:	6944      	ldr	r4, [r0, #20]
 800f57c:	f843 0d08 	str.w	r0, [r3, #-8]!
 800f580:	4668      	mov	r0, sp
 800f582:	f7fe fc0d 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f586:	b15c      	cbz	r4, 800f5a0 <GUI_MEMDEV_Clear+0x38>
 800f588:	4620      	mov	r0, r4
 800f58a:	f7fe fbfb 	bl	800dd84 <GUI_ALLOC_LockH>
 800f58e:	ac02      	add	r4, sp, #8
 800f590:	6883      	ldr	r3, [r0, #8]
 800f592:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f596:	689b      	ldr	r3, [r3, #8]
 800f598:	4798      	blx	r3
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7fe fc00 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f5a0:	b002      	add	sp, #8
 800f5a2:	bd10      	pop	{r4, pc}
 800f5a4:	20000084 	.word	0x20000084

0800f5a8 <_GetDevData>:
 800f5a8:	4802      	ldr	r0, [pc, #8]	; (800f5b4 <_GetDevData+0xc>)
 800f5aa:	2901      	cmp	r1, #1
 800f5ac:	bf18      	it	ne
 800f5ae:	2000      	movne	r0, #0
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	08013970 	.word	0x08013970

0800f5b8 <_GetDevFunc>:
 800f5b8:	4802      	ldr	r0, [pc, #8]	; (800f5c4 <_GetDevFunc+0xc>)
 800f5ba:	2916      	cmp	r1, #22
 800f5bc:	bf18      	it	ne
 800f5be:	2000      	movne	r0, #0
 800f5c0:	4770      	bx	lr
 800f5c2:	bf00      	nop
 800f5c4:	0800ea29 	.word	0x0800ea29

0800f5c8 <_SetOrg>:
 800f5c8:	6800      	ldr	r0, [r0, #0]
 800f5ca:	b508      	push	{r3, lr}
 800f5cc:	b110      	cbz	r0, 800f5d4 <_SetOrg+0xc>
 800f5ce:	68c3      	ldr	r3, [r0, #12]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	4798      	blx	r3
 800f5d4:	bd08      	pop	{r3, pc}

0800f5d6 <_GetRect>:
 800f5d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5d8:	6880      	ldr	r0, [r0, #8]
 800f5da:	460c      	mov	r4, r1
 800f5dc:	f7fe fbd2 	bl	800dd84 <GUI_ALLOC_LockH>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	a802      	add	r0, sp, #8
 800f5e4:	8899      	ldrh	r1, [r3, #4]
 800f5e6:	88da      	ldrh	r2, [r3, #6]
 800f5e8:	891d      	ldrh	r5, [r3, #8]
 800f5ea:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f5ee:	895b      	ldrh	r3, [r3, #10]
 800f5f0:	8021      	strh	r1, [r4, #0]
 800f5f2:	8062      	strh	r2, [r4, #2]
 800f5f4:	4429      	add	r1, r5
 800f5f6:	441a      	add	r2, r3
 800f5f8:	3901      	subs	r1, #1
 800f5fa:	3a01      	subs	r2, #1
 800f5fc:	80a1      	strh	r1, [r4, #4]
 800f5fe:	80e2      	strh	r2, [r4, #6]
 800f600:	f7fe fbce 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f604:	b003      	add	sp, #12
 800f606:	bd30      	pop	{r4, r5, pc}

0800f608 <_XY2PTR>:
 800f608:	4b0e      	ldr	r3, [pc, #56]	; (800f644 <_XY2PTR+0x3c>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f60e:	4605      	mov	r5, r0
 800f610:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f612:	460e      	mov	r6, r1
 800f614:	f7fe fbb6 	bl	800dd84 <GUI_ALLOC_LockH>
 800f618:	4603      	mov	r3, r0
 800f61a:	a802      	add	r0, sp, #8
 800f61c:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 800f620:	f840 3d04 	str.w	r3, [r0, #-4]!
 800f624:	f103 0118 	add.w	r1, r3, #24
 800f628:	1b36      	subs	r6, r6, r4
 800f62a:	68dc      	ldr	r4, [r3, #12]
 800f62c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f630:	fb04 1406 	mla	r4, r4, r6, r1
 800f634:	1aed      	subs	r5, r5, r3
 800f636:	f7fe fbb3 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f63a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800f63e:	4620      	mov	r0, r4
 800f640:	b002      	add	sp, #8
 800f642:	bd70      	pop	{r4, r5, r6, pc}
 800f644:	20000084 	.word	0x20000084

0800f648 <_GetPixelIndex>:
 800f648:	b508      	push	{r3, lr}
 800f64a:	4608      	mov	r0, r1
 800f64c:	4611      	mov	r1, r2
 800f64e:	f7ff ffdb 	bl	800f608 <_XY2PTR>
 800f652:	8800      	ldrh	r0, [r0, #0]
 800f654:	bd08      	pop	{r3, pc}
	...

0800f658 <_XorPixel>:
 800f658:	4b14      	ldr	r3, [pc, #80]	; (800f6ac <_XorPixel+0x54>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f65e:	4607      	mov	r7, r0
 800f660:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f662:	4615      	mov	r5, r2
 800f664:	460e      	mov	r6, r1
 800f666:	f7fe fb8d 	bl	800dd84 <GUI_ALLOC_LockH>
 800f66a:	4629      	mov	r1, r5
 800f66c:	9000      	str	r0, [sp, #0]
 800f66e:	4630      	mov	r0, r6
 800f670:	f7ff ffca 	bl	800f608 <_XY2PTR>
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	4604      	mov	r4, r0
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	4798      	blx	r3
 800f67c:	8823      	ldrh	r3, [r4, #0]
 800f67e:	4058      	eors	r0, r3
 800f680:	9b00      	ldr	r3, [sp, #0]
 800f682:	8020      	strh	r0, [r4, #0]
 800f684:	6958      	ldr	r0, [r3, #20]
 800f686:	b160      	cbz	r0, 800f6a2 <_XorPixel+0x4a>
 800f688:	f7fe fb7c 	bl	800dd84 <GUI_ALLOC_LockH>
 800f68c:	ac02      	add	r4, sp, #8
 800f68e:	6883      	ldr	r3, [r0, #8]
 800f690:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	4631      	mov	r1, r6
 800f698:	462a      	mov	r2, r5
 800f69a:	4798      	blx	r3
 800f69c:	4620      	mov	r0, r4
 800f69e:	f7fe fb7f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f6a2:	4668      	mov	r0, sp
 800f6a4:	f7fe fb7c 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f6a8:	b003      	add	sp, #12
 800f6aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ac:	20000084 	.word	0x20000084

0800f6b0 <_SetPixelIndex>:
 800f6b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6b2:	461c      	mov	r4, r3
 800f6b4:	4b10      	ldr	r3, [pc, #64]	; (800f6f8 <_SetPixelIndex+0x48>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f6ba:	460e      	mov	r6, r1
 800f6bc:	4615      	mov	r5, r2
 800f6be:	f7fe fb61 	bl	800dd84 <GUI_ALLOC_LockH>
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	9000      	str	r0, [sp, #0]
 800f6c6:	4630      	mov	r0, r6
 800f6c8:	f7ff ff9e 	bl	800f608 <_XY2PTR>
 800f6cc:	9b00      	ldr	r3, [sp, #0]
 800f6ce:	8004      	strh	r4, [r0, #0]
 800f6d0:	6958      	ldr	r0, [r3, #20]
 800f6d2:	b160      	cbz	r0, 800f6ee <_SetPixelIndex+0x3e>
 800f6d4:	f7fe fb56 	bl	800dd84 <GUI_ALLOC_LockH>
 800f6d8:	ac02      	add	r4, sp, #8
 800f6da:	6883      	ldr	r3, [r0, #8]
 800f6dc:	f844 0d04 	str.w	r0, [r4, #-4]!
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	4631      	mov	r1, r6
 800f6e4:	462a      	mov	r2, r5
 800f6e6:	4798      	blx	r3
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7fe fb59 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f6ee:	4668      	mov	r0, sp
 800f6f0:	f7fe fb56 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f6f4:	b002      	add	sp, #8
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}
 800f6f8:	20000084 	.word	0x20000084

0800f6fc <_DrawVLine>:
 800f6fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f700:	4d2c      	ldr	r5, [pc, #176]	; (800f7b4 <_DrawVLine+0xb8>)
 800f702:	461e      	mov	r6, r3
 800f704:	682b      	ldr	r3, [r5, #0]
 800f706:	4681      	mov	r9, r0
 800f708:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f70a:	460f      	mov	r7, r1
 800f70c:	4614      	mov	r4, r2
 800f70e:	f7fe fb39 	bl	800dd84 <GUI_ALLOC_LockH>
 800f712:	9000      	str	r0, [sp, #0]
 800f714:	6940      	ldr	r0, [r0, #20]
 800f716:	46aa      	mov	sl, r5
 800f718:	b108      	cbz	r0, 800f71e <_DrawVLine+0x22>
 800f71a:	f7fe fb33 	bl	800dd84 <GUI_ALLOC_LockH>
 800f71e:	9001      	str	r0, [sp, #4]
 800f720:	4621      	mov	r1, r4
 800f722:	4638      	mov	r0, r7
 800f724:	f7ff ff70 	bl	800f608 <_XY2PTR>
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800f72e:	f8da 3000 	ldr.w	r3, [sl]
 800f732:	7c1a      	ldrb	r2, [r3, #16]
 800f734:	07d2      	lsls	r2, r2, #31
 800f736:	4605      	mov	r5, r0
 800f738:	d51f      	bpl.n	800f77a <_DrawVLine+0x7e>
 800f73a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	4798      	blx	r3
 800f742:	fa1f f880 	uxth.w	r8, r0
 800f746:	9801      	ldr	r0, [sp, #4]
 800f748:	b120      	cbz	r0, 800f754 <_DrawVLine+0x58>
 800f74a:	6883      	ldr	r3, [r0, #8]
 800f74c:	4639      	mov	r1, r7
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	4622      	mov	r2, r4
 800f752:	4798      	blx	r3
 800f754:	882b      	ldrh	r3, [r5, #0]
 800f756:	ea88 0303 	eor.w	r3, r8, r3
 800f75a:	802b      	strh	r3, [r5, #0]
 800f75c:	9b00      	ldr	r3, [sp, #0]
 800f75e:	3401      	adds	r4, #1
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	42b4      	cmp	r4, r6
 800f764:	441d      	add	r5, r3
 800f766:	ddee      	ble.n	800f746 <_DrawVLine+0x4a>
 800f768:	4668      	mov	r0, sp
 800f76a:	f7fe fb19 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f76e:	9b01      	ldr	r3, [sp, #4]
 800f770:	b1eb      	cbz	r3, 800f7ae <_DrawVLine+0xb2>
 800f772:	a801      	add	r0, sp, #4
 800f774:	f7fe fb14 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f778:	e019      	b.n	800f7ae <_DrawVLine+0xb2>
 800f77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77c:	f8d3 9000 	ldr.w	r9, [r3]
 800f780:	9b01      	ldr	r3, [sp, #4]
 800f782:	b163      	cbz	r3, 800f79e <_DrawVLine+0xa2>
 800f784:	9801      	ldr	r0, [sp, #4]
 800f786:	6883      	ldr	r3, [r0, #8]
 800f788:	4622      	mov	r2, r4
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	4639      	mov	r1, r7
 800f78e:	3401      	adds	r4, #1
 800f790:	4798      	blx	r3
 800f792:	42b4      	cmp	r4, r6
 800f794:	f8a5 9000 	strh.w	r9, [r5]
 800f798:	4445      	add	r5, r8
 800f79a:	ddf3      	ble.n	800f784 <_DrawVLine+0x88>
 800f79c:	e7e4      	b.n	800f768 <_DrawVLine+0x6c>
 800f79e:	1b34      	subs	r4, r6, r4
 800f7a0:	3401      	adds	r4, #1
 800f7a2:	3c01      	subs	r4, #1
 800f7a4:	f8a5 9000 	strh.w	r9, [r5]
 800f7a8:	4445      	add	r5, r8
 800f7aa:	d1fa      	bne.n	800f7a2 <_DrawVLine+0xa6>
 800f7ac:	e7dc      	b.n	800f768 <_DrawVLine+0x6c>
 800f7ae:	b002      	add	sp, #8
 800f7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b4:	20000084 	.word	0x20000084

0800f7b8 <_FillRect>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	4f2a      	ldr	r7, [pc, #168]	; (800f868 <_FillRect+0xb0>)
 800f7be:	4614      	mov	r4, r2
 800f7c0:	683a      	ldr	r2, [r7, #0]
 800f7c2:	4698      	mov	r8, r3
 800f7c4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f7c6:	b087      	sub	sp, #28
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	9302      	str	r3, [sp, #8]
 800f7cc:	4682      	mov	sl, r0
 800f7ce:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800f7d0:	460e      	mov	r6, r1
 800f7d2:	f7fe fad7 	bl	800dd84 <GUI_ALLOC_LockH>
 800f7d6:	4621      	mov	r1, r4
 800f7d8:	9004      	str	r0, [sp, #16]
 800f7da:	4630      	mov	r0, r6
 800f7dc:	f7ff ff14 	bl	800f608 <_XY2PTR>
 800f7e0:	9a04      	ldr	r2, [sp, #16]
 800f7e2:	4605      	mov	r5, r0
 800f7e4:	6950      	ldr	r0, [r2, #20]
 800f7e6:	68d3      	ldr	r3, [r2, #12]
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	ebc6 0908 	rsb	r9, r6, r8
 800f7ee:	f109 0801 	add.w	r8, r9, #1
 800f7f2:	46bb      	mov	fp, r7
 800f7f4:	b180      	cbz	r0, 800f818 <_FillRect+0x60>
 800f7f6:	f7fe fac5 	bl	800dd84 <GUI_ALLOC_LockH>
 800f7fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f7fc:	af06      	add	r7, sp, #24
 800f7fe:	1b13      	subs	r3, r2, r4
 800f800:	f847 0d04 	str.w	r0, [r7, #-4]!
 800f804:	3301      	adds	r3, #1
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	4631      	mov	r1, r6
 800f80a:	4622      	mov	r2, r4
 800f80c:	4643      	mov	r3, r8
 800f80e:	f7ff fe7f 	bl	800f510 <GUI_USAGE_AddRect>
 800f812:	4638      	mov	r0, r7
 800f814:	f7fe fac4 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f818:	ea4f 0649 	mov.w	r6, r9, lsl #1
 800f81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f81e:	429c      	cmp	r4, r3
 800f820:	dc1c      	bgt.n	800f85c <_FillRect+0xa4>
 800f822:	f8db 3000 	ldr.w	r3, [fp]
 800f826:	7c1b      	ldrb	r3, [r3, #16]
 800f828:	07db      	lsls	r3, r3, #31
 800f82a:	d50d      	bpl.n	800f848 <_FillRect+0x90>
 800f82c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800f830:	689b      	ldr	r3, [r3, #8]
 800f832:	4798      	blx	r3
 800f834:	19aa      	adds	r2, r5, r6
 800f836:	b280      	uxth	r0, r0
 800f838:	1eab      	subs	r3, r5, #2
 800f83a:	8859      	ldrh	r1, [r3, #2]
 800f83c:	4041      	eors	r1, r0
 800f83e:	f823 1f02 	strh.w	r1, [r3, #2]!
 800f842:	4293      	cmp	r3, r2
 800f844:	d1f9      	bne.n	800f83a <_FillRect+0x82>
 800f846:	e005      	b.n	800f854 <_FillRect+0x9c>
 800f848:	9b02      	ldr	r3, [sp, #8]
 800f84a:	4628      	mov	r0, r5
 800f84c:	b299      	uxth	r1, r3
 800f84e:	4642      	mov	r2, r8
 800f850:	f7fb ffc6 	bl	800b7e0 <GUI__memset16>
 800f854:	9a03      	ldr	r2, [sp, #12]
 800f856:	3401      	adds	r4, #1
 800f858:	4415      	add	r5, r2
 800f85a:	e7df      	b.n	800f81c <_FillRect+0x64>
 800f85c:	a804      	add	r0, sp, #16
 800f85e:	f7fe fa9f 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f862:	b007      	add	sp, #28
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f868:	20000084 	.word	0x20000084

0800f86c <_DrawHLine>:
 800f86c:	b507      	push	{r0, r1, r2, lr}
 800f86e:	9200      	str	r2, [sp, #0]
 800f870:	f7ff ffa2 	bl	800f7b8 <_FillRect>
 800f874:	b003      	add	sp, #12
 800f876:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f87c <_DrawBitmap>:
 800f87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f880:	4c8b      	ldr	r4, [pc, #556]	; (800fab0 <_DrawBitmap+0x234>)
 800f882:	b093      	sub	sp, #76	; 0x4c
 800f884:	469b      	mov	fp, r3
 800f886:	6823      	ldr	r3, [r4, #0]
 800f888:	900d      	str	r0, [sp, #52]	; 0x34
 800f88a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800f88c:	9207      	str	r2, [sp, #28]
 800f88e:	460d      	mov	r5, r1
 800f890:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 800f894:	f7fe fa76 	bl	800dd84 <GUI_ALLOC_LockH>
 800f898:	9010      	str	r0, [sp, #64]	; 0x40
 800f89a:	6940      	ldr	r0, [r0, #20]
 800f89c:	b108      	cbz	r0, 800f8a2 <_DrawBitmap+0x26>
 800f89e:	f7fe fa71 	bl	800dd84 <GUI_ALLOC_LockH>
 800f8a2:	9011      	str	r0, [sp, #68]	; 0x44
 800f8a4:	a812      	add	r0, sp, #72	; 0x48
 800f8a6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800f8aa:	68db      	ldr	r3, [r3, #12]
 800f8ac:	9308      	str	r3, [sp, #32]
 800f8ae:	f7fe fa77 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800f8b2:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800f8b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800f8b6:	442e      	add	r6, r5
 800f8b8:	9604      	str	r6, [sp, #16]
 800f8ba:	b150      	cbz	r0, 800f8d2 <_DrawBitmap+0x56>
 800f8bc:	6823      	ldr	r3, [r4, #0]
 800f8be:	7c1b      	ldrb	r3, [r3, #16]
 800f8c0:	0799      	lsls	r1, r3, #30
 800f8c2:	d106      	bne.n	800f8d2 <_DrawBitmap+0x56>
 800f8c4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f8c6:	9700      	str	r7, [sp, #0]
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	9a07      	ldr	r2, [sp, #28]
 800f8cc:	465b      	mov	r3, fp
 800f8ce:	f7ff fe1f 	bl	800f510 <GUI_USAGE_AddRect>
 800f8d2:	9804      	ldr	r0, [sp, #16]
 800f8d4:	9907      	ldr	r1, [sp, #28]
 800f8d6:	f7ff fe97 	bl	800f608 <_XY2PTR>
 800f8da:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f8dc:	2e10      	cmp	r6, #16
 800f8de:	4604      	mov	r4, r0
 800f8e0:	d13a      	bne.n	800f958 <_DrawBitmap+0xdc>
 800f8e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8e4:	b11b      	cbz	r3, 800f8ee <_DrawBitmap+0x72>
 800f8e6:	ea4f 064b 	mov.w	r6, fp, lsl #1
 800f8ea:	2500      	movs	r5, #0
 800f8ec:	e014      	b.n	800f918 <_DrawBitmap+0x9c>
 800f8ee:	4b71      	ldr	r3, [pc, #452]	; (800fab4 <_DrawBitmap+0x238>)
 800f8f0:	681d      	ldr	r5, [r3, #0]
 800f8f2:	2d00      	cmp	r5, #0
 800f8f4:	d0f7      	beq.n	800f8e6 <_DrawBitmap+0x6a>
 800f8f6:	9e08      	ldr	r6, [sp, #32]
 800f8f8:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f8fa:	9600      	str	r6, [sp, #0]
 800f8fc:	9701      	str	r7, [sp, #4]
 800f8fe:	4651      	mov	r1, sl
 800f900:	465a      	mov	r2, fp
 800f902:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800f904:	47a8      	blx	r5
 800f906:	e349      	b.n	800ff9c <_DrawBitmap+0x720>
 800f908:	f1ba 0f00 	cmp.w	sl, #0
 800f90c:	d10a      	bne.n	800f924 <_DrawBitmap+0xa8>
 800f90e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f910:	44ba      	add	sl, r7
 800f912:	9f08      	ldr	r7, [sp, #32]
 800f914:	3501      	adds	r5, #1
 800f916:	443c      	add	r4, r7
 800f918:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f91a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800f91e:	42bd      	cmp	r5, r7
 800f920:	dbf2      	blt.n	800f908 <_DrawBitmap+0x8c>
 800f922:	e014      	b.n	800f94e <_DrawBitmap+0xd2>
 800f924:	2c00      	cmp	r4, #0
 800f926:	d0f2      	beq.n	800f90e <_DrawBitmap+0x92>
 800f928:	4b63      	ldr	r3, [pc, #396]	; (800fab8 <_DrawBitmap+0x23c>)
 800f92a:	4620      	mov	r0, r4
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4651      	mov	r1, sl
 800f930:	4632      	mov	r2, r6
 800f932:	4798      	blx	r3
 800f934:	f1b8 0f00 	cmp.w	r8, #0
 800f938:	d0e9      	beq.n	800f90e <_DrawBitmap+0x92>
 800f93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f93e:	9a07      	ldr	r2, [sp, #28]
 800f940:	685f      	ldr	r7, [r3, #4]
 800f942:	9904      	ldr	r1, [sp, #16]
 800f944:	4640      	mov	r0, r8
 800f946:	442a      	add	r2, r5
 800f948:	465b      	mov	r3, fp
 800f94a:	47b8      	blx	r7
 800f94c:	e7df      	b.n	800f90e <_DrawBitmap+0x92>
 800f94e:	f1b8 0f00 	cmp.w	r8, #0
 800f952:	f040 8320 	bne.w	800ff96 <_DrawBitmap+0x71a>
 800f956:	e321      	b.n	800ff9c <_DrawBitmap+0x720>
 800f958:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f95a:	2e17      	cmp	r6, #23
 800f95c:	dd38      	ble.n	800f9d0 <_DrawBitmap+0x154>
 800f95e:	2600      	movs	r6, #0
 800f960:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f962:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f964:	42be      	cmp	r6, r7
 800f966:	f280 809e 	bge.w	800faa6 <_DrawBitmap+0x22a>
 800f96a:	9f07      	ldr	r7, [sp, #28]
 800f96c:	4437      	add	r7, r6
 800f96e:	f1ba 0f00 	cmp.w	sl, #0
 800f972:	d027      	beq.n	800f9c4 <_DrawBitmap+0x148>
 800f974:	b334      	cbz	r4, 800f9c4 <_DrawBitmap+0x148>
 800f976:	b13d      	cbz	r5, 800f988 <_DrawBitmap+0x10c>
 800f978:	68ab      	ldr	r3, [r5, #8]
 800f97a:	9904      	ldr	r1, [sp, #16]
 800f97c:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800f980:	4628      	mov	r0, r5
 800f982:	463a      	mov	r2, r7
 800f984:	465b      	mov	r3, fp
 800f986:	47e0      	blx	ip
 800f988:	1ea3      	subs	r3, r4, #2
 800f98a:	f1aa 0904 	sub.w	r9, sl, #4
 800f98e:	9303      	str	r3, [sp, #12]
 800f990:	46d8      	mov	r8, fp
 800f992:	9b04      	ldr	r3, [sp, #16]
 800f994:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f996:	445b      	add	r3, fp
 800f998:	ebc8 0103 	rsb	r1, r8, r3
 800f99c:	6903      	ldr	r3, [r0, #16]
 800f99e:	f859 0f04 	ldr.w	r0, [r9, #4]!
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	9102      	str	r1, [sp, #8]
 800f9a6:	4798      	blx	r3
 800f9a8:	9b03      	ldr	r3, [sp, #12]
 800f9aa:	9902      	ldr	r1, [sp, #8]
 800f9ac:	f823 0f02 	strh.w	r0, [r3, #2]!
 800f9b0:	9303      	str	r3, [sp, #12]
 800f9b2:	b125      	cbz	r5, 800f9be <_DrawBitmap+0x142>
 800f9b4:	68ab      	ldr	r3, [r5, #8]
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	463a      	mov	r2, r7
 800f9bc:	4798      	blx	r3
 800f9be:	f1b8 0801 	subs.w	r8, r8, #1
 800f9c2:	d1e6      	bne.n	800f992 <_DrawBitmap+0x116>
 800f9c4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800f9c6:	44ba      	add	sl, r7
 800f9c8:	9f08      	ldr	r7, [sp, #32]
 800f9ca:	3601      	adds	r6, #1
 800f9cc:	443c      	add	r4, r7
 800f9ce:	e7c7      	b.n	800f960 <_DrawBitmap+0xe4>
 800f9d0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f9d2:	2e08      	cmp	r6, #8
 800f9d4:	f100 0402 	add.w	r4, r0, #2
 800f9d8:	d170      	bne.n	800fabc <_DrawBitmap+0x240>
 800f9da:	9e07      	ldr	r6, [sp, #28]
 800f9dc:	9f07      	ldr	r7, [sp, #28]
 800f9de:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800f9e0:	1bf3      	subs	r3, r6, r7
 800f9e2:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800f9e4:	42bb      	cmp	r3, r7
 800f9e6:	f1a4 0002 	sub.w	r0, r4, #2
 800f9ea:	da5c      	bge.n	800faa6 <_DrawBitmap+0x22a>
 800f9ec:	4b30      	ldr	r3, [pc, #192]	; (800fab0 <_DrawBitmap+0x234>)
 800f9ee:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	7c1b      	ldrb	r3, [r3, #16]
 800f9f4:	b367      	cbz	r7, 800fa50 <_DrawBitmap+0x1d4>
 800f9f6:	f013 0303 	ands.w	r3, r3, #3
 800f9fa:	d004      	beq.n	800fa06 <_DrawBitmap+0x18a>
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d14c      	bne.n	800fa9a <_DrawBitmap+0x21e>
 800fa00:	46a0      	mov	r8, r4
 800fa02:	9f04      	ldr	r7, [sp, #16]
 800fa04:	e01d      	b.n	800fa42 <_DrawBitmap+0x1c6>
 800fa06:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800fa0a:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fa0c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800fa10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
 800fa14:	3301      	adds	r3, #1
 800fa16:	455b      	cmp	r3, fp
 800fa18:	d1f5      	bne.n	800fa06 <_DrawBitmap+0x18a>
 800fa1a:	e03e      	b.n	800fa9a <_DrawBitmap+0x21e>
 800fa1c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fa1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa22:	f828 3c02 	strh.w	r3, [r8, #-2]
 800fa26:	b12d      	cbz	r5, 800fa34 <_DrawBitmap+0x1b8>
 800fa28:	68ab      	ldr	r3, [r5, #8]
 800fa2a:	4628      	mov	r0, r5
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4639      	mov	r1, r7
 800fa30:	4632      	mov	r2, r6
 800fa32:	4798      	blx	r3
 800fa34:	9b04      	ldr	r3, [sp, #16]
 800fa36:	3701      	adds	r7, #1
 800fa38:	445b      	add	r3, fp
 800fa3a:	42bb      	cmp	r3, r7
 800fa3c:	f108 0802 	add.w	r8, r8, #2
 800fa40:	d02b      	beq.n	800fa9a <_DrawBitmap+0x21e>
 800fa42:	9804      	ldr	r0, [sp, #16]
 800fa44:	ebc0 030a 	rsb	r3, r0, sl
 800fa48:	5ddb      	ldrb	r3, [r3, r7]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d0f2      	beq.n	800fa34 <_DrawBitmap+0x1b8>
 800fa4e:	e7e5      	b.n	800fa1c <_DrawBitmap+0x1a0>
 800fa50:	f013 0303 	ands.w	r3, r3, #3
 800fa54:	d004      	beq.n	800fa60 <_DrawBitmap+0x1e4>
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d11f      	bne.n	800fa9a <_DrawBitmap+0x21e>
 800fa5a:	46a0      	mov	r8, r4
 800fa5c:	9f04      	ldr	r7, [sp, #16]
 800fa5e:	e015      	b.n	800fa8c <_DrawBitmap+0x210>
 800fa60:	4b15      	ldr	r3, [pc, #84]	; (800fab8 <_DrawBitmap+0x23c>)
 800fa62:	4651      	mov	r1, sl
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	465a      	mov	r2, fp
 800fa68:	4798      	blx	r3
 800fa6a:	e016      	b.n	800fa9a <_DrawBitmap+0x21e>
 800fa6c:	f828 3c02 	strh.w	r3, [r8, #-2]
 800fa70:	b12d      	cbz	r5, 800fa7e <_DrawBitmap+0x202>
 800fa72:	68ab      	ldr	r3, [r5, #8]
 800fa74:	4628      	mov	r0, r5
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	4639      	mov	r1, r7
 800fa7a:	4632      	mov	r2, r6
 800fa7c:	4798      	blx	r3
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	3701      	adds	r7, #1
 800fa82:	445b      	add	r3, fp
 800fa84:	42bb      	cmp	r3, r7
 800fa86:	f108 0802 	add.w	r8, r8, #2
 800fa8a:	d006      	beq.n	800fa9a <_DrawBitmap+0x21e>
 800fa8c:	9a04      	ldr	r2, [sp, #16]
 800fa8e:	ebc2 030a 	rsb	r3, r2, sl
 800fa92:	5ddb      	ldrb	r3, [r3, r7]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d0f2      	beq.n	800fa7e <_DrawBitmap+0x202>
 800fa98:	e7e8      	b.n	800fa6c <_DrawBitmap+0x1f0>
 800fa9a:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800fa9c:	44ba      	add	sl, r7
 800fa9e:	9f08      	ldr	r7, [sp, #32]
 800faa0:	3601      	adds	r6, #1
 800faa2:	443c      	add	r4, r7
 800faa4:	e79a      	b.n	800f9dc <_DrawBitmap+0x160>
 800faa6:	2d00      	cmp	r5, #0
 800faa8:	f040 8275 	bne.w	800ff96 <_DrawBitmap+0x71a>
 800faac:	e276      	b.n	800ff9c <_DrawBitmap+0x720>
 800faae:	bf00      	nop
 800fab0:	20000084 	.word	0x20000084
 800fab4:	20002ba4 	.word	0x20002ba4
 800fab8:	20000074 	.word	0x20000074
 800fabc:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800fabe:	4bab      	ldr	r3, [pc, #684]	; (800fd6c <_DrawBitmap+0x4f0>)
 800fac0:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800fac2:	9409      	str	r4, [sp, #36]	; 0x24
 800fac4:	2e00      	cmp	r6, #0
 800fac6:	bf08      	it	eq
 800fac8:	461e      	moveq	r6, r3
 800faca:	9621      	str	r6, [sp, #132]	; 0x84
 800facc:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800face:	0076      	lsls	r6, r6, #1
 800fad0:	960e      	str	r6, [sp, #56]	; 0x38
 800fad2:	00bf      	lsls	r7, r7, #2
 800fad4:	9e07      	ldr	r6, [sp, #28]
 800fad6:	970f      	str	r7, [sp, #60]	; 0x3c
 800fad8:	9605      	str	r6, [sp, #20]
 800fada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fadc:	9e05      	ldr	r6, [sp, #20]
 800fade:	9f07      	ldr	r7, [sp, #28]
 800fae0:	1e9c      	subs	r4, r3, #2
 800fae2:	1bf3      	subs	r3, r6, r7
 800fae4:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800fae6:	42b3      	cmp	r3, r6
 800fae8:	f280 8253 	bge.w	800ff92 <_DrawBitmap+0x716>
 800faec:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800faee:	2f02      	cmp	r7, #2
 800faf0:	f000 80d9 	beq.w	800fca6 <_DrawBitmap+0x42a>
 800faf4:	2f04      	cmp	r7, #4
 800faf6:	f000 8178 	beq.w	800fdea <_DrawBitmap+0x56e>
 800fafa:	2f01      	cmp	r7, #1
 800fafc:	f040 823f 	bne.w	800ff7e <_DrawBitmap+0x702>
 800fb00:	f8df 9270 	ldr.w	r9, [pc, #624]	; 800fd74 <_DrawBitmap+0x4f8>
 800fb04:	f8d9 3000 	ldr.w	r3, [r9]
 800fb08:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800fb0a:	f7fe f93b 	bl	800dd84 <GUI_ALLOC_LockH>
 800fb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb12:	4a97      	ldr	r2, [pc, #604]	; (800fd70 <_DrawBitmap+0x4f4>)
 800fb14:	9010      	str	r0, [sp, #64]	; 0x40
 800fb16:	5cd5      	ldrb	r5, [r2, r3]
 800fb18:	f8d9 3000 	ldr.w	r3, [r9]
 800fb1c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800fb1e:	7c1b      	ldrb	r3, [r3, #16]
 800fb20:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800fb22:	f003 0303 	and.w	r3, r3, #3
 800fb26:	2b02      	cmp	r3, #2
 800fb28:	465e      	mov	r6, fp
 800fb2a:	f1c0 0808 	rsb	r8, r0, #8
 800fb2e:	fa45 f500 	asr.w	r5, r5, r0
 800fb32:	d022      	beq.n	800fb7a <_DrawBitmap+0x2fe>
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d062      	beq.n	800fbfe <_DrawBitmap+0x382>
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d060      	beq.n	800fbfe <_DrawBitmap+0x382>
 800fb3c:	4652      	mov	r2, sl
 800fb3e:	4546      	cmp	r6, r8
 800fb40:	bf38      	it	cc
 800fb42:	46b0      	movcc	r8, r6
 800fb44:	ebc8 0606 	rsb	r6, r8, r6
 800fb48:	4643      	mov	r3, r8
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	f005 0001 	and.w	r0, r5, #1
 800fb50:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fb52:	3b01      	subs	r3, #1
 800fb54:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800fb58:	f821 0b02 	strh.w	r0, [r1], #2
 800fb5c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800fb60:	d1f4      	bne.n	800fb4c <_DrawBitmap+0x2d0>
 800fb62:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800fb66:	2e00      	cmp	r6, #0
 800fb68:	f000 8099 	beq.w	800fc9e <_DrawBitmap+0x422>
 800fb6c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800fb70:	497f      	ldr	r1, [pc, #508]	; (800fd70 <_DrawBitmap+0x4f4>)
 800fb72:	f04f 0808 	mov.w	r8, #8
 800fb76:	5ccd      	ldrb	r5, [r1, r3]
 800fb78:	e7e1      	b.n	800fb3e <_DrawBitmap+0x2c2>
 800fb7a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800fb7c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fb80:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 800fb84:	f8cd a018 	str.w	sl, [sp, #24]
 800fb88:	4546      	cmp	r6, r8
 800fb8a:	bf38      	it	cc
 800fb8c:	46b0      	movcc	r8, r6
 800fb8e:	ebc8 0606 	rsb	r6, r8, r6
 800fb92:	b32f      	cbz	r7, 800fbe0 <_DrawBitmap+0x364>
 800fb94:	b91d      	cbnz	r5, 800fb9e <_DrawBitmap+0x322>
 800fb96:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800fb9a:	44c1      	add	r9, r8
 800fb9c:	e024      	b.n	800fbe8 <_DrawBitmap+0x36c>
 800fb9e:	07ea      	lsls	r2, r5, #31
 800fba0:	d50b      	bpl.n	800fbba <_DrawBitmap+0x33e>
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	9a05      	ldr	r2, [sp, #20]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f8cd c008 	str.w	ip, [sp, #8]
 800fbac:	4638      	mov	r0, r7
 800fbae:	4649      	mov	r1, r9
 800fbb0:	4798      	blx	r3
 800fbb2:	f8dd c008 	ldr.w	ip, [sp, #8]
 800fbb6:	f8a4 c000 	strh.w	ip, [r4]
 800fbba:	f1b8 0801 	subs.w	r8, r8, #1
 800fbbe:	f109 0901 	add.w	r9, r9, #1
 800fbc2:	f104 0402 	add.w	r4, r4, #2
 800fbc6:	d00f      	beq.n	800fbe8 <_DrawBitmap+0x36c>
 800fbc8:	086d      	lsrs	r5, r5, #1
 800fbca:	e7e3      	b.n	800fb94 <_DrawBitmap+0x318>
 800fbcc:	07eb      	lsls	r3, r5, #31
 800fbce:	bf48      	it	mi
 800fbd0:	f8a4 c000 	strhmi.w	ip, [r4]
 800fbd4:	f1b8 0801 	subs.w	r8, r8, #1
 800fbd8:	f104 0402 	add.w	r4, r4, #2
 800fbdc:	d004      	beq.n	800fbe8 <_DrawBitmap+0x36c>
 800fbde:	086d      	lsrs	r5, r5, #1
 800fbe0:	2d00      	cmp	r5, #0
 800fbe2:	d1f3      	bne.n	800fbcc <_DrawBitmap+0x350>
 800fbe4:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800fbe8:	2e00      	cmp	r6, #0
 800fbea:	d058      	beq.n	800fc9e <_DrawBitmap+0x422>
 800fbec:	9906      	ldr	r1, [sp, #24]
 800fbee:	4a60      	ldr	r2, [pc, #384]	; (800fd70 <_DrawBitmap+0x4f4>)
 800fbf0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fbf4:	9106      	str	r1, [sp, #24]
 800fbf6:	5cd5      	ldrb	r5, [r2, r3]
 800fbf8:	f04f 0808 	mov.w	r8, #8
 800fbfc:	e7c4      	b.n	800fb88 <_DrawBitmap+0x30c>
 800fbfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc00:	6913      	ldr	r3, [r2, #16]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	4798      	blx	r3
 800fc06:	9b04      	ldr	r3, [sp, #16]
 800fc08:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc0a:	b280      	uxth	r0, r0
 800fc0c:	900a      	str	r0, [sp, #40]	; 0x28
 800fc0e:	f10a 0901 	add.w	r9, sl, #1
 800fc12:	4546      	cmp	r6, r8
 800fc14:	bf38      	it	cc
 800fc16:	46b0      	movcc	r8, r6
 800fc18:	ebc8 0606 	rsb	r6, r8, r6
 800fc1c:	1ca3      	adds	r3, r4, #2
 800fc1e:	b31f      	cbz	r7, 800fc68 <_DrawBitmap+0x3ec>
 800fc20:	f8cd 8018 	str.w	r8, [sp, #24]
 800fc24:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fc26:	9a06      	ldr	r2, [sp, #24]
 800fc28:	4440      	add	r0, r8
 800fc2a:	900c      	str	r0, [sp, #48]	; 0x30
 800fc2c:	1a81      	subs	r1, r0, r2
 800fc2e:	07e8      	lsls	r0, r5, #31
 800fc30:	d50d      	bpl.n	800fc4e <_DrawBitmap+0x3d2>
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	4638      	mov	r0, r7
 800fc36:	f8d2 c000 	ldr.w	ip, [r2]
 800fc3a:	9a05      	ldr	r2, [sp, #20]
 800fc3c:	9302      	str	r3, [sp, #8]
 800fc3e:	47e0      	blx	ip
 800fc40:	9b02      	ldr	r3, [sp, #8]
 800fc42:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc44:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800fc48:	4042      	eors	r2, r0
 800fc4a:	f823 2c02 	strh.w	r2, [r3, #-2]
 800fc4e:	9906      	ldr	r1, [sp, #24]
 800fc50:	3901      	subs	r1, #1
 800fc52:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800fc56:	f103 0302 	add.w	r3, r3, #2
 800fc5a:	9106      	str	r1, [sp, #24]
 800fc5c:	d1e2      	bne.n	800fc24 <_DrawBitmap+0x3a8>
 800fc5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc60:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc62:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800fc66:	e010      	b.n	800fc8a <_DrawBitmap+0x40e>
 800fc68:	4642      	mov	r2, r8
 800fc6a:	07e9      	lsls	r1, r5, #31
 800fc6c:	d505      	bpl.n	800fc7a <_DrawBitmap+0x3fe>
 800fc6e:	f833 1c02 	ldrh.w	r1, [r3, #-2]
 800fc72:	980a      	ldr	r0, [sp, #40]	; 0x28
 800fc74:	4041      	eors	r1, r0
 800fc76:	f823 1c02 	strh.w	r1, [r3, #-2]
 800fc7a:	3a01      	subs	r2, #1
 800fc7c:	ea4f 0555 	mov.w	r5, r5, lsr #1
 800fc80:	f103 0302 	add.w	r3, r3, #2
 800fc84:	d1f1      	bne.n	800fc6a <_DrawBitmap+0x3ee>
 800fc86:	eb04 0448 	add.w	r4, r4, r8, lsl #1
 800fc8a:	b146      	cbz	r6, 800fc9e <_DrawBitmap+0x422>
 800fc8c:	f899 3000 	ldrb.w	r3, [r9]
 800fc90:	4a37      	ldr	r2, [pc, #220]	; (800fd70 <_DrawBitmap+0x4f4>)
 800fc92:	f109 0901 	add.w	r9, r9, #1
 800fc96:	5cd5      	ldrb	r5, [r2, r3]
 800fc98:	f04f 0808 	mov.w	r8, #8
 800fc9c:	e7b9      	b.n	800fc12 <_DrawBitmap+0x396>
 800fc9e:	a810      	add	r0, sp, #64	; 0x40
 800fca0:	f7fe f87e 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800fca4:	e16b      	b.n	800ff7e <_DrawBitmap+0x702>
 800fca6:	4b33      	ldr	r3, [pc, #204]	; (800fd74 <_DrawBitmap+0x4f8>)
 800fca8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800fcae:	7c1b      	ldrb	r3, [r3, #16]
 800fcb0:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 800fcb4:	f1c6 0504 	rsb	r5, r6, #4
 800fcb8:	f89a 6000 	ldrb.w	r6, [sl]
 800fcbc:	f003 0303 	and.w	r3, r3, #3
 800fcc0:	40be      	lsls	r6, r7
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	b2ed      	uxtb	r5, r5
 800fcc6:	b2f6      	uxtb	r6, r6
 800fcc8:	d06a      	beq.n	800fda0 <_DrawBitmap+0x524>
 800fcca:	d308      	bcc.n	800fcde <_DrawBitmap+0x462>
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	f040 8156 	bne.w	800ff7e <_DrawBitmap+0x702>
 800fcd2:	f8cd a018 	str.w	sl, [sp, #24]
 800fcd6:	465f      	mov	r7, fp
 800fcd8:	f8dd c010 	ldr.w	ip, [sp, #16]
 800fcdc:	e03e      	b.n	800fd5c <_DrawBitmap+0x4e0>
 800fcde:	4652      	mov	r2, sl
 800fce0:	465b      	mov	r3, fp
 800fce2:	429d      	cmp	r5, r3
 800fce4:	bfc8      	it	gt
 800fce6:	b2dd      	uxtbgt	r5, r3
 800fce8:	1b5b      	subs	r3, r3, r5
 800fcea:	4629      	mov	r1, r5
 800fcec:	4620      	mov	r0, r4
 800fcee:	ea4f 1c96 	mov.w	ip, r6, lsr #6
 800fcf2:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fcf4:	3901      	subs	r1, #1
 800fcf6:	f857 c02c 	ldr.w	ip, [r7, ip, lsl #2]
 800fcfa:	f820 cb02 	strh.w	ip, [r0], #2
 800fcfe:	00b6      	lsls	r6, r6, #2
 800fd00:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800fd04:	b2f6      	uxtb	r6, r6
 800fd06:	d1f2      	bne.n	800fcee <_DrawBitmap+0x472>
 800fd08:	3d01      	subs	r5, #1
 800fd0a:	b2ed      	uxtb	r5, r5
 800fd0c:	3501      	adds	r5, #1
 800fd0e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 8133 	beq.w	800ff7e <_DrawBitmap+0x702>
 800fd18:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 800fd1c:	2504      	movs	r5, #4
 800fd1e:	e7e0      	b.n	800fce2 <_DrawBitmap+0x466>
 800fd20:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800fd24:	eb08 010c 	add.w	r1, r8, ip
 800fd28:	d126      	bne.n	800fd78 <_DrawBitmap+0x4fc>
 800fd2a:	f108 0801 	add.w	r8, r8, #1
 800fd2e:	fa5f f388 	uxtb.w	r3, r8
 800fd32:	00b6      	lsls	r6, r6, #2
 800fd34:	429d      	cmp	r5, r3
 800fd36:	b2f6      	uxtb	r6, r6
 800fd38:	d1f2      	bne.n	800fd20 <_DrawBitmap+0x4a4>
 800fd3a:	3d01      	subs	r5, #1
 800fd3c:	b2ed      	uxtb	r5, r5
 800fd3e:	1c6b      	adds	r3, r5, #1
 800fd40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800fd44:	f10c 0301 	add.w	r3, ip, #1
 800fd48:	eb03 0c05 	add.w	ip, r3, r5
 800fd4c:	2f00      	cmp	r7, #0
 800fd4e:	f000 8116 	beq.w	800ff7e <_DrawBitmap+0x702>
 800fd52:	9b06      	ldr	r3, [sp, #24]
 800fd54:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 800fd58:	9306      	str	r3, [sp, #24]
 800fd5a:	2504      	movs	r5, #4
 800fd5c:	42bd      	cmp	r5, r7
 800fd5e:	bfc8      	it	gt
 800fd60:	b2fd      	uxtbgt	r5, r7
 800fd62:	1b7f      	subs	r7, r7, r5
 800fd64:	f04f 0800 	mov.w	r8, #0
 800fd68:	e7da      	b.n	800fd20 <_DrawBitmap+0x4a4>
 800fd6a:	bf00      	nop
 800fd6c:	08013930 	.word	0x08013930
 800fd70:	080137d4 	.word	0x080137d4
 800fd74:	20000084 	.word	0x20000084
 800fd78:	09b3      	lsrs	r3, r6, #6
 800fd7a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800fd7c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800fd80:	f824 3018 	strh.w	r3, [r4, r8, lsl #1]
 800fd84:	f1b9 0f00 	cmp.w	r9, #0
 800fd88:	d0cf      	beq.n	800fd2a <_DrawBitmap+0x4ae>
 800fd8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800fd8e:	9a05      	ldr	r2, [sp, #20]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	f8cd c008 	str.w	ip, [sp, #8]
 800fd96:	4648      	mov	r0, r9
 800fd98:	4798      	blx	r3
 800fd9a:	f8dd c008 	ldr.w	ip, [sp, #8]
 800fd9e:	e7c4      	b.n	800fd2a <_DrawBitmap+0x4ae>
 800fda0:	4651      	mov	r1, sl
 800fda2:	465b      	mov	r3, fp
 800fda4:	429d      	cmp	r5, r3
 800fda6:	bfc8      	it	gt
 800fda8:	b2dd      	uxtbgt	r5, r3
 800fdaa:	1b5b      	subs	r3, r3, r5
 800fdac:	1ca2      	adds	r2, r4, #2
 800fdae:	4628      	mov	r0, r5
 800fdb0:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800fdb4:	d005      	beq.n	800fdc2 <_DrawBitmap+0x546>
 800fdb6:	f832 7c02 	ldrh.w	r7, [r2, #-2]
 800fdba:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800fdbe:	f822 7c02 	strh.w	r7, [r2, #-2]
 800fdc2:	3801      	subs	r0, #1
 800fdc4:	00b6      	lsls	r6, r6, #2
 800fdc6:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 800fdca:	b2f6      	uxtb	r6, r6
 800fdcc:	f102 0202 	add.w	r2, r2, #2
 800fdd0:	d1ee      	bne.n	800fdb0 <_DrawBitmap+0x534>
 800fdd2:	3d01      	subs	r5, #1
 800fdd4:	b2ed      	uxtb	r5, r5
 800fdd6:	3501      	adds	r5, #1
 800fdd8:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f000 80ce 	beq.w	800ff7e <_DrawBitmap+0x702>
 800fde2:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800fde6:	2504      	movs	r5, #4
 800fde8:	e7dc      	b.n	800fda4 <_DrawBitmap+0x528>
 800fdea:	4a6e      	ldr	r2, [pc, #440]	; (800ffa4 <_DrawBitmap+0x728>)
 800fdec:	f89a 3000 	ldrb.w	r3, [sl]
 800fdf0:	6812      	ldr	r2, [r2, #0]
 800fdf2:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800fdf4:	7c12      	ldrb	r2, [r2, #16]
 800fdf6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800fdf8:	f002 0203 	and.w	r2, r2, #3
 800fdfc:	40bb      	lsls	r3, r7
 800fdfe:	2a01      	cmp	r2, #1
 800fe00:	b2dd      	uxtb	r5, r3
 800fe02:	f000 8095 	beq.w	800ff30 <_DrawBitmap+0x6b4>
 800fe06:	d302      	bcc.n	800fe0e <_DrawBitmap+0x592>
 800fe08:	2a02      	cmp	r2, #2
 800fe0a:	d036      	beq.n	800fe7a <_DrawBitmap+0x5fe>
 800fe0c:	e0b7      	b.n	800ff7e <_DrawBitmap+0x702>
 800fe0e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800fe10:	b166      	cbz	r6, 800fe2c <_DrawBitmap+0x5b0>
 800fe12:	092d      	lsrs	r5, r5, #4
 800fe14:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fe16:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800fe1a:	8023      	strh	r3, [r4, #0]
 800fe1c:	f10a 0201 	add.w	r2, sl, #1
 800fe20:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fe22:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800fe26:	f10b 33ff 	add.w	r3, fp, #4294967295
 800fe2a:	e001      	b.n	800fe30 <_DrawBitmap+0x5b4>
 800fe2c:	465b      	mov	r3, fp
 800fe2e:	4652      	mov	r2, sl
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	dd19      	ble.n	800fe68 <_DrawBitmap+0x5ec>
 800fe34:	1058      	asrs	r0, r3, #1
 800fe36:	1d21      	adds	r1, r4, #4
 800fe38:	f003 0301 	and.w	r3, r3, #1
 800fe3c:	eb02 0c00 	add.w	ip, r2, r0
 800fe40:	092f      	lsrs	r7, r5, #4
 800fe42:	9e21      	ldr	r6, [sp, #132]	; 0x84
 800fe44:	f005 050f 	and.w	r5, r5, #15
 800fe48:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 800fe4c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 800fe50:	f821 7c04 	strh.w	r7, [r1, #-4]
 800fe54:	f821 5c02 	strh.w	r5, [r1, #-2]
 800fe58:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800fe5c:	4562      	cmp	r2, ip
 800fe5e:	f101 0104 	add.w	r1, r1, #4
 800fe62:	d1ed      	bne.n	800fe40 <_DrawBitmap+0x5c4>
 800fe64:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 8088 	beq.w	800ff7e <_DrawBitmap+0x702>
 800fe6e:	092d      	lsrs	r5, r5, #4
 800fe70:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fe72:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800fe76:	8023      	strh	r3, [r4, #0]
 800fe78:	e081      	b.n	800ff7e <_DrawBitmap+0x702>
 800fe7a:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800fe7c:	b1c7      	cbz	r7, 800feb0 <_DrawBitmap+0x634>
 800fe7e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800fe82:	d00b      	beq.n	800fe9c <_DrawBitmap+0x620>
 800fe84:	092d      	lsrs	r5, r5, #4
 800fe86:	9f21      	ldr	r7, [sp, #132]	; 0x84
 800fe88:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800fe8c:	8023      	strh	r3, [r4, #0]
 800fe8e:	b12e      	cbz	r6, 800fe9c <_DrawBitmap+0x620>
 800fe90:	68b3      	ldr	r3, [r6, #8]
 800fe92:	9904      	ldr	r1, [sp, #16]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	9a05      	ldr	r2, [sp, #20]
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4798      	blx	r3
 800fe9c:	9804      	ldr	r0, [sp, #16]
 800fe9e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800fea0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 800fea4:	1c47      	adds	r7, r0, #1
 800fea6:	f10b 39ff 	add.w	r9, fp, #4294967295
 800feaa:	f10a 0801 	add.w	r8, sl, #1
 800feae:	e00f      	b.n	800fed0 <_DrawBitmap+0x654>
 800feb0:	46d9      	mov	r9, fp
 800feb2:	46d0      	mov	r8, sl
 800feb4:	9f04      	ldr	r7, [sp, #16]
 800feb6:	e00b      	b.n	800fed0 <_DrawBitmap+0x654>
 800feb8:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800febc:	d10c      	bne.n	800fed8 <_DrawBitmap+0x65c>
 800febe:	f015 050f 	ands.w	r5, r5, #15
 800fec2:	d117      	bne.n	800fef4 <_DrawBitmap+0x678>
 800fec4:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 800fec8:	3404      	adds	r4, #4
 800feca:	3702      	adds	r7, #2
 800fecc:	f1a9 0902 	sub.w	r9, r9, #2
 800fed0:	f1b9 0f01 	cmp.w	r9, #1
 800fed4:	dcf0      	bgt.n	800feb8 <_DrawBitmap+0x63c>
 800fed6:	e01a      	b.n	800ff0e <_DrawBitmap+0x692>
 800fed8:	092b      	lsrs	r3, r5, #4
 800feda:	9921      	ldr	r1, [sp, #132]	; 0x84
 800fedc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fee0:	8023      	strh	r3, [r4, #0]
 800fee2:	2e00      	cmp	r6, #0
 800fee4:	d0eb      	beq.n	800febe <_DrawBitmap+0x642>
 800fee6:	68b3      	ldr	r3, [r6, #8]
 800fee8:	9a05      	ldr	r2, [sp, #20]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	4630      	mov	r0, r6
 800feee:	4639      	mov	r1, r7
 800fef0:	4798      	blx	r3
 800fef2:	e7e4      	b.n	800febe <_DrawBitmap+0x642>
 800fef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fef6:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 800fefa:	8063      	strh	r3, [r4, #2]
 800fefc:	2e00      	cmp	r6, #0
 800fefe:	d0e1      	beq.n	800fec4 <_DrawBitmap+0x648>
 800ff00:	68b3      	ldr	r3, [r6, #8]
 800ff02:	9a05      	ldr	r2, [sp, #20]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	4630      	mov	r0, r6
 800ff08:	1c79      	adds	r1, r7, #1
 800ff0a:	4798      	blx	r3
 800ff0c:	e7da      	b.n	800fec4 <_DrawBitmap+0x648>
 800ff0e:	f1b9 0f00 	cmp.w	r9, #0
 800ff12:	d034      	beq.n	800ff7e <_DrawBitmap+0x702>
 800ff14:	092d      	lsrs	r5, r5, #4
 800ff16:	d032      	beq.n	800ff7e <_DrawBitmap+0x702>
 800ff18:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ff1a:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
 800ff1e:	8023      	strh	r3, [r4, #0]
 800ff20:	b36e      	cbz	r6, 800ff7e <_DrawBitmap+0x702>
 800ff22:	68b3      	ldr	r3, [r6, #8]
 800ff24:	9a05      	ldr	r2, [sp, #20]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4630      	mov	r0, r6
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	4798      	blx	r3
 800ff2e:	e026      	b.n	800ff7e <_DrawBitmap+0x702>
 800ff30:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800ff32:	f1c6 0302 	rsb	r3, r6, #2
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	4650      	mov	r0, sl
 800ff3a:	465a      	mov	r2, fp
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	bfc8      	it	gt
 800ff40:	b2d3      	uxtbgt	r3, r2
 800ff42:	1ad2      	subs	r2, r2, r3
 800ff44:	1ca1      	adds	r1, r4, #2
 800ff46:	461e      	mov	r6, r3
 800ff48:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800ff4c:	d005      	beq.n	800ff5a <_DrawBitmap+0x6de>
 800ff4e:	f831 7c02 	ldrh.w	r7, [r1, #-2]
 800ff52:	f087 07ff 	eor.w	r7, r7, #255	; 0xff
 800ff56:	f821 7c02 	strh.w	r7, [r1, #-2]
 800ff5a:	3e01      	subs	r6, #1
 800ff5c:	012d      	lsls	r5, r5, #4
 800ff5e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 800ff62:	b2ed      	uxtb	r5, r5
 800ff64:	f101 0102 	add.w	r1, r1, #2
 800ff68:	d1ee      	bne.n	800ff48 <_DrawBitmap+0x6cc>
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	b2db      	uxtb	r3, r3
 800ff6e:	3301      	adds	r3, #1
 800ff70:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800ff74:	b11a      	cbz	r2, 800ff7e <_DrawBitmap+0x702>
 800ff76:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ff7a:	2302      	movs	r3, #2
 800ff7c:	e7de      	b.n	800ff3c <_DrawBitmap+0x6c0>
 800ff7e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 800ff80:	9b05      	ldr	r3, [sp, #20]
 800ff82:	9e08      	ldr	r6, [sp, #32]
 800ff84:	44ba      	add	sl, r7
 800ff86:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff88:	3301      	adds	r3, #1
 800ff8a:	4437      	add	r7, r6
 800ff8c:	9305      	str	r3, [sp, #20]
 800ff8e:	9709      	str	r7, [sp, #36]	; 0x24
 800ff90:	e5a3      	b.n	800fada <_DrawBitmap+0x25e>
 800ff92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ff94:	b113      	cbz	r3, 800ff9c <_DrawBitmap+0x720>
 800ff96:	a811      	add	r0, sp, #68	; 0x44
 800ff98:	f7fd ff02 	bl	800dda0 <GUI_ALLOC_UnlockH>
 800ff9c:	b013      	add	sp, #76	; 0x4c
 800ff9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20000084 	.word	0x20000084

0800ffa8 <_GetDevProp>:
 800ffa8:	2908      	cmp	r1, #8
 800ffaa:	b508      	push	{r3, lr}
 800ffac:	d008      	beq.n	800ffc0 <_GetDevProp+0x18>
 800ffae:	6800      	ldr	r0, [r0, #0]
 800ffb0:	b118      	cbz	r0, 800ffba <_GetDevProp+0x12>
 800ffb2:	68c3      	ldr	r3, [r0, #12]
 800ffb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb6:	4798      	blx	r3
 800ffb8:	bd08      	pop	{r3, pc}
 800ffba:	f04f 30ff 	mov.w	r0, #4294967295
 800ffbe:	bd08      	pop	{r3, pc}
 800ffc0:	2010      	movs	r0, #16
 800ffc2:	bd08      	pop	{r3, pc}

0800ffc4 <LCD_SelectLCD>:
 800ffc4:	b510      	push	{r4, lr}
 800ffc6:	4b0d      	ldr	r3, [pc, #52]	; (800fffc <LCD_SelectLCD+0x38>)
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	7c51      	ldrb	r1, [r2, #17]
 800ffcc:	4a0c      	ldr	r2, [pc, #48]	; (8010000 <LCD_SelectLCD+0x3c>)
 800ffce:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800ffd2:	461c      	mov	r4, r3
 800ffd4:	b140      	cbz	r0, 800ffe8 <LCD_SelectLCD+0x24>
 800ffd6:	68c3      	ldr	r3, [r0, #12]
 800ffd8:	b113      	cbz	r3, 800ffe0 <LCD_SelectLCD+0x1c>
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b04      	cmp	r3, #4
 800ffde:	d001      	beq.n	800ffe4 <LCD_SelectLCD+0x20>
 800ffe0:	6800      	ldr	r0, [r0, #0]
 800ffe2:	e7f7      	b.n	800ffd4 <LCD_SelectLCD+0x10>
 800ffe4:	f7fc f9cc 	bl	800c380 <GUI_DEVICE_Unlink>
 800ffe8:	6823      	ldr	r3, [r4, #0]
 800ffea:	2200      	movs	r2, #0
 800ffec:	661a      	str	r2, [r3, #96]	; 0x60
 800ffee:	f103 0208 	add.w	r2, r3, #8
 800fff2:	615a      	str	r2, [r3, #20]
 800fff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fff8:	f7fb bac2 	b.w	800b580 <LCD_SetClipRectMax>
 800fffc:	20000084 	.word	0x20000084
 8010000:	20004afc 	.word	0x20004afc

08010004 <LCD_ReadRectEx>:
 8010004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010008:	b087      	sub	sp, #28
 801000a:	4617      	mov	r7, r2
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010010:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8010012:	68da      	ldr	r2, [r3, #12]
 8010014:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8010016:	f8d2 8014 	ldr.w	r8, [r2, #20]
 801001a:	4606      	mov	r6, r0
 801001c:	460d      	mov	r5, r1
 801001e:	b973      	cbnz	r3, 801003e <LCD_ReadRectEx+0x3a>
 8010020:	4b71      	ldr	r3, [pc, #452]	; (80101e8 <LCD_ReadRectEx+0x1e4>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	7c58      	ldrb	r0, [r3, #17]
 8010026:	f7fa ff55 	bl	800aed4 <GUI_GetBitsPerPixelEx>
 801002a:	2808      	cmp	r0, #8
 801002c:	4682      	mov	sl, r0
 801002e:	dd15      	ble.n	801005c <LCD_ReadRectEx+0x58>
 8010030:	2810      	cmp	r0, #16
 8010032:	bfcc      	ite	gt
 8010034:	f04f 0904 	movgt.w	r9, #4
 8010038:	f04f 0902 	movle.w	r9, #2
 801003c:	e010      	b.n	8010060 <LCD_ReadRectEx+0x5c>
 801003e:	a811      	add	r0, sp, #68	; 0x44
 8010040:	2101      	movs	r1, #1
 8010042:	4798      	blx	r3
 8010044:	4684      	mov	ip, r0
 8010046:	2800      	cmp	r0, #0
 8010048:	d0ea      	beq.n	8010020 <LCD_ReadRectEx+0x1c>
 801004a:	9b04      	ldr	r3, [sp, #16]
 801004c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801004e:	e88d 0018 	stmia.w	sp, {r3, r4}
 8010052:	4631      	mov	r1, r6
 8010054:	462a      	mov	r2, r5
 8010056:	463b      	mov	r3, r7
 8010058:	47e0      	blx	ip
 801005a:	e0c1      	b.n	80101e0 <LCD_ReadRectEx+0x1dc>
 801005c:	f04f 0901 	mov.w	r9, #1
 8010060:	f04f 0b00 	mov.w	fp, #0
 8010064:	9b04      	ldr	r3, [sp, #16]
 8010066:	429d      	cmp	r5, r3
 8010068:	f300 80ba 	bgt.w	80101e0 <LCD_ReadRectEx+0x1dc>
 801006c:	f1b9 0f02 	cmp.w	r9, #2
 8010070:	d009      	beq.n	8010086 <LCD_ReadRectEx+0x82>
 8010072:	f1b9 0f04 	cmp.w	r9, #4
 8010076:	d004      	beq.n	8010082 <LCD_ReadRectEx+0x7e>
 8010078:	f1b9 0f01 	cmp.w	r9, #1
 801007c:	f040 80ae 	bne.w	80101dc <LCD_ReadRectEx+0x1d8>
 8010080:	e003      	b.n	801008a <LCD_ReadRectEx+0x86>
 8010082:	46b4      	mov	ip, r6
 8010084:	e09b      	b.n	80101be <LCD_ReadRectEx+0x1ba>
 8010086:	46b4      	mov	ip, r6
 8010088:	e08a      	b.n	80101a0 <LCD_ReadRectEx+0x19c>
 801008a:	f10a 32ff 	add.w	r2, sl, #4294967295
 801008e:	2a07      	cmp	r2, #7
 8010090:	f200 80a4 	bhi.w	80101dc <LCD_ReadRectEx+0x1d8>
 8010094:	e8df f002 	tbb	[pc, r2]
 8010098:	0606080a 	.word	0x0606080a
 801009c:	04040404 	.word	0x04040404
 80100a0:	46b4      	mov	ip, r6
 80100a2:	e066      	b.n	8010172 <LCD_ReadRectEx+0x16e>
 80100a4:	46b4      	mov	ip, r6
 80100a6:	e047      	b.n	8010138 <LCD_ReadRectEx+0x134>
 80100a8:	46b4      	mov	ip, r6
 80100aa:	e022      	b.n	80100f2 <LCD_ReadRectEx+0xee>
 80100ac:	46b4      	mov	ip, r6
 80100ae:	45bc      	cmp	ip, r7
 80100b0:	f300 8094 	bgt.w	80101dc <LCD_ReadRectEx+0x1d8>
 80100b4:	4661      	mov	r1, ip
 80100b6:	462a      	mov	r2, r5
 80100b8:	f8cd c00c 	str.w	ip, [sp, #12]
 80100bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80100be:	47c0      	blx	r8
 80100c0:	f1cb 0207 	rsb	r2, fp, #7
 80100c4:	fa00 f202 	lsl.w	r2, r0, r2
 80100c8:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80100cc:	7820      	ldrb	r0, [r4, #0]
 80100ce:	fa41 f10b 	asr.w	r1, r1, fp
 80100d2:	4001      	ands	r1, r0
 80100d4:	430a      	orrs	r2, r1
 80100d6:	7022      	strb	r2, [r4, #0]
 80100d8:	f10b 0301 	add.w	r3, fp, #1
 80100dc:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80100e0:	f023 0207 	bic.w	r2, r3, #7
 80100e4:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80100e8:	fa43 fb02 	asr.w	fp, r3, r2
 80100ec:	f10c 0c01 	add.w	ip, ip, #1
 80100f0:	e7dd      	b.n	80100ae <LCD_ReadRectEx+0xaa>
 80100f2:	45bc      	cmp	ip, r7
 80100f4:	dc72      	bgt.n	80101dc <LCD_ReadRectEx+0x1d8>
 80100f6:	4661      	mov	r1, ip
 80100f8:	462a      	mov	r2, r5
 80100fa:	f8cd c00c 	str.w	ip, [sp, #12]
 80100fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010100:	47c0      	blx	r8
 8010102:	ea4f 024b 	mov.w	r2, fp, lsl #1
 8010106:	f1c2 0106 	rsb	r1, r2, #6
 801010a:	fa00 f101 	lsl.w	r1, r0, r1
 801010e:	f64f 703f 	movw	r0, #65343	; 0xff3f
 8010112:	fa40 f202 	asr.w	r2, r0, r2
 8010116:	7820      	ldrb	r0, [r4, #0]
 8010118:	4002      	ands	r2, r0
 801011a:	4311      	orrs	r1, r2
 801011c:	7021      	strb	r1, [r4, #0]
 801011e:	f10b 0301 	add.w	r3, fp, #1
 8010122:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010126:	f023 0203 	bic.w	r2, r3, #3
 801012a:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 801012e:	fa43 fb02 	asr.w	fp, r3, r2
 8010132:	f10c 0c01 	add.w	ip, ip, #1
 8010136:	e7dc      	b.n	80100f2 <LCD_ReadRectEx+0xee>
 8010138:	45bc      	cmp	ip, r7
 801013a:	dc4f      	bgt.n	80101dc <LCD_ReadRectEx+0x1d8>
 801013c:	4661      	mov	r1, ip
 801013e:	462a      	mov	r2, r5
 8010140:	f8cd c00c 	str.w	ip, [sp, #12]
 8010144:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010146:	47c0      	blx	r8
 8010148:	ea4f 028b 	mov.w	r2, fp, lsl #2
 801014c:	f1c2 0104 	rsb	r1, r2, #4
 8010150:	fa00 f101 	lsl.w	r1, r0, r1
 8010154:	200f      	movs	r0, #15
 8010156:	fa00 f202 	lsl.w	r2, r0, r2
 801015a:	7820      	ldrb	r0, [r4, #0]
 801015c:	4002      	ands	r2, r0
 801015e:	4311      	orrs	r1, r2
 8010160:	7021      	strb	r1, [r4, #0]
 8010162:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010166:	445c      	add	r4, fp
 8010168:	f10c 0c01 	add.w	ip, ip, #1
 801016c:	f08b 0b01 	eor.w	fp, fp, #1
 8010170:	e7e2      	b.n	8010138 <LCD_ReadRectEx+0x134>
 8010172:	4273      	negs	r3, r6
 8010174:	1ba2      	subs	r2, r4, r6
 8010176:	45bc      	cmp	ip, r7
 8010178:	9305      	str	r3, [sp, #20]
 801017a:	4462      	add	r2, ip
 801017c:	dc0e      	bgt.n	801019c <LCD_ReadRectEx+0x198>
 801017e:	4661      	mov	r1, ip
 8010180:	462a      	mov	r2, r5
 8010182:	f8cd c00c 	str.w	ip, [sp, #12]
 8010186:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010188:	47c0      	blx	r8
 801018a:	9a05      	ldr	r2, [sp, #20]
 801018c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010190:	4422      	add	r2, r4
 8010192:	f802 000c 	strb.w	r0, [r2, ip]
 8010196:	f10c 0c01 	add.w	ip, ip, #1
 801019a:	e7ea      	b.n	8010172 <LCD_ReadRectEx+0x16e>
 801019c:	4614      	mov	r4, r2
 801019e:	e01d      	b.n	80101dc <LCD_ReadRectEx+0x1d8>
 80101a0:	45bc      	cmp	ip, r7
 80101a2:	dc1b      	bgt.n	80101dc <LCD_ReadRectEx+0x1d8>
 80101a4:	4661      	mov	r1, ip
 80101a6:	f8cd c00c 	str.w	ip, [sp, #12]
 80101aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80101ac:	462a      	mov	r2, r5
 80101ae:	47c0      	blx	r8
 80101b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80101b4:	f824 0b02 	strh.w	r0, [r4], #2
 80101b8:	f10c 0c01 	add.w	ip, ip, #1
 80101bc:	e7f0      	b.n	80101a0 <LCD_ReadRectEx+0x19c>
 80101be:	45bc      	cmp	ip, r7
 80101c0:	dc0c      	bgt.n	80101dc <LCD_ReadRectEx+0x1d8>
 80101c2:	4661      	mov	r1, ip
 80101c4:	f8cd c00c 	str.w	ip, [sp, #12]
 80101c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80101ca:	462a      	mov	r2, r5
 80101cc:	47c0      	blx	r8
 80101ce:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80101d2:	f844 0b04 	str.w	r0, [r4], #4
 80101d6:	f10c 0c01 	add.w	ip, ip, #1
 80101da:	e7f0      	b.n	80101be <LCD_ReadRectEx+0x1ba>
 80101dc:	3501      	adds	r5, #1
 80101de:	e741      	b.n	8010064 <LCD_ReadRectEx+0x60>
 80101e0:	b007      	add	sp, #28
 80101e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101e6:	bf00      	nop
 80101e8:	20000084 	.word	0x20000084

080101ec <GUI_ReadRectEx>:
 80101ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101ee:	4d16      	ldr	r5, [pc, #88]	; (8010248 <GUI_ReadRectEx+0x5c>)
 80101f0:	9e05      	ldr	r6, [sp, #20]
 80101f2:	682d      	ldr	r5, [r5, #0]
 80101f4:	9c06      	ldr	r4, [sp, #24]
 80101f6:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 80101fa:	42b8      	cmp	r0, r7
 80101fc:	bfb8      	it	lt
 80101fe:	4638      	movlt	r0, r7
 8010200:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8010204:	42ba      	cmp	r2, r7
 8010206:	bfa8      	it	ge
 8010208:	463a      	movge	r2, r7
 801020a:	4282      	cmp	r2, r0
 801020c:	db1b      	blt.n	8010246 <GUI_ReadRectEx+0x5a>
 801020e:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8010212:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8010216:	42b9      	cmp	r1, r7
 8010218:	bfb8      	it	lt
 801021a:	4639      	movlt	r1, r7
 801021c:	42ab      	cmp	r3, r5
 801021e:	bfa8      	it	ge
 8010220:	462b      	movge	r3, r5
 8010222:	428b      	cmp	r3, r1
 8010224:	db0f      	blt.n	8010246 <GUI_ReadRectEx+0x5a>
 8010226:	68e5      	ldr	r5, [r4, #12]
 8010228:	682d      	ldr	r5, [r5, #0]
 801022a:	f035 0704 	bics.w	r7, r5, #4
 801022e:	d105      	bne.n	801023c <GUI_ReadRectEx+0x50>
 8010230:	9605      	str	r6, [sp, #20]
 8010232:	9406      	str	r4, [sp, #24]
 8010234:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010238:	f7ff bee4 	b.w	8010004 <LCD_ReadRectEx>
 801023c:	6825      	ldr	r5, [r4, #0]
 801023e:	2d00      	cmp	r5, #0
 8010240:	d0f6      	beq.n	8010230 <GUI_ReadRectEx+0x44>
 8010242:	462c      	mov	r4, r5
 8010244:	e7ef      	b.n	8010226 <GUI_ReadRectEx+0x3a>
 8010246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010248:	20000084 	.word	0x20000084

0801024c <LCD_GetBkColorIndex>:
 801024c:	4b02      	ldr	r3, [pc, #8]	; (8010258 <LCD_GetBkColorIndex+0xc>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010252:	6818      	ldr	r0, [r3, #0]
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	20000084 	.word	0x20000084

0801025c <LCD_GetColorIndex>:
 801025c:	4b02      	ldr	r3, [pc, #8]	; (8010268 <LCD_GetColorIndex+0xc>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	20000084 	.word	0x20000084

0801026c <_OnExit>:
 801026c:	b510      	push	{r4, lr}
 801026e:	4c04      	ldr	r4, [pc, #16]	; (8010280 <_OnExit+0x14>)
 8010270:	6820      	ldr	r0, [r4, #0]
 8010272:	f7fd fd73 	bl	800dd5c <GUI_ALLOC_FreeFixedBlock>
 8010276:	4a03      	ldr	r2, [pc, #12]	; (8010284 <_OnExit+0x18>)
 8010278:	2300      	movs	r3, #0
 801027a:	6023      	str	r3, [r4, #0]
 801027c:	6013      	str	r3, [r2, #0]
 801027e:	bd10      	pop	{r4, pc}
 8010280:	20004bfc 	.word	0x20004bfc
 8010284:	20002ba8 	.word	0x20002ba8

08010288 <LCD_InitColors>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d09      	ldr	r5, [pc, #36]	; (80102b0 <LCD_InitColors+0x28>)
 801028c:	682c      	ldr	r4, [r5, #0]
 801028e:	b95c      	cbnz	r4, 80102a8 <LCD_InitColors+0x20>
 8010290:	4b08      	ldr	r3, [pc, #32]	; (80102b4 <LCD_InitColors+0x2c>)
 8010292:	6818      	ldr	r0, [r3, #0]
 8010294:	0080      	lsls	r0, r0, #2
 8010296:	f7fd fe45 	bl	800df24 <GUI_ALLOC_GetFixedBlock>
 801029a:	6028      	str	r0, [r5, #0]
 801029c:	b130      	cbz	r0, 80102ac <LCD_InitColors+0x24>
 801029e:	4806      	ldr	r0, [pc, #24]	; (80102b8 <LCD_InitColors+0x30>)
 80102a0:	4b06      	ldr	r3, [pc, #24]	; (80102bc <LCD_InitColors+0x34>)
 80102a2:	6003      	str	r3, [r0, #0]
 80102a4:	f7fc f98e 	bl	800c5c4 <GUI__RegisterExit>
 80102a8:	2000      	movs	r0, #0
 80102aa:	bd38      	pop	{r3, r4, r5, pc}
 80102ac:	2001      	movs	r0, #1
 80102ae:	bd38      	pop	{r3, r4, r5, pc}
 80102b0:	20004bfc 	.word	0x20004bfc
 80102b4:	20000118 	.word	0x20000118
 80102b8:	20002bac 	.word	0x20002bac
 80102bc:	0801026d 	.word	0x0801026d

080102c0 <LCD_InitLUT>:
 80102c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c4:	f000 febe 	bl	8011044 <LCD_GetNumLayers>
 80102c8:	2400      	movs	r4, #0
 80102ca:	4680      	mov	r8, r0
 80102cc:	4544      	cmp	r4, r8
 80102ce:	da2c      	bge.n	801032a <LCD_InitLUT+0x6a>
 80102d0:	4620      	mov	r0, r4
 80102d2:	f7fc f81d 	bl	800c310 <GUI_DEVICE__GetpDriver>
 80102d6:	b330      	cbz	r0, 8010326 <LCD_InitLUT+0x66>
 80102d8:	4e15      	ldr	r6, [pc, #84]	; (8010330 <LCD_InitLUT+0x70>)
 80102da:	6833      	ldr	r3, [r6, #0]
 80102dc:	4620      	mov	r0, r4
 80102de:	f893 9011 	ldrb.w	r9, [r3, #17]
 80102e2:	745c      	strb	r4, [r3, #17]
 80102e4:	f7fa fdd8 	bl	800ae98 <LCD_GetBitsPerPixelEx>
 80102e8:	2808      	cmp	r0, #8
 80102ea:	dd03      	ble.n	80102f4 <LCD_InitLUT+0x34>
 80102ec:	6833      	ldr	r3, [r6, #0]
 80102ee:	f883 9011 	strb.w	r9, [r3, #17]
 80102f2:	e018      	b.n	8010326 <LCD_InitLUT+0x66>
 80102f4:	4b0f      	ldr	r3, [pc, #60]	; (8010334 <LCD_InitLUT+0x74>)
 80102f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80102fa:	691a      	ldr	r2, [r3, #16]
 80102fc:	4b0e      	ldr	r3, [pc, #56]	; (8010338 <LCD_InitLUT+0x78>)
 80102fe:	429a      	cmp	r2, r3
 8010300:	d0f4      	beq.n	80102ec <LCD_InitLUT+0x2c>
 8010302:	4620      	mov	r0, r4
 8010304:	f7fa fdcb 	bl	800ae9e <LCD_GetNumColorsEx>
 8010308:	2500      	movs	r5, #0
 801030a:	4682      	mov	sl, r0
 801030c:	4555      	cmp	r5, sl
 801030e:	daed      	bge.n	80102ec <LCD_InitLUT+0x2c>
 8010310:	b2ef      	uxtb	r7, r5
 8010312:	4638      	mov	r0, r7
 8010314:	f7fb f9a8 	bl	800b668 <LCD_Index2Color>
 8010318:	4639      	mov	r1, r7
 801031a:	4602      	mov	r2, r0
 801031c:	4620      	mov	r0, r4
 801031e:	f7fa fd77 	bl	800ae10 <LCD_SetLUTEntryEx>
 8010322:	3501      	adds	r5, #1
 8010324:	e7f2      	b.n	801030c <LCD_InitLUT+0x4c>
 8010326:	3401      	adds	r4, #1
 8010328:	e7d0      	b.n	80102cc <LCD_InitLUT+0xc>
 801032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801032e:	bf00      	nop
 8010330:	20000084 	.word	0x20000084
 8010334:	20004afc 	.word	0x20004afc
 8010338:	08014418 	.word	0x08014418

0801033c <LCD_AA_SetAndMask>:
 801033c:	4b02      	ldr	r3, [pc, #8]	; (8010348 <LCD_AA_SetAndMask+0xc>)
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	6018      	str	r0, [r3, #0]
 8010342:	4610      	mov	r0, r2
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	2000011c 	.word	0x2000011c

0801034c <_GetWordWrap>:
 801034c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8010350:	2500      	movs	r5, #0
 8010352:	9001      	str	r0, [sp, #4]
 8010354:	4689      	mov	r9, r1
 8010356:	4690      	mov	r8, r2
 8010358:	46aa      	mov	sl, r5
 801035a:	462e      	mov	r6, r5
 801035c:	462c      	mov	r4, r5
 801035e:	462f      	mov	r7, r5
 8010360:	a801      	add	r0, sp, #4
 8010362:	f7fb fd43 	bl	800bdec <GUI_UC__GetCharCodeInc>
 8010366:	2d00      	cmp	r5, #0
 8010368:	bf08      	it	eq
 801036a:	4605      	moveq	r5, r0
 801036c:	b108      	cbz	r0, 8010372 <_GetWordWrap+0x26>
 801036e:	280a      	cmp	r0, #10
 8010370:	d10b      	bne.n	801038a <_GetWordWrap+0x3e>
 8010372:	4626      	mov	r6, r4
 8010374:	2e00      	cmp	r6, #0
 8010376:	bf18      	it	ne
 8010378:	4634      	movne	r4, r6
 801037a:	f1b8 0f00 	cmp.w	r8, #0
 801037e:	d025      	beq.n	80103cc <_GetWordWrap+0x80>
 8010380:	ebca 0707 	rsb	r7, sl, r7
 8010384:	f8c8 7000 	str.w	r7, [r8]
 8010388:	e020      	b.n	80103cc <_GetWordWrap+0x80>
 801038a:	2820      	cmp	r0, #32
 801038c:	d01c      	beq.n	80103c8 <_GetWordWrap+0x7c>
 801038e:	2d20      	cmp	r5, #32
 8010390:	d00e      	beq.n	80103b0 <_GetWordWrap+0x64>
 8010392:	4b10      	ldr	r3, [pc, #64]	; (80103d4 <_GetWordWrap+0x88>)
 8010394:	6819      	ldr	r1, [r3, #0]
 8010396:	4b10      	ldr	r3, [pc, #64]	; (80103d8 <_GetWordWrap+0x8c>)
 8010398:	681a      	ldr	r2, [r3, #0]
 801039a:	2300      	movs	r3, #0
 801039c:	4293      	cmp	r3, r2
 801039e:	da09      	bge.n	80103b4 <_GetWordWrap+0x68>
 80103a0:	f831 e013 	ldrh.w	lr, [r1, r3, lsl #1]
 80103a4:	4586      	cmp	lr, r0
 80103a6:	d101      	bne.n	80103ac <_GetWordWrap+0x60>
 80103a8:	1c66      	adds	r6, r4, #1
 80103aa:	e003      	b.n	80103b4 <_GetWordWrap+0x68>
 80103ac:	3301      	adds	r3, #1
 80103ae:	e7f5      	b.n	801039c <_GetWordWrap+0x50>
 80103b0:	4626      	mov	r6, r4
 80103b2:	2500      	movs	r5, #0
 80103b4:	f7fc fd80 	bl	800ceb8 <GUI_GetCharDistX>
 80103b8:	4407      	add	r7, r0
 80103ba:	454f      	cmp	r7, r9
 80103bc:	4682      	mov	sl, r0
 80103be:	dd01      	ble.n	80103c4 <_GetWordWrap+0x78>
 80103c0:	2c00      	cmp	r4, #0
 80103c2:	d1d7      	bne.n	8010374 <_GetWordWrap+0x28>
 80103c4:	3401      	adds	r4, #1
 80103c6:	e7cb      	b.n	8010360 <_GetWordWrap+0x14>
 80103c8:	4626      	mov	r6, r4
 80103ca:	e7f3      	b.n	80103b4 <_GetWordWrap+0x68>
 80103cc:	4620      	mov	r0, r4
 80103ce:	b002      	add	sp, #8
 80103d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d4:	20002bb4 	.word	0x20002bb4
 80103d8:	20002bb8 	.word	0x20002bb8

080103dc <_GetCharWrap>:
 80103dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80103de:	2400      	movs	r4, #0
 80103e0:	9001      	str	r0, [sp, #4]
 80103e2:	460e      	mov	r6, r1
 80103e4:	4625      	mov	r5, r4
 80103e6:	a801      	add	r0, sp, #4
 80103e8:	f7fb fd00 	bl	800bdec <GUI_UC__GetCharCodeInc>
 80103ec:	4607      	mov	r7, r0
 80103ee:	b148      	cbz	r0, 8010404 <_GetCharWrap+0x28>
 80103f0:	f7fc fd62 	bl	800ceb8 <GUI_GetCharDistX>
 80103f4:	4405      	add	r5, r0
 80103f6:	b10c      	cbz	r4, 80103fc <_GetCharWrap+0x20>
 80103f8:	42b5      	cmp	r5, r6
 80103fa:	dc03      	bgt.n	8010404 <_GetCharWrap+0x28>
 80103fc:	2f0a      	cmp	r7, #10
 80103fe:	d001      	beq.n	8010404 <_GetCharWrap+0x28>
 8010400:	3401      	adds	r4, #1
 8010402:	e7f0      	b.n	80103e6 <_GetCharWrap+0xa>
 8010404:	4620      	mov	r0, r4
 8010406:	b003      	add	sp, #12
 8010408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801040c <_WrapGetNumCharsDisp>:
 801040c:	2a01      	cmp	r2, #1
 801040e:	b510      	push	{r4, lr}
 8010410:	d005      	beq.n	801041e <_WrapGetNumCharsDisp+0x12>
 8010412:	2a02      	cmp	r2, #2
 8010414:	d108      	bne.n	8010428 <_WrapGetNumCharsDisp+0x1c>
 8010416:	4b07      	ldr	r3, [pc, #28]	; (8010434 <_WrapGetNumCharsDisp+0x28>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4798      	blx	r3
 801041c:	bd10      	pop	{r4, pc}
 801041e:	4a06      	ldr	r2, [pc, #24]	; (8010438 <_WrapGetNumCharsDisp+0x2c>)
 8010420:	6814      	ldr	r4, [r2, #0]
 8010422:	461a      	mov	r2, r3
 8010424:	47a0      	blx	r4
 8010426:	bd10      	pop	{r4, pc}
 8010428:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010430:	f7fc bc88 	b.w	800cd44 <GUI__GetLineNumChars>
 8010434:	20000120 	.word	0x20000120
 8010438:	20000124 	.word	0x20000124

0801043c <GUI__WrapGetNumCharsDisp>:
 801043c:	2300      	movs	r3, #0
 801043e:	f7ff bfe5 	b.w	801040c <_WrapGetNumCharsDisp>

08010442 <GUI__WrapGetNumCharsToNextLine>:
 8010442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010444:	b085      	sub	sp, #20
 8010446:	ab03      	add	r3, sp, #12
 8010448:	4617      	mov	r7, r2
 801044a:	460e      	mov	r6, r1
 801044c:	9001      	str	r0, [sp, #4]
 801044e:	f7ff ffdd 	bl	801040c <_WrapGetNumCharsDisp>
 8010452:	9d01      	ldr	r5, [sp, #4]
 8010454:	4604      	mov	r4, r0
 8010456:	4621      	mov	r1, r4
 8010458:	4628      	mov	r0, r5
 801045a:	f7fb fcdb 	bl	800be14 <GUI_UC__NumChars2NumBytes>
 801045e:	4428      	add	r0, r5
 8010460:	ad04      	add	r5, sp, #16
 8010462:	f845 0d0c 	str.w	r0, [r5, #-12]!
 8010466:	4628      	mov	r0, r5
 8010468:	f7fb fcc0 	bl	800bdec <GUI_UC__GetCharCodeInc>
 801046c:	280a      	cmp	r0, #10
 801046e:	d101      	bne.n	8010474 <GUI__WrapGetNumCharsToNextLine+0x32>
 8010470:	3401      	adds	r4, #1
 8010472:	e012      	b.n	801049a <GUI__WrapGetNumCharsToNextLine+0x58>
 8010474:	2f01      	cmp	r7, #1
 8010476:	d110      	bne.n	801049a <GUI__WrapGetNumCharsToNextLine+0x58>
 8010478:	2820      	cmp	r0, #32
 801047a:	d10e      	bne.n	801049a <GUI__WrapGetNumCharsToNextLine+0x58>
 801047c:	f7fc fd1c 	bl	800ceb8 <GUI_GetCharDistX>
 8010480:	4607      	mov	r7, r0
 8010482:	9b03      	ldr	r3, [sp, #12]
 8010484:	429e      	cmp	r6, r3
 8010486:	db08      	blt.n	801049a <GUI__WrapGetNumCharsToNextLine+0x58>
 8010488:	443b      	add	r3, r7
 801048a:	4628      	mov	r0, r5
 801048c:	9303      	str	r3, [sp, #12]
 801048e:	f7fb fcad 	bl	800bdec <GUI_UC__GetCharCodeInc>
 8010492:	2820      	cmp	r0, #32
 8010494:	f104 0401 	add.w	r4, r4, #1
 8010498:	d0f3      	beq.n	8010482 <GUI__WrapGetNumCharsToNextLine+0x40>
 801049a:	4620      	mov	r0, r4
 801049c:	b005      	add	sp, #20
 801049e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080104a0 <GUI__WrapGetNumBytesToNextLine>:
 80104a0:	b510      	push	{r4, lr}
 80104a2:	4604      	mov	r4, r0
 80104a4:	f7ff ffcd 	bl	8010442 <GUI__WrapGetNumCharsToNextLine>
 80104a8:	4601      	mov	r1, r0
 80104aa:	4620      	mov	r0, r4
 80104ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104b0:	f7fb bcb0 	b.w	800be14 <GUI_UC__NumChars2NumBytes>

080104b4 <GUI__ExpandPixelIndicesEx>:
 80104b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104b8:	1e0c      	subs	r4, r1, #0
 80104ba:	4605      	mov	r5, r0
 80104bc:	f340 80b3 	ble.w	8010626 <GUI__ExpandPixelIndicesEx+0x172>
 80104c0:	2a08      	cmp	r2, #8
 80104c2:	685f      	ldr	r7, [r3, #4]
 80104c4:	dd04      	ble.n	80104d0 <GUI__ExpandPixelIndicesEx+0x1c>
 80104c6:	2a10      	cmp	r2, #16
 80104c8:	f340 8098 	ble.w	80105fc <GUI__ExpandPixelIndicesEx+0x148>
 80104cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104d0:	3a01      	subs	r2, #1
 80104d2:	2a07      	cmp	r2, #7
 80104d4:	f200 80a7 	bhi.w	8010626 <GUI__ExpandPixelIndicesEx+0x172>
 80104d8:	e8df f002 	tbb	[pc, r2]
 80104dc:	58a52d04 	.word	0x58a52d04
 80104e0:	83a5a5a5 	.word	0x83a5a5a5
 80104e4:	1e66      	subs	r6, r4, #1
 80104e6:	10f2      	asrs	r2, r6, #3
 80104e8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80104ec:	3b01      	subs	r3, #1
 80104ee:	eb05 0802 	add.w	r8, r5, r2
 80104f2:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80104f6:	f006 0607 	and.w	r6, r6, #7
 80104fa:	f815 a002 	ldrb.w	sl, [r5, r2]
 80104fe:	2580      	movs	r5, #128	; 0x80
 8010500:	4135      	asrs	r5, r6
 8010502:	f108 38ff 	add.w	r8, r8, #4294967295
 8010506:	b2ed      	uxtb	r5, r5
 8010508:	f1c6 0307 	rsb	r3, r6, #7
 801050c:	ea0a 0005 	and.w	r0, sl, r5
 8010510:	4118      	asrs	r0, r3
 8010512:	47b8      	blx	r7
 8010514:	f849 0904 	str.w	r0, [r9], #-4
 8010518:	b936      	cbnz	r6, 8010528 <GUI__ExpandPixelIndicesEx+0x74>
 801051a:	f898 a000 	ldrb.w	sl, [r8]
 801051e:	2501      	movs	r5, #1
 8010520:	f108 38ff 	add.w	r8, r8, #4294967295
 8010524:	2607      	movs	r6, #7
 8010526:	e002      	b.n	801052e <GUI__ExpandPixelIndicesEx+0x7a>
 8010528:	006d      	lsls	r5, r5, #1
 801052a:	3e01      	subs	r6, #1
 801052c:	b2ed      	uxtb	r5, r5
 801052e:	3c01      	subs	r4, #1
 8010530:	d1ea      	bne.n	8010508 <GUI__ExpandPixelIndicesEx+0x54>
 8010532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010536:	1e66      	subs	r6, r4, #1
 8010538:	10b2      	asrs	r2, r6, #2
 801053a:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 801053e:	3b01      	subs	r3, #1
 8010540:	f006 0603 	and.w	r6, r6, #3
 8010544:	eb05 0802 	add.w	r8, r5, r2
 8010548:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 801054c:	f815 a002 	ldrb.w	sl, [r5, r2]
 8010550:	0073      	lsls	r3, r6, #1
 8010552:	25c0      	movs	r5, #192	; 0xc0
 8010554:	411d      	asrs	r5, r3
 8010556:	f108 38ff 	add.w	r8, r8, #4294967295
 801055a:	b2ed      	uxtb	r5, r5
 801055c:	0073      	lsls	r3, r6, #1
 801055e:	f1c3 0306 	rsb	r3, r3, #6
 8010562:	ea0a 0005 	and.w	r0, sl, r5
 8010566:	4118      	asrs	r0, r3
 8010568:	47b8      	blx	r7
 801056a:	f849 0904 	str.w	r0, [r9], #-4
 801056e:	b936      	cbnz	r6, 801057e <GUI__ExpandPixelIndicesEx+0xca>
 8010570:	2503      	movs	r5, #3
 8010572:	f898 a000 	ldrb.w	sl, [r8]
 8010576:	462e      	mov	r6, r5
 8010578:	f108 38ff 	add.w	r8, r8, #4294967295
 801057c:	e002      	b.n	8010584 <GUI__ExpandPixelIndicesEx+0xd0>
 801057e:	00ad      	lsls	r5, r5, #2
 8010580:	3e01      	subs	r6, #1
 8010582:	b2ed      	uxtb	r5, r5
 8010584:	3c01      	subs	r4, #1
 8010586:	d1e9      	bne.n	801055c <GUI__ExpandPixelIndicesEx+0xa8>
 8010588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058c:	1e66      	subs	r6, r4, #1
 801058e:	1072      	asrs	r2, r6, #1
 8010590:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8010594:	3b01      	subs	r3, #1
 8010596:	f006 0601 	and.w	r6, r6, #1
 801059a:	eb05 0802 	add.w	r8, r5, r2
 801059e:	eb05 0983 	add.w	r9, r5, r3, lsl #2
 80105a2:	f815 a002 	ldrb.w	sl, [r5, r2]
 80105a6:	00b3      	lsls	r3, r6, #2
 80105a8:	25f0      	movs	r5, #240	; 0xf0
 80105aa:	411d      	asrs	r5, r3
 80105ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80105b0:	b2ed      	uxtb	r5, r5
 80105b2:	00b3      	lsls	r3, r6, #2
 80105b4:	f1c3 0304 	rsb	r3, r3, #4
 80105b8:	ea0a 0005 	and.w	r0, sl, r5
 80105bc:	4118      	asrs	r0, r3
 80105be:	47b8      	blx	r7
 80105c0:	f849 0904 	str.w	r0, [r9], #-4
 80105c4:	b936      	cbnz	r6, 80105d4 <GUI__ExpandPixelIndicesEx+0x120>
 80105c6:	f898 a000 	ldrb.w	sl, [r8]
 80105ca:	250f      	movs	r5, #15
 80105cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80105d0:	2601      	movs	r6, #1
 80105d2:	e002      	b.n	80105da <GUI__ExpandPixelIndicesEx+0x126>
 80105d4:	012d      	lsls	r5, r5, #4
 80105d6:	b2ed      	uxtb	r5, r5
 80105d8:	2600      	movs	r6, #0
 80105da:	3c01      	subs	r4, #1
 80105dc:	d1e9      	bne.n	80105b2 <GUI__ExpandPixelIndicesEx+0xfe>
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	192e      	adds	r6, r5, r4
 80105e4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 80105e8:	1b34      	subs	r4, r6, r4
 80105ea:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 80105ee:	47b8      	blx	r7
 80105f0:	42a6      	cmp	r6, r4
 80105f2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80105f6:	d1f8      	bne.n	80105ea <GUI__ExpandPixelIndicesEx+0x136>
 80105f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105fc:	695e      	ldr	r6, [r3, #20]
 80105fe:	b12e      	cbz	r6, 801060c <GUI__ExpandPixelIndicesEx+0x158>
 8010600:	4629      	mov	r1, r5
 8010602:	4622      	mov	r2, r4
 8010604:	2302      	movs	r3, #2
 8010606:	47b0      	blx	r6
 8010608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060c:	0064      	lsls	r4, r4, #1
 801060e:	4425      	add	r5, r4
 8010610:	192e      	adds	r6, r5, r4
 8010612:	1b2c      	subs	r4, r5, r4
 8010614:	f835 0d02 	ldrh.w	r0, [r5, #-2]!
 8010618:	47b8      	blx	r7
 801061a:	42a5      	cmp	r5, r4
 801061c:	f846 0d04 	str.w	r0, [r6, #-4]!
 8010620:	d1f8      	bne.n	8010614 <GUI__ExpandPixelIndicesEx+0x160>
 8010622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801062a <_GetTwinArcPara>:
 801062a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801062e:	fb01 f901 	mul.w	r9, r1, r1
 8010632:	1e47      	subs	r7, r0, #1
 8010634:	4604      	mov	r4, r0
 8010636:	4340      	muls	r0, r0
 8010638:	ebc9 0000 	rsb	r0, r9, r0
 801063c:	460d      	mov	r5, r1
 801063e:	4692      	mov	sl, r2
 8010640:	4698      	mov	r8, r3
 8010642:	9e08      	ldr	r6, [sp, #32]
 8010644:	f7fb f91f 	bl	800b886 <GUI__sqrt32>
 8010648:	42bd      	cmp	r5, r7
 801064a:	f8ca 0000 	str.w	r0, [sl]
 801064e:	da10      	bge.n	8010672 <_GetTwinArcPara+0x48>
 8010650:	fb07 f007 	mul.w	r0, r7, r7
 8010654:	ebc9 0000 	rsb	r0, r9, r0
 8010658:	f7fb f915 	bl	800b886 <GUI__sqrt32>
 801065c:	3c02      	subs	r4, #2
 801065e:	42a5      	cmp	r5, r4
 8010660:	f8c8 0000 	str.w	r0, [r8]
 8010664:	da03      	bge.n	801066e <_GetTwinArcPara+0x44>
 8010666:	3801      	subs	r0, #1
 8010668:	6030      	str	r0, [r6, #0]
 801066a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801066e:	2300      	movs	r3, #0
 8010670:	e002      	b.n	8010678 <_GetTwinArcPara+0x4e>
 8010672:	2300      	movs	r3, #0
 8010674:	f8c8 3000 	str.w	r3, [r8]
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010680 <GUI__DrawTwinArc2>:
 8010680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010684:	461c      	mov	r4, r3
 8010686:	4b57      	ldr	r3, [pc, #348]	; (80107e4 <GUI__DrawTwinArc2+0x164>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801068c:	6cdf      	ldr	r7, [r3, #76]	; 0x4c
 801068e:	b08b      	sub	sp, #44	; 0x2c
 8010690:	4415      	add	r5, r2
 8010692:	1e63      	subs	r3, r4, #1
 8010694:	19c6      	adds	r6, r0, r7
 8010696:	442b      	add	r3, r5
 8010698:	440f      	add	r7, r1
 801069a:	a808      	add	r0, sp, #32
 801069c:	f8ad 6020 	strh.w	r6, [sp, #32]
 80106a0:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80106a4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 80106a8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80106ac:	f7f7 fffe 	bl	80086ac <WM__InitIVRSearch>
 80106b0:	2800      	cmp	r0, #0
 80106b2:	f000 8094 	beq.w	80107de <GUI__DrawTwinArc2+0x15e>
 80106b6:	2c00      	cmp	r4, #0
 80106b8:	dc02      	bgt.n	80106c0 <GUI__DrawTwinArc2+0x40>
 80106ba:	f7f7 ff35 	bl	8008528 <WM__GetNextIVR>
 80106be:	e7f7      	b.n	80106b0 <GUI__DrawTwinArc2+0x30>
 80106c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80106c2:	f7fc f90a 	bl	800c8da <GUI_SetColor>
 80106c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80106ca:	4641      	mov	r1, r8
 80106cc:	f118 38ff 	adds.w	r8, r8, #4294967295
 80106d0:	d324      	bcc.n	801071c <GUI__DrawTwinArc2+0x9c>
 80106d2:	ab07      	add	r3, sp, #28
 80106d4:	9300      	str	r3, [sp, #0]
 80106d6:	4620      	mov	r0, r4
 80106d8:	aa05      	add	r2, sp, #20
 80106da:	ab06      	add	r3, sp, #24
 80106dc:	f7ff ffa5 	bl	801062a <_GetTwinArcPara>
 80106e0:	f104 39ff 	add.w	r9, r4, #4294967295
 80106e4:	f8dd a018 	ldr.w	sl, [sp, #24]
 80106e8:	9905      	ldr	r1, [sp, #20]
 80106ea:	1930      	adds	r0, r6, r4
 80106ec:	44a9      	add	r9, r5
 80106ee:	ebc8 0909 	rsb	r9, r8, r9
 80106f2:	ebc4 0b07 	rsb	fp, r4, r7
 80106f6:	ebca 0200 	rsb	r2, sl, r0
 80106fa:	eb0b 0301 	add.w	r3, fp, r1
 80106fe:	1a40      	subs	r0, r0, r1
 8010700:	3a01      	subs	r2, #1
 8010702:	4649      	mov	r1, r9
 8010704:	9302      	str	r3, [sp, #8]
 8010706:	f7fa fcdb 	bl	800b0c0 <LCD_DrawHLine>
 801070a:	9b02      	ldr	r3, [sp, #8]
 801070c:	eb0b 000a 	add.w	r0, fp, sl
 8010710:	3001      	adds	r0, #1
 8010712:	4649      	mov	r1, r9
 8010714:	461a      	mov	r2, r3
 8010716:	f7fa fcd3 	bl	800b0c0 <LCD_DrawHLine>
 801071a:	e7d6      	b.n	80106ca <GUI__DrawTwinArc2+0x4a>
 801071c:	2c01      	cmp	r4, #1
 801071e:	d0cc      	beq.n	80106ba <GUI__DrawTwinArc2+0x3a>
 8010720:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010722:	f7fc f8da 	bl	800c8da <GUI_SetColor>
 8010726:	f1a4 0902 	sub.w	r9, r4, #2
 801072a:	eb05 0b04 	add.w	fp, r5, r4
 801072e:	f105 0802 	add.w	r8, r5, #2
 8010732:	f1b9 0f00 	cmp.w	r9, #0
 8010736:	d027      	beq.n	8010788 <GUI__DrawTwinArc2+0x108>
 8010738:	ab07      	add	r3, sp, #28
 801073a:	4649      	mov	r1, r9
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	4620      	mov	r0, r4
 8010740:	aa05      	add	r2, sp, #20
 8010742:	ab06      	add	r3, sp, #24
 8010744:	f7ff ff71 	bl	801062a <_GetTwinArcPara>
 8010748:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801074c:	9906      	ldr	r1, [sp, #24]
 801074e:	1930      	adds	r0, r6, r4
 8010750:	1b3b      	subs	r3, r7, r4
 8010752:	ebca 0200 	rsb	r2, sl, r0
 8010756:	eb03 0c01 	add.w	ip, r3, r1
 801075a:	1a40      	subs	r0, r0, r1
 801075c:	3a01      	subs	r2, #1
 801075e:	4641      	mov	r1, r8
 8010760:	9302      	str	r3, [sp, #8]
 8010762:	f8cd c00c 	str.w	ip, [sp, #12]
 8010766:	f7fa fcab 	bl	800b0c0 <LCD_DrawHLine>
 801076a:	9b02      	ldr	r3, [sp, #8]
 801076c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8010770:	eb03 000a 	add.w	r0, r3, sl
 8010774:	4641      	mov	r1, r8
 8010776:	3001      	adds	r0, #1
 8010778:	4662      	mov	r2, ip
 801077a:	f7fa fca1 	bl	800b0c0 <LCD_DrawHLine>
 801077e:	f109 39ff 	add.w	r9, r9, #4294967295
 8010782:	f108 0801 	add.w	r8, r8, #1
 8010786:	e7d4      	b.n	8010732 <GUI__DrawTwinArc2+0xb2>
 8010788:	2c02      	cmp	r4, #2
 801078a:	d096      	beq.n	80106ba <GUI__DrawTwinArc2+0x3a>
 801078c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801078e:	f7fc f8a4 	bl	800c8da <GUI_SetColor>
 8010792:	f1c4 0303 	rsb	r3, r4, #3
 8010796:	f1a4 0803 	sub.w	r8, r4, #3
 801079a:	449b      	add	fp, r3
 801079c:	f1b8 0f00 	cmp.w	r8, #0
 80107a0:	d08b      	beq.n	80106ba <GUI__DrawTwinArc2+0x3a>
 80107a2:	ab07      	add	r3, sp, #28
 80107a4:	4641      	mov	r1, r8
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	4620      	mov	r0, r4
 80107aa:	ab06      	add	r3, sp, #24
 80107ac:	aa05      	add	r2, sp, #20
 80107ae:	f7ff ff3c 	bl	801062a <_GetTwinArcPara>
 80107b2:	9807      	ldr	r0, [sp, #28]
 80107b4:	1932      	adds	r2, r6, r4
 80107b6:	ebc4 0907 	rsb	r9, r4, r7
 80107ba:	4659      	mov	r1, fp
 80107bc:	eb09 0a00 	add.w	sl, r9, r0
 80107c0:	1a10      	subs	r0, r2, r0
 80107c2:	3a01      	subs	r2, #1
 80107c4:	f7fa fc7c 	bl	800b0c0 <LCD_DrawHLine>
 80107c8:	4659      	mov	r1, fp
 80107ca:	f109 0001 	add.w	r0, r9, #1
 80107ce:	4652      	mov	r2, sl
 80107d0:	f7fa fc76 	bl	800b0c0 <LCD_DrawHLine>
 80107d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80107d8:	f10b 0b01 	add.w	fp, fp, #1
 80107dc:	e7de      	b.n	801079c <GUI__DrawTwinArc2+0x11c>
 80107de:	b00b      	add	sp, #44	; 0x2c
 80107e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e4:	20000084 	.word	0x20000084

080107e8 <GUI__CompactPixelIndices>:
 80107e8:	2a08      	cmp	r2, #8
 80107ea:	b510      	push	{r4, lr}
 80107ec:	dd0e      	ble.n	801080c <GUI__CompactPixelIndices+0x24>
 80107ee:	2a10      	cmp	r2, #16
 80107f0:	dc0a      	bgt.n	8010808 <GUI__CompactPixelIndices+0x20>
 80107f2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80107f6:	4603      	mov	r3, r0
 80107f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80107fc:	f823 2b02 	strh.w	r2, [r3], #2
 8010800:	428b      	cmp	r3, r1
 8010802:	d1f9      	bne.n	80107f8 <GUI__CompactPixelIndices+0x10>
 8010804:	2001      	movs	r0, #1
 8010806:	bd10      	pop	{r4, pc}
 8010808:	2000      	movs	r0, #0
 801080a:	bd10      	pop	{r4, pc}
 801080c:	2a02      	cmp	r2, #2
 801080e:	d06d      	beq.n	80108ec <GUI__CompactPixelIndices+0x104>
 8010810:	2a04      	cmp	r2, #4
 8010812:	d054      	beq.n	80108be <GUI__CompactPixelIndices+0xd6>
 8010814:	2a01      	cmp	r2, #1
 8010816:	f040 8095 	bne.w	8010944 <GUI__CompactPixelIndices+0x15c>
 801081a:	4604      	mov	r4, r0
 801081c:	6803      	ldr	r3, [r0, #0]
 801081e:	2901      	cmp	r1, #1
 8010820:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 8010824:	b2db      	uxtb	r3, r3
 8010826:	d047      	beq.n	80108b8 <GUI__CompactPixelIndices+0xd0>
 8010828:	6842      	ldr	r2, [r0, #4]
 801082a:	2902      	cmp	r1, #2
 801082c:	f002 0201 	and.w	r2, r2, #1
 8010830:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8010834:	d102      	bne.n	801083c <GUI__CompactPixelIndices+0x54>
 8010836:	f100 0208 	add.w	r2, r0, #8
 801083a:	e03e      	b.n	80108ba <GUI__CompactPixelIndices+0xd2>
 801083c:	6882      	ldr	r2, [r0, #8]
 801083e:	2903      	cmp	r1, #3
 8010840:	f002 0201 	and.w	r2, r2, #1
 8010844:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8010848:	d102      	bne.n	8010850 <GUI__CompactPixelIndices+0x68>
 801084a:	f100 020c 	add.w	r2, r0, #12
 801084e:	e034      	b.n	80108ba <GUI__CompactPixelIndices+0xd2>
 8010850:	68c2      	ldr	r2, [r0, #12]
 8010852:	2904      	cmp	r1, #4
 8010854:	f002 0201 	and.w	r2, r2, #1
 8010858:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801085c:	d102      	bne.n	8010864 <GUI__CompactPixelIndices+0x7c>
 801085e:	f100 0210 	add.w	r2, r0, #16
 8010862:	e02a      	b.n	80108ba <GUI__CompactPixelIndices+0xd2>
 8010864:	6902      	ldr	r2, [r0, #16]
 8010866:	2905      	cmp	r1, #5
 8010868:	f002 0201 	and.w	r2, r2, #1
 801086c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8010870:	d102      	bne.n	8010878 <GUI__CompactPixelIndices+0x90>
 8010872:	f100 0214 	add.w	r2, r0, #20
 8010876:	e020      	b.n	80108ba <GUI__CompactPixelIndices+0xd2>
 8010878:	6942      	ldr	r2, [r0, #20]
 801087a:	2906      	cmp	r1, #6
 801087c:	f002 0201 	and.w	r2, r2, #1
 8010880:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8010884:	d102      	bne.n	801088c <GUI__CompactPixelIndices+0xa4>
 8010886:	f100 0218 	add.w	r2, r0, #24
 801088a:	e016      	b.n	80108ba <GUI__CompactPixelIndices+0xd2>
 801088c:	6982      	ldr	r2, [r0, #24]
 801088e:	3907      	subs	r1, #7
 8010890:	f002 0201 	and.w	r2, r2, #1
 8010894:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8010898:	d102      	bne.n	80108a0 <GUI__CompactPixelIndices+0xb8>
 801089a:	f100 021c 	add.w	r2, r0, #28
 801089e:	e005      	b.n	80108ac <GUI__CompactPixelIndices+0xc4>
 80108a0:	f100 0220 	add.w	r2, r0, #32
 80108a4:	69c0      	ldr	r0, [r0, #28]
 80108a6:	f000 0001 	and.w	r0, r0, #1
 80108aa:	4303      	orrs	r3, r0
 80108ac:	f804 3b01 	strb.w	r3, [r4], #1
 80108b0:	2900      	cmp	r1, #0
 80108b2:	d0a7      	beq.n	8010804 <GUI__CompactPixelIndices+0x1c>
 80108b4:	4610      	mov	r0, r2
 80108b6:	e7b1      	b.n	801081c <GUI__CompactPixelIndices+0x34>
 80108b8:	1d02      	adds	r2, r0, #4
 80108ba:	2100      	movs	r1, #0
 80108bc:	e7f6      	b.n	80108ac <GUI__CompactPixelIndices+0xc4>
 80108be:	4602      	mov	r2, r0
 80108c0:	6803      	ldr	r3, [r0, #0]
 80108c2:	2901      	cmp	r1, #1
 80108c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	d102      	bne.n	80108d2 <GUI__CompactPixelIndices+0xea>
 80108cc:	1d04      	adds	r4, r0, #4
 80108ce:	2100      	movs	r1, #0
 80108d0:	e006      	b.n	80108e0 <GUI__CompactPixelIndices+0xf8>
 80108d2:	f100 0408 	add.w	r4, r0, #8
 80108d6:	6840      	ldr	r0, [r0, #4]
 80108d8:	f000 000f 	and.w	r0, r0, #15
 80108dc:	4303      	orrs	r3, r0
 80108de:	3902      	subs	r1, #2
 80108e0:	f802 3b01 	strb.w	r3, [r2], #1
 80108e4:	2900      	cmp	r1, #0
 80108e6:	d08d      	beq.n	8010804 <GUI__CompactPixelIndices+0x1c>
 80108e8:	4620      	mov	r0, r4
 80108ea:	e7e9      	b.n	80108c0 <GUI__CompactPixelIndices+0xd8>
 80108ec:	4604      	mov	r4, r0
 80108ee:	6803      	ldr	r3, [r0, #0]
 80108f0:	2901      	cmp	r1, #1
 80108f2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	d021      	beq.n	801093e <GUI__CompactPixelIndices+0x156>
 80108fa:	6842      	ldr	r2, [r0, #4]
 80108fc:	2902      	cmp	r1, #2
 80108fe:	f002 0203 	and.w	r2, r2, #3
 8010902:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8010906:	d102      	bne.n	801090e <GUI__CompactPixelIndices+0x126>
 8010908:	f100 0208 	add.w	r2, r0, #8
 801090c:	e018      	b.n	8010940 <GUI__CompactPixelIndices+0x158>
 801090e:	6882      	ldr	r2, [r0, #8]
 8010910:	2903      	cmp	r1, #3
 8010912:	f002 0203 	and.w	r2, r2, #3
 8010916:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 801091a:	d102      	bne.n	8010922 <GUI__CompactPixelIndices+0x13a>
 801091c:	f100 020c 	add.w	r2, r0, #12
 8010920:	e00e      	b.n	8010940 <GUI__CompactPixelIndices+0x158>
 8010922:	f100 0210 	add.w	r2, r0, #16
 8010926:	68c0      	ldr	r0, [r0, #12]
 8010928:	f000 0003 	and.w	r0, r0, #3
 801092c:	4303      	orrs	r3, r0
 801092e:	3904      	subs	r1, #4
 8010930:	f804 3b01 	strb.w	r3, [r4], #1
 8010934:	2900      	cmp	r1, #0
 8010936:	f43f af65 	beq.w	8010804 <GUI__CompactPixelIndices+0x1c>
 801093a:	4610      	mov	r0, r2
 801093c:	e7d7      	b.n	80108ee <GUI__CompactPixelIndices+0x106>
 801093e:	1d02      	adds	r2, r0, #4
 8010940:	2100      	movs	r1, #0
 8010942:	e7f5      	b.n	8010930 <GUI__CompactPixelIndices+0x148>
 8010944:	2300      	movs	r3, #0
 8010946:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 801094a:	54c2      	strb	r2, [r0, r3]
 801094c:	3301      	adds	r3, #1
 801094e:	428b      	cmp	r3, r1
 8010950:	d1f9      	bne.n	8010946 <GUI__CompactPixelIndices+0x15e>
 8010952:	e757      	b.n	8010804 <GUI__CompactPixelIndices+0x1c>

08010954 <GUI__ConvertColor2Index>:
 8010954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801095c:	681e      	ldr	r6, [r3, #0]
 801095e:	f1b8 0f00 	cmp.w	r8, #0
 8010962:	bf08      	it	eq
 8010964:	4680      	moveq	r8, r0
 8010966:	2a08      	cmp	r2, #8
 8010968:	4604      	mov	r4, r0
 801096a:	460d      	mov	r5, r1
 801096c:	dd05      	ble.n	801097a <GUI__ConvertColor2Index+0x26>
 801096e:	2a10      	cmp	r2, #16
 8010970:	f340 80b6 	ble.w	8010ae0 <GUI__ConvertColor2Index+0x18c>
 8010974:	2000      	movs	r0, #0
 8010976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801097a:	3a01      	subs	r2, #1
 801097c:	2a07      	cmp	r2, #7
 801097e:	f200 80a4 	bhi.w	8010aca <GUI__ConvertColor2Index+0x176>
 8010982:	e8df f002 	tbb	[pc, r2]
 8010986:	6111      	.short	0x6111
 8010988:	a2a287a2 	.word	0xa2a287a2
 801098c:	92a2      	.short	0x92a2
 801098e:	69e0      	ldr	r0, [r4, #28]
 8010990:	47b0      	blx	r6
 8010992:	4338      	orrs	r0, r7
 8010994:	f104 0920 	add.w	r9, r4, #32
 8010998:	b2c7      	uxtb	r7, r0
 801099a:	3d08      	subs	r5, #8
 801099c:	f808 7b01 	strb.w	r7, [r8], #1
 80109a0:	2d00      	cmp	r5, #0
 80109a2:	f000 8092 	beq.w	8010aca <GUI__ConvertColor2Index+0x176>
 80109a6:	464c      	mov	r4, r9
 80109a8:	6820      	ldr	r0, [r4, #0]
 80109aa:	47b0      	blx	r6
 80109ac:	2d01      	cmp	r5, #1
 80109ae:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 80109b2:	b2c7      	uxtb	r7, r0
 80109b4:	f000 808c 	beq.w	8010ad0 <GUI__ConvertColor2Index+0x17c>
 80109b8:	6860      	ldr	r0, [r4, #4]
 80109ba:	47b0      	blx	r6
 80109bc:	2d02      	cmp	r5, #2
 80109be:	ea47 1080 	orr.w	r0, r7, r0, lsl #6
 80109c2:	b2c7      	uxtb	r7, r0
 80109c4:	d102      	bne.n	80109cc <GUI__ConvertColor2Index+0x78>
 80109c6:	f104 0908 	add.w	r9, r4, #8
 80109ca:	e083      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 80109cc:	68a0      	ldr	r0, [r4, #8]
 80109ce:	47b0      	blx	r6
 80109d0:	2d03      	cmp	r5, #3
 80109d2:	ea47 1040 	orr.w	r0, r7, r0, lsl #5
 80109d6:	b2c7      	uxtb	r7, r0
 80109d8:	d102      	bne.n	80109e0 <GUI__ConvertColor2Index+0x8c>
 80109da:	f104 090c 	add.w	r9, r4, #12
 80109de:	e079      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 80109e0:	68e0      	ldr	r0, [r4, #12]
 80109e2:	47b0      	blx	r6
 80109e4:	2d04      	cmp	r5, #4
 80109e6:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 80109ea:	b2c7      	uxtb	r7, r0
 80109ec:	d102      	bne.n	80109f4 <GUI__ConvertColor2Index+0xa0>
 80109ee:	f104 0910 	add.w	r9, r4, #16
 80109f2:	e06f      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 80109f4:	6920      	ldr	r0, [r4, #16]
 80109f6:	47b0      	blx	r6
 80109f8:	2d05      	cmp	r5, #5
 80109fa:	ea47 00c0 	orr.w	r0, r7, r0, lsl #3
 80109fe:	b2c7      	uxtb	r7, r0
 8010a00:	d102      	bne.n	8010a08 <GUI__ConvertColor2Index+0xb4>
 8010a02:	f104 0914 	add.w	r9, r4, #20
 8010a06:	e065      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 8010a08:	6960      	ldr	r0, [r4, #20]
 8010a0a:	47b0      	blx	r6
 8010a0c:	2d06      	cmp	r5, #6
 8010a0e:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010a12:	b2c7      	uxtb	r7, r0
 8010a14:	d102      	bne.n	8010a1c <GUI__ConvertColor2Index+0xc8>
 8010a16:	f104 0918 	add.w	r9, r4, #24
 8010a1a:	e05b      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 8010a1c:	69a0      	ldr	r0, [r4, #24]
 8010a1e:	47b0      	blx	r6
 8010a20:	2d07      	cmp	r5, #7
 8010a22:	ea47 0040 	orr.w	r0, r7, r0, lsl #1
 8010a26:	b2c7      	uxtb	r7, r0
 8010a28:	d1b1      	bne.n	801098e <GUI__ConvertColor2Index+0x3a>
 8010a2a:	f104 091c 	add.w	r9, r4, #28
 8010a2e:	e051      	b.n	8010ad4 <GUI__ConvertColor2Index+0x180>
 8010a30:	68e0      	ldr	r0, [r4, #12]
 8010a32:	47b0      	blx	r6
 8010a34:	4338      	orrs	r0, r7
 8010a36:	f104 0910 	add.w	r9, r4, #16
 8010a3a:	b2c7      	uxtb	r7, r0
 8010a3c:	3d04      	subs	r5, #4
 8010a3e:	f808 7b01 	strb.w	r7, [r8], #1
 8010a42:	2d00      	cmp	r5, #0
 8010a44:	d041      	beq.n	8010aca <GUI__ConvertColor2Index+0x176>
 8010a46:	464c      	mov	r4, r9
 8010a48:	6820      	ldr	r0, [r4, #0]
 8010a4a:	47b0      	blx	r6
 8010a4c:	2d01      	cmp	r5, #1
 8010a4e:	ea4f 1080 	mov.w	r0, r0, lsl #6
 8010a52:	b2c7      	uxtb	r7, r0
 8010a54:	d040      	beq.n	8010ad8 <GUI__ConvertColor2Index+0x184>
 8010a56:	6860      	ldr	r0, [r4, #4]
 8010a58:	47b0      	blx	r6
 8010a5a:	2d02      	cmp	r5, #2
 8010a5c:	ea47 1000 	orr.w	r0, r7, r0, lsl #4
 8010a60:	b2c7      	uxtb	r7, r0
 8010a62:	d102      	bne.n	8010a6a <GUI__ConvertColor2Index+0x116>
 8010a64:	f104 0908 	add.w	r9, r4, #8
 8010a68:	e038      	b.n	8010adc <GUI__ConvertColor2Index+0x188>
 8010a6a:	68a0      	ldr	r0, [r4, #8]
 8010a6c:	47b0      	blx	r6
 8010a6e:	2d03      	cmp	r5, #3
 8010a70:	ea47 0080 	orr.w	r0, r7, r0, lsl #2
 8010a74:	b2c7      	uxtb	r7, r0
 8010a76:	d1db      	bne.n	8010a30 <GUI__ConvertColor2Index+0xdc>
 8010a78:	f104 090c 	add.w	r9, r4, #12
 8010a7c:	e02e      	b.n	8010adc <GUI__ConvertColor2Index+0x188>
 8010a7e:	6860      	ldr	r0, [r4, #4]
 8010a80:	47b0      	blx	r6
 8010a82:	4338      	orrs	r0, r7
 8010a84:	f104 0908 	add.w	r9, r4, #8
 8010a88:	b2c7      	uxtb	r7, r0
 8010a8a:	3d02      	subs	r5, #2
 8010a8c:	f808 7b01 	strb.w	r7, [r8], #1
 8010a90:	b1dd      	cbz	r5, 8010aca <GUI__ConvertColor2Index+0x176>
 8010a92:	464c      	mov	r4, r9
 8010a94:	6820      	ldr	r0, [r4, #0]
 8010a96:	47b0      	blx	r6
 8010a98:	2d01      	cmp	r5, #1
 8010a9a:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010a9e:	b2c7      	uxtb	r7, r0
 8010aa0:	d1ed      	bne.n	8010a7e <GUI__ConvertColor2Index+0x12a>
 8010aa2:	f104 0904 	add.w	r9, r4, #4
 8010aa6:	2500      	movs	r5, #0
 8010aa8:	e7f0      	b.n	8010a8c <GUI__ConvertColor2Index+0x138>
 8010aaa:	691f      	ldr	r7, [r3, #16]
 8010aac:	b12f      	cbz	r7, 8010aba <GUI__ConvertColor2Index+0x166>
 8010aae:	4620      	mov	r0, r4
 8010ab0:	4641      	mov	r1, r8
 8010ab2:	462a      	mov	r2, r5
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	47b8      	blx	r7
 8010ab8:	e007      	b.n	8010aca <GUI__ConvertColor2Index+0x176>
 8010aba:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
 8010abe:	47b0      	blx	r6
 8010ac0:	f808 0007 	strb.w	r0, [r8, r7]
 8010ac4:	3701      	adds	r7, #1
 8010ac6:	42bd      	cmp	r5, r7
 8010ac8:	d1f7      	bne.n	8010aba <GUI__ConvertColor2Index+0x166>
 8010aca:	2001      	movs	r0, #1
 8010acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ad0:	f104 0904 	add.w	r9, r4, #4
 8010ad4:	2500      	movs	r5, #0
 8010ad6:	e761      	b.n	801099c <GUI__ConvertColor2Index+0x48>
 8010ad8:	f104 0904 	add.w	r9, r4, #4
 8010adc:	2500      	movs	r5, #0
 8010ade:	e7ae      	b.n	8010a3e <GUI__ConvertColor2Index+0xea>
 8010ae0:	691f      	ldr	r7, [r3, #16]
 8010ae2:	b11f      	cbz	r7, 8010aec <GUI__ConvertColor2Index+0x198>
 8010ae4:	4641      	mov	r1, r8
 8010ae6:	462a      	mov	r2, r5
 8010ae8:	2302      	movs	r3, #2
 8010aea:	e7e4      	b.n	8010ab6 <GUI__ConvertColor2Index+0x162>
 8010aec:	f854 0b04 	ldr.w	r0, [r4], #4
 8010af0:	47b0      	blx	r6
 8010af2:	3d01      	subs	r5, #1
 8010af4:	f828 0b02 	strh.w	r0, [r8], #2
 8010af8:	d1f8      	bne.n	8010aec <GUI__ConvertColor2Index+0x198>
 8010afa:	e7e6      	b.n	8010aca <GUI__ConvertColor2Index+0x176>

08010afc <GUI__CompactPixelIndicesEx>:
 8010afc:	b513      	push	{r0, r1, r4, lr}
 8010afe:	2400      	movs	r4, #0
 8010b00:	9400      	str	r4, [sp, #0]
 8010b02:	f7ff ff27 	bl	8010954 <GUI__ConvertColor2Index>
 8010b06:	b002      	add	sp, #8
 8010b08:	bd10      	pop	{r4, pc}

08010b0a <_GetCharCode>:
 8010b0a:	7800      	ldrb	r0, [r0, #0]
 8010b0c:	4770      	bx	lr

08010b0e <_GetCharSize>:
 8010b0e:	2001      	movs	r0, #1
 8010b10:	4770      	bx	lr

08010b12 <_CalcSizeOfChar>:
 8010b12:	2001      	movs	r0, #1
 8010b14:	4770      	bx	lr

08010b16 <_Encode>:
 8010b16:	7001      	strb	r1, [r0, #0]
 8010b18:	2001      	movs	r0, #1
 8010b1a:	4770      	bx	lr

08010b1c <GUI_DrawHLine>:
 8010b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b1e:	4f10      	ldr	r7, [pc, #64]	; (8010b60 <GUI_DrawHLine+0x44>)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010b24:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010b26:	4405      	add	r5, r0
 8010b28:	190e      	adds	r6, r1, r4
 8010b2a:	b2ab      	uxth	r3, r5
 8010b2c:	4414      	add	r4, r2
 8010b2e:	4668      	mov	r0, sp
 8010b30:	f8ad 6000 	strh.w	r6, [sp]
 8010b34:	f8ad 4004 	strh.w	r4, [sp, #4]
 8010b38:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010b3c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b40:	f7f7 fdb4 	bl	80086ac <WM__InitIVRSearch>
 8010b44:	b148      	cbz	r0, 8010b5a <GUI_DrawHLine+0x3e>
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	4629      	mov	r1, r5
 8010b50:	4622      	mov	r2, r4
 8010b52:	4798      	blx	r3
 8010b54:	f7f7 fce8 	bl	8008528 <WM__GetNextIVR>
 8010b58:	e7f4      	b.n	8010b44 <GUI_DrawHLine+0x28>
 8010b5a:	b003      	add	sp, #12
 8010b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5e:	bf00      	nop
 8010b60:	20000084 	.word	0x20000084

08010b64 <GUI_DrawPixel>:
 8010b64:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b66:	4e0f      	ldr	r6, [pc, #60]	; (8010ba4 <GUI_DrawPixel+0x40>)
 8010b68:	6833      	ldr	r3, [r6, #0]
 8010b6a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8010b6c:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8010b6e:	4405      	add	r5, r0
 8010b70:	b2ab      	uxth	r3, r5
 8010b72:	440c      	add	r4, r1
 8010b74:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010b78:	f8ad 3000 	strh.w	r3, [sp]
 8010b7c:	4668      	mov	r0, sp
 8010b7e:	b2a3      	uxth	r3, r4
 8010b80:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b84:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010b88:	f7f7 fd90 	bl	80086ac <WM__InitIVRSearch>
 8010b8c:	b140      	cbz	r0, 8010ba0 <GUI_DrawPixel+0x3c>
 8010b8e:	6833      	ldr	r3, [r6, #0]
 8010b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b92:	4628      	mov	r0, r5
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	4621      	mov	r1, r4
 8010b98:	4798      	blx	r3
 8010b9a:	f7f7 fcc5 	bl	8008528 <WM__GetNextIVR>
 8010b9e:	e7f5      	b.n	8010b8c <GUI_DrawPixel+0x28>
 8010ba0:	b002      	add	sp, #8
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}
 8010ba4:	20000084 	.word	0x20000084

08010ba8 <GUI_DrawVLine>:
 8010ba8:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <GUI_DrawVLine+0x40>)
 8010baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8010bb0:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8010bb2:	4406      	add	r6, r0
 8010bb4:	190d      	adds	r5, r1, r4
 8010bb6:	b2b3      	uxth	r3, r6
 8010bb8:	4414      	add	r4, r2
 8010bba:	4668      	mov	r0, sp
 8010bbc:	f8ad 3000 	strh.w	r3, [sp]
 8010bc0:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010bc4:	f8ad 5002 	strh.w	r5, [sp, #2]
 8010bc8:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010bcc:	f7f7 fd6e 	bl	80086ac <WM__InitIVRSearch>
 8010bd0:	b138      	cbz	r0, 8010be2 <GUI_DrawVLine+0x3a>
 8010bd2:	4630      	mov	r0, r6
 8010bd4:	4629      	mov	r1, r5
 8010bd6:	4622      	mov	r2, r4
 8010bd8:	f7fa fa98 	bl	800b10c <LCD_DrawVLine>
 8010bdc:	f7f7 fca4 	bl	8008528 <WM__GetNextIVR>
 8010be0:	e7f6      	b.n	8010bd0 <GUI_DrawVLine+0x28>
 8010be2:	b002      	add	sp, #8
 8010be4:	bd70      	pop	{r4, r5, r6, pc}
 8010be6:	bf00      	nop
 8010be8:	20000084 	.word	0x20000084

08010bec <GUI_FillRect>:
 8010bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bee:	4c0f      	ldr	r4, [pc, #60]	; (8010c2c <GUI_FillRect+0x40>)
 8010bf0:	6824      	ldr	r4, [r4, #0]
 8010bf2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010bf4:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8010bf6:	1947      	adds	r7, r0, r5
 8010bf8:	190e      	adds	r6, r1, r4
 8010bfa:	4415      	add	r5, r2
 8010bfc:	441c      	add	r4, r3
 8010bfe:	4668      	mov	r0, sp
 8010c00:	f8ad 7000 	strh.w	r7, [sp]
 8010c04:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010c08:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010c0c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010c10:	f7f7 fd4c 	bl	80086ac <WM__InitIVRSearch>
 8010c14:	b140      	cbz	r0, 8010c28 <GUI_FillRect+0x3c>
 8010c16:	4638      	mov	r0, r7
 8010c18:	4631      	mov	r1, r6
 8010c1a:	462a      	mov	r2, r5
 8010c1c:	4623      	mov	r3, r4
 8010c1e:	f7fa fa9b 	bl	800b158 <LCD_FillRect>
 8010c22:	f7f7 fc81 	bl	8008528 <WM__GetNextIVR>
 8010c26:	e7f5      	b.n	8010c14 <GUI_FillRect+0x28>
 8010c28:	b003      	add	sp, #12
 8010c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c2c:	20000084 	.word	0x20000084

08010c30 <GUI_FillRectEx>:
 8010c30:	4603      	mov	r3, r0
 8010c32:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010c36:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8010c3a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8010c3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8010c42:	f7ff bfd3 	b.w	8010bec <GUI_FillRect>

08010c46 <_DrawGradient>:
 8010c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c4a:	b08f      	sub	sp, #60	; 0x3c
 8010c4c:	4688      	mov	r8, r1
 8010c4e:	4614      	mov	r4, r2
 8010c50:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010c52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8010c54:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 8010c58:	f8dd b064 	ldr.w	fp, [sp, #100]	; 0x64
 8010c5c:	9104      	str	r1, [sp, #16]
 8010c5e:	4605      	mov	r5, r0
 8010c60:	461e      	mov	r6, r3
 8010c62:	9203      	str	r2, [sp, #12]
 8010c64:	f7fb fd6d 	bl	800c742 <GUI_GetColor>
 8010c68:	45da      	cmp	sl, fp
 8010c6a:	9009      	str	r0, [sp, #36]	; 0x24
 8010c6c:	d109      	bne.n	8010c82 <_DrawGradient+0x3c>
 8010c6e:	4650      	mov	r0, sl
 8010c70:	f7fa fd4a 	bl	800b708 <LCD_SetColor>
 8010c74:	9b03      	ldr	r3, [sp, #12]
 8010c76:	b113      	cbz	r3, 8010c7e <_DrawGradient+0x38>
 8010c78:	4628      	mov	r0, r5
 8010c7a:	4641      	mov	r1, r8
 8010c7c:	e09d      	b.n	8010dba <_DrawGradient+0x174>
 8010c7e:	4640      	mov	r0, r8
 8010c80:	e0a1      	b.n	8010dc6 <_DrawGradient+0x180>
 8010c82:	ebb6 0708 	subs.w	r7, r6, r8
 8010c86:	f000 80b2 	beq.w	8010dee <_DrawGradient+0x1a8>
 8010c8a:	fa5f f28a 	uxtb.w	r2, sl
 8010c8e:	fa5f f38b 	uxtb.w	r3, fp
 8010c92:	1a9b      	subs	r3, r3, r2
 8010c94:	930a      	str	r3, [sp, #40]	; 0x28
 8010c96:	2302      	movs	r3, #2
 8010c98:	fb97 f3f3 	sdiv	r3, r7, r3
 8010c9c:	fb02 3207 	mla	r2, r2, r7, r3
 8010ca0:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8010ca4:	9205      	str	r2, [sp, #20]
 8010ca6:	f3ca 2207 	ubfx	r2, sl, #8, #8
 8010caa:	1a89      	subs	r1, r1, r2
 8010cac:	fb02 3207 	mla	r2, r2, r7, r3
 8010cb0:	910b      	str	r1, [sp, #44]	; 0x2c
 8010cb2:	9206      	str	r2, [sp, #24]
 8010cb4:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8010cb8:	f3ca 4207 	ubfx	r2, sl, #16, #8
 8010cbc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8010cc0:	1a89      	subs	r1, r1, r2
 8010cc2:	ebca 6b1b 	rsb	fp, sl, fp, lsr #24
 8010cc6:	fb02 3207 	mla	r2, r2, r7, r3
 8010cca:	fb0a 3a07 	mla	sl, sl, r7, r3
 8010cce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cd0:	910c      	str	r1, [sp, #48]	; 0x30
 8010cd2:	9207      	str	r2, [sp, #28]
 8010cd4:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8010cd8:	f8cd a020 	str.w	sl, [sp, #32]
 8010cdc:	f108 33ff 	add.w	r3, r8, #4294967295
 8010ce0:	f04f 0901 	mov.w	r9, #1
 8010ce4:	f103 0a01 	add.w	sl, r3, #1
 8010ce8:	45b2      	cmp	sl, r6
 8010cea:	dc5b      	bgt.n	8010da4 <_DrawGradient+0x15e>
 8010cec:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010cf0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8010cf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cf6:	fb9c fcf7 	sdiv	ip, ip, r7
 8010cfa:	f8cd c004 	str.w	ip, [sp, #4]
 8010cfe:	f8dd c014 	ldr.w	ip, [sp, #20]
 8010d02:	44f4      	add	ip, lr
 8010d04:	f8cd c014 	str.w	ip, [sp, #20]
 8010d08:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 8010d0c:	f8dd c018 	ldr.w	ip, [sp, #24]
 8010d10:	fb9c f1f7 	sdiv	r1, ip, r7
 8010d14:	44f4      	add	ip, lr
 8010d16:	f8cd c018 	str.w	ip, [sp, #24]
 8010d1a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8010d1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8010d22:	fb9c fbf7 	sdiv	fp, ip, r7
 8010d26:	44f4      	add	ip, lr
 8010d28:	f8cd c01c 	str.w	ip, [sp, #28]
 8010d2c:	f8dd c020 	ldr.w	ip, [sp, #32]
 8010d30:	fb9c fef7 	sdiv	lr, ip, r7
 8010d34:	4494      	add	ip, r2
 8010d36:	f8cd c020 	str.w	ip, [sp, #32]
 8010d3a:	f8dd c004 	ldr.w	ip, [sp, #4]
 8010d3e:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8010d42:	ea4b 6b0e 	orr.w	fp, fp, lr, lsl #24
 8010d46:	ea4c 2201 	orr.w	r2, ip, r1, lsl #8
 8010d4a:	45c2      	cmp	sl, r8
 8010d4c:	ea4b 0b02 	orr.w	fp, fp, r2
 8010d50:	dd25      	ble.n	8010d9e <_DrawGradient+0x158>
 8010d52:	4583      	cmp	fp, r0
 8010d54:	d102      	bne.n	8010d5c <_DrawGradient+0x116>
 8010d56:	f109 0901 	add.w	r9, r9, #1
 8010d5a:	e020      	b.n	8010d9e <_DrawGradient+0x158>
 8010d5c:	9302      	str	r3, [sp, #8]
 8010d5e:	f7fa fcd3 	bl	800b708 <LCD_SetColor>
 8010d62:	f1b9 0f01 	cmp.w	r9, #1
 8010d66:	9b02      	ldr	r3, [sp, #8]
 8010d68:	d00f      	beq.n	8010d8a <_DrawGradient+0x144>
 8010d6a:	9a03      	ldr	r2, [sp, #12]
 8010d6c:	ebc9 010a 	rsb	r1, r9, sl
 8010d70:	b112      	cbz	r2, 8010d78 <_DrawGradient+0x132>
 8010d72:	4628      	mov	r0, r5
 8010d74:	4622      	mov	r2, r4
 8010d76:	e003      	b.n	8010d80 <_DrawGradient+0x13a>
 8010d78:	4608      	mov	r0, r1
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4629      	mov	r1, r5
 8010d7e:	4623      	mov	r3, r4
 8010d80:	f7fa f9ea 	bl	800b158 <LCD_FillRect>
 8010d84:	f04f 0901 	mov.w	r9, #1
 8010d88:	e009      	b.n	8010d9e <_DrawGradient+0x158>
 8010d8a:	9903      	ldr	r1, [sp, #12]
 8010d8c:	b111      	cbz	r1, 8010d94 <_DrawGradient+0x14e>
 8010d8e:	4628      	mov	r0, r5
 8010d90:	4619      	mov	r1, r3
 8010d92:	e001      	b.n	8010d98 <_DrawGradient+0x152>
 8010d94:	4618      	mov	r0, r3
 8010d96:	4629      	mov	r1, r5
 8010d98:	4622      	mov	r2, r4
 8010d9a:	9b04      	ldr	r3, [sp, #16]
 8010d9c:	4798      	blx	r3
 8010d9e:	4653      	mov	r3, sl
 8010da0:	4658      	mov	r0, fp
 8010da2:	e79f      	b.n	8010ce4 <_DrawGradient+0x9e>
 8010da4:	f7fa fcb0 	bl	800b708 <LCD_SetColor>
 8010da8:	f1b9 0f01 	cmp.w	r9, #1
 8010dac:	d00f      	beq.n	8010dce <_DrawGradient+0x188>
 8010dae:	9a03      	ldr	r2, [sp, #12]
 8010db0:	ebc9 0106 	rsb	r1, r9, r6
 8010db4:	b132      	cbz	r2, 8010dc4 <_DrawGradient+0x17e>
 8010db6:	4628      	mov	r0, r5
 8010db8:	3101      	adds	r1, #1
 8010dba:	4622      	mov	r2, r4
 8010dbc:	4633      	mov	r3, r6
 8010dbe:	f7fa f9cb 	bl	800b158 <LCD_FillRect>
 8010dc2:	e00e      	b.n	8010de2 <_DrawGradient+0x19c>
 8010dc4:	1c48      	adds	r0, r1, #1
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	4632      	mov	r2, r6
 8010dca:	4623      	mov	r3, r4
 8010dcc:	e7f7      	b.n	8010dbe <_DrawGradient+0x178>
 8010dce:	9b03      	ldr	r3, [sp, #12]
 8010dd0:	b113      	cbz	r3, 8010dd8 <_DrawGradient+0x192>
 8010dd2:	4628      	mov	r0, r5
 8010dd4:	4631      	mov	r1, r6
 8010dd6:	e001      	b.n	8010ddc <_DrawGradient+0x196>
 8010dd8:	4630      	mov	r0, r6
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4622      	mov	r2, r4
 8010dde:	9b04      	ldr	r3, [sp, #16]
 8010de0:	4798      	blx	r3
 8010de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010de4:	b00f      	add	sp, #60	; 0x3c
 8010de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dea:	f7fa bc8d 	b.w	800b708 <LCD_SetColor>
 8010dee:	b00f      	add	sp, #60	; 0x3c
 8010df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010df4 <GUI_DrawGradientV>:
 8010df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df8:	4c15      	ldr	r4, [pc, #84]	; (8010e50 <GUI_DrawGradientV+0x5c>)
 8010dfa:	6824      	ldr	r4, [r4, #0]
 8010dfc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010dfe:	6d24      	ldr	r4, [r4, #80]	; 0x50
 8010e00:	b087      	sub	sp, #28
 8010e02:	eb00 0905 	add.w	r9, r0, r5
 8010e06:	eb01 0804 	add.w	r8, r1, r4
 8010e0a:	4415      	add	r5, r2
 8010e0c:	441c      	add	r4, r3
 8010e0e:	a804      	add	r0, sp, #16
 8010e10:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8010e12:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8010e14:	f8ad 9010 	strh.w	r9, [sp, #16]
 8010e18:	f8ad 5014 	strh.w	r5, [sp, #20]
 8010e1c:	f8ad 8012 	strh.w	r8, [sp, #18]
 8010e20:	f8ad 4016 	strh.w	r4, [sp, #22]
 8010e24:	f7f7 fc42 	bl	80086ac <WM__InitIVRSearch>
 8010e28:	b170      	cbz	r0, 8010e48 <GUI_DrawGradientV+0x54>
 8010e2a:	4b0a      	ldr	r3, [pc, #40]	; (8010e54 <GUI_DrawGradientV+0x60>)
 8010e2c:	9302      	str	r3, [sp, #8]
 8010e2e:	2301      	movs	r3, #1
 8010e30:	9303      	str	r3, [sp, #12]
 8010e32:	4648      	mov	r0, r9
 8010e34:	4641      	mov	r1, r8
 8010e36:	462a      	mov	r2, r5
 8010e38:	4623      	mov	r3, r4
 8010e3a:	9700      	str	r7, [sp, #0]
 8010e3c:	9601      	str	r6, [sp, #4]
 8010e3e:	f7ff ff02 	bl	8010c46 <_DrawGradient>
 8010e42:	f7f7 fb71 	bl	8008528 <WM__GetNextIVR>
 8010e46:	e7ef      	b.n	8010e28 <GUI_DrawGradientV+0x34>
 8010e48:	b007      	add	sp, #28
 8010e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e4e:	bf00      	nop
 8010e50:	20000084 	.word	0x20000084
 8010e54:	0800b0c1 	.word	0x0800b0c1

08010e58 <GUI_DrawRect>:
 8010e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4c1e      	ldr	r4, [pc, #120]	; (8010ed8 <GUI_DrawRect+0x80>)
 8010e5e:	f8d4 e000 	ldr.w	lr, [r4]
 8010e62:	f8de 404c 	ldr.w	r4, [lr, #76]	; 0x4c
 8010e66:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
 8010e6a:	1905      	adds	r5, r0, r4
 8010e6c:	4414      	add	r4, r2
 8010e6e:	f89e 2018 	ldrb.w	r2, [lr, #24]
 8010e72:	3a01      	subs	r2, #1
 8010e74:	b292      	uxth	r2, r2
 8010e76:	198f      	adds	r7, r1, r6
 8010e78:	441e      	add	r6, r3
 8010e7a:	1aab      	subs	r3, r5, r2
 8010e7c:	f8ad 3000 	strh.w	r3, [sp]
 8010e80:	1913      	adds	r3, r2, r4
 8010e82:	f8ad 3004 	strh.w	r3, [sp, #4]
 8010e86:	4668      	mov	r0, sp
 8010e88:	1abb      	subs	r3, r7, r2
 8010e8a:	4432      	add	r2, r6
 8010e8c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010e90:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010e94:	f7f7 fc0a 	bl	80086ac <WM__InitIVRSearch>
 8010e98:	b1d0      	cbz	r0, 8010ed0 <GUI_DrawRect+0x78>
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	4639      	mov	r1, r7
 8010e9e:	4622      	mov	r2, r4
 8010ea0:	f7fa f90e 	bl	800b0c0 <LCD_DrawHLine>
 8010ea4:	f107 0901 	add.w	r9, r7, #1
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	4631      	mov	r1, r6
 8010eac:	4622      	mov	r2, r4
 8010eae:	f106 38ff 	add.w	r8, r6, #4294967295
 8010eb2:	f7fa f905 	bl	800b0c0 <LCD_DrawHLine>
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	4649      	mov	r1, r9
 8010eba:	4642      	mov	r2, r8
 8010ebc:	f7fa f926 	bl	800b10c <LCD_DrawVLine>
 8010ec0:	4620      	mov	r0, r4
 8010ec2:	4649      	mov	r1, r9
 8010ec4:	4642      	mov	r2, r8
 8010ec6:	f7fa f921 	bl	800b10c <LCD_DrawVLine>
 8010eca:	f7f7 fb2d 	bl	8008528 <WM__GetNextIVR>
 8010ece:	e7e3      	b.n	8010e98 <GUI_DrawRect+0x40>
 8010ed0:	b003      	add	sp, #12
 8010ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20000084 	.word	0x20000084

08010edc <_GetIndexMask_0>:
 8010edc:	b508      	push	{r3, lr}
 8010ede:	f7f9 fff1 	bl	800aec4 <LCD_GetNumColors>
 8010ee2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8010ee6:	d010      	beq.n	8010f0a <_GetIndexMask_0+0x2e>
 8010ee8:	287f      	cmp	r0, #127	; 0x7f
 8010eea:	d810      	bhi.n	8010f0e <_GetIndexMask_0+0x32>
 8010eec:	283f      	cmp	r0, #63	; 0x3f
 8010eee:	d810      	bhi.n	8010f12 <_GetIndexMask_0+0x36>
 8010ef0:	281f      	cmp	r0, #31
 8010ef2:	d810      	bhi.n	8010f16 <_GetIndexMask_0+0x3a>
 8010ef4:	280f      	cmp	r0, #15
 8010ef6:	d810      	bhi.n	8010f1a <_GetIndexMask_0+0x3e>
 8010ef8:	2807      	cmp	r0, #7
 8010efa:	d810      	bhi.n	8010f1e <_GetIndexMask_0+0x42>
 8010efc:	2803      	cmp	r0, #3
 8010efe:	d810      	bhi.n	8010f22 <_GetIndexMask_0+0x46>
 8010f00:	2801      	cmp	r0, #1
 8010f02:	bf94      	ite	ls
 8010f04:	2000      	movls	r0, #0
 8010f06:	2001      	movhi	r0, #1
 8010f08:	e00c      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f0a:	2008      	movs	r0, #8
 8010f0c:	e00a      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f0e:	2007      	movs	r0, #7
 8010f10:	e008      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f12:	2006      	movs	r0, #6
 8010f14:	e006      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f16:	2005      	movs	r0, #5
 8010f18:	e004      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f1a:	2004      	movs	r0, #4
 8010f1c:	e002      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f1e:	2003      	movs	r0, #3
 8010f20:	e000      	b.n	8010f24 <_GetIndexMask_0+0x48>
 8010f22:	2002      	movs	r0, #2
 8010f24:	2301      	movs	r3, #1
 8010f26:	fa03 f000 	lsl.w	r0, r3, r0
 8010f2a:	3801      	subs	r0, #1
 8010f2c:	bd08      	pop	{r3, pc}

08010f2e <_Index2Color_0>:
 8010f2e:	b538      	push	{r3, r4, r5, lr}
 8010f30:	4604      	mov	r4, r0
 8010f32:	f7f9 ffc7 	bl	800aec4 <LCD_GetNumColors>
 8010f36:	4605      	mov	r5, r0
 8010f38:	f7f9 ffe2 	bl	800af00 <LCD_GetPalette>
 8010f3c:	42ac      	cmp	r4, r5
 8010f3e:	d203      	bcs.n	8010f48 <_Index2Color_0+0x1a>
 8010f40:	b118      	cbz	r0, 8010f4a <_Index2Color_0+0x1c>
 8010f42:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	2000      	movs	r0, #0
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}

08010f4c <_Color2Index_0>:
 8010f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f50:	4682      	mov	sl, r0
 8010f52:	f7f9 ffb7 	bl	800aec4 <LCD_GetNumColors>
 8010f56:	4681      	mov	r9, r0
 8010f58:	f7f9 ffd2 	bl	800af00 <LCD_GetPalette>
 8010f5c:	4605      	mov	r5, r0
 8010f5e:	b1e0      	cbz	r0, 8010f9a <_Color2Index_0+0x4e>
 8010f60:	2300      	movs	r3, #0
 8010f62:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8010f66:	4592      	cmp	sl, r2
 8010f68:	d019      	beq.n	8010f9e <_Color2Index_0+0x52>
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	454b      	cmp	r3, r9
 8010f6e:	dbf8      	blt.n	8010f62 <_Color2Index_0+0x16>
 8010f70:	2700      	movs	r7, #0
 8010f72:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 8010f76:	463c      	mov	r4, r7
 8010f78:	f855 1024 	ldr.w	r1, [r5, r4, lsl #2]
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	f7fb fbad 	bl	800c6dc <GUI_CalcColorDist>
 8010f82:	4626      	mov	r6, r4
 8010f84:	4540      	cmp	r0, r8
 8010f86:	f104 0401 	add.w	r4, r4, #1
 8010f8a:	bf24      	itt	cs
 8010f8c:	4640      	movcs	r0, r8
 8010f8e:	463e      	movcs	r6, r7
 8010f90:	454c      	cmp	r4, r9
 8010f92:	da07      	bge.n	8010fa4 <_Color2Index_0+0x58>
 8010f94:	4680      	mov	r8, r0
 8010f96:	4637      	mov	r7, r6
 8010f98:	e7ee      	b.n	8010f78 <_Color2Index_0+0x2c>
 8010f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010fac <_DrawDownRect>:
 8010fac:	b510      	push	{r4, lr}
 8010fae:	b09c      	sub	sp, #112	; 0x70
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	4668      	mov	r0, sp
 8010fb4:	f7fb fc72 	bl	800c89c <GUI_SaveContext_W>
 8010fb8:	4b09      	ldr	r3, [pc, #36]	; (8010fe0 <_DrawDownRect+0x34>)
 8010fba:	6818      	ldr	r0, [r3, #0]
 8010fbc:	f7fa fba4 	bl	800b708 <LCD_SetColor>
 8010fc0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010fc4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010fc8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010fcc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010fd0:	f7ff ff42 	bl	8010e58 <GUI_DrawRect>
 8010fd4:	4668      	mov	r0, sp
 8010fd6:	f7fb fc6b 	bl	800c8b0 <GUI_RestoreContext>
 8010fda:	b01c      	add	sp, #112	; 0x70
 8010fdc:	bd10      	pop	{r4, pc}
 8010fde:	bf00      	nop
 8010fe0:	20002bbc 	.word	0x20002bbc

08010fe4 <_DrawUpRect>:
 8010fe4:	b510      	push	{r4, lr}
 8010fe6:	b09c      	sub	sp, #112	; 0x70
 8010fe8:	4604      	mov	r4, r0
 8010fea:	4668      	mov	r0, sp
 8010fec:	f7fb fc56 	bl	800c89c <GUI_SaveContext_W>
 8010ff0:	4b09      	ldr	r3, [pc, #36]	; (8011018 <_DrawUpRect+0x34>)
 8010ff2:	6818      	ldr	r0, [r3, #0]
 8010ff4:	f7fa fb88 	bl	800b708 <LCD_SetColor>
 8010ff8:	f9b4 0000 	ldrsh.w	r0, [r4]
 8010ffc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011000:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8011004:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8011008:	f7ff ff26 	bl	8010e58 <GUI_DrawRect>
 801100c:	4668      	mov	r0, sp
 801100e:	f7fb fc4f 	bl	800c8b0 <GUI_RestoreContext>
 8011012:	b01c      	add	sp, #112	; 0x70
 8011014:	bd10      	pop	{r4, pc}
 8011016:	bf00      	nop
 8011018:	20002bbc 	.word	0x20002bbc

0801101c <_DrawDown>:
 801101c:	b507      	push	{r0, r1, r2, lr}
 801101e:	4668      	mov	r0, sp
 8011020:	f7f6 f8e0 	bl	80071e4 <WM_GetClientRect>
 8011024:	4668      	mov	r0, sp
 8011026:	f7ff ffc1 	bl	8010fac <_DrawDownRect>
 801102a:	b003      	add	sp, #12
 801102c:	f85d fb04 	ldr.w	pc, [sp], #4

08011030 <_DrawUp>:
 8011030:	b507      	push	{r0, r1, r2, lr}
 8011032:	4668      	mov	r0, sp
 8011034:	f7f6 f8d6 	bl	80071e4 <WM_GetClientRect>
 8011038:	4668      	mov	r0, sp
 801103a:	f7ff ffd3 	bl	8010fe4 <_DrawUpRect>
 801103e:	b003      	add	sp, #12
 8011040:	f85d fb04 	ldr.w	pc, [sp], #4

08011044 <LCD_GetNumLayers>:
 8011044:	b510      	push	{r4, lr}
 8011046:	2000      	movs	r0, #0
 8011048:	f7fb f962 	bl	800c310 <GUI_DEVICE__GetpDriver>
 801104c:	1c04      	adds	r4, r0, #0
 801104e:	f04f 0001 	mov.w	r0, #1
 8011052:	bf18      	it	ne
 8011054:	2401      	movne	r4, #1
 8011056:	f7fb f95b 	bl	800c310 <GUI_DEVICE__GetpDriver>
 801105a:	b100      	cbz	r0, 801105e <LCD_GetNumLayers+0x1a>
 801105c:	3401      	adds	r4, #1
 801105e:	4620      	mov	r0, r4
 8011060:	bd10      	pop	{r4, pc}
	...

08011064 <__errno>:
 8011064:	4b01      	ldr	r3, [pc, #4]	; (801106c <__errno+0x8>)
 8011066:	6818      	ldr	r0, [r3, #0]
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	20000128 	.word	0x20000128

08011070 <__libc_init_array>:
 8011070:	b570      	push	{r4, r5, r6, lr}
 8011072:	4d0d      	ldr	r5, [pc, #52]	; (80110a8 <__libc_init_array+0x38>)
 8011074:	4c0d      	ldr	r4, [pc, #52]	; (80110ac <__libc_init_array+0x3c>)
 8011076:	1b64      	subs	r4, r4, r5
 8011078:	10a4      	asrs	r4, r4, #2
 801107a:	2600      	movs	r6, #0
 801107c:	42a6      	cmp	r6, r4
 801107e:	d109      	bne.n	8011094 <__libc_init_array+0x24>
 8011080:	4d0b      	ldr	r5, [pc, #44]	; (80110b0 <__libc_init_array+0x40>)
 8011082:	4c0c      	ldr	r4, [pc, #48]	; (80110b4 <__libc_init_array+0x44>)
 8011084:	f001 fa3c 	bl	8012500 <_init>
 8011088:	1b64      	subs	r4, r4, r5
 801108a:	10a4      	asrs	r4, r4, #2
 801108c:	2600      	movs	r6, #0
 801108e:	42a6      	cmp	r6, r4
 8011090:	d105      	bne.n	801109e <__libc_init_array+0x2e>
 8011092:	bd70      	pop	{r4, r5, r6, pc}
 8011094:	f855 3b04 	ldr.w	r3, [r5], #4
 8011098:	4798      	blx	r3
 801109a:	3601      	adds	r6, #1
 801109c:	e7ee      	b.n	801107c <__libc_init_array+0xc>
 801109e:	f855 3b04 	ldr.w	r3, [r5], #4
 80110a2:	4798      	blx	r3
 80110a4:	3601      	adds	r6, #1
 80110a6:	e7f2      	b.n	801108e <__libc_init_array+0x1e>
 80110a8:	080145a0 	.word	0x080145a0
 80110ac:	080145a0 	.word	0x080145a0
 80110b0:	080145a0 	.word	0x080145a0
 80110b4:	080145a4 	.word	0x080145a4

080110b8 <memcpy>:
 80110b8:	440a      	add	r2, r1
 80110ba:	4291      	cmp	r1, r2
 80110bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80110c0:	d100      	bne.n	80110c4 <memcpy+0xc>
 80110c2:	4770      	bx	lr
 80110c4:	b510      	push	{r4, lr}
 80110c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80110ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80110ce:	4291      	cmp	r1, r2
 80110d0:	d1f9      	bne.n	80110c6 <memcpy+0xe>
 80110d2:	bd10      	pop	{r4, pc}

080110d4 <memmove>:
 80110d4:	4288      	cmp	r0, r1
 80110d6:	b510      	push	{r4, lr}
 80110d8:	eb01 0402 	add.w	r4, r1, r2
 80110dc:	d902      	bls.n	80110e4 <memmove+0x10>
 80110de:	4284      	cmp	r4, r0
 80110e0:	4623      	mov	r3, r4
 80110e2:	d807      	bhi.n	80110f4 <memmove+0x20>
 80110e4:	1e43      	subs	r3, r0, #1
 80110e6:	42a1      	cmp	r1, r4
 80110e8:	d008      	beq.n	80110fc <memmove+0x28>
 80110ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110f2:	e7f8      	b.n	80110e6 <memmove+0x12>
 80110f4:	4402      	add	r2, r0
 80110f6:	4601      	mov	r1, r0
 80110f8:	428a      	cmp	r2, r1
 80110fa:	d100      	bne.n	80110fe <memmove+0x2a>
 80110fc:	bd10      	pop	{r4, pc}
 80110fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011106:	e7f7      	b.n	80110f8 <memmove+0x24>

08011108 <memset>:
 8011108:	4402      	add	r2, r0
 801110a:	4603      	mov	r3, r0
 801110c:	4293      	cmp	r3, r2
 801110e:	d100      	bne.n	8011112 <memset+0xa>
 8011110:	4770      	bx	lr
 8011112:	f803 1b01 	strb.w	r1, [r3], #1
 8011116:	e7f9      	b.n	801110c <memset+0x4>

08011118 <siprintf>:
 8011118:	b40e      	push	{r1, r2, r3}
 801111a:	b500      	push	{lr}
 801111c:	b09c      	sub	sp, #112	; 0x70
 801111e:	ab1d      	add	r3, sp, #116	; 0x74
 8011120:	9002      	str	r0, [sp, #8]
 8011122:	9006      	str	r0, [sp, #24]
 8011124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011128:	4809      	ldr	r0, [pc, #36]	; (8011150 <siprintf+0x38>)
 801112a:	9107      	str	r1, [sp, #28]
 801112c:	9104      	str	r1, [sp, #16]
 801112e:	4909      	ldr	r1, [pc, #36]	; (8011154 <siprintf+0x3c>)
 8011130:	f853 2b04 	ldr.w	r2, [r3], #4
 8011134:	9105      	str	r1, [sp, #20]
 8011136:	6800      	ldr	r0, [r0, #0]
 8011138:	9301      	str	r3, [sp, #4]
 801113a:	a902      	add	r1, sp, #8
 801113c:	f000 f9d2 	bl	80114e4 <_svfiprintf_r>
 8011140:	9b02      	ldr	r3, [sp, #8]
 8011142:	2200      	movs	r2, #0
 8011144:	701a      	strb	r2, [r3, #0]
 8011146:	b01c      	add	sp, #112	; 0x70
 8011148:	f85d eb04 	ldr.w	lr, [sp], #4
 801114c:	b003      	add	sp, #12
 801114e:	4770      	bx	lr
 8011150:	20000128 	.word	0x20000128
 8011154:	ffff0208 	.word	0xffff0208

08011158 <strchr>:
 8011158:	b2c9      	uxtb	r1, r1
 801115a:	4603      	mov	r3, r0
 801115c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011160:	b11a      	cbz	r2, 801116a <strchr+0x12>
 8011162:	428a      	cmp	r2, r1
 8011164:	d1f9      	bne.n	801115a <strchr+0x2>
 8011166:	4618      	mov	r0, r3
 8011168:	4770      	bx	lr
 801116a:	2900      	cmp	r1, #0
 801116c:	bf18      	it	ne
 801116e:	2300      	movne	r3, #0
 8011170:	e7f9      	b.n	8011166 <strchr+0xe>

08011172 <strcpy>:
 8011172:	4603      	mov	r3, r0
 8011174:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011178:	f803 2b01 	strb.w	r2, [r3], #1
 801117c:	2a00      	cmp	r2, #0
 801117e:	d1f9      	bne.n	8011174 <strcpy+0x2>
 8011180:	4770      	bx	lr

08011182 <strstr>:
 8011182:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011184:	780c      	ldrb	r4, [r1, #0]
 8011186:	b164      	cbz	r4, 80111a2 <strstr+0x20>
 8011188:	4603      	mov	r3, r0
 801118a:	781a      	ldrb	r2, [r3, #0]
 801118c:	4618      	mov	r0, r3
 801118e:	1c5e      	adds	r6, r3, #1
 8011190:	b90a      	cbnz	r2, 8011196 <strstr+0x14>
 8011192:	4610      	mov	r0, r2
 8011194:	e005      	b.n	80111a2 <strstr+0x20>
 8011196:	4294      	cmp	r4, r2
 8011198:	d108      	bne.n	80111ac <strstr+0x2a>
 801119a:	460d      	mov	r5, r1
 801119c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80111a0:	b902      	cbnz	r2, 80111a4 <strstr+0x22>
 80111a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111a4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80111a8:	4297      	cmp	r7, r2
 80111aa:	d0f7      	beq.n	801119c <strstr+0x1a>
 80111ac:	4633      	mov	r3, r6
 80111ae:	e7ec      	b.n	801118a <strstr+0x8>

080111b0 <strtok>:
 80111b0:	4b16      	ldr	r3, [pc, #88]	; (801120c <strtok+0x5c>)
 80111b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111b4:	681e      	ldr	r6, [r3, #0]
 80111b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80111b8:	4605      	mov	r5, r0
 80111ba:	b9fc      	cbnz	r4, 80111fc <strtok+0x4c>
 80111bc:	2050      	movs	r0, #80	; 0x50
 80111be:	9101      	str	r1, [sp, #4]
 80111c0:	f000 f882 	bl	80112c8 <malloc>
 80111c4:	9901      	ldr	r1, [sp, #4]
 80111c6:	65b0      	str	r0, [r6, #88]	; 0x58
 80111c8:	4602      	mov	r2, r0
 80111ca:	b920      	cbnz	r0, 80111d6 <strtok+0x26>
 80111cc:	4b10      	ldr	r3, [pc, #64]	; (8011210 <strtok+0x60>)
 80111ce:	4811      	ldr	r0, [pc, #68]	; (8011214 <strtok+0x64>)
 80111d0:	2157      	movs	r1, #87	; 0x57
 80111d2:	f000 f849 	bl	8011268 <__assert_func>
 80111d6:	e9c0 4400 	strd	r4, r4, [r0]
 80111da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80111de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80111e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80111e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80111ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80111ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80111f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80111f6:	6184      	str	r4, [r0, #24]
 80111f8:	7704      	strb	r4, [r0, #28]
 80111fa:	6244      	str	r4, [r0, #36]	; 0x24
 80111fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80111fe:	2301      	movs	r3, #1
 8011200:	4628      	mov	r0, r5
 8011202:	b002      	add	sp, #8
 8011204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011208:	f000 b806 	b.w	8011218 <__strtok_r>
 801120c:	20000128 	.word	0x20000128
 8011210:	08014450 	.word	0x08014450
 8011214:	08014467 	.word	0x08014467

08011218 <__strtok_r>:
 8011218:	b5f0      	push	{r4, r5, r6, r7, lr}
 801121a:	b908      	cbnz	r0, 8011220 <__strtok_r+0x8>
 801121c:	6810      	ldr	r0, [r2, #0]
 801121e:	b188      	cbz	r0, 8011244 <__strtok_r+0x2c>
 8011220:	4604      	mov	r4, r0
 8011222:	4620      	mov	r0, r4
 8011224:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011228:	460f      	mov	r7, r1
 801122a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801122e:	b91e      	cbnz	r6, 8011238 <__strtok_r+0x20>
 8011230:	b965      	cbnz	r5, 801124c <__strtok_r+0x34>
 8011232:	6015      	str	r5, [r2, #0]
 8011234:	4628      	mov	r0, r5
 8011236:	e005      	b.n	8011244 <__strtok_r+0x2c>
 8011238:	42b5      	cmp	r5, r6
 801123a:	d1f6      	bne.n	801122a <__strtok_r+0x12>
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1f0      	bne.n	8011222 <__strtok_r+0xa>
 8011240:	6014      	str	r4, [r2, #0]
 8011242:	7003      	strb	r3, [r0, #0]
 8011244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011246:	461c      	mov	r4, r3
 8011248:	e00c      	b.n	8011264 <__strtok_r+0x4c>
 801124a:	b915      	cbnz	r5, 8011252 <__strtok_r+0x3a>
 801124c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011250:	460e      	mov	r6, r1
 8011252:	f816 5b01 	ldrb.w	r5, [r6], #1
 8011256:	42ab      	cmp	r3, r5
 8011258:	d1f7      	bne.n	801124a <__strtok_r+0x32>
 801125a:	2b00      	cmp	r3, #0
 801125c:	d0f3      	beq.n	8011246 <__strtok_r+0x2e>
 801125e:	2300      	movs	r3, #0
 8011260:	f804 3c01 	strb.w	r3, [r4, #-1]
 8011264:	6014      	str	r4, [r2, #0]
 8011266:	e7ed      	b.n	8011244 <__strtok_r+0x2c>

08011268 <__assert_func>:
 8011268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801126a:	4614      	mov	r4, r2
 801126c:	461a      	mov	r2, r3
 801126e:	4b09      	ldr	r3, [pc, #36]	; (8011294 <__assert_func+0x2c>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4605      	mov	r5, r0
 8011274:	68d8      	ldr	r0, [r3, #12]
 8011276:	b14c      	cbz	r4, 801128c <__assert_func+0x24>
 8011278:	4b07      	ldr	r3, [pc, #28]	; (8011298 <__assert_func+0x30>)
 801127a:	9100      	str	r1, [sp, #0]
 801127c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011280:	4906      	ldr	r1, [pc, #24]	; (801129c <__assert_func+0x34>)
 8011282:	462b      	mov	r3, r5
 8011284:	f000 f80e 	bl	80112a4 <fiprintf>
 8011288:	f000 fdea 	bl	8011e60 <abort>
 801128c:	4b04      	ldr	r3, [pc, #16]	; (80112a0 <__assert_func+0x38>)
 801128e:	461c      	mov	r4, r3
 8011290:	e7f3      	b.n	801127a <__assert_func+0x12>
 8011292:	bf00      	nop
 8011294:	20000128 	.word	0x20000128
 8011298:	080144c8 	.word	0x080144c8
 801129c:	080144d5 	.word	0x080144d5
 80112a0:	08014503 	.word	0x08014503

080112a4 <fiprintf>:
 80112a4:	b40e      	push	{r1, r2, r3}
 80112a6:	b503      	push	{r0, r1, lr}
 80112a8:	4601      	mov	r1, r0
 80112aa:	ab03      	add	r3, sp, #12
 80112ac:	4805      	ldr	r0, [pc, #20]	; (80112c4 <fiprintf+0x20>)
 80112ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80112b2:	6800      	ldr	r0, [r0, #0]
 80112b4:	9301      	str	r3, [sp, #4]
 80112b6:	f000 fa3f 	bl	8011738 <_vfiprintf_r>
 80112ba:	b002      	add	sp, #8
 80112bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80112c0:	b003      	add	sp, #12
 80112c2:	4770      	bx	lr
 80112c4:	20000128 	.word	0x20000128

080112c8 <malloc>:
 80112c8:	4b02      	ldr	r3, [pc, #8]	; (80112d4 <malloc+0xc>)
 80112ca:	4601      	mov	r1, r0
 80112cc:	6818      	ldr	r0, [r3, #0]
 80112ce:	f000 b853 	b.w	8011378 <_malloc_r>
 80112d2:	bf00      	nop
 80112d4:	20000128 	.word	0x20000128

080112d8 <_free_r>:
 80112d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80112da:	2900      	cmp	r1, #0
 80112dc:	d048      	beq.n	8011370 <_free_r+0x98>
 80112de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80112e2:	9001      	str	r0, [sp, #4]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f1a1 0404 	sub.w	r4, r1, #4
 80112ea:	bfb8      	it	lt
 80112ec:	18e4      	addlt	r4, r4, r3
 80112ee:	f000 ffdd 	bl	80122ac <__malloc_lock>
 80112f2:	4a20      	ldr	r2, [pc, #128]	; (8011374 <_free_r+0x9c>)
 80112f4:	9801      	ldr	r0, [sp, #4]
 80112f6:	6813      	ldr	r3, [r2, #0]
 80112f8:	4615      	mov	r5, r2
 80112fa:	b933      	cbnz	r3, 801130a <_free_r+0x32>
 80112fc:	6063      	str	r3, [r4, #4]
 80112fe:	6014      	str	r4, [r2, #0]
 8011300:	b003      	add	sp, #12
 8011302:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011306:	f000 bfd7 	b.w	80122b8 <__malloc_unlock>
 801130a:	42a3      	cmp	r3, r4
 801130c:	d90b      	bls.n	8011326 <_free_r+0x4e>
 801130e:	6821      	ldr	r1, [r4, #0]
 8011310:	1862      	adds	r2, r4, r1
 8011312:	4293      	cmp	r3, r2
 8011314:	bf04      	itt	eq
 8011316:	681a      	ldreq	r2, [r3, #0]
 8011318:	685b      	ldreq	r3, [r3, #4]
 801131a:	6063      	str	r3, [r4, #4]
 801131c:	bf04      	itt	eq
 801131e:	1852      	addeq	r2, r2, r1
 8011320:	6022      	streq	r2, [r4, #0]
 8011322:	602c      	str	r4, [r5, #0]
 8011324:	e7ec      	b.n	8011300 <_free_r+0x28>
 8011326:	461a      	mov	r2, r3
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	b10b      	cbz	r3, 8011330 <_free_r+0x58>
 801132c:	42a3      	cmp	r3, r4
 801132e:	d9fa      	bls.n	8011326 <_free_r+0x4e>
 8011330:	6811      	ldr	r1, [r2, #0]
 8011332:	1855      	adds	r5, r2, r1
 8011334:	42a5      	cmp	r5, r4
 8011336:	d10b      	bne.n	8011350 <_free_r+0x78>
 8011338:	6824      	ldr	r4, [r4, #0]
 801133a:	4421      	add	r1, r4
 801133c:	1854      	adds	r4, r2, r1
 801133e:	42a3      	cmp	r3, r4
 8011340:	6011      	str	r1, [r2, #0]
 8011342:	d1dd      	bne.n	8011300 <_free_r+0x28>
 8011344:	681c      	ldr	r4, [r3, #0]
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	6053      	str	r3, [r2, #4]
 801134a:	4421      	add	r1, r4
 801134c:	6011      	str	r1, [r2, #0]
 801134e:	e7d7      	b.n	8011300 <_free_r+0x28>
 8011350:	d902      	bls.n	8011358 <_free_r+0x80>
 8011352:	230c      	movs	r3, #12
 8011354:	6003      	str	r3, [r0, #0]
 8011356:	e7d3      	b.n	8011300 <_free_r+0x28>
 8011358:	6825      	ldr	r5, [r4, #0]
 801135a:	1961      	adds	r1, r4, r5
 801135c:	428b      	cmp	r3, r1
 801135e:	bf04      	itt	eq
 8011360:	6819      	ldreq	r1, [r3, #0]
 8011362:	685b      	ldreq	r3, [r3, #4]
 8011364:	6063      	str	r3, [r4, #4]
 8011366:	bf04      	itt	eq
 8011368:	1949      	addeq	r1, r1, r5
 801136a:	6021      	streq	r1, [r4, #0]
 801136c:	6054      	str	r4, [r2, #4]
 801136e:	e7c7      	b.n	8011300 <_free_r+0x28>
 8011370:	b003      	add	sp, #12
 8011372:	bd30      	pop	{r4, r5, pc}
 8011374:	20002bc0 	.word	0x20002bc0

08011378 <_malloc_r>:
 8011378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801137a:	1ccd      	adds	r5, r1, #3
 801137c:	f025 0503 	bic.w	r5, r5, #3
 8011380:	3508      	adds	r5, #8
 8011382:	2d0c      	cmp	r5, #12
 8011384:	bf38      	it	cc
 8011386:	250c      	movcc	r5, #12
 8011388:	2d00      	cmp	r5, #0
 801138a:	4606      	mov	r6, r0
 801138c:	db01      	blt.n	8011392 <_malloc_r+0x1a>
 801138e:	42a9      	cmp	r1, r5
 8011390:	d903      	bls.n	801139a <_malloc_r+0x22>
 8011392:	230c      	movs	r3, #12
 8011394:	6033      	str	r3, [r6, #0]
 8011396:	2000      	movs	r0, #0
 8011398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801139a:	f000 ff87 	bl	80122ac <__malloc_lock>
 801139e:	4921      	ldr	r1, [pc, #132]	; (8011424 <_malloc_r+0xac>)
 80113a0:	680a      	ldr	r2, [r1, #0]
 80113a2:	4614      	mov	r4, r2
 80113a4:	b99c      	cbnz	r4, 80113ce <_malloc_r+0x56>
 80113a6:	4f20      	ldr	r7, [pc, #128]	; (8011428 <_malloc_r+0xb0>)
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	b923      	cbnz	r3, 80113b6 <_malloc_r+0x3e>
 80113ac:	4621      	mov	r1, r4
 80113ae:	4630      	mov	r0, r6
 80113b0:	f000 fc86 	bl	8011cc0 <_sbrk_r>
 80113b4:	6038      	str	r0, [r7, #0]
 80113b6:	4629      	mov	r1, r5
 80113b8:	4630      	mov	r0, r6
 80113ba:	f000 fc81 	bl	8011cc0 <_sbrk_r>
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	d123      	bne.n	801140a <_malloc_r+0x92>
 80113c2:	230c      	movs	r3, #12
 80113c4:	6033      	str	r3, [r6, #0]
 80113c6:	4630      	mov	r0, r6
 80113c8:	f000 ff76 	bl	80122b8 <__malloc_unlock>
 80113cc:	e7e3      	b.n	8011396 <_malloc_r+0x1e>
 80113ce:	6823      	ldr	r3, [r4, #0]
 80113d0:	1b5b      	subs	r3, r3, r5
 80113d2:	d417      	bmi.n	8011404 <_malloc_r+0x8c>
 80113d4:	2b0b      	cmp	r3, #11
 80113d6:	d903      	bls.n	80113e0 <_malloc_r+0x68>
 80113d8:	6023      	str	r3, [r4, #0]
 80113da:	441c      	add	r4, r3
 80113dc:	6025      	str	r5, [r4, #0]
 80113de:	e004      	b.n	80113ea <_malloc_r+0x72>
 80113e0:	6863      	ldr	r3, [r4, #4]
 80113e2:	42a2      	cmp	r2, r4
 80113e4:	bf0c      	ite	eq
 80113e6:	600b      	streq	r3, [r1, #0]
 80113e8:	6053      	strne	r3, [r2, #4]
 80113ea:	4630      	mov	r0, r6
 80113ec:	f000 ff64 	bl	80122b8 <__malloc_unlock>
 80113f0:	f104 000b 	add.w	r0, r4, #11
 80113f4:	1d23      	adds	r3, r4, #4
 80113f6:	f020 0007 	bic.w	r0, r0, #7
 80113fa:	1ac2      	subs	r2, r0, r3
 80113fc:	d0cc      	beq.n	8011398 <_malloc_r+0x20>
 80113fe:	1a1b      	subs	r3, r3, r0
 8011400:	50a3      	str	r3, [r4, r2]
 8011402:	e7c9      	b.n	8011398 <_malloc_r+0x20>
 8011404:	4622      	mov	r2, r4
 8011406:	6864      	ldr	r4, [r4, #4]
 8011408:	e7cc      	b.n	80113a4 <_malloc_r+0x2c>
 801140a:	1cc4      	adds	r4, r0, #3
 801140c:	f024 0403 	bic.w	r4, r4, #3
 8011410:	42a0      	cmp	r0, r4
 8011412:	d0e3      	beq.n	80113dc <_malloc_r+0x64>
 8011414:	1a21      	subs	r1, r4, r0
 8011416:	4630      	mov	r0, r6
 8011418:	f000 fc52 	bl	8011cc0 <_sbrk_r>
 801141c:	3001      	adds	r0, #1
 801141e:	d1dd      	bne.n	80113dc <_malloc_r+0x64>
 8011420:	e7cf      	b.n	80113c2 <_malloc_r+0x4a>
 8011422:	bf00      	nop
 8011424:	20002bc0 	.word	0x20002bc0
 8011428:	20002bc4 	.word	0x20002bc4

0801142c <__ssputs_r>:
 801142c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011430:	688e      	ldr	r6, [r1, #8]
 8011432:	429e      	cmp	r6, r3
 8011434:	4682      	mov	sl, r0
 8011436:	460c      	mov	r4, r1
 8011438:	4690      	mov	r8, r2
 801143a:	461f      	mov	r7, r3
 801143c:	d838      	bhi.n	80114b0 <__ssputs_r+0x84>
 801143e:	898a      	ldrh	r2, [r1, #12]
 8011440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011444:	d032      	beq.n	80114ac <__ssputs_r+0x80>
 8011446:	6825      	ldr	r5, [r4, #0]
 8011448:	6909      	ldr	r1, [r1, #16]
 801144a:	eba5 0901 	sub.w	r9, r5, r1
 801144e:	6965      	ldr	r5, [r4, #20]
 8011450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011458:	3301      	adds	r3, #1
 801145a:	444b      	add	r3, r9
 801145c:	106d      	asrs	r5, r5, #1
 801145e:	429d      	cmp	r5, r3
 8011460:	bf38      	it	cc
 8011462:	461d      	movcc	r5, r3
 8011464:	0553      	lsls	r3, r2, #21
 8011466:	d531      	bpl.n	80114cc <__ssputs_r+0xa0>
 8011468:	4629      	mov	r1, r5
 801146a:	f7ff ff85 	bl	8011378 <_malloc_r>
 801146e:	4606      	mov	r6, r0
 8011470:	b950      	cbnz	r0, 8011488 <__ssputs_r+0x5c>
 8011472:	230c      	movs	r3, #12
 8011474:	f8ca 3000 	str.w	r3, [sl]
 8011478:	89a3      	ldrh	r3, [r4, #12]
 801147a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801147e:	81a3      	strh	r3, [r4, #12]
 8011480:	f04f 30ff 	mov.w	r0, #4294967295
 8011484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011488:	6921      	ldr	r1, [r4, #16]
 801148a:	464a      	mov	r2, r9
 801148c:	f7ff fe14 	bl	80110b8 <memcpy>
 8011490:	89a3      	ldrh	r3, [r4, #12]
 8011492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801149a:	81a3      	strh	r3, [r4, #12]
 801149c:	6126      	str	r6, [r4, #16]
 801149e:	6165      	str	r5, [r4, #20]
 80114a0:	444e      	add	r6, r9
 80114a2:	eba5 0509 	sub.w	r5, r5, r9
 80114a6:	6026      	str	r6, [r4, #0]
 80114a8:	60a5      	str	r5, [r4, #8]
 80114aa:	463e      	mov	r6, r7
 80114ac:	42be      	cmp	r6, r7
 80114ae:	d900      	bls.n	80114b2 <__ssputs_r+0x86>
 80114b0:	463e      	mov	r6, r7
 80114b2:	4632      	mov	r2, r6
 80114b4:	6820      	ldr	r0, [r4, #0]
 80114b6:	4641      	mov	r1, r8
 80114b8:	f7ff fe0c 	bl	80110d4 <memmove>
 80114bc:	68a3      	ldr	r3, [r4, #8]
 80114be:	6822      	ldr	r2, [r4, #0]
 80114c0:	1b9b      	subs	r3, r3, r6
 80114c2:	4432      	add	r2, r6
 80114c4:	60a3      	str	r3, [r4, #8]
 80114c6:	6022      	str	r2, [r4, #0]
 80114c8:	2000      	movs	r0, #0
 80114ca:	e7db      	b.n	8011484 <__ssputs_r+0x58>
 80114cc:	462a      	mov	r2, r5
 80114ce:	f000 fef9 	bl	80122c4 <_realloc_r>
 80114d2:	4606      	mov	r6, r0
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d1e1      	bne.n	801149c <__ssputs_r+0x70>
 80114d8:	6921      	ldr	r1, [r4, #16]
 80114da:	4650      	mov	r0, sl
 80114dc:	f7ff fefc 	bl	80112d8 <_free_r>
 80114e0:	e7c7      	b.n	8011472 <__ssputs_r+0x46>
	...

080114e4 <_svfiprintf_r>:
 80114e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114e8:	4698      	mov	r8, r3
 80114ea:	898b      	ldrh	r3, [r1, #12]
 80114ec:	061b      	lsls	r3, r3, #24
 80114ee:	b09d      	sub	sp, #116	; 0x74
 80114f0:	4607      	mov	r7, r0
 80114f2:	460d      	mov	r5, r1
 80114f4:	4614      	mov	r4, r2
 80114f6:	d50e      	bpl.n	8011516 <_svfiprintf_r+0x32>
 80114f8:	690b      	ldr	r3, [r1, #16]
 80114fa:	b963      	cbnz	r3, 8011516 <_svfiprintf_r+0x32>
 80114fc:	2140      	movs	r1, #64	; 0x40
 80114fe:	f7ff ff3b 	bl	8011378 <_malloc_r>
 8011502:	6028      	str	r0, [r5, #0]
 8011504:	6128      	str	r0, [r5, #16]
 8011506:	b920      	cbnz	r0, 8011512 <_svfiprintf_r+0x2e>
 8011508:	230c      	movs	r3, #12
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	f04f 30ff 	mov.w	r0, #4294967295
 8011510:	e0d1      	b.n	80116b6 <_svfiprintf_r+0x1d2>
 8011512:	2340      	movs	r3, #64	; 0x40
 8011514:	616b      	str	r3, [r5, #20]
 8011516:	2300      	movs	r3, #0
 8011518:	9309      	str	r3, [sp, #36]	; 0x24
 801151a:	2320      	movs	r3, #32
 801151c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011520:	f8cd 800c 	str.w	r8, [sp, #12]
 8011524:	2330      	movs	r3, #48	; 0x30
 8011526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80116d0 <_svfiprintf_r+0x1ec>
 801152a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801152e:	f04f 0901 	mov.w	r9, #1
 8011532:	4623      	mov	r3, r4
 8011534:	469a      	mov	sl, r3
 8011536:	f813 2b01 	ldrb.w	r2, [r3], #1
 801153a:	b10a      	cbz	r2, 8011540 <_svfiprintf_r+0x5c>
 801153c:	2a25      	cmp	r2, #37	; 0x25
 801153e:	d1f9      	bne.n	8011534 <_svfiprintf_r+0x50>
 8011540:	ebba 0b04 	subs.w	fp, sl, r4
 8011544:	d00b      	beq.n	801155e <_svfiprintf_r+0x7a>
 8011546:	465b      	mov	r3, fp
 8011548:	4622      	mov	r2, r4
 801154a:	4629      	mov	r1, r5
 801154c:	4638      	mov	r0, r7
 801154e:	f7ff ff6d 	bl	801142c <__ssputs_r>
 8011552:	3001      	adds	r0, #1
 8011554:	f000 80aa 	beq.w	80116ac <_svfiprintf_r+0x1c8>
 8011558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801155a:	445a      	add	r2, fp
 801155c:	9209      	str	r2, [sp, #36]	; 0x24
 801155e:	f89a 3000 	ldrb.w	r3, [sl]
 8011562:	2b00      	cmp	r3, #0
 8011564:	f000 80a2 	beq.w	80116ac <_svfiprintf_r+0x1c8>
 8011568:	2300      	movs	r3, #0
 801156a:	f04f 32ff 	mov.w	r2, #4294967295
 801156e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011572:	f10a 0a01 	add.w	sl, sl, #1
 8011576:	9304      	str	r3, [sp, #16]
 8011578:	9307      	str	r3, [sp, #28]
 801157a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801157e:	931a      	str	r3, [sp, #104]	; 0x68
 8011580:	4654      	mov	r4, sl
 8011582:	2205      	movs	r2, #5
 8011584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011588:	4851      	ldr	r0, [pc, #324]	; (80116d0 <_svfiprintf_r+0x1ec>)
 801158a:	f7ee fe29 	bl	80001e0 <memchr>
 801158e:	9a04      	ldr	r2, [sp, #16]
 8011590:	b9d8      	cbnz	r0, 80115ca <_svfiprintf_r+0xe6>
 8011592:	06d0      	lsls	r0, r2, #27
 8011594:	bf44      	itt	mi
 8011596:	2320      	movmi	r3, #32
 8011598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801159c:	0711      	lsls	r1, r2, #28
 801159e:	bf44      	itt	mi
 80115a0:	232b      	movmi	r3, #43	; 0x2b
 80115a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115a6:	f89a 3000 	ldrb.w	r3, [sl]
 80115aa:	2b2a      	cmp	r3, #42	; 0x2a
 80115ac:	d015      	beq.n	80115da <_svfiprintf_r+0xf6>
 80115ae:	9a07      	ldr	r2, [sp, #28]
 80115b0:	4654      	mov	r4, sl
 80115b2:	2000      	movs	r0, #0
 80115b4:	f04f 0c0a 	mov.w	ip, #10
 80115b8:	4621      	mov	r1, r4
 80115ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80115be:	3b30      	subs	r3, #48	; 0x30
 80115c0:	2b09      	cmp	r3, #9
 80115c2:	d94e      	bls.n	8011662 <_svfiprintf_r+0x17e>
 80115c4:	b1b0      	cbz	r0, 80115f4 <_svfiprintf_r+0x110>
 80115c6:	9207      	str	r2, [sp, #28]
 80115c8:	e014      	b.n	80115f4 <_svfiprintf_r+0x110>
 80115ca:	eba0 0308 	sub.w	r3, r0, r8
 80115ce:	fa09 f303 	lsl.w	r3, r9, r3
 80115d2:	4313      	orrs	r3, r2
 80115d4:	9304      	str	r3, [sp, #16]
 80115d6:	46a2      	mov	sl, r4
 80115d8:	e7d2      	b.n	8011580 <_svfiprintf_r+0x9c>
 80115da:	9b03      	ldr	r3, [sp, #12]
 80115dc:	1d19      	adds	r1, r3, #4
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	9103      	str	r1, [sp, #12]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	bfbb      	ittet	lt
 80115e6:	425b      	neglt	r3, r3
 80115e8:	f042 0202 	orrlt.w	r2, r2, #2
 80115ec:	9307      	strge	r3, [sp, #28]
 80115ee:	9307      	strlt	r3, [sp, #28]
 80115f0:	bfb8      	it	lt
 80115f2:	9204      	strlt	r2, [sp, #16]
 80115f4:	7823      	ldrb	r3, [r4, #0]
 80115f6:	2b2e      	cmp	r3, #46	; 0x2e
 80115f8:	d10c      	bne.n	8011614 <_svfiprintf_r+0x130>
 80115fa:	7863      	ldrb	r3, [r4, #1]
 80115fc:	2b2a      	cmp	r3, #42	; 0x2a
 80115fe:	d135      	bne.n	801166c <_svfiprintf_r+0x188>
 8011600:	9b03      	ldr	r3, [sp, #12]
 8011602:	1d1a      	adds	r2, r3, #4
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	9203      	str	r2, [sp, #12]
 8011608:	2b00      	cmp	r3, #0
 801160a:	bfb8      	it	lt
 801160c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011610:	3402      	adds	r4, #2
 8011612:	9305      	str	r3, [sp, #20]
 8011614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80116e0 <_svfiprintf_r+0x1fc>
 8011618:	7821      	ldrb	r1, [r4, #0]
 801161a:	2203      	movs	r2, #3
 801161c:	4650      	mov	r0, sl
 801161e:	f7ee fddf 	bl	80001e0 <memchr>
 8011622:	b140      	cbz	r0, 8011636 <_svfiprintf_r+0x152>
 8011624:	2340      	movs	r3, #64	; 0x40
 8011626:	eba0 000a 	sub.w	r0, r0, sl
 801162a:	fa03 f000 	lsl.w	r0, r3, r0
 801162e:	9b04      	ldr	r3, [sp, #16]
 8011630:	4303      	orrs	r3, r0
 8011632:	3401      	adds	r4, #1
 8011634:	9304      	str	r3, [sp, #16]
 8011636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801163a:	4826      	ldr	r0, [pc, #152]	; (80116d4 <_svfiprintf_r+0x1f0>)
 801163c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011640:	2206      	movs	r2, #6
 8011642:	f7ee fdcd 	bl	80001e0 <memchr>
 8011646:	2800      	cmp	r0, #0
 8011648:	d038      	beq.n	80116bc <_svfiprintf_r+0x1d8>
 801164a:	4b23      	ldr	r3, [pc, #140]	; (80116d8 <_svfiprintf_r+0x1f4>)
 801164c:	bb1b      	cbnz	r3, 8011696 <_svfiprintf_r+0x1b2>
 801164e:	9b03      	ldr	r3, [sp, #12]
 8011650:	3307      	adds	r3, #7
 8011652:	f023 0307 	bic.w	r3, r3, #7
 8011656:	3308      	adds	r3, #8
 8011658:	9303      	str	r3, [sp, #12]
 801165a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801165c:	4433      	add	r3, r6
 801165e:	9309      	str	r3, [sp, #36]	; 0x24
 8011660:	e767      	b.n	8011532 <_svfiprintf_r+0x4e>
 8011662:	fb0c 3202 	mla	r2, ip, r2, r3
 8011666:	460c      	mov	r4, r1
 8011668:	2001      	movs	r0, #1
 801166a:	e7a5      	b.n	80115b8 <_svfiprintf_r+0xd4>
 801166c:	2300      	movs	r3, #0
 801166e:	3401      	adds	r4, #1
 8011670:	9305      	str	r3, [sp, #20]
 8011672:	4619      	mov	r1, r3
 8011674:	f04f 0c0a 	mov.w	ip, #10
 8011678:	4620      	mov	r0, r4
 801167a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801167e:	3a30      	subs	r2, #48	; 0x30
 8011680:	2a09      	cmp	r2, #9
 8011682:	d903      	bls.n	801168c <_svfiprintf_r+0x1a8>
 8011684:	2b00      	cmp	r3, #0
 8011686:	d0c5      	beq.n	8011614 <_svfiprintf_r+0x130>
 8011688:	9105      	str	r1, [sp, #20]
 801168a:	e7c3      	b.n	8011614 <_svfiprintf_r+0x130>
 801168c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011690:	4604      	mov	r4, r0
 8011692:	2301      	movs	r3, #1
 8011694:	e7f0      	b.n	8011678 <_svfiprintf_r+0x194>
 8011696:	ab03      	add	r3, sp, #12
 8011698:	9300      	str	r3, [sp, #0]
 801169a:	462a      	mov	r2, r5
 801169c:	4b0f      	ldr	r3, [pc, #60]	; (80116dc <_svfiprintf_r+0x1f8>)
 801169e:	a904      	add	r1, sp, #16
 80116a0:	4638      	mov	r0, r7
 80116a2:	f3af 8000 	nop.w
 80116a6:	1c42      	adds	r2, r0, #1
 80116a8:	4606      	mov	r6, r0
 80116aa:	d1d6      	bne.n	801165a <_svfiprintf_r+0x176>
 80116ac:	89ab      	ldrh	r3, [r5, #12]
 80116ae:	065b      	lsls	r3, r3, #25
 80116b0:	f53f af2c 	bmi.w	801150c <_svfiprintf_r+0x28>
 80116b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116b6:	b01d      	add	sp, #116	; 0x74
 80116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116bc:	ab03      	add	r3, sp, #12
 80116be:	9300      	str	r3, [sp, #0]
 80116c0:	462a      	mov	r2, r5
 80116c2:	4b06      	ldr	r3, [pc, #24]	; (80116dc <_svfiprintf_r+0x1f8>)
 80116c4:	a904      	add	r1, sp, #16
 80116c6:	4638      	mov	r0, r7
 80116c8:	f000 f9d4 	bl	8011a74 <_printf_i>
 80116cc:	e7eb      	b.n	80116a6 <_svfiprintf_r+0x1c2>
 80116ce:	bf00      	nop
 80116d0:	08014504 	.word	0x08014504
 80116d4:	0801450e 	.word	0x0801450e
 80116d8:	00000000 	.word	0x00000000
 80116dc:	0801142d 	.word	0x0801142d
 80116e0:	0801450a 	.word	0x0801450a

080116e4 <__sfputc_r>:
 80116e4:	6893      	ldr	r3, [r2, #8]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	b410      	push	{r4}
 80116ec:	6093      	str	r3, [r2, #8]
 80116ee:	da08      	bge.n	8011702 <__sfputc_r+0x1e>
 80116f0:	6994      	ldr	r4, [r2, #24]
 80116f2:	42a3      	cmp	r3, r4
 80116f4:	db01      	blt.n	80116fa <__sfputc_r+0x16>
 80116f6:	290a      	cmp	r1, #10
 80116f8:	d103      	bne.n	8011702 <__sfputc_r+0x1e>
 80116fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80116fe:	f000 baef 	b.w	8011ce0 <__swbuf_r>
 8011702:	6813      	ldr	r3, [r2, #0]
 8011704:	1c58      	adds	r0, r3, #1
 8011706:	6010      	str	r0, [r2, #0]
 8011708:	7019      	strb	r1, [r3, #0]
 801170a:	4608      	mov	r0, r1
 801170c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011710:	4770      	bx	lr

08011712 <__sfputs_r>:
 8011712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011714:	4606      	mov	r6, r0
 8011716:	460f      	mov	r7, r1
 8011718:	4614      	mov	r4, r2
 801171a:	18d5      	adds	r5, r2, r3
 801171c:	42ac      	cmp	r4, r5
 801171e:	d101      	bne.n	8011724 <__sfputs_r+0x12>
 8011720:	2000      	movs	r0, #0
 8011722:	e007      	b.n	8011734 <__sfputs_r+0x22>
 8011724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011728:	463a      	mov	r2, r7
 801172a:	4630      	mov	r0, r6
 801172c:	f7ff ffda 	bl	80116e4 <__sfputc_r>
 8011730:	1c43      	adds	r3, r0, #1
 8011732:	d1f3      	bne.n	801171c <__sfputs_r+0xa>
 8011734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011738 <_vfiprintf_r>:
 8011738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	460d      	mov	r5, r1
 801173e:	b09d      	sub	sp, #116	; 0x74
 8011740:	4614      	mov	r4, r2
 8011742:	4698      	mov	r8, r3
 8011744:	4606      	mov	r6, r0
 8011746:	b118      	cbz	r0, 8011750 <_vfiprintf_r+0x18>
 8011748:	6983      	ldr	r3, [r0, #24]
 801174a:	b90b      	cbnz	r3, 8011750 <_vfiprintf_r+0x18>
 801174c:	f000 fcaa 	bl	80120a4 <__sinit>
 8011750:	4b89      	ldr	r3, [pc, #548]	; (8011978 <_vfiprintf_r+0x240>)
 8011752:	429d      	cmp	r5, r3
 8011754:	d11b      	bne.n	801178e <_vfiprintf_r+0x56>
 8011756:	6875      	ldr	r5, [r6, #4]
 8011758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801175a:	07d9      	lsls	r1, r3, #31
 801175c:	d405      	bmi.n	801176a <_vfiprintf_r+0x32>
 801175e:	89ab      	ldrh	r3, [r5, #12]
 8011760:	059a      	lsls	r2, r3, #22
 8011762:	d402      	bmi.n	801176a <_vfiprintf_r+0x32>
 8011764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011766:	f000 fd3b 	bl	80121e0 <__retarget_lock_acquire_recursive>
 801176a:	89ab      	ldrh	r3, [r5, #12]
 801176c:	071b      	lsls	r3, r3, #28
 801176e:	d501      	bpl.n	8011774 <_vfiprintf_r+0x3c>
 8011770:	692b      	ldr	r3, [r5, #16]
 8011772:	b9eb      	cbnz	r3, 80117b0 <_vfiprintf_r+0x78>
 8011774:	4629      	mov	r1, r5
 8011776:	4630      	mov	r0, r6
 8011778:	f000 fb04 	bl	8011d84 <__swsetup_r>
 801177c:	b1c0      	cbz	r0, 80117b0 <_vfiprintf_r+0x78>
 801177e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011780:	07dc      	lsls	r4, r3, #31
 8011782:	d50e      	bpl.n	80117a2 <_vfiprintf_r+0x6a>
 8011784:	f04f 30ff 	mov.w	r0, #4294967295
 8011788:	b01d      	add	sp, #116	; 0x74
 801178a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801178e:	4b7b      	ldr	r3, [pc, #492]	; (801197c <_vfiprintf_r+0x244>)
 8011790:	429d      	cmp	r5, r3
 8011792:	d101      	bne.n	8011798 <_vfiprintf_r+0x60>
 8011794:	68b5      	ldr	r5, [r6, #8]
 8011796:	e7df      	b.n	8011758 <_vfiprintf_r+0x20>
 8011798:	4b79      	ldr	r3, [pc, #484]	; (8011980 <_vfiprintf_r+0x248>)
 801179a:	429d      	cmp	r5, r3
 801179c:	bf08      	it	eq
 801179e:	68f5      	ldreq	r5, [r6, #12]
 80117a0:	e7da      	b.n	8011758 <_vfiprintf_r+0x20>
 80117a2:	89ab      	ldrh	r3, [r5, #12]
 80117a4:	0598      	lsls	r0, r3, #22
 80117a6:	d4ed      	bmi.n	8011784 <_vfiprintf_r+0x4c>
 80117a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80117aa:	f000 fd1a 	bl	80121e2 <__retarget_lock_release_recursive>
 80117ae:	e7e9      	b.n	8011784 <_vfiprintf_r+0x4c>
 80117b0:	2300      	movs	r3, #0
 80117b2:	9309      	str	r3, [sp, #36]	; 0x24
 80117b4:	2320      	movs	r3, #32
 80117b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80117be:	2330      	movs	r3, #48	; 0x30
 80117c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011984 <_vfiprintf_r+0x24c>
 80117c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117c8:	f04f 0901 	mov.w	r9, #1
 80117cc:	4623      	mov	r3, r4
 80117ce:	469a      	mov	sl, r3
 80117d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117d4:	b10a      	cbz	r2, 80117da <_vfiprintf_r+0xa2>
 80117d6:	2a25      	cmp	r2, #37	; 0x25
 80117d8:	d1f9      	bne.n	80117ce <_vfiprintf_r+0x96>
 80117da:	ebba 0b04 	subs.w	fp, sl, r4
 80117de:	d00b      	beq.n	80117f8 <_vfiprintf_r+0xc0>
 80117e0:	465b      	mov	r3, fp
 80117e2:	4622      	mov	r2, r4
 80117e4:	4629      	mov	r1, r5
 80117e6:	4630      	mov	r0, r6
 80117e8:	f7ff ff93 	bl	8011712 <__sfputs_r>
 80117ec:	3001      	adds	r0, #1
 80117ee:	f000 80aa 	beq.w	8011946 <_vfiprintf_r+0x20e>
 80117f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117f4:	445a      	add	r2, fp
 80117f6:	9209      	str	r2, [sp, #36]	; 0x24
 80117f8:	f89a 3000 	ldrb.w	r3, [sl]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	f000 80a2 	beq.w	8011946 <_vfiprintf_r+0x20e>
 8011802:	2300      	movs	r3, #0
 8011804:	f04f 32ff 	mov.w	r2, #4294967295
 8011808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801180c:	f10a 0a01 	add.w	sl, sl, #1
 8011810:	9304      	str	r3, [sp, #16]
 8011812:	9307      	str	r3, [sp, #28]
 8011814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011818:	931a      	str	r3, [sp, #104]	; 0x68
 801181a:	4654      	mov	r4, sl
 801181c:	2205      	movs	r2, #5
 801181e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011822:	4858      	ldr	r0, [pc, #352]	; (8011984 <_vfiprintf_r+0x24c>)
 8011824:	f7ee fcdc 	bl	80001e0 <memchr>
 8011828:	9a04      	ldr	r2, [sp, #16]
 801182a:	b9d8      	cbnz	r0, 8011864 <_vfiprintf_r+0x12c>
 801182c:	06d1      	lsls	r1, r2, #27
 801182e:	bf44      	itt	mi
 8011830:	2320      	movmi	r3, #32
 8011832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011836:	0713      	lsls	r3, r2, #28
 8011838:	bf44      	itt	mi
 801183a:	232b      	movmi	r3, #43	; 0x2b
 801183c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011840:	f89a 3000 	ldrb.w	r3, [sl]
 8011844:	2b2a      	cmp	r3, #42	; 0x2a
 8011846:	d015      	beq.n	8011874 <_vfiprintf_r+0x13c>
 8011848:	9a07      	ldr	r2, [sp, #28]
 801184a:	4654      	mov	r4, sl
 801184c:	2000      	movs	r0, #0
 801184e:	f04f 0c0a 	mov.w	ip, #10
 8011852:	4621      	mov	r1, r4
 8011854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011858:	3b30      	subs	r3, #48	; 0x30
 801185a:	2b09      	cmp	r3, #9
 801185c:	d94e      	bls.n	80118fc <_vfiprintf_r+0x1c4>
 801185e:	b1b0      	cbz	r0, 801188e <_vfiprintf_r+0x156>
 8011860:	9207      	str	r2, [sp, #28]
 8011862:	e014      	b.n	801188e <_vfiprintf_r+0x156>
 8011864:	eba0 0308 	sub.w	r3, r0, r8
 8011868:	fa09 f303 	lsl.w	r3, r9, r3
 801186c:	4313      	orrs	r3, r2
 801186e:	9304      	str	r3, [sp, #16]
 8011870:	46a2      	mov	sl, r4
 8011872:	e7d2      	b.n	801181a <_vfiprintf_r+0xe2>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	1d19      	adds	r1, r3, #4
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	9103      	str	r1, [sp, #12]
 801187c:	2b00      	cmp	r3, #0
 801187e:	bfbb      	ittet	lt
 8011880:	425b      	neglt	r3, r3
 8011882:	f042 0202 	orrlt.w	r2, r2, #2
 8011886:	9307      	strge	r3, [sp, #28]
 8011888:	9307      	strlt	r3, [sp, #28]
 801188a:	bfb8      	it	lt
 801188c:	9204      	strlt	r2, [sp, #16]
 801188e:	7823      	ldrb	r3, [r4, #0]
 8011890:	2b2e      	cmp	r3, #46	; 0x2e
 8011892:	d10c      	bne.n	80118ae <_vfiprintf_r+0x176>
 8011894:	7863      	ldrb	r3, [r4, #1]
 8011896:	2b2a      	cmp	r3, #42	; 0x2a
 8011898:	d135      	bne.n	8011906 <_vfiprintf_r+0x1ce>
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	1d1a      	adds	r2, r3, #4
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	9203      	str	r2, [sp, #12]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	bfb8      	it	lt
 80118a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80118aa:	3402      	adds	r4, #2
 80118ac:	9305      	str	r3, [sp, #20]
 80118ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011994 <_vfiprintf_r+0x25c>
 80118b2:	7821      	ldrb	r1, [r4, #0]
 80118b4:	2203      	movs	r2, #3
 80118b6:	4650      	mov	r0, sl
 80118b8:	f7ee fc92 	bl	80001e0 <memchr>
 80118bc:	b140      	cbz	r0, 80118d0 <_vfiprintf_r+0x198>
 80118be:	2340      	movs	r3, #64	; 0x40
 80118c0:	eba0 000a 	sub.w	r0, r0, sl
 80118c4:	fa03 f000 	lsl.w	r0, r3, r0
 80118c8:	9b04      	ldr	r3, [sp, #16]
 80118ca:	4303      	orrs	r3, r0
 80118cc:	3401      	adds	r4, #1
 80118ce:	9304      	str	r3, [sp, #16]
 80118d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118d4:	482c      	ldr	r0, [pc, #176]	; (8011988 <_vfiprintf_r+0x250>)
 80118d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118da:	2206      	movs	r2, #6
 80118dc:	f7ee fc80 	bl	80001e0 <memchr>
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d03f      	beq.n	8011964 <_vfiprintf_r+0x22c>
 80118e4:	4b29      	ldr	r3, [pc, #164]	; (801198c <_vfiprintf_r+0x254>)
 80118e6:	bb1b      	cbnz	r3, 8011930 <_vfiprintf_r+0x1f8>
 80118e8:	9b03      	ldr	r3, [sp, #12]
 80118ea:	3307      	adds	r3, #7
 80118ec:	f023 0307 	bic.w	r3, r3, #7
 80118f0:	3308      	adds	r3, #8
 80118f2:	9303      	str	r3, [sp, #12]
 80118f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f6:	443b      	add	r3, r7
 80118f8:	9309      	str	r3, [sp, #36]	; 0x24
 80118fa:	e767      	b.n	80117cc <_vfiprintf_r+0x94>
 80118fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8011900:	460c      	mov	r4, r1
 8011902:	2001      	movs	r0, #1
 8011904:	e7a5      	b.n	8011852 <_vfiprintf_r+0x11a>
 8011906:	2300      	movs	r3, #0
 8011908:	3401      	adds	r4, #1
 801190a:	9305      	str	r3, [sp, #20]
 801190c:	4619      	mov	r1, r3
 801190e:	f04f 0c0a 	mov.w	ip, #10
 8011912:	4620      	mov	r0, r4
 8011914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011918:	3a30      	subs	r2, #48	; 0x30
 801191a:	2a09      	cmp	r2, #9
 801191c:	d903      	bls.n	8011926 <_vfiprintf_r+0x1ee>
 801191e:	2b00      	cmp	r3, #0
 8011920:	d0c5      	beq.n	80118ae <_vfiprintf_r+0x176>
 8011922:	9105      	str	r1, [sp, #20]
 8011924:	e7c3      	b.n	80118ae <_vfiprintf_r+0x176>
 8011926:	fb0c 2101 	mla	r1, ip, r1, r2
 801192a:	4604      	mov	r4, r0
 801192c:	2301      	movs	r3, #1
 801192e:	e7f0      	b.n	8011912 <_vfiprintf_r+0x1da>
 8011930:	ab03      	add	r3, sp, #12
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	462a      	mov	r2, r5
 8011936:	4b16      	ldr	r3, [pc, #88]	; (8011990 <_vfiprintf_r+0x258>)
 8011938:	a904      	add	r1, sp, #16
 801193a:	4630      	mov	r0, r6
 801193c:	f3af 8000 	nop.w
 8011940:	4607      	mov	r7, r0
 8011942:	1c78      	adds	r0, r7, #1
 8011944:	d1d6      	bne.n	80118f4 <_vfiprintf_r+0x1bc>
 8011946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011948:	07d9      	lsls	r1, r3, #31
 801194a:	d405      	bmi.n	8011958 <_vfiprintf_r+0x220>
 801194c:	89ab      	ldrh	r3, [r5, #12]
 801194e:	059a      	lsls	r2, r3, #22
 8011950:	d402      	bmi.n	8011958 <_vfiprintf_r+0x220>
 8011952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011954:	f000 fc45 	bl	80121e2 <__retarget_lock_release_recursive>
 8011958:	89ab      	ldrh	r3, [r5, #12]
 801195a:	065b      	lsls	r3, r3, #25
 801195c:	f53f af12 	bmi.w	8011784 <_vfiprintf_r+0x4c>
 8011960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011962:	e711      	b.n	8011788 <_vfiprintf_r+0x50>
 8011964:	ab03      	add	r3, sp, #12
 8011966:	9300      	str	r3, [sp, #0]
 8011968:	462a      	mov	r2, r5
 801196a:	4b09      	ldr	r3, [pc, #36]	; (8011990 <_vfiprintf_r+0x258>)
 801196c:	a904      	add	r1, sp, #16
 801196e:	4630      	mov	r0, r6
 8011970:	f000 f880 	bl	8011a74 <_printf_i>
 8011974:	e7e4      	b.n	8011940 <_vfiprintf_r+0x208>
 8011976:	bf00      	nop
 8011978:	08014558 	.word	0x08014558
 801197c:	08014578 	.word	0x08014578
 8011980:	08014538 	.word	0x08014538
 8011984:	08014504 	.word	0x08014504
 8011988:	0801450e 	.word	0x0801450e
 801198c:	00000000 	.word	0x00000000
 8011990:	08011713 	.word	0x08011713
 8011994:	0801450a 	.word	0x0801450a

08011998 <_printf_common>:
 8011998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801199c:	4616      	mov	r6, r2
 801199e:	4699      	mov	r9, r3
 80119a0:	688a      	ldr	r2, [r1, #8]
 80119a2:	690b      	ldr	r3, [r1, #16]
 80119a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80119a8:	4293      	cmp	r3, r2
 80119aa:	bfb8      	it	lt
 80119ac:	4613      	movlt	r3, r2
 80119ae:	6033      	str	r3, [r6, #0]
 80119b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80119b4:	4607      	mov	r7, r0
 80119b6:	460c      	mov	r4, r1
 80119b8:	b10a      	cbz	r2, 80119be <_printf_common+0x26>
 80119ba:	3301      	adds	r3, #1
 80119bc:	6033      	str	r3, [r6, #0]
 80119be:	6823      	ldr	r3, [r4, #0]
 80119c0:	0699      	lsls	r1, r3, #26
 80119c2:	bf42      	ittt	mi
 80119c4:	6833      	ldrmi	r3, [r6, #0]
 80119c6:	3302      	addmi	r3, #2
 80119c8:	6033      	strmi	r3, [r6, #0]
 80119ca:	6825      	ldr	r5, [r4, #0]
 80119cc:	f015 0506 	ands.w	r5, r5, #6
 80119d0:	d106      	bne.n	80119e0 <_printf_common+0x48>
 80119d2:	f104 0a19 	add.w	sl, r4, #25
 80119d6:	68e3      	ldr	r3, [r4, #12]
 80119d8:	6832      	ldr	r2, [r6, #0]
 80119da:	1a9b      	subs	r3, r3, r2
 80119dc:	42ab      	cmp	r3, r5
 80119de:	dc26      	bgt.n	8011a2e <_printf_common+0x96>
 80119e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80119e4:	1e13      	subs	r3, r2, #0
 80119e6:	6822      	ldr	r2, [r4, #0]
 80119e8:	bf18      	it	ne
 80119ea:	2301      	movne	r3, #1
 80119ec:	0692      	lsls	r2, r2, #26
 80119ee:	d42b      	bmi.n	8011a48 <_printf_common+0xb0>
 80119f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80119f4:	4649      	mov	r1, r9
 80119f6:	4638      	mov	r0, r7
 80119f8:	47c0      	blx	r8
 80119fa:	3001      	adds	r0, #1
 80119fc:	d01e      	beq.n	8011a3c <_printf_common+0xa4>
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	68e5      	ldr	r5, [r4, #12]
 8011a02:	6832      	ldr	r2, [r6, #0]
 8011a04:	f003 0306 	and.w	r3, r3, #6
 8011a08:	2b04      	cmp	r3, #4
 8011a0a:	bf08      	it	eq
 8011a0c:	1aad      	subeq	r5, r5, r2
 8011a0e:	68a3      	ldr	r3, [r4, #8]
 8011a10:	6922      	ldr	r2, [r4, #16]
 8011a12:	bf0c      	ite	eq
 8011a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a18:	2500      	movne	r5, #0
 8011a1a:	4293      	cmp	r3, r2
 8011a1c:	bfc4      	itt	gt
 8011a1e:	1a9b      	subgt	r3, r3, r2
 8011a20:	18ed      	addgt	r5, r5, r3
 8011a22:	2600      	movs	r6, #0
 8011a24:	341a      	adds	r4, #26
 8011a26:	42b5      	cmp	r5, r6
 8011a28:	d11a      	bne.n	8011a60 <_printf_common+0xc8>
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	e008      	b.n	8011a40 <_printf_common+0xa8>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	4652      	mov	r2, sl
 8011a32:	4649      	mov	r1, r9
 8011a34:	4638      	mov	r0, r7
 8011a36:	47c0      	blx	r8
 8011a38:	3001      	adds	r0, #1
 8011a3a:	d103      	bne.n	8011a44 <_printf_common+0xac>
 8011a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a44:	3501      	adds	r5, #1
 8011a46:	e7c6      	b.n	80119d6 <_printf_common+0x3e>
 8011a48:	18e1      	adds	r1, r4, r3
 8011a4a:	1c5a      	adds	r2, r3, #1
 8011a4c:	2030      	movs	r0, #48	; 0x30
 8011a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a52:	4422      	add	r2, r4
 8011a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a5c:	3302      	adds	r3, #2
 8011a5e:	e7c7      	b.n	80119f0 <_printf_common+0x58>
 8011a60:	2301      	movs	r3, #1
 8011a62:	4622      	mov	r2, r4
 8011a64:	4649      	mov	r1, r9
 8011a66:	4638      	mov	r0, r7
 8011a68:	47c0      	blx	r8
 8011a6a:	3001      	adds	r0, #1
 8011a6c:	d0e6      	beq.n	8011a3c <_printf_common+0xa4>
 8011a6e:	3601      	adds	r6, #1
 8011a70:	e7d9      	b.n	8011a26 <_printf_common+0x8e>
	...

08011a74 <_printf_i>:
 8011a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011a78:	460c      	mov	r4, r1
 8011a7a:	4691      	mov	r9, r2
 8011a7c:	7e27      	ldrb	r7, [r4, #24]
 8011a7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011a80:	2f78      	cmp	r7, #120	; 0x78
 8011a82:	4680      	mov	r8, r0
 8011a84:	469a      	mov	sl, r3
 8011a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011a8a:	d807      	bhi.n	8011a9c <_printf_i+0x28>
 8011a8c:	2f62      	cmp	r7, #98	; 0x62
 8011a8e:	d80a      	bhi.n	8011aa6 <_printf_i+0x32>
 8011a90:	2f00      	cmp	r7, #0
 8011a92:	f000 80d8 	beq.w	8011c46 <_printf_i+0x1d2>
 8011a96:	2f58      	cmp	r7, #88	; 0x58
 8011a98:	f000 80a3 	beq.w	8011be2 <_printf_i+0x16e>
 8011a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011aa4:	e03a      	b.n	8011b1c <_printf_i+0xa8>
 8011aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011aaa:	2b15      	cmp	r3, #21
 8011aac:	d8f6      	bhi.n	8011a9c <_printf_i+0x28>
 8011aae:	a001      	add	r0, pc, #4	; (adr r0, 8011ab4 <_printf_i+0x40>)
 8011ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8011ab4:	08011b0d 	.word	0x08011b0d
 8011ab8:	08011b21 	.word	0x08011b21
 8011abc:	08011a9d 	.word	0x08011a9d
 8011ac0:	08011a9d 	.word	0x08011a9d
 8011ac4:	08011a9d 	.word	0x08011a9d
 8011ac8:	08011a9d 	.word	0x08011a9d
 8011acc:	08011b21 	.word	0x08011b21
 8011ad0:	08011a9d 	.word	0x08011a9d
 8011ad4:	08011a9d 	.word	0x08011a9d
 8011ad8:	08011a9d 	.word	0x08011a9d
 8011adc:	08011a9d 	.word	0x08011a9d
 8011ae0:	08011c2d 	.word	0x08011c2d
 8011ae4:	08011b51 	.word	0x08011b51
 8011ae8:	08011c0f 	.word	0x08011c0f
 8011aec:	08011a9d 	.word	0x08011a9d
 8011af0:	08011a9d 	.word	0x08011a9d
 8011af4:	08011c4f 	.word	0x08011c4f
 8011af8:	08011a9d 	.word	0x08011a9d
 8011afc:	08011b51 	.word	0x08011b51
 8011b00:	08011a9d 	.word	0x08011a9d
 8011b04:	08011a9d 	.word	0x08011a9d
 8011b08:	08011c17 	.word	0x08011c17
 8011b0c:	680b      	ldr	r3, [r1, #0]
 8011b0e:	1d1a      	adds	r2, r3, #4
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	600a      	str	r2, [r1, #0]
 8011b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e0a3      	b.n	8011c68 <_printf_i+0x1f4>
 8011b20:	6825      	ldr	r5, [r4, #0]
 8011b22:	6808      	ldr	r0, [r1, #0]
 8011b24:	062e      	lsls	r6, r5, #24
 8011b26:	f100 0304 	add.w	r3, r0, #4
 8011b2a:	d50a      	bpl.n	8011b42 <_printf_i+0xce>
 8011b2c:	6805      	ldr	r5, [r0, #0]
 8011b2e:	600b      	str	r3, [r1, #0]
 8011b30:	2d00      	cmp	r5, #0
 8011b32:	da03      	bge.n	8011b3c <_printf_i+0xc8>
 8011b34:	232d      	movs	r3, #45	; 0x2d
 8011b36:	426d      	negs	r5, r5
 8011b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011b3c:	485e      	ldr	r0, [pc, #376]	; (8011cb8 <_printf_i+0x244>)
 8011b3e:	230a      	movs	r3, #10
 8011b40:	e019      	b.n	8011b76 <_printf_i+0x102>
 8011b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011b46:	6805      	ldr	r5, [r0, #0]
 8011b48:	600b      	str	r3, [r1, #0]
 8011b4a:	bf18      	it	ne
 8011b4c:	b22d      	sxthne	r5, r5
 8011b4e:	e7ef      	b.n	8011b30 <_printf_i+0xbc>
 8011b50:	680b      	ldr	r3, [r1, #0]
 8011b52:	6825      	ldr	r5, [r4, #0]
 8011b54:	1d18      	adds	r0, r3, #4
 8011b56:	6008      	str	r0, [r1, #0]
 8011b58:	0628      	lsls	r0, r5, #24
 8011b5a:	d501      	bpl.n	8011b60 <_printf_i+0xec>
 8011b5c:	681d      	ldr	r5, [r3, #0]
 8011b5e:	e002      	b.n	8011b66 <_printf_i+0xf2>
 8011b60:	0669      	lsls	r1, r5, #25
 8011b62:	d5fb      	bpl.n	8011b5c <_printf_i+0xe8>
 8011b64:	881d      	ldrh	r5, [r3, #0]
 8011b66:	4854      	ldr	r0, [pc, #336]	; (8011cb8 <_printf_i+0x244>)
 8011b68:	2f6f      	cmp	r7, #111	; 0x6f
 8011b6a:	bf0c      	ite	eq
 8011b6c:	2308      	moveq	r3, #8
 8011b6e:	230a      	movne	r3, #10
 8011b70:	2100      	movs	r1, #0
 8011b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b76:	6866      	ldr	r6, [r4, #4]
 8011b78:	60a6      	str	r6, [r4, #8]
 8011b7a:	2e00      	cmp	r6, #0
 8011b7c:	bfa2      	ittt	ge
 8011b7e:	6821      	ldrge	r1, [r4, #0]
 8011b80:	f021 0104 	bicge.w	r1, r1, #4
 8011b84:	6021      	strge	r1, [r4, #0]
 8011b86:	b90d      	cbnz	r5, 8011b8c <_printf_i+0x118>
 8011b88:	2e00      	cmp	r6, #0
 8011b8a:	d04d      	beq.n	8011c28 <_printf_i+0x1b4>
 8011b8c:	4616      	mov	r6, r2
 8011b8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011b92:	fb03 5711 	mls	r7, r3, r1, r5
 8011b96:	5dc7      	ldrb	r7, [r0, r7]
 8011b98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011b9c:	462f      	mov	r7, r5
 8011b9e:	42bb      	cmp	r3, r7
 8011ba0:	460d      	mov	r5, r1
 8011ba2:	d9f4      	bls.n	8011b8e <_printf_i+0x11a>
 8011ba4:	2b08      	cmp	r3, #8
 8011ba6:	d10b      	bne.n	8011bc0 <_printf_i+0x14c>
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	07df      	lsls	r7, r3, #31
 8011bac:	d508      	bpl.n	8011bc0 <_printf_i+0x14c>
 8011bae:	6923      	ldr	r3, [r4, #16]
 8011bb0:	6861      	ldr	r1, [r4, #4]
 8011bb2:	4299      	cmp	r1, r3
 8011bb4:	bfde      	ittt	le
 8011bb6:	2330      	movle	r3, #48	; 0x30
 8011bb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011bbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011bc0:	1b92      	subs	r2, r2, r6
 8011bc2:	6122      	str	r2, [r4, #16]
 8011bc4:	f8cd a000 	str.w	sl, [sp]
 8011bc8:	464b      	mov	r3, r9
 8011bca:	aa03      	add	r2, sp, #12
 8011bcc:	4621      	mov	r1, r4
 8011bce:	4640      	mov	r0, r8
 8011bd0:	f7ff fee2 	bl	8011998 <_printf_common>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	d14c      	bne.n	8011c72 <_printf_i+0x1fe>
 8011bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bdc:	b004      	add	sp, #16
 8011bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011be2:	4835      	ldr	r0, [pc, #212]	; (8011cb8 <_printf_i+0x244>)
 8011be4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011be8:	6823      	ldr	r3, [r4, #0]
 8011bea:	680e      	ldr	r6, [r1, #0]
 8011bec:	061f      	lsls	r7, r3, #24
 8011bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8011bf2:	600e      	str	r6, [r1, #0]
 8011bf4:	d514      	bpl.n	8011c20 <_printf_i+0x1ac>
 8011bf6:	07d9      	lsls	r1, r3, #31
 8011bf8:	bf44      	itt	mi
 8011bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8011bfe:	6023      	strmi	r3, [r4, #0]
 8011c00:	b91d      	cbnz	r5, 8011c0a <_printf_i+0x196>
 8011c02:	6823      	ldr	r3, [r4, #0]
 8011c04:	f023 0320 	bic.w	r3, r3, #32
 8011c08:	6023      	str	r3, [r4, #0]
 8011c0a:	2310      	movs	r3, #16
 8011c0c:	e7b0      	b.n	8011b70 <_printf_i+0xfc>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	f043 0320 	orr.w	r3, r3, #32
 8011c14:	6023      	str	r3, [r4, #0]
 8011c16:	2378      	movs	r3, #120	; 0x78
 8011c18:	4828      	ldr	r0, [pc, #160]	; (8011cbc <_printf_i+0x248>)
 8011c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c1e:	e7e3      	b.n	8011be8 <_printf_i+0x174>
 8011c20:	065e      	lsls	r6, r3, #25
 8011c22:	bf48      	it	mi
 8011c24:	b2ad      	uxthmi	r5, r5
 8011c26:	e7e6      	b.n	8011bf6 <_printf_i+0x182>
 8011c28:	4616      	mov	r6, r2
 8011c2a:	e7bb      	b.n	8011ba4 <_printf_i+0x130>
 8011c2c:	680b      	ldr	r3, [r1, #0]
 8011c2e:	6826      	ldr	r6, [r4, #0]
 8011c30:	6960      	ldr	r0, [r4, #20]
 8011c32:	1d1d      	adds	r5, r3, #4
 8011c34:	600d      	str	r5, [r1, #0]
 8011c36:	0635      	lsls	r5, r6, #24
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	d501      	bpl.n	8011c40 <_printf_i+0x1cc>
 8011c3c:	6018      	str	r0, [r3, #0]
 8011c3e:	e002      	b.n	8011c46 <_printf_i+0x1d2>
 8011c40:	0671      	lsls	r1, r6, #25
 8011c42:	d5fb      	bpl.n	8011c3c <_printf_i+0x1c8>
 8011c44:	8018      	strh	r0, [r3, #0]
 8011c46:	2300      	movs	r3, #0
 8011c48:	6123      	str	r3, [r4, #16]
 8011c4a:	4616      	mov	r6, r2
 8011c4c:	e7ba      	b.n	8011bc4 <_printf_i+0x150>
 8011c4e:	680b      	ldr	r3, [r1, #0]
 8011c50:	1d1a      	adds	r2, r3, #4
 8011c52:	600a      	str	r2, [r1, #0]
 8011c54:	681e      	ldr	r6, [r3, #0]
 8011c56:	6862      	ldr	r2, [r4, #4]
 8011c58:	2100      	movs	r1, #0
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	f7ee fac0 	bl	80001e0 <memchr>
 8011c60:	b108      	cbz	r0, 8011c66 <_printf_i+0x1f2>
 8011c62:	1b80      	subs	r0, r0, r6
 8011c64:	6060      	str	r0, [r4, #4]
 8011c66:	6863      	ldr	r3, [r4, #4]
 8011c68:	6123      	str	r3, [r4, #16]
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c70:	e7a8      	b.n	8011bc4 <_printf_i+0x150>
 8011c72:	6923      	ldr	r3, [r4, #16]
 8011c74:	4632      	mov	r2, r6
 8011c76:	4649      	mov	r1, r9
 8011c78:	4640      	mov	r0, r8
 8011c7a:	47d0      	blx	sl
 8011c7c:	3001      	adds	r0, #1
 8011c7e:	d0ab      	beq.n	8011bd8 <_printf_i+0x164>
 8011c80:	6823      	ldr	r3, [r4, #0]
 8011c82:	079b      	lsls	r3, r3, #30
 8011c84:	d413      	bmi.n	8011cae <_printf_i+0x23a>
 8011c86:	68e0      	ldr	r0, [r4, #12]
 8011c88:	9b03      	ldr	r3, [sp, #12]
 8011c8a:	4298      	cmp	r0, r3
 8011c8c:	bfb8      	it	lt
 8011c8e:	4618      	movlt	r0, r3
 8011c90:	e7a4      	b.n	8011bdc <_printf_i+0x168>
 8011c92:	2301      	movs	r3, #1
 8011c94:	4632      	mov	r2, r6
 8011c96:	4649      	mov	r1, r9
 8011c98:	4640      	mov	r0, r8
 8011c9a:	47d0      	blx	sl
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	d09b      	beq.n	8011bd8 <_printf_i+0x164>
 8011ca0:	3501      	adds	r5, #1
 8011ca2:	68e3      	ldr	r3, [r4, #12]
 8011ca4:	9903      	ldr	r1, [sp, #12]
 8011ca6:	1a5b      	subs	r3, r3, r1
 8011ca8:	42ab      	cmp	r3, r5
 8011caa:	dcf2      	bgt.n	8011c92 <_printf_i+0x21e>
 8011cac:	e7eb      	b.n	8011c86 <_printf_i+0x212>
 8011cae:	2500      	movs	r5, #0
 8011cb0:	f104 0619 	add.w	r6, r4, #25
 8011cb4:	e7f5      	b.n	8011ca2 <_printf_i+0x22e>
 8011cb6:	bf00      	nop
 8011cb8:	08014515 	.word	0x08014515
 8011cbc:	08014526 	.word	0x08014526

08011cc0 <_sbrk_r>:
 8011cc0:	b538      	push	{r3, r4, r5, lr}
 8011cc2:	4d06      	ldr	r5, [pc, #24]	; (8011cdc <_sbrk_r+0x1c>)
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	4604      	mov	r4, r0
 8011cc8:	4608      	mov	r0, r1
 8011cca:	602b      	str	r3, [r5, #0]
 8011ccc:	f7f0 fa9e 	bl	800220c <_sbrk>
 8011cd0:	1c43      	adds	r3, r0, #1
 8011cd2:	d102      	bne.n	8011cda <_sbrk_r+0x1a>
 8011cd4:	682b      	ldr	r3, [r5, #0]
 8011cd6:	b103      	cbz	r3, 8011cda <_sbrk_r+0x1a>
 8011cd8:	6023      	str	r3, [r4, #0]
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	20004c0c 	.word	0x20004c0c

08011ce0 <__swbuf_r>:
 8011ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce2:	460e      	mov	r6, r1
 8011ce4:	4614      	mov	r4, r2
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	b118      	cbz	r0, 8011cf2 <__swbuf_r+0x12>
 8011cea:	6983      	ldr	r3, [r0, #24]
 8011cec:	b90b      	cbnz	r3, 8011cf2 <__swbuf_r+0x12>
 8011cee:	f000 f9d9 	bl	80120a4 <__sinit>
 8011cf2:	4b21      	ldr	r3, [pc, #132]	; (8011d78 <__swbuf_r+0x98>)
 8011cf4:	429c      	cmp	r4, r3
 8011cf6:	d12b      	bne.n	8011d50 <__swbuf_r+0x70>
 8011cf8:	686c      	ldr	r4, [r5, #4]
 8011cfa:	69a3      	ldr	r3, [r4, #24]
 8011cfc:	60a3      	str	r3, [r4, #8]
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	071a      	lsls	r2, r3, #28
 8011d02:	d52f      	bpl.n	8011d64 <__swbuf_r+0x84>
 8011d04:	6923      	ldr	r3, [r4, #16]
 8011d06:	b36b      	cbz	r3, 8011d64 <__swbuf_r+0x84>
 8011d08:	6923      	ldr	r3, [r4, #16]
 8011d0a:	6820      	ldr	r0, [r4, #0]
 8011d0c:	1ac0      	subs	r0, r0, r3
 8011d0e:	6963      	ldr	r3, [r4, #20]
 8011d10:	b2f6      	uxtb	r6, r6
 8011d12:	4283      	cmp	r3, r0
 8011d14:	4637      	mov	r7, r6
 8011d16:	dc04      	bgt.n	8011d22 <__swbuf_r+0x42>
 8011d18:	4621      	mov	r1, r4
 8011d1a:	4628      	mov	r0, r5
 8011d1c:	f000 f92e 	bl	8011f7c <_fflush_r>
 8011d20:	bb30      	cbnz	r0, 8011d70 <__swbuf_r+0x90>
 8011d22:	68a3      	ldr	r3, [r4, #8]
 8011d24:	3b01      	subs	r3, #1
 8011d26:	60a3      	str	r3, [r4, #8]
 8011d28:	6823      	ldr	r3, [r4, #0]
 8011d2a:	1c5a      	adds	r2, r3, #1
 8011d2c:	6022      	str	r2, [r4, #0]
 8011d2e:	701e      	strb	r6, [r3, #0]
 8011d30:	6963      	ldr	r3, [r4, #20]
 8011d32:	3001      	adds	r0, #1
 8011d34:	4283      	cmp	r3, r0
 8011d36:	d004      	beq.n	8011d42 <__swbuf_r+0x62>
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	07db      	lsls	r3, r3, #31
 8011d3c:	d506      	bpl.n	8011d4c <__swbuf_r+0x6c>
 8011d3e:	2e0a      	cmp	r6, #10
 8011d40:	d104      	bne.n	8011d4c <__swbuf_r+0x6c>
 8011d42:	4621      	mov	r1, r4
 8011d44:	4628      	mov	r0, r5
 8011d46:	f000 f919 	bl	8011f7c <_fflush_r>
 8011d4a:	b988      	cbnz	r0, 8011d70 <__swbuf_r+0x90>
 8011d4c:	4638      	mov	r0, r7
 8011d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d50:	4b0a      	ldr	r3, [pc, #40]	; (8011d7c <__swbuf_r+0x9c>)
 8011d52:	429c      	cmp	r4, r3
 8011d54:	d101      	bne.n	8011d5a <__swbuf_r+0x7a>
 8011d56:	68ac      	ldr	r4, [r5, #8]
 8011d58:	e7cf      	b.n	8011cfa <__swbuf_r+0x1a>
 8011d5a:	4b09      	ldr	r3, [pc, #36]	; (8011d80 <__swbuf_r+0xa0>)
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	bf08      	it	eq
 8011d60:	68ec      	ldreq	r4, [r5, #12]
 8011d62:	e7ca      	b.n	8011cfa <__swbuf_r+0x1a>
 8011d64:	4621      	mov	r1, r4
 8011d66:	4628      	mov	r0, r5
 8011d68:	f000 f80c 	bl	8011d84 <__swsetup_r>
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	d0cb      	beq.n	8011d08 <__swbuf_r+0x28>
 8011d70:	f04f 37ff 	mov.w	r7, #4294967295
 8011d74:	e7ea      	b.n	8011d4c <__swbuf_r+0x6c>
 8011d76:	bf00      	nop
 8011d78:	08014558 	.word	0x08014558
 8011d7c:	08014578 	.word	0x08014578
 8011d80:	08014538 	.word	0x08014538

08011d84 <__swsetup_r>:
 8011d84:	4b32      	ldr	r3, [pc, #200]	; (8011e50 <__swsetup_r+0xcc>)
 8011d86:	b570      	push	{r4, r5, r6, lr}
 8011d88:	681d      	ldr	r5, [r3, #0]
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	460c      	mov	r4, r1
 8011d8e:	b125      	cbz	r5, 8011d9a <__swsetup_r+0x16>
 8011d90:	69ab      	ldr	r3, [r5, #24]
 8011d92:	b913      	cbnz	r3, 8011d9a <__swsetup_r+0x16>
 8011d94:	4628      	mov	r0, r5
 8011d96:	f000 f985 	bl	80120a4 <__sinit>
 8011d9a:	4b2e      	ldr	r3, [pc, #184]	; (8011e54 <__swsetup_r+0xd0>)
 8011d9c:	429c      	cmp	r4, r3
 8011d9e:	d10f      	bne.n	8011dc0 <__swsetup_r+0x3c>
 8011da0:	686c      	ldr	r4, [r5, #4]
 8011da2:	89a3      	ldrh	r3, [r4, #12]
 8011da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011da8:	0719      	lsls	r1, r3, #28
 8011daa:	d42c      	bmi.n	8011e06 <__swsetup_r+0x82>
 8011dac:	06dd      	lsls	r5, r3, #27
 8011dae:	d411      	bmi.n	8011dd4 <__swsetup_r+0x50>
 8011db0:	2309      	movs	r3, #9
 8011db2:	6033      	str	r3, [r6, #0]
 8011db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011db8:	81a3      	strh	r3, [r4, #12]
 8011dba:	f04f 30ff 	mov.w	r0, #4294967295
 8011dbe:	e03e      	b.n	8011e3e <__swsetup_r+0xba>
 8011dc0:	4b25      	ldr	r3, [pc, #148]	; (8011e58 <__swsetup_r+0xd4>)
 8011dc2:	429c      	cmp	r4, r3
 8011dc4:	d101      	bne.n	8011dca <__swsetup_r+0x46>
 8011dc6:	68ac      	ldr	r4, [r5, #8]
 8011dc8:	e7eb      	b.n	8011da2 <__swsetup_r+0x1e>
 8011dca:	4b24      	ldr	r3, [pc, #144]	; (8011e5c <__swsetup_r+0xd8>)
 8011dcc:	429c      	cmp	r4, r3
 8011dce:	bf08      	it	eq
 8011dd0:	68ec      	ldreq	r4, [r5, #12]
 8011dd2:	e7e6      	b.n	8011da2 <__swsetup_r+0x1e>
 8011dd4:	0758      	lsls	r0, r3, #29
 8011dd6:	d512      	bpl.n	8011dfe <__swsetup_r+0x7a>
 8011dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011dda:	b141      	cbz	r1, 8011dee <__swsetup_r+0x6a>
 8011ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011de0:	4299      	cmp	r1, r3
 8011de2:	d002      	beq.n	8011dea <__swsetup_r+0x66>
 8011de4:	4630      	mov	r0, r6
 8011de6:	f7ff fa77 	bl	80112d8 <_free_r>
 8011dea:	2300      	movs	r3, #0
 8011dec:	6363      	str	r3, [r4, #52]	; 0x34
 8011dee:	89a3      	ldrh	r3, [r4, #12]
 8011df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011df4:	81a3      	strh	r3, [r4, #12]
 8011df6:	2300      	movs	r3, #0
 8011df8:	6063      	str	r3, [r4, #4]
 8011dfa:	6923      	ldr	r3, [r4, #16]
 8011dfc:	6023      	str	r3, [r4, #0]
 8011dfe:	89a3      	ldrh	r3, [r4, #12]
 8011e00:	f043 0308 	orr.w	r3, r3, #8
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	b94b      	cbnz	r3, 8011e1e <__swsetup_r+0x9a>
 8011e0a:	89a3      	ldrh	r3, [r4, #12]
 8011e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e14:	d003      	beq.n	8011e1e <__swsetup_r+0x9a>
 8011e16:	4621      	mov	r1, r4
 8011e18:	4630      	mov	r0, r6
 8011e1a:	f000 fa07 	bl	801222c <__smakebuf_r>
 8011e1e:	89a0      	ldrh	r0, [r4, #12]
 8011e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011e24:	f010 0301 	ands.w	r3, r0, #1
 8011e28:	d00a      	beq.n	8011e40 <__swsetup_r+0xbc>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	60a3      	str	r3, [r4, #8]
 8011e2e:	6963      	ldr	r3, [r4, #20]
 8011e30:	425b      	negs	r3, r3
 8011e32:	61a3      	str	r3, [r4, #24]
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	b943      	cbnz	r3, 8011e4a <__swsetup_r+0xc6>
 8011e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011e3c:	d1ba      	bne.n	8011db4 <__swsetup_r+0x30>
 8011e3e:	bd70      	pop	{r4, r5, r6, pc}
 8011e40:	0781      	lsls	r1, r0, #30
 8011e42:	bf58      	it	pl
 8011e44:	6963      	ldrpl	r3, [r4, #20]
 8011e46:	60a3      	str	r3, [r4, #8]
 8011e48:	e7f4      	b.n	8011e34 <__swsetup_r+0xb0>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	e7f7      	b.n	8011e3e <__swsetup_r+0xba>
 8011e4e:	bf00      	nop
 8011e50:	20000128 	.word	0x20000128
 8011e54:	08014558 	.word	0x08014558
 8011e58:	08014578 	.word	0x08014578
 8011e5c:	08014538 	.word	0x08014538

08011e60 <abort>:
 8011e60:	b508      	push	{r3, lr}
 8011e62:	2006      	movs	r0, #6
 8011e64:	f000 fa7c 	bl	8012360 <raise>
 8011e68:	2001      	movs	r0, #1
 8011e6a:	f7f0 f957 	bl	800211c <_exit>
	...

08011e70 <__sflush_r>:
 8011e70:	898a      	ldrh	r2, [r1, #12]
 8011e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e76:	4605      	mov	r5, r0
 8011e78:	0710      	lsls	r0, r2, #28
 8011e7a:	460c      	mov	r4, r1
 8011e7c:	d458      	bmi.n	8011f30 <__sflush_r+0xc0>
 8011e7e:	684b      	ldr	r3, [r1, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	dc05      	bgt.n	8011e90 <__sflush_r+0x20>
 8011e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	dc02      	bgt.n	8011e90 <__sflush_r+0x20>
 8011e8a:	2000      	movs	r0, #0
 8011e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e92:	2e00      	cmp	r6, #0
 8011e94:	d0f9      	beq.n	8011e8a <__sflush_r+0x1a>
 8011e96:	2300      	movs	r3, #0
 8011e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e9c:	682f      	ldr	r7, [r5, #0]
 8011e9e:	602b      	str	r3, [r5, #0]
 8011ea0:	d032      	beq.n	8011f08 <__sflush_r+0x98>
 8011ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ea4:	89a3      	ldrh	r3, [r4, #12]
 8011ea6:	075a      	lsls	r2, r3, #29
 8011ea8:	d505      	bpl.n	8011eb6 <__sflush_r+0x46>
 8011eaa:	6863      	ldr	r3, [r4, #4]
 8011eac:	1ac0      	subs	r0, r0, r3
 8011eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011eb0:	b10b      	cbz	r3, 8011eb6 <__sflush_r+0x46>
 8011eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011eb4:	1ac0      	subs	r0, r0, r3
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	4602      	mov	r2, r0
 8011eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ebc:	6a21      	ldr	r1, [r4, #32]
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	47b0      	blx	r6
 8011ec2:	1c43      	adds	r3, r0, #1
 8011ec4:	89a3      	ldrh	r3, [r4, #12]
 8011ec6:	d106      	bne.n	8011ed6 <__sflush_r+0x66>
 8011ec8:	6829      	ldr	r1, [r5, #0]
 8011eca:	291d      	cmp	r1, #29
 8011ecc:	d82c      	bhi.n	8011f28 <__sflush_r+0xb8>
 8011ece:	4a2a      	ldr	r2, [pc, #168]	; (8011f78 <__sflush_r+0x108>)
 8011ed0:	40ca      	lsrs	r2, r1
 8011ed2:	07d6      	lsls	r6, r2, #31
 8011ed4:	d528      	bpl.n	8011f28 <__sflush_r+0xb8>
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	6062      	str	r2, [r4, #4]
 8011eda:	04d9      	lsls	r1, r3, #19
 8011edc:	6922      	ldr	r2, [r4, #16]
 8011ede:	6022      	str	r2, [r4, #0]
 8011ee0:	d504      	bpl.n	8011eec <__sflush_r+0x7c>
 8011ee2:	1c42      	adds	r2, r0, #1
 8011ee4:	d101      	bne.n	8011eea <__sflush_r+0x7a>
 8011ee6:	682b      	ldr	r3, [r5, #0]
 8011ee8:	b903      	cbnz	r3, 8011eec <__sflush_r+0x7c>
 8011eea:	6560      	str	r0, [r4, #84]	; 0x54
 8011eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011eee:	602f      	str	r7, [r5, #0]
 8011ef0:	2900      	cmp	r1, #0
 8011ef2:	d0ca      	beq.n	8011e8a <__sflush_r+0x1a>
 8011ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ef8:	4299      	cmp	r1, r3
 8011efa:	d002      	beq.n	8011f02 <__sflush_r+0x92>
 8011efc:	4628      	mov	r0, r5
 8011efe:	f7ff f9eb 	bl	80112d8 <_free_r>
 8011f02:	2000      	movs	r0, #0
 8011f04:	6360      	str	r0, [r4, #52]	; 0x34
 8011f06:	e7c1      	b.n	8011e8c <__sflush_r+0x1c>
 8011f08:	6a21      	ldr	r1, [r4, #32]
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	4628      	mov	r0, r5
 8011f0e:	47b0      	blx	r6
 8011f10:	1c41      	adds	r1, r0, #1
 8011f12:	d1c7      	bne.n	8011ea4 <__sflush_r+0x34>
 8011f14:	682b      	ldr	r3, [r5, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d0c4      	beq.n	8011ea4 <__sflush_r+0x34>
 8011f1a:	2b1d      	cmp	r3, #29
 8011f1c:	d001      	beq.n	8011f22 <__sflush_r+0xb2>
 8011f1e:	2b16      	cmp	r3, #22
 8011f20:	d101      	bne.n	8011f26 <__sflush_r+0xb6>
 8011f22:	602f      	str	r7, [r5, #0]
 8011f24:	e7b1      	b.n	8011e8a <__sflush_r+0x1a>
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f2c:	81a3      	strh	r3, [r4, #12]
 8011f2e:	e7ad      	b.n	8011e8c <__sflush_r+0x1c>
 8011f30:	690f      	ldr	r7, [r1, #16]
 8011f32:	2f00      	cmp	r7, #0
 8011f34:	d0a9      	beq.n	8011e8a <__sflush_r+0x1a>
 8011f36:	0793      	lsls	r3, r2, #30
 8011f38:	680e      	ldr	r6, [r1, #0]
 8011f3a:	bf08      	it	eq
 8011f3c:	694b      	ldreq	r3, [r1, #20]
 8011f3e:	600f      	str	r7, [r1, #0]
 8011f40:	bf18      	it	ne
 8011f42:	2300      	movne	r3, #0
 8011f44:	eba6 0807 	sub.w	r8, r6, r7
 8011f48:	608b      	str	r3, [r1, #8]
 8011f4a:	f1b8 0f00 	cmp.w	r8, #0
 8011f4e:	dd9c      	ble.n	8011e8a <__sflush_r+0x1a>
 8011f50:	6a21      	ldr	r1, [r4, #32]
 8011f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011f54:	4643      	mov	r3, r8
 8011f56:	463a      	mov	r2, r7
 8011f58:	4628      	mov	r0, r5
 8011f5a:	47b0      	blx	r6
 8011f5c:	2800      	cmp	r0, #0
 8011f5e:	dc06      	bgt.n	8011f6e <__sflush_r+0xfe>
 8011f60:	89a3      	ldrh	r3, [r4, #12]
 8011f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f66:	81a3      	strh	r3, [r4, #12]
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6c:	e78e      	b.n	8011e8c <__sflush_r+0x1c>
 8011f6e:	4407      	add	r7, r0
 8011f70:	eba8 0800 	sub.w	r8, r8, r0
 8011f74:	e7e9      	b.n	8011f4a <__sflush_r+0xda>
 8011f76:	bf00      	nop
 8011f78:	20400001 	.word	0x20400001

08011f7c <_fflush_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	690b      	ldr	r3, [r1, #16]
 8011f80:	4605      	mov	r5, r0
 8011f82:	460c      	mov	r4, r1
 8011f84:	b913      	cbnz	r3, 8011f8c <_fflush_r+0x10>
 8011f86:	2500      	movs	r5, #0
 8011f88:	4628      	mov	r0, r5
 8011f8a:	bd38      	pop	{r3, r4, r5, pc}
 8011f8c:	b118      	cbz	r0, 8011f96 <_fflush_r+0x1a>
 8011f8e:	6983      	ldr	r3, [r0, #24]
 8011f90:	b90b      	cbnz	r3, 8011f96 <_fflush_r+0x1a>
 8011f92:	f000 f887 	bl	80120a4 <__sinit>
 8011f96:	4b14      	ldr	r3, [pc, #80]	; (8011fe8 <_fflush_r+0x6c>)
 8011f98:	429c      	cmp	r4, r3
 8011f9a:	d11b      	bne.n	8011fd4 <_fflush_r+0x58>
 8011f9c:	686c      	ldr	r4, [r5, #4]
 8011f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d0ef      	beq.n	8011f86 <_fflush_r+0xa>
 8011fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011fa8:	07d0      	lsls	r0, r2, #31
 8011faa:	d404      	bmi.n	8011fb6 <_fflush_r+0x3a>
 8011fac:	0599      	lsls	r1, r3, #22
 8011fae:	d402      	bmi.n	8011fb6 <_fflush_r+0x3a>
 8011fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fb2:	f000 f915 	bl	80121e0 <__retarget_lock_acquire_recursive>
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	4621      	mov	r1, r4
 8011fba:	f7ff ff59 	bl	8011e70 <__sflush_r>
 8011fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fc0:	07da      	lsls	r2, r3, #31
 8011fc2:	4605      	mov	r5, r0
 8011fc4:	d4e0      	bmi.n	8011f88 <_fflush_r+0xc>
 8011fc6:	89a3      	ldrh	r3, [r4, #12]
 8011fc8:	059b      	lsls	r3, r3, #22
 8011fca:	d4dd      	bmi.n	8011f88 <_fflush_r+0xc>
 8011fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fce:	f000 f908 	bl	80121e2 <__retarget_lock_release_recursive>
 8011fd2:	e7d9      	b.n	8011f88 <_fflush_r+0xc>
 8011fd4:	4b05      	ldr	r3, [pc, #20]	; (8011fec <_fflush_r+0x70>)
 8011fd6:	429c      	cmp	r4, r3
 8011fd8:	d101      	bne.n	8011fde <_fflush_r+0x62>
 8011fda:	68ac      	ldr	r4, [r5, #8]
 8011fdc:	e7df      	b.n	8011f9e <_fflush_r+0x22>
 8011fde:	4b04      	ldr	r3, [pc, #16]	; (8011ff0 <_fflush_r+0x74>)
 8011fe0:	429c      	cmp	r4, r3
 8011fe2:	bf08      	it	eq
 8011fe4:	68ec      	ldreq	r4, [r5, #12]
 8011fe6:	e7da      	b.n	8011f9e <_fflush_r+0x22>
 8011fe8:	08014558 	.word	0x08014558
 8011fec:	08014578 	.word	0x08014578
 8011ff0:	08014538 	.word	0x08014538

08011ff4 <std>:
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	b510      	push	{r4, lr}
 8011ff8:	4604      	mov	r4, r0
 8011ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8011ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012002:	6083      	str	r3, [r0, #8]
 8012004:	8181      	strh	r1, [r0, #12]
 8012006:	6643      	str	r3, [r0, #100]	; 0x64
 8012008:	81c2      	strh	r2, [r0, #14]
 801200a:	6183      	str	r3, [r0, #24]
 801200c:	4619      	mov	r1, r3
 801200e:	2208      	movs	r2, #8
 8012010:	305c      	adds	r0, #92	; 0x5c
 8012012:	f7ff f879 	bl	8011108 <memset>
 8012016:	4b05      	ldr	r3, [pc, #20]	; (801202c <std+0x38>)
 8012018:	6263      	str	r3, [r4, #36]	; 0x24
 801201a:	4b05      	ldr	r3, [pc, #20]	; (8012030 <std+0x3c>)
 801201c:	62a3      	str	r3, [r4, #40]	; 0x28
 801201e:	4b05      	ldr	r3, [pc, #20]	; (8012034 <std+0x40>)
 8012020:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012022:	4b05      	ldr	r3, [pc, #20]	; (8012038 <std+0x44>)
 8012024:	6224      	str	r4, [r4, #32]
 8012026:	6323      	str	r3, [r4, #48]	; 0x30
 8012028:	bd10      	pop	{r4, pc}
 801202a:	bf00      	nop
 801202c:	08012399 	.word	0x08012399
 8012030:	080123bb 	.word	0x080123bb
 8012034:	080123f3 	.word	0x080123f3
 8012038:	08012417 	.word	0x08012417

0801203c <_cleanup_r>:
 801203c:	4901      	ldr	r1, [pc, #4]	; (8012044 <_cleanup_r+0x8>)
 801203e:	f000 b8af 	b.w	80121a0 <_fwalk_reent>
 8012042:	bf00      	nop
 8012044:	08011f7d 	.word	0x08011f7d

08012048 <__sfmoreglue>:
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	1e4a      	subs	r2, r1, #1
 801204c:	2568      	movs	r5, #104	; 0x68
 801204e:	4355      	muls	r5, r2
 8012050:	460e      	mov	r6, r1
 8012052:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012056:	f7ff f98f 	bl	8011378 <_malloc_r>
 801205a:	4604      	mov	r4, r0
 801205c:	b140      	cbz	r0, 8012070 <__sfmoreglue+0x28>
 801205e:	2100      	movs	r1, #0
 8012060:	e9c0 1600 	strd	r1, r6, [r0]
 8012064:	300c      	adds	r0, #12
 8012066:	60a0      	str	r0, [r4, #8]
 8012068:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801206c:	f7ff f84c 	bl	8011108 <memset>
 8012070:	4620      	mov	r0, r4
 8012072:	bd70      	pop	{r4, r5, r6, pc}

08012074 <__sfp_lock_acquire>:
 8012074:	4801      	ldr	r0, [pc, #4]	; (801207c <__sfp_lock_acquire+0x8>)
 8012076:	f000 b8b3 	b.w	80121e0 <__retarget_lock_acquire_recursive>
 801207a:	bf00      	nop
 801207c:	20004c08 	.word	0x20004c08

08012080 <__sfp_lock_release>:
 8012080:	4801      	ldr	r0, [pc, #4]	; (8012088 <__sfp_lock_release+0x8>)
 8012082:	f000 b8ae 	b.w	80121e2 <__retarget_lock_release_recursive>
 8012086:	bf00      	nop
 8012088:	20004c08 	.word	0x20004c08

0801208c <__sinit_lock_acquire>:
 801208c:	4801      	ldr	r0, [pc, #4]	; (8012094 <__sinit_lock_acquire+0x8>)
 801208e:	f000 b8a7 	b.w	80121e0 <__retarget_lock_acquire_recursive>
 8012092:	bf00      	nop
 8012094:	20004c03 	.word	0x20004c03

08012098 <__sinit_lock_release>:
 8012098:	4801      	ldr	r0, [pc, #4]	; (80120a0 <__sinit_lock_release+0x8>)
 801209a:	f000 b8a2 	b.w	80121e2 <__retarget_lock_release_recursive>
 801209e:	bf00      	nop
 80120a0:	20004c03 	.word	0x20004c03

080120a4 <__sinit>:
 80120a4:	b510      	push	{r4, lr}
 80120a6:	4604      	mov	r4, r0
 80120a8:	f7ff fff0 	bl	801208c <__sinit_lock_acquire>
 80120ac:	69a3      	ldr	r3, [r4, #24]
 80120ae:	b11b      	cbz	r3, 80120b8 <__sinit+0x14>
 80120b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80120b4:	f7ff bff0 	b.w	8012098 <__sinit_lock_release>
 80120b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80120bc:	6523      	str	r3, [r4, #80]	; 0x50
 80120be:	4b13      	ldr	r3, [pc, #76]	; (801210c <__sinit+0x68>)
 80120c0:	4a13      	ldr	r2, [pc, #76]	; (8012110 <__sinit+0x6c>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	62a2      	str	r2, [r4, #40]	; 0x28
 80120c6:	42a3      	cmp	r3, r4
 80120c8:	bf04      	itt	eq
 80120ca:	2301      	moveq	r3, #1
 80120cc:	61a3      	streq	r3, [r4, #24]
 80120ce:	4620      	mov	r0, r4
 80120d0:	f000 f820 	bl	8012114 <__sfp>
 80120d4:	6060      	str	r0, [r4, #4]
 80120d6:	4620      	mov	r0, r4
 80120d8:	f000 f81c 	bl	8012114 <__sfp>
 80120dc:	60a0      	str	r0, [r4, #8]
 80120de:	4620      	mov	r0, r4
 80120e0:	f000 f818 	bl	8012114 <__sfp>
 80120e4:	2200      	movs	r2, #0
 80120e6:	60e0      	str	r0, [r4, #12]
 80120e8:	2104      	movs	r1, #4
 80120ea:	6860      	ldr	r0, [r4, #4]
 80120ec:	f7ff ff82 	bl	8011ff4 <std>
 80120f0:	68a0      	ldr	r0, [r4, #8]
 80120f2:	2201      	movs	r2, #1
 80120f4:	2109      	movs	r1, #9
 80120f6:	f7ff ff7d 	bl	8011ff4 <std>
 80120fa:	68e0      	ldr	r0, [r4, #12]
 80120fc:	2202      	movs	r2, #2
 80120fe:	2112      	movs	r1, #18
 8012100:	f7ff ff78 	bl	8011ff4 <std>
 8012104:	2301      	movs	r3, #1
 8012106:	61a3      	str	r3, [r4, #24]
 8012108:	e7d2      	b.n	80120b0 <__sinit+0xc>
 801210a:	bf00      	nop
 801210c:	0801444c 	.word	0x0801444c
 8012110:	0801203d 	.word	0x0801203d

08012114 <__sfp>:
 8012114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012116:	4607      	mov	r7, r0
 8012118:	f7ff ffac 	bl	8012074 <__sfp_lock_acquire>
 801211c:	4b1e      	ldr	r3, [pc, #120]	; (8012198 <__sfp+0x84>)
 801211e:	681e      	ldr	r6, [r3, #0]
 8012120:	69b3      	ldr	r3, [r6, #24]
 8012122:	b913      	cbnz	r3, 801212a <__sfp+0x16>
 8012124:	4630      	mov	r0, r6
 8012126:	f7ff ffbd 	bl	80120a4 <__sinit>
 801212a:	3648      	adds	r6, #72	; 0x48
 801212c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012130:	3b01      	subs	r3, #1
 8012132:	d503      	bpl.n	801213c <__sfp+0x28>
 8012134:	6833      	ldr	r3, [r6, #0]
 8012136:	b30b      	cbz	r3, 801217c <__sfp+0x68>
 8012138:	6836      	ldr	r6, [r6, #0]
 801213a:	e7f7      	b.n	801212c <__sfp+0x18>
 801213c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012140:	b9d5      	cbnz	r5, 8012178 <__sfp+0x64>
 8012142:	4b16      	ldr	r3, [pc, #88]	; (801219c <__sfp+0x88>)
 8012144:	60e3      	str	r3, [r4, #12]
 8012146:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801214a:	6665      	str	r5, [r4, #100]	; 0x64
 801214c:	f000 f847 	bl	80121de <__retarget_lock_init_recursive>
 8012150:	f7ff ff96 	bl	8012080 <__sfp_lock_release>
 8012154:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012158:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801215c:	6025      	str	r5, [r4, #0]
 801215e:	61a5      	str	r5, [r4, #24]
 8012160:	2208      	movs	r2, #8
 8012162:	4629      	mov	r1, r5
 8012164:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012168:	f7fe ffce 	bl	8011108 <memset>
 801216c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012170:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012174:	4620      	mov	r0, r4
 8012176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012178:	3468      	adds	r4, #104	; 0x68
 801217a:	e7d9      	b.n	8012130 <__sfp+0x1c>
 801217c:	2104      	movs	r1, #4
 801217e:	4638      	mov	r0, r7
 8012180:	f7ff ff62 	bl	8012048 <__sfmoreglue>
 8012184:	4604      	mov	r4, r0
 8012186:	6030      	str	r0, [r6, #0]
 8012188:	2800      	cmp	r0, #0
 801218a:	d1d5      	bne.n	8012138 <__sfp+0x24>
 801218c:	f7ff ff78 	bl	8012080 <__sfp_lock_release>
 8012190:	230c      	movs	r3, #12
 8012192:	603b      	str	r3, [r7, #0]
 8012194:	e7ee      	b.n	8012174 <__sfp+0x60>
 8012196:	bf00      	nop
 8012198:	0801444c 	.word	0x0801444c
 801219c:	ffff0001 	.word	0xffff0001

080121a0 <_fwalk_reent>:
 80121a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121a4:	4606      	mov	r6, r0
 80121a6:	4688      	mov	r8, r1
 80121a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80121ac:	2700      	movs	r7, #0
 80121ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80121b2:	f1b9 0901 	subs.w	r9, r9, #1
 80121b6:	d505      	bpl.n	80121c4 <_fwalk_reent+0x24>
 80121b8:	6824      	ldr	r4, [r4, #0]
 80121ba:	2c00      	cmp	r4, #0
 80121bc:	d1f7      	bne.n	80121ae <_fwalk_reent+0xe>
 80121be:	4638      	mov	r0, r7
 80121c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121c4:	89ab      	ldrh	r3, [r5, #12]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d907      	bls.n	80121da <_fwalk_reent+0x3a>
 80121ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80121ce:	3301      	adds	r3, #1
 80121d0:	d003      	beq.n	80121da <_fwalk_reent+0x3a>
 80121d2:	4629      	mov	r1, r5
 80121d4:	4630      	mov	r0, r6
 80121d6:	47c0      	blx	r8
 80121d8:	4307      	orrs	r7, r0
 80121da:	3568      	adds	r5, #104	; 0x68
 80121dc:	e7e9      	b.n	80121b2 <_fwalk_reent+0x12>

080121de <__retarget_lock_init_recursive>:
 80121de:	4770      	bx	lr

080121e0 <__retarget_lock_acquire_recursive>:
 80121e0:	4770      	bx	lr

080121e2 <__retarget_lock_release_recursive>:
 80121e2:	4770      	bx	lr

080121e4 <__swhatbuf_r>:
 80121e4:	b570      	push	{r4, r5, r6, lr}
 80121e6:	460e      	mov	r6, r1
 80121e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121ec:	2900      	cmp	r1, #0
 80121ee:	b096      	sub	sp, #88	; 0x58
 80121f0:	4614      	mov	r4, r2
 80121f2:	461d      	mov	r5, r3
 80121f4:	da07      	bge.n	8012206 <__swhatbuf_r+0x22>
 80121f6:	2300      	movs	r3, #0
 80121f8:	602b      	str	r3, [r5, #0]
 80121fa:	89b3      	ldrh	r3, [r6, #12]
 80121fc:	061a      	lsls	r2, r3, #24
 80121fe:	d410      	bmi.n	8012222 <__swhatbuf_r+0x3e>
 8012200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012204:	e00e      	b.n	8012224 <__swhatbuf_r+0x40>
 8012206:	466a      	mov	r2, sp
 8012208:	f000 f92c 	bl	8012464 <_fstat_r>
 801220c:	2800      	cmp	r0, #0
 801220e:	dbf2      	blt.n	80121f6 <__swhatbuf_r+0x12>
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012216:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801221a:	425a      	negs	r2, r3
 801221c:	415a      	adcs	r2, r3
 801221e:	602a      	str	r2, [r5, #0]
 8012220:	e7ee      	b.n	8012200 <__swhatbuf_r+0x1c>
 8012222:	2340      	movs	r3, #64	; 0x40
 8012224:	2000      	movs	r0, #0
 8012226:	6023      	str	r3, [r4, #0]
 8012228:	b016      	add	sp, #88	; 0x58
 801222a:	bd70      	pop	{r4, r5, r6, pc}

0801222c <__smakebuf_r>:
 801222c:	898b      	ldrh	r3, [r1, #12]
 801222e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012230:	079d      	lsls	r5, r3, #30
 8012232:	4606      	mov	r6, r0
 8012234:	460c      	mov	r4, r1
 8012236:	d507      	bpl.n	8012248 <__smakebuf_r+0x1c>
 8012238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	6123      	str	r3, [r4, #16]
 8012240:	2301      	movs	r3, #1
 8012242:	6163      	str	r3, [r4, #20]
 8012244:	b002      	add	sp, #8
 8012246:	bd70      	pop	{r4, r5, r6, pc}
 8012248:	ab01      	add	r3, sp, #4
 801224a:	466a      	mov	r2, sp
 801224c:	f7ff ffca 	bl	80121e4 <__swhatbuf_r>
 8012250:	9900      	ldr	r1, [sp, #0]
 8012252:	4605      	mov	r5, r0
 8012254:	4630      	mov	r0, r6
 8012256:	f7ff f88f 	bl	8011378 <_malloc_r>
 801225a:	b948      	cbnz	r0, 8012270 <__smakebuf_r+0x44>
 801225c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012260:	059a      	lsls	r2, r3, #22
 8012262:	d4ef      	bmi.n	8012244 <__smakebuf_r+0x18>
 8012264:	f023 0303 	bic.w	r3, r3, #3
 8012268:	f043 0302 	orr.w	r3, r3, #2
 801226c:	81a3      	strh	r3, [r4, #12]
 801226e:	e7e3      	b.n	8012238 <__smakebuf_r+0xc>
 8012270:	4b0d      	ldr	r3, [pc, #52]	; (80122a8 <__smakebuf_r+0x7c>)
 8012272:	62b3      	str	r3, [r6, #40]	; 0x28
 8012274:	89a3      	ldrh	r3, [r4, #12]
 8012276:	6020      	str	r0, [r4, #0]
 8012278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801227c:	81a3      	strh	r3, [r4, #12]
 801227e:	9b00      	ldr	r3, [sp, #0]
 8012280:	6163      	str	r3, [r4, #20]
 8012282:	9b01      	ldr	r3, [sp, #4]
 8012284:	6120      	str	r0, [r4, #16]
 8012286:	b15b      	cbz	r3, 80122a0 <__smakebuf_r+0x74>
 8012288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801228c:	4630      	mov	r0, r6
 801228e:	f000 f8fb 	bl	8012488 <_isatty_r>
 8012292:	b128      	cbz	r0, 80122a0 <__smakebuf_r+0x74>
 8012294:	89a3      	ldrh	r3, [r4, #12]
 8012296:	f023 0303 	bic.w	r3, r3, #3
 801229a:	f043 0301 	orr.w	r3, r3, #1
 801229e:	81a3      	strh	r3, [r4, #12]
 80122a0:	89a0      	ldrh	r0, [r4, #12]
 80122a2:	4305      	orrs	r5, r0
 80122a4:	81a5      	strh	r5, [r4, #12]
 80122a6:	e7cd      	b.n	8012244 <__smakebuf_r+0x18>
 80122a8:	0801203d 	.word	0x0801203d

080122ac <__malloc_lock>:
 80122ac:	4801      	ldr	r0, [pc, #4]	; (80122b4 <__malloc_lock+0x8>)
 80122ae:	f7ff bf97 	b.w	80121e0 <__retarget_lock_acquire_recursive>
 80122b2:	bf00      	nop
 80122b4:	20004c04 	.word	0x20004c04

080122b8 <__malloc_unlock>:
 80122b8:	4801      	ldr	r0, [pc, #4]	; (80122c0 <__malloc_unlock+0x8>)
 80122ba:	f7ff bf92 	b.w	80121e2 <__retarget_lock_release_recursive>
 80122be:	bf00      	nop
 80122c0:	20004c04 	.word	0x20004c04

080122c4 <_realloc_r>:
 80122c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c6:	4607      	mov	r7, r0
 80122c8:	4614      	mov	r4, r2
 80122ca:	460e      	mov	r6, r1
 80122cc:	b921      	cbnz	r1, 80122d8 <_realloc_r+0x14>
 80122ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80122d2:	4611      	mov	r1, r2
 80122d4:	f7ff b850 	b.w	8011378 <_malloc_r>
 80122d8:	b922      	cbnz	r2, 80122e4 <_realloc_r+0x20>
 80122da:	f7fe fffd 	bl	80112d8 <_free_r>
 80122de:	4625      	mov	r5, r4
 80122e0:	4628      	mov	r0, r5
 80122e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122e4:	f000 f8f2 	bl	80124cc <_malloc_usable_size_r>
 80122e8:	42a0      	cmp	r0, r4
 80122ea:	d20f      	bcs.n	801230c <_realloc_r+0x48>
 80122ec:	4621      	mov	r1, r4
 80122ee:	4638      	mov	r0, r7
 80122f0:	f7ff f842 	bl	8011378 <_malloc_r>
 80122f4:	4605      	mov	r5, r0
 80122f6:	2800      	cmp	r0, #0
 80122f8:	d0f2      	beq.n	80122e0 <_realloc_r+0x1c>
 80122fa:	4631      	mov	r1, r6
 80122fc:	4622      	mov	r2, r4
 80122fe:	f7fe fedb 	bl	80110b8 <memcpy>
 8012302:	4631      	mov	r1, r6
 8012304:	4638      	mov	r0, r7
 8012306:	f7fe ffe7 	bl	80112d8 <_free_r>
 801230a:	e7e9      	b.n	80122e0 <_realloc_r+0x1c>
 801230c:	4635      	mov	r5, r6
 801230e:	e7e7      	b.n	80122e0 <_realloc_r+0x1c>

08012310 <_raise_r>:
 8012310:	291f      	cmp	r1, #31
 8012312:	b538      	push	{r3, r4, r5, lr}
 8012314:	4604      	mov	r4, r0
 8012316:	460d      	mov	r5, r1
 8012318:	d904      	bls.n	8012324 <_raise_r+0x14>
 801231a:	2316      	movs	r3, #22
 801231c:	6003      	str	r3, [r0, #0]
 801231e:	f04f 30ff 	mov.w	r0, #4294967295
 8012322:	bd38      	pop	{r3, r4, r5, pc}
 8012324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012326:	b112      	cbz	r2, 801232e <_raise_r+0x1e>
 8012328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801232c:	b94b      	cbnz	r3, 8012342 <_raise_r+0x32>
 801232e:	4620      	mov	r0, r4
 8012330:	f000 f830 	bl	8012394 <_getpid_r>
 8012334:	462a      	mov	r2, r5
 8012336:	4601      	mov	r1, r0
 8012338:	4620      	mov	r0, r4
 801233a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801233e:	f000 b817 	b.w	8012370 <_kill_r>
 8012342:	2b01      	cmp	r3, #1
 8012344:	d00a      	beq.n	801235c <_raise_r+0x4c>
 8012346:	1c59      	adds	r1, r3, #1
 8012348:	d103      	bne.n	8012352 <_raise_r+0x42>
 801234a:	2316      	movs	r3, #22
 801234c:	6003      	str	r3, [r0, #0]
 801234e:	2001      	movs	r0, #1
 8012350:	e7e7      	b.n	8012322 <_raise_r+0x12>
 8012352:	2400      	movs	r4, #0
 8012354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012358:	4628      	mov	r0, r5
 801235a:	4798      	blx	r3
 801235c:	2000      	movs	r0, #0
 801235e:	e7e0      	b.n	8012322 <_raise_r+0x12>

08012360 <raise>:
 8012360:	4b02      	ldr	r3, [pc, #8]	; (801236c <raise+0xc>)
 8012362:	4601      	mov	r1, r0
 8012364:	6818      	ldr	r0, [r3, #0]
 8012366:	f7ff bfd3 	b.w	8012310 <_raise_r>
 801236a:	bf00      	nop
 801236c:	20000128 	.word	0x20000128

08012370 <_kill_r>:
 8012370:	b538      	push	{r3, r4, r5, lr}
 8012372:	4d07      	ldr	r5, [pc, #28]	; (8012390 <_kill_r+0x20>)
 8012374:	2300      	movs	r3, #0
 8012376:	4604      	mov	r4, r0
 8012378:	4608      	mov	r0, r1
 801237a:	4611      	mov	r1, r2
 801237c:	602b      	str	r3, [r5, #0]
 801237e:	f7ef febd 	bl	80020fc <_kill>
 8012382:	1c43      	adds	r3, r0, #1
 8012384:	d102      	bne.n	801238c <_kill_r+0x1c>
 8012386:	682b      	ldr	r3, [r5, #0]
 8012388:	b103      	cbz	r3, 801238c <_kill_r+0x1c>
 801238a:	6023      	str	r3, [r4, #0]
 801238c:	bd38      	pop	{r3, r4, r5, pc}
 801238e:	bf00      	nop
 8012390:	20004c0c 	.word	0x20004c0c

08012394 <_getpid_r>:
 8012394:	f7ef beaa 	b.w	80020ec <_getpid>

08012398 <__sread>:
 8012398:	b510      	push	{r4, lr}
 801239a:	460c      	mov	r4, r1
 801239c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123a0:	f000 f89c 	bl	80124dc <_read_r>
 80123a4:	2800      	cmp	r0, #0
 80123a6:	bfab      	itete	ge
 80123a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123aa:	89a3      	ldrhlt	r3, [r4, #12]
 80123ac:	181b      	addge	r3, r3, r0
 80123ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123b2:	bfac      	ite	ge
 80123b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80123b6:	81a3      	strhlt	r3, [r4, #12]
 80123b8:	bd10      	pop	{r4, pc}

080123ba <__swrite>:
 80123ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123be:	461f      	mov	r7, r3
 80123c0:	898b      	ldrh	r3, [r1, #12]
 80123c2:	05db      	lsls	r3, r3, #23
 80123c4:	4605      	mov	r5, r0
 80123c6:	460c      	mov	r4, r1
 80123c8:	4616      	mov	r6, r2
 80123ca:	d505      	bpl.n	80123d8 <__swrite+0x1e>
 80123cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123d0:	2302      	movs	r3, #2
 80123d2:	2200      	movs	r2, #0
 80123d4:	f000 f868 	bl	80124a8 <_lseek_r>
 80123d8:	89a3      	ldrh	r3, [r4, #12]
 80123da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80123e2:	81a3      	strh	r3, [r4, #12]
 80123e4:	4632      	mov	r2, r6
 80123e6:	463b      	mov	r3, r7
 80123e8:	4628      	mov	r0, r5
 80123ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123ee:	f000 b817 	b.w	8012420 <_write_r>

080123f2 <__sseek>:
 80123f2:	b510      	push	{r4, lr}
 80123f4:	460c      	mov	r4, r1
 80123f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123fa:	f000 f855 	bl	80124a8 <_lseek_r>
 80123fe:	1c43      	adds	r3, r0, #1
 8012400:	89a3      	ldrh	r3, [r4, #12]
 8012402:	bf15      	itete	ne
 8012404:	6560      	strne	r0, [r4, #84]	; 0x54
 8012406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801240a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801240e:	81a3      	strheq	r3, [r4, #12]
 8012410:	bf18      	it	ne
 8012412:	81a3      	strhne	r3, [r4, #12]
 8012414:	bd10      	pop	{r4, pc}

08012416 <__sclose>:
 8012416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801241a:	f000 b813 	b.w	8012444 <_close_r>
	...

08012420 <_write_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4d07      	ldr	r5, [pc, #28]	; (8012440 <_write_r+0x20>)
 8012424:	4604      	mov	r4, r0
 8012426:	4608      	mov	r0, r1
 8012428:	4611      	mov	r1, r2
 801242a:	2200      	movs	r2, #0
 801242c:	602a      	str	r2, [r5, #0]
 801242e:	461a      	mov	r2, r3
 8012430:	f7ef fe9b 	bl	800216a <_write>
 8012434:	1c43      	adds	r3, r0, #1
 8012436:	d102      	bne.n	801243e <_write_r+0x1e>
 8012438:	682b      	ldr	r3, [r5, #0]
 801243a:	b103      	cbz	r3, 801243e <_write_r+0x1e>
 801243c:	6023      	str	r3, [r4, #0]
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	20004c0c 	.word	0x20004c0c

08012444 <_close_r>:
 8012444:	b538      	push	{r3, r4, r5, lr}
 8012446:	4d06      	ldr	r5, [pc, #24]	; (8012460 <_close_r+0x1c>)
 8012448:	2300      	movs	r3, #0
 801244a:	4604      	mov	r4, r0
 801244c:	4608      	mov	r0, r1
 801244e:	602b      	str	r3, [r5, #0]
 8012450:	f7ef fea7 	bl	80021a2 <_close>
 8012454:	1c43      	adds	r3, r0, #1
 8012456:	d102      	bne.n	801245e <_close_r+0x1a>
 8012458:	682b      	ldr	r3, [r5, #0]
 801245a:	b103      	cbz	r3, 801245e <_close_r+0x1a>
 801245c:	6023      	str	r3, [r4, #0]
 801245e:	bd38      	pop	{r3, r4, r5, pc}
 8012460:	20004c0c 	.word	0x20004c0c

08012464 <_fstat_r>:
 8012464:	b538      	push	{r3, r4, r5, lr}
 8012466:	4d07      	ldr	r5, [pc, #28]	; (8012484 <_fstat_r+0x20>)
 8012468:	2300      	movs	r3, #0
 801246a:	4604      	mov	r4, r0
 801246c:	4608      	mov	r0, r1
 801246e:	4611      	mov	r1, r2
 8012470:	602b      	str	r3, [r5, #0]
 8012472:	f7ef fea2 	bl	80021ba <_fstat>
 8012476:	1c43      	adds	r3, r0, #1
 8012478:	d102      	bne.n	8012480 <_fstat_r+0x1c>
 801247a:	682b      	ldr	r3, [r5, #0]
 801247c:	b103      	cbz	r3, 8012480 <_fstat_r+0x1c>
 801247e:	6023      	str	r3, [r4, #0]
 8012480:	bd38      	pop	{r3, r4, r5, pc}
 8012482:	bf00      	nop
 8012484:	20004c0c 	.word	0x20004c0c

08012488 <_isatty_r>:
 8012488:	b538      	push	{r3, r4, r5, lr}
 801248a:	4d06      	ldr	r5, [pc, #24]	; (80124a4 <_isatty_r+0x1c>)
 801248c:	2300      	movs	r3, #0
 801248e:	4604      	mov	r4, r0
 8012490:	4608      	mov	r0, r1
 8012492:	602b      	str	r3, [r5, #0]
 8012494:	f7ef fea1 	bl	80021da <_isatty>
 8012498:	1c43      	adds	r3, r0, #1
 801249a:	d102      	bne.n	80124a2 <_isatty_r+0x1a>
 801249c:	682b      	ldr	r3, [r5, #0]
 801249e:	b103      	cbz	r3, 80124a2 <_isatty_r+0x1a>
 80124a0:	6023      	str	r3, [r4, #0]
 80124a2:	bd38      	pop	{r3, r4, r5, pc}
 80124a4:	20004c0c 	.word	0x20004c0c

080124a8 <_lseek_r>:
 80124a8:	b538      	push	{r3, r4, r5, lr}
 80124aa:	4d07      	ldr	r5, [pc, #28]	; (80124c8 <_lseek_r+0x20>)
 80124ac:	4604      	mov	r4, r0
 80124ae:	4608      	mov	r0, r1
 80124b0:	4611      	mov	r1, r2
 80124b2:	2200      	movs	r2, #0
 80124b4:	602a      	str	r2, [r5, #0]
 80124b6:	461a      	mov	r2, r3
 80124b8:	f7ef fe9a 	bl	80021f0 <_lseek>
 80124bc:	1c43      	adds	r3, r0, #1
 80124be:	d102      	bne.n	80124c6 <_lseek_r+0x1e>
 80124c0:	682b      	ldr	r3, [r5, #0]
 80124c2:	b103      	cbz	r3, 80124c6 <_lseek_r+0x1e>
 80124c4:	6023      	str	r3, [r4, #0]
 80124c6:	bd38      	pop	{r3, r4, r5, pc}
 80124c8:	20004c0c 	.word	0x20004c0c

080124cc <_malloc_usable_size_r>:
 80124cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124d0:	1f18      	subs	r0, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	bfbc      	itt	lt
 80124d6:	580b      	ldrlt	r3, [r1, r0]
 80124d8:	18c0      	addlt	r0, r0, r3
 80124da:	4770      	bx	lr

080124dc <_read_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	4d07      	ldr	r5, [pc, #28]	; (80124fc <_read_r+0x20>)
 80124e0:	4604      	mov	r4, r0
 80124e2:	4608      	mov	r0, r1
 80124e4:	4611      	mov	r1, r2
 80124e6:	2200      	movs	r2, #0
 80124e8:	602a      	str	r2, [r5, #0]
 80124ea:	461a      	mov	r2, r3
 80124ec:	f7ef fe20 	bl	8002130 <_read>
 80124f0:	1c43      	adds	r3, r0, #1
 80124f2:	d102      	bne.n	80124fa <_read_r+0x1e>
 80124f4:	682b      	ldr	r3, [r5, #0]
 80124f6:	b103      	cbz	r3, 80124fa <_read_r+0x1e>
 80124f8:	6023      	str	r3, [r4, #0]
 80124fa:	bd38      	pop	{r3, r4, r5, pc}
 80124fc:	20004c0c 	.word	0x20004c0c

08012500 <_init>:
 8012500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012502:	bf00      	nop
 8012504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012506:	bc08      	pop	{r3}
 8012508:	469e      	mov	lr, r3
 801250a:	4770      	bx	lr

0801250c <_fini>:
 801250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250e:	bf00      	nop
 8012510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012512:	bc08      	pop	{r3}
 8012514:	469e      	mov	lr, r3
 8012516:	4770      	bx	lr
